using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Security.Cryptography;

namespace cio_file_hash_writer
{
    class HashWriter
    {
        public HashWriter(string filesFileName)
        {
            // Load the file that says which files we write the hashes of
            StreamReader fs = File.OpenText(filesFileName);

            Dictionary<string, string> monthNum2monthAbr = new Dictionary<string, string>();
            monthNum2monthAbr.Add("01", "Jan");
            monthNum2monthAbr.Add("02", "Feb");
            monthNum2monthAbr.Add("03", "Mar");
            monthNum2monthAbr.Add("04", "Apr");
            monthNum2monthAbr.Add("05", "May");
            monthNum2monthAbr.Add("06", "Jun");
            monthNum2monthAbr.Add("07", "Jul");
            monthNum2monthAbr.Add("08", "Aug");
            monthNum2monthAbr.Add("09", "Sep");
            monthNum2monthAbr.Add("10", "Oct");
            monthNum2monthAbr.Add("11", "Nov");
            monthNum2monthAbr.Add("12", "Dec");

            string outputFilename = "file_info.txt";

            // Add the header to the output file
            FileStream outputStream = File.OpenWrite(outputFilename);
            StreamWriter outputSw = new StreamWriter(outputStream);
            outputSw.WriteLine("// This file was automatically generated by cio-file-hash-writer.exe");
            string currDate = DateTime.Now.ToString("dd-MM-yyyy");
            string[] split_date = currDate.Split('-');
            string day = split_date[0];
            string month = split_date[1];
            string year = split_date[2];
            Console.WriteLine(year);
            string outputDate = string.Format("{0}{1}{2}", day, monthNum2monthAbr[month], year.Substring(2));
            outputSw.WriteLine(string.Format("// Created on: ({0})\n\n", outputDate));
            outputSw.Flush();

            // Iterate through each line, and generate a List of the files we need to hash and write out
            string[] fileNames = fs.ReadToEnd().Split('\n');
            //string[] fileNames = { "coginvasion.exe", "coginvasion.bin" };
            foreach (string fileName in fileNames)
            {
                //Console.WriteLine(fileName);
                string fixed_fileName = Path.GetInvalidFileNameChars().Aggregate(fileName, (current, c) => current.Replace(c.ToString(), string.Empty));
                string md5 = BitConverter.ToString(new SHA1CryptoServiceProvider().ComputeHash(File.Open(fixed_fileName, FileMode.Open)));
                string output = fixed_fileName + " " + md5;
                Console.WriteLine(output);
                outputSw.WriteLine(output);
                outputSw.Flush();
            }

        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            string filesFileName = Environment.GetEnvironmentVariable("FILES_FILE");
            HashWriter hashWriter = new HashWriter(filesFileName);
        }
    }
}
