1428765624
2 3
11 libp3vision 4 nRMq 14 panda3d.vision 
17
17 4 make 0 4 34 15 ARToolKit::make 0 1 1 807
////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::make
//       Access: Private
//  Description: Create a new ARToolKit instance.
//
//               Camera must be the nodepath of a panda camera object.
//               The panda camera's field of view is initialized to match
//               the field of view of the physical webcam.  Each time
//               you call analyze, all marker nodepaths will be moved
//               into a position which is relative to this camera.
//               The marker_size parameter indicates how large you
//               printed the physical markers.  You should use the same
//               size units that you wish to use in the panda code.
////////////////////////////////////////////////////////////////////
97
static ARToolKit *ARToolKit::make(NodePath camera, Filename const &paramfile, double markersize);

18 10 ~ARToolKit 0 4 34 21 ARToolKit::~ARToolKit 0 0 220
////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
28
ARToolKit::~ARToolKit(void);

19 13 set_threshold 0 4 34 24 ARToolKit::set_threshold 0 1 2 449
////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::set_threshold
//       Access: private
//  Description: As part of its analysis, the ARToolKit occasionally
//               converts images to black and white by thresholding
//               them.  The threshold is set to 0.5 by default, but
//               you can tweak it here.
////////////////////////////////////////////////////////////////////
47
inline void ARToolKit::set_threshold(double n);

20 14 attach_pattern 0 4 34 25 ARToolKit::attach_pattern 0 1 3 469
////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::attach_pattern
//       Access: Public
//  Description: Associates the specified glyph with the specified
//               NodePath.  Each time you call analyze, ARToolKit
//               will update the NodePath's transform.  If the node
//               is not visible, its scale will be set to zero.
////////////////////////////////////////////////////////////////////
71
void ARToolKit::attach_pattern(Filename const &pattern, NodePath path);

21 15 detach_patterns 0 4 34 26 ARToolKit::detach_patterns 0 1 4 267
////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::detach_patterns
//       Access: Public
//  Description: Dissociates all patterns from all NodePaths.
////////////////////////////////////////////////////////////////////
38
void ARToolKit::detach_patterns(void);

22 7 analyze 0 4 34 18 ARToolKit::analyze 0 1 5 625
////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::analyze
//       Access: Public
//  Description: Analyzes the non-pad region of the specified texture.
//               This causes all attached nodepaths to move.
//               The parameter do_flip_texture is true by default,
//               because Panda's representation of textures is
//               upside down from ARToolKit. If you already have
//               a texture that's upside-down, however, you should
//               set it to false.
////////////////////////////////////////////////////////////////////
66
void ARToolKit::analyze(Texture *tex, bool do_flip_texture = (1));

23 13 OpenCVTexture 0 4 35 28 OpenCVTexture::OpenCVTexture 0 1 6 609
////////////////////////////////////////////////////////////////////
//     Function: OpenCVTexture::Constructor
//       Access: Published
//  Description: Sets up the texture to read frames from a camera
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OpenCVTexture::Copy Constructor
//       Access: Protected
//  Description: Use OpenCVTexture::make_copy() to make a duplicate copy of
//               an existing OpenCVTexture.
////////////////////////////////////////////////////////////////////
58
OpenCVTexture::OpenCVTexture(string const &name = ((())));

24 11 from_camera 0 4 35 26 OpenCVTexture::from_camera 0 1 7 738
////////////////////////////////////////////////////////////////////
//     Function: OpenCVTexture::from_camera
//       Access: Published
//  Description: Sets up the OpenCVTexture (or the indicated page, if z
//               is specified) to accept its input from the camera
//               with the given index number, or the default camera if
//               the index number is -1 or unspecified.
//
//               If alpha_file_channel is 0, then the camera image
//               becomes a normal RGB texture.  If it is 1, 2, or 3,
//               then the camera image becomes an alpha texture, using
//               the indicated channel of the source.
////////////////////////////////////////////////////////////////////
139
bool OpenCVTexture::from_camera(int camera_index = (-1), int z = (0), int alpha_file_channel = (0), LoaderOptions const &options = ((())));

25 14 get_class_type 0 4 35 29 OpenCVTexture::get_class_type 0 1 8 0
54
static TypeHandle OpenCVTexture::get_class_type(void);

26 15 get_num_options 0 4 37 28 WebcamVideo::get_num_options 0 1 9 465
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_num_options
//       Access: Public, Static
//  Description: Returns the number of webcam options.  An "option"
//               consists of a device plus a set of configuration
//               parameters.  For example, "Creative Webcam Live at
//               640x480, 30 fps" is an option.
////////////////////////////////////////////////////////////////////
46
static int WebcamVideo::get_num_options(void);

27 10 get_option 0 4 37 23 WebcamVideo::get_option 0 1 10 258
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_option
//       Access: Public, Static
//  Description: Returns the nth webcam option.
////////////////////////////////////////////////////////////////////
63
static PointerTo< WebcamVideo > WebcamVideo::get_option(int n);

28 10 get_size_x 0 4 37 23 WebcamVideo::get_size_x 0 1 11 251
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_x
//       Access: Published
//  Description: Returns the camera's size_x.
////////////////////////////////////////////////////////////////////
47
inline int WebcamVideo::get_size_x(void) const;

29 10 get_size_y 0 4 37 23 WebcamVideo::get_size_y 0 1 12 251
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_y
//       Access: Published
//  Description: Returns the camera's size_y.
////////////////////////////////////////////////////////////////////
47
inline int WebcamVideo::get_size_y(void) const;

30 7 get_fps 0 4 37 20 WebcamVideo::get_fps 0 1 13 382
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_fps
//       Access: Published
//  Description: Returns the camera's framerate.  This
//               is a maximum theoretical: the actual performance
//               will depend on the speed of the hardware.
////////////////////////////////////////////////////////////////////
47
inline double WebcamVideo::get_fps(void) const;

31 16 get_pixel_format 0 4 37 29 WebcamVideo::get_pixel_format 0 1 14 308
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_pixel_format
//       Access: Published
//  Description: Returns the camera's pixel format, as a FourCC code,
//               if known.
////////////////////////////////////////////////////////////////////
63
inline string const &WebcamVideo::get_pixel_format(void) const;

32 6 output 0 4 37 19 WebcamVideo::output 0 1 15 331
////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::output
//       Access: Public
//  Description: Outputs the WebcamVideo.  This function simply
//               writes the name, size and FPS to the output stream.
////////////////////////////////////////////////////////////////////
52
inline void WebcamVideo::output(ostream &out) const;

33 14 get_class_type 0 4 37 27 WebcamVideo::get_class_type 0 1 16 0
52
static TypeHandle WebcamVideo::get_class_type(void);

16
1 0 0 6 2 45 0 0 807 ////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::make
//       Access: Private
//  Description: Create a new ARToolKit instance.
//
//               Camera must be the nodepath of a panda camera object.
//               The panda camera's field of view is initialized to match
//               the field of view of the physical webcam.  Each time
//               you call analyze, all marker nodepaths will be moved
//               into a position which is relative to this camera.
//               The marker_size parameter indicates how large you
//               printed the physical markers.  You should use the same
//               size units that you wish to use in the panda code.
//////////////////////////////////////////////////////////////////// 3 6 camera 1 39  9 paramfile 1 41  10 markersize 1 44  
2 0 0 4 4 46 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::set_threshold
//       Access: private
//  Description: As part of its analysis, the ARToolKit occasionally
//               converts images to black and white by thresholding
//               them.  The threshold is set to 0.5 by default, but
//               you can tweak it here.
//////////////////////////////////////////////////////////////////// 2 4 this 3 45  1 n 1 44  
3 0 0 4 5 46 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::attach_pattern
//       Access: Public
//  Description: Associates the specified glyph with the specified
//               NodePath.  Each time you call analyze, ARToolKit
//               will update the NodePath's transform.  If the node
//               is not visible, its scale will be set to zero.
//////////////////////////////////////////////////////////////////// 3 4 this 3 45  7 pattern 1 41  4 path 1 39  
4 0 0 4 6 46 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::detach_patterns
//       Access: Public
//  Description: Dissociates all patterns from all NodePaths.
//////////////////////////////////////////////////////////////////// 1 4 this 3 45  
5 0 0 4 7 46 0 0 625 ////////////////////////////////////////////////////////////////////
//     Function: ARToolKit::analyze
//       Access: Public
//  Description: Analyzes the non-pad region of the specified texture.
//               This causes all attached nodepaths to move.
//               The parameter do_flip_texture is true by default,
//               because Panda's representation of textures is
//               upside down from ARToolKit. If you already have
//               a texture that's upside-down, however, you should
//               set it to false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 45  3 tex 1 47  15 do_flip_texture 1 49  
6 0 0 7 10 51 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: OpenCVTexture::Constructor
//       Access: Published
//  Description: Sets up the texture to read frames from a camera
//////////////////////////////////////////////////////////////////// 1 4 name 1 50  
7 0 0 6 11 49 0 0 738 ////////////////////////////////////////////////////////////////////
//     Function: OpenCVTexture::from_camera
//       Access: Published
//  Description: Sets up the OpenCVTexture (or the indicated page, if z
//               is specified) to accept its input from the camera
//               with the given index number, or the default camera if
//               the index number is -1 or unspecified.
//
//               If alpha_file_channel is 0, then the camera image
//               becomes a normal RGB texture.  If it is 1, 2, or 3,
//               then the camera image becomes an alpha texture, using
//               the indicated channel of the source.
//////////////////////////////////////////////////////////////////// 5 4 this 3 51  12 camera_index 1 52  1 z 1 52  18 alpha_file_channel 1 52  7 options 1 53  
8 0 0 7 12 57 0 0 0 0 
9 0 0 6 15 52 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_num_options
//       Access: Public, Static
//  Description: Returns the number of webcam options.  An "option"
//               consists of a device plus a set of configuration
//               parameters.  For example, "Creative Webcam Live at
//               640x480, 30 fps" is an option.
//////////////////////////////////////////////////////////////////// 0 
10 0 0 7 16 58 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_option
//       Access: Public, Static
//  Description: Returns the nth webcam option.
//////////////////////////////////////////////////////////////////// 1 1 n 1 52  
11 0 0 6 17 52 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_x
//       Access: Published
//  Description: Returns the camera's size_x.
//////////////////////////////////////////////////////////////////// 1 4 this 3 59  
12 0 0 6 18 52 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_size_y
//       Access: Published
//  Description: Returns the camera's size_y.
//////////////////////////////////////////////////////////////////// 1 4 this 3 59  
13 0 0 6 19 44 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_fps
//       Access: Published
//  Description: Returns the camera's framerate.  This
//               is a maximum theoretical: the actual performance
//               will depend on the speed of the hardware.
//////////////////////////////////////////////////////////////////// 1 4 this 3 59  
14 0 0 6 20 50 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::get_pixel_format
//       Access: Published
//  Description: Returns the camera's pixel format, as a FourCC code,
//               if known.
//////////////////////////////////////////////////////////////////// 1 4 this 3 59  
15 0 0 4 21 46 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: WebcamVideo::output
//       Access: Public
//  Description: Outputs the WebcamVideo.  This function simply
//               writes the name, size and FPS to the output stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 59  3 out 1 61  
16 0 0 7 22 57 0 0 0 0 
29
34 9 ARToolKit 0 26625 9 ARToolKit 9 ARToolKit 0 0 0 0 18 0 5 17 19 20 21 22 0 0 0 0 0 1001
////////////////////////////////////////////////////////////////////
//       Class : ARToolKit
// Description : ARToolKit is a software library for building
//               Augmented Reality (AR) applications. These are
//               applications that involve the overlay of virtual
//               imagery on the real world.  It was developed by
//               Dr. Hirokazu Kato.  Its ongoing development is
//               being supported by the Human Interface Technology
//               Laboratory (HIT Lab) at the University of
//               Washington, HIT Lab NZ at the University of
//               Canterbury, New Zealand, and ARToolworks, Inc,
//               Seattle.  It is available under a GPL license.
//               It is also possible to negotiate other licenses
//               with the copyright holders.
//
//               This class is a wrapper around the ARToolKit
//               library.
////////////////////////////////////////////////////////////////////

35 13 OpenCVTexture 0 75777 13 OpenCVTexture 13 OpenCVTexture 0 0 0 1 23 0 0 2 24 25 0 0 1 0 36 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : OpenCVTexture
// Description : A specialization on VideoTexture that takes its input
//               using the CV library, to produce an animated texture,
//               with its source taken from an .avi file or from a
//               camera input.
////////////////////////////////////////////////////////////////////

36 12 VideoTexture 0 2049 12 VideoTexture 12 VideoTexture 0 0 0 0 0 0 0 0 0 0 0 0 480
////////////////////////////////////////////////////////////////////
//       Class : VideoTexture
// Description : The base class for a family of animated Textures that
//               take their input from a video source, such as a movie
//               file.  These Textures may be stopped, started,
//               etc. using the AnimInterface controls, similar to an
//               animated character.
////////////////////////////////////////////////////////////////////

37 11 WebcamVideo 0 75777 11 WebcamVideo 11 WebcamVideo 0 0 0 0 0 0 8 26 27 28 29 30 31 32 33 1 63 0 1 0 38 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : WebcamVideo
// Description : Allows you to open a webcam or other video capture
//               device as a video stream.
////////////////////////////////////////////////////////////////////

38 10 MovieVideo 0 2049 10 MovieVideo 10 MovieVideo 0 0 0 0 0 0 0 0 0 0 0 0 676
////////////////////////////////////////////////////////////////////
//       Class : MovieVideo
// Description : A MovieVideo is actually any source that provides
//               a sequence of video frames.  That could include an
//               AVI file, a digital camera, or an internet TV station.
//
//               The difference between a MovieVideo and a
//               MovieVideoCursor is like the difference between a
//               filename and a file handle.  The MovieVideo just
//               indicates a particular movie.  The MovieVideoCursor
//               is what allows access.
////////////////////////////////////////////////////////////////////

39 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 40 0 0 0 0 0 0 0 0 0 0

40 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 64 65 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

41 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 42 0 0 0 0 0 0 0 0 0 0

42 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 43 0 0 0 0 0 0 0 0 0 0

43 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

44 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

45 11 ARToolKit * 0 8576 11 ARToolKit * 11 ARToolKit * 0 0 34 0 0 0 0 0 0 0 0 0 0

46 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

47 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 48 0 0 0 0 0 0 0 0 0 0

48 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

49 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

50 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

51 15 OpenCVTexture * 0 8576 15 OpenCVTexture * 15 OpenCVTexture * 0 0 35 0 0 0 0 0 0 0 0 0 0

52 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

53 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 54 0 0 0 0 0 0 0 0 0 0

54 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 55 0 0 0 0 0 0 0 0 0 0

55 13 LoaderOptions 0 2048 13 LoaderOptions 13 LoaderOptions 0 0 0 0 0 0 0 0 0 0 0 0 257
////////////////////////////////////////////////////////////////////
//       Class : LoaderOptions
// Description : Specifies parameters that may be passed to the
//               loader.
////////////////////////////////////////////////////////////////////

56 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

57 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 56 0 0 0 0 0 0 0 0 0 0

58 13 WebcamVideo * 0 8576 13 WebcamVideo * 13 WebcamVideo * 0 0 37 0 0 0 0 0 0 0 0 0 0

59 19 WebcamVideo const * 0 8576 19 WebcamVideo const * 19 WebcamVideo const * 0 0 60 0 0 0 0 0 0 0 0 0 0

60 17 WebcamVideo const 0 8832 17 WebcamVideo const 17 WebcamVideo const 0 0 37 0 0 0 0 0 0 0 0 0 0

61 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 62 0 0 0 0 0 0 0 0 0 0

62 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

0
0
3
63 0 0 13 11 get_options 15 get_num_options 10 get_option 
64 0 0 25 9 get_nodes 13 get_num_nodes 8 get_node 
65 0 0 25 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
