1439924280
2 3
12 libp3display 4 62HU 12 panda3d.core 
648
660 8 get_pipe 0 4 1308 24 GraphicsDevice::get_pipe 0 1 1 302
////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsDevice::get_pipe(void) const;

661 14 get_class_type 0 4 1308 30 GraphicsDevice::get_class_type 0 1 2 0
55
static TypeHandle GraphicsDevice::get_class_type(void);

662 8 is_valid 0 4 1310 22 GraphicsPipe::is_valid 0 1 3 694
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
////////////////////////////////////////////////////////////////////
47
inline bool GraphicsPipe::is_valid(void) const;

663 19 get_supported_types 0 4 1310 33 GraphicsPipe::get_supported_types 0 1 4 682
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
////////////////////////////////////////////////////////////////////
57
inline int GraphicsPipe::get_supported_types(void) const;

664 13 supports_type 0 4 1310 27 GraphicsPipe::supports_type 0 1 5 766
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsPipe::supports_type(int flags) const;

665 17 get_display_width 0 4 1310 31 GraphicsPipe::get_display_width 0 1 6 547
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
////////////////////////////////////////////////////////////////////
55
inline int GraphicsPipe::get_display_width(void) const;

666 18 get_display_height 0 4 1310 32 GraphicsPipe::get_display_height 0 1 7 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
////////////////////////////////////////////////////////////////////
56
inline int GraphicsPipe::get_display_height(void) const;

667 23 get_display_information 0 4 1310 37 GraphicsPipe::get_display_information 0 1 8 272
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
////////////////////////////////////////////////////////////////////
64
DisplayInformation *GraphicsPipe::get_display_information(void);

668 15 lookup_cpu_data 0 6 1310 29 GraphicsPipe::lookup_cpu_data 0 1 9 400
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
////////////////////////////////////////////////////////////////////
49
virtual void GraphicsPipe::lookup_cpu_data(void);

669 18 get_interface_name 0 6 1310 32 GraphicsPipe::get_interface_name 0 1 10 0
64
virtual string GraphicsPipe::get_interface_name(void) const = 0;

670 14 get_class_type 0 4 1310 28 GraphicsPipe::get_class_type 0 1 11 0
53
static TypeHandle GraphicsPipe::get_class_type(void);

671 15 ~DrawableRegion 0 6 1313 31 DrawableRegion::~DrawableRegion 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::Destructor
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
46
virtual DrawableRegion::~DrawableRegion(void);

672 22 set_clear_color_active 0 4 1313 38 DrawableRegion::set_clear_color_active 0 1 12 523
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_color_active(bool clear_color_active);

673 22 get_clear_color_active 0 4 1313 38 DrawableRegion::get_clear_color_active 0 1 13 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_color_active(void) const;

674 22 set_clear_depth_active 0 4 1313 38 DrawableRegion::set_clear_depth_active 0 1 14 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
////////////////////////////////////////////////////////////////////
76
inline void DrawableRegion::set_clear_depth_active(bool clear_depth_active);

675 22 get_clear_depth_active 0 4 1313 38 DrawableRegion::get_clear_depth_active 0 1 15 413
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
////////////////////////////////////////////////////////////////////
63
inline bool DrawableRegion::get_clear_depth_active(void) const;

676 24 set_clear_stencil_active 0 4 1313 40 DrawableRegion::set_clear_stencil_active 0 1 16 531
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
////////////////////////////////////////////////////////////////////
80
inline void DrawableRegion::set_clear_stencil_active(bool clear_stencil_active);

677 24 get_clear_stencil_active 0 4 1313 40 DrawableRegion::get_clear_stencil_active 0 1 17 417
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
////////////////////////////////////////////////////////////////////
65
inline bool DrawableRegion::get_clear_stencil_active(void) const;

678 15 set_clear_color 0 4 1313 31 DrawableRegion::set_clear_color 0 1 18 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
65
inline void DrawableRegion::set_clear_color(LColor const &color);

679 15 get_clear_color 0 4 1313 31 DrawableRegion::get_clear_color 0 1 19 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
65
inline LColor const &DrawableRegion::get_clear_color(void) const;

680 15 set_clear_depth 0 4 1313 31 DrawableRegion::set_clear_depth 0 1 20 535
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
63
inline void DrawableRegion::set_clear_depth(PN_stdfloat depth);

681 15 get_clear_depth 0 4 1313 31 DrawableRegion::get_clear_depth 0 1 21 529
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
63
inline PN_stdfloat DrawableRegion::get_clear_depth(void) const;

682 17 set_clear_stencil 0 4 1313 33 DrawableRegion::set_clear_stencil 0 1 22 543
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil
//       Access: Published
//  Description: Sets the clear stencil to the indicated value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
68
inline void DrawableRegion::set_clear_stencil(unsigned int stencil);

683 17 get_clear_stencil 0 4 1313 33 DrawableRegion::get_clear_stencil 0 1 23 539
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
////////////////////////////////////////////////////////////////////
66
inline unsigned int DrawableRegion::get_clear_stencil(void) const;

684 16 set_clear_active 0 6 1313 32 DrawableRegion::set_clear_active 0 1 24 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
76
virtual void DrawableRegion::set_clear_active(int n, bool clear_aux_active);

685 16 get_clear_active 0 6 1313 32 DrawableRegion::get_clear_active 0 1 25 285
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
////////////////////////////////////////////////////////////////////
59
virtual bool DrawableRegion::get_clear_active(int n) const;

686 15 set_clear_value 0 6 1313 31 DrawableRegion::set_clear_value 0 1 26 278
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
79
virtual void DrawableRegion::set_clear_value(int n, LColor const &clear_value);

687 15 get_clear_value 0 6 1313 31 DrawableRegion::get_clear_value 0 1 27 281
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
////////////////////////////////////////////////////////////////////
67
virtual LColor const &DrawableRegion::get_clear_value(int n) const;

688 14 disable_clears 0 6 1313 30 DrawableRegion::disable_clears 0 1 28 352
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
////////////////////////////////////////////////////////////////////
50
virtual void DrawableRegion::disable_clears(void);

689 19 is_any_clear_active 0 6 1313 35 DrawableRegion::is_any_clear_active 0 1 29 461
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::is_any_clear_active(void) const;

690 14 set_pixel_zoom 0 6 1313 30 DrawableRegion::set_pixel_zoom 0 1 30 1485
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
////////////////////////////////////////////////////////////////////
68
virtual void DrawableRegion::set_pixel_zoom(PN_stdfloat pixel_zoom);

691 14 get_pixel_zoom 0 4 1313 30 DrawableRegion::get_pixel_zoom 0 1 31 388
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
////////////////////////////////////////////////////////////////////
62
inline PN_stdfloat DrawableRegion::get_pixel_zoom(void) const;

692 16 get_pixel_factor 0 4 1313 32 DrawableRegion::get_pixel_factor 0 1 32 650
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
////////////////////////////////////////////////////////////////////
64
inline PN_stdfloat DrawableRegion::get_pixel_factor(void) const;

693 19 supports_pixel_zoom 0 6 1313 35 DrawableRegion::supports_pixel_zoom 0 1 33 802
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
////////////////////////////////////////////////////////////////////
61
virtual bool DrawableRegion::supports_pixel_zoom(void) const;

694 21 get_renderbuffer_type 0 4 1313 37 DrawableRegion::get_renderbuffer_type 0 1 34 334
////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
////////////////////////////////////////////////////////////////////
60
static int DrawableRegion::get_renderbuffer_type(int plane);

695 12 WindowHandle 0 4 1315 26 WindowHandle::WindowHandle 0 2 35 36 455
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
130
inline WindowHandle::WindowHandle(WindowHandle::OSHandle *os_handle);
inline WindowHandle::WindowHandle(WindowHandle const &copy);

696 13 get_os_handle 0 4 1315 27 WindowHandle::get_os_handle 0 1 37 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
71
inline WindowHandle::OSHandle *WindowHandle::get_os_handle(void) const;

697 13 set_os_handle 0 4 1315 27 WindowHandle::set_os_handle 0 1 38 321
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
////////////////////////////////////////////////////////////////////
75
inline void WindowHandle::set_os_handle(WindowHandle::OSHandle *os_handle);

698 20 send_windows_message 0 4 1315 34 WindowHandle::send_windows_message 0 1 39 566
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
////////////////////////////////////////////////////////////////////
82
void WindowHandle::send_windows_message(unsigned int msg, int wparam, int lparam);

699 14 get_int_handle 0 4 1315 28 WindowHandle::get_int_handle 0 1 40 397
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
48
size_t WindowHandle::get_int_handle(void) const;

700 6 output 0 4 1315 20 WindowHandle::output 0 1 41 220
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
void WindowHandle::output(ostream &out) const;

701 14 get_int_handle 0 6 1316 38 WindowHandle::OSHandle::get_int_handle 0 1 43 416
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
////////////////////////////////////////////////////////////////////
66
virtual size_t WindowHandle::OSHandle::get_int_handle(void) const;

702 6 output 0 6 1316 30 WindowHandle::OSHandle::output 0 1 44 239
////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
64
virtual void WindowHandle::OSHandle::output(ostream &out) const;

703 14 get_class_type 0 4 1316 38 WindowHandle::OSHandle::get_class_type 0 1 45 0
63
static TypeHandle WindowHandle::OSHandle::get_class_type(void);

704 14 get_class_type 0 4 1315 28 WindowHandle::get_class_type 0 1 42 0
53
static TypeHandle WindowHandle::get_class_type(void);

705 16 WindowProperties 0 4 1317 34 WindowProperties::WindowProperties 0 2 46 47 463
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
114
WindowProperties::WindowProperties(void);
inline WindowProperties::WindowProperties(WindowProperties const &copy);

706 10 operator = 0 4 1317 28 WindowProperties::operator = 0 1 48 0
64
void WindowProperties::operator =(WindowProperties const &copy);

707 17 ~WindowProperties 0 4 1317 35 WindowProperties::~WindowProperties 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline WindowProperties::~WindowProperties(void);

708 21 get_config_properties 0 4 1317 39 WindowProperties::get_config_properties 0 1 49 395
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
70
static WindowProperties WindowProperties::get_config_properties(void);

709 11 get_default 0 4 1317 29 WindowProperties::get_default 0 1 50 457
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
////////////////////////////////////////////////////////////////////
60
static WindowProperties WindowProperties::get_default(void);

710 11 set_default 0 4 1317 29 WindowProperties::set_default 0 1 51 589
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
////////////////////////////////////////////////////////////////////
86
static void WindowProperties::set_default(WindowProperties const &default_properties);

711 13 clear_default 0 4 1317 31 WindowProperties::clear_default 0 1 52 346
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
////////////////////////////////////////////////////////////////////
50
static void WindowProperties::clear_default(void);

712 4 size 0 4 1317 22 WindowProperties::size 0 1 53 386
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
////////////////////////////////////////////////////////////////////
71
static WindowProperties WindowProperties::size(int x_size, int y_size);

713 11 operator == 0 4 1317 29 WindowProperties::operator == 0 1 54 0
72
bool WindowProperties::operator ==(WindowProperties const &other) const;

714 11 operator != 0 4 1317 29 WindowProperties::operator != 0 1 55 0
79
inline bool WindowProperties::operator !=(WindowProperties const &other) const;

715 5 clear 0 4 1317 23 WindowProperties::clear 0 1 56 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
35
void WindowProperties::clear(void);

716 16 is_any_specified 0 4 1317 34 WindowProperties::is_any_specified 0 1 57 319
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool WindowProperties::is_any_specified(void) const;

717 10 set_origin 0 4 1317 28 WindowProperties::set_origin 0 2 58 59 1030
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
////////////////////////////////////////////////////////////////////
135
inline void WindowProperties::set_origin(LPoint2i const &origin);
inline void WindowProperties::set_origin(int x_origin, int y_origin);

718 10 get_origin 0 4 1317 28 WindowProperties::get_origin 0 1 60 328
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns the coordinates of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
64
inline LPoint2i const &WindowProperties::get_origin(void) const;

719 12 get_x_origin 0 4 1317 30 WindowProperties::get_x_origin 0 1 61 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_x_origin(void) const;

720 12 get_y_origin 0 4 1317 30 WindowProperties::get_y_origin 0 1 62 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
////////////////////////////////////////////////////////////////////
54
inline int WindowProperties::get_y_origin(void) const;

721 10 has_origin 0 4 1317 28 WindowProperties::has_origin 0 1 63 315
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
53
inline bool WindowProperties::has_origin(void) const;

722 12 clear_origin 0 4 1317 30 WindowProperties::clear_origin 0 1 64 283
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
////////////////////////////////////////////////////////////////////
49
inline void WindowProperties::clear_origin(void);

723 8 set_size 0 4 1317 26 WindowProperties::set_size 0 2 65 66 788
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////
126
inline void WindowProperties::set_size(LVector2i const &size);
inline void WindowProperties::set_size(int x_size, int y_size);

724 8 get_size 0 4 1317 26 WindowProperties::get_size 0 1 67 328
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns size in pixels of the useful part of the
//               window, not including decorations.
////////////////////////////////////////////////////////////////////
63
inline LVector2i const &WindowProperties::get_size(void) const;

725 10 get_x_size 0 4 1317 28 WindowProperties::get_x_size 0 1 68 401
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_x_size(void) const;

726 10 get_y_size 0 4 1317 28 WindowProperties::get_y_size 0 1 69 402
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
////////////////////////////////////////////////////////////////////
52
inline int WindowProperties::get_y_size(void) const;

727 8 has_size 0 4 1317 26 WindowProperties::has_size 0 1 70 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_size(void) const;

728 10 clear_size 0 4 1317 28 WindowProperties::clear_size 0 1 71 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_size(void);

729 14 has_mouse_mode 0 4 1317 32 WindowProperties::has_mouse_mode 0 1 72 232
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_mouse_mode(void) const;

730 14 set_mouse_mode 0 4 1317 32 WindowProperties::set_mouse_mode 0 1 73 1467
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.
//
//               M_absolute: the normal mode in which a mouse pointer
//               operates, where the mouse can move outside the window
//               and the mouse coordinates are relative to its
//               position in the window.
//
//               M_relative (OSX or Unix/X11 only): a mode where only
//               relative movements are reported; particularly useful
//               for FPS-style mouse movements where you have hidden
//               the mouse pointer and are are more interested in how
//               fast the mouse is moving, rather than precisely where
//               the pointer is hovering.
//
//               This has no effect on Windows.  On Unix/X11, this
//               requires the Xxf86dga extension to be available.
//
//               M_confined: this mode reports absolute mouse
//               positions, but confines the mouse pointer to
//               the window boundary.  It can portably replace
//               M_relative for an FPS, but you need to periodically
//               move the pointer to the center of the window
//               and track movement deltas.
//
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_mouse_mode(WindowProperties::MouseMode mode);

731 14 get_mouse_mode 0 4 1317 32 WindowProperties::get_mouse_mode 0 1 74 253
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
////////////////////////////////////////////////////////////////////
80
inline WindowProperties::MouseMode WindowProperties::get_mouse_mode(void) const;

732 16 clear_mouse_mode 0 4 1317 34 WindowProperties::clear_mouse_mode 0 1 75 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_mouse_mode(void);

733 9 set_title 0 4 1317 27 WindowProperties::set_title 0 1 76 302
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
////////////////////////////////////////////////////////////////////
61
inline void WindowProperties::set_title(string const &title);

734 9 get_title 0 4 1317 27 WindowProperties::get_title 0 1 77 254
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
////////////////////////////////////////////////////////////////////
61
inline string const &WindowProperties::get_title(void) const;

735 9 has_title 0 4 1317 27 WindowProperties::has_title 0 1 78 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool WindowProperties::has_title(void) const;

736 11 clear_title 0 4 1317 29 WindowProperties::clear_title 0 1 79 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
////////////////////////////////////////////////////////////////////
48
inline void WindowProperties::clear_title(void);

737 15 set_undecorated 0 4 1317 33 WindowProperties::set_undecorated 0 1 80 381
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
////////////////////////////////////////////////////////////////////
64
inline void WindowProperties::set_undecorated(bool undecorated);

738 15 get_undecorated 0 4 1317 33 WindowProperties::get_undecorated 0 1 81 274
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::get_undecorated(void) const;

739 15 has_undecorated 0 4 1317 33 WindowProperties::has_undecorated 0 1 82 286
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
////////////////////////////////////////////////////////////////////
58
inline bool WindowProperties::has_undecorated(void) const;

740 17 clear_undecorated 0 4 1317 35 WindowProperties::clear_undecorated 0 1 83 293
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
////////////////////////////////////////////////////////////////////
54
inline void WindowProperties::clear_undecorated(void);

741 14 set_fixed_size 0 4 1317 32 WindowProperties::set_fixed_size 0 1 84 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fixed_size(bool fixed_size);

742 14 get_fixed_size 0 4 1317 32 WindowProperties::get_fixed_size 0 1 85 323
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fixed_size(void) const;

743 14 has_fixed_size 0 4 1317 32 WindowProperties::has_fixed_size 0 1 86 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fixed_size(void) const;

744 16 clear_fixed_size 0 4 1317 34 WindowProperties::clear_fixed_size 0 1 87 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fixed_size(void);

745 14 set_fullscreen 0 4 1317 32 WindowProperties::set_fullscreen 0 1 88 383
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_fullscreen(bool fullscreen);

746 14 get_fullscreen 0 4 1317 32 WindowProperties::get_fullscreen 0 1 89 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_fullscreen(void) const;

747 14 has_fullscreen 0 4 1317 32 WindowProperties::has_fullscreen 0 1 90 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_fullscreen(void) const;

748 16 clear_fullscreen 0 4 1317 34 WindowProperties::clear_fullscreen 0 1 91 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_fullscreen(void);

749 14 set_foreground 0 4 1317 32 WindowProperties::set_foreground 0 1 92 372
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
////////////////////////////////////////////////////////////////////
62
inline void WindowProperties::set_foreground(bool foreground);

750 14 get_foreground 0 4 1317 32 WindowProperties::get_foreground 0 1 93 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::get_foreground(void) const;

751 14 has_foreground 0 4 1317 32 WindowProperties::has_foreground 0 1 94 284
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
////////////////////////////////////////////////////////////////////
57
inline bool WindowProperties::has_foreground(void) const;

752 16 clear_foreground 0 4 1317 34 WindowProperties::clear_foreground 0 1 95 291
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
////////////////////////////////////////////////////////////////////
53
inline void WindowProperties::clear_foreground(void);

753 13 set_minimized 0 4 1317 31 WindowProperties::set_minimized 0 1 96 331
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
////////////////////////////////////////////////////////////////////
60
inline void WindowProperties::set_minimized(bool minimized);

754 13 get_minimized 0 4 1317 31 WindowProperties::get_minimized 0 1 97 271
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::get_minimized(void) const;

755 13 has_minimized 0 4 1317 31 WindowProperties::has_minimized 0 1 98 282
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
////////////////////////////////////////////////////////////////////
56
inline bool WindowProperties::has_minimized(void) const;

756 15 clear_minimized 0 4 1317 33 WindowProperties::clear_minimized 0 1 99 289
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
////////////////////////////////////////////////////////////////////
52
inline void WindowProperties::clear_minimized(void);

757 12 set_raw_mice 0 4 1317 30 WindowProperties::set_raw_mice 0 1 100 310
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::set_raw_mice(bool raw_mice);

758 12 get_raw_mice 0 4 1317 30 WindowProperties::get_raw_mice 0 1 101 276
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::get_raw_mice(void) const;

759 12 has_raw_mice 0 4 1317 30 WindowProperties::has_raw_mice 0 1 102 280
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
////////////////////////////////////////////////////////////////////
55
inline bool WindowProperties::has_raw_mice(void) const;

760 14 clear_raw_mice 0 4 1317 32 WindowProperties::clear_raw_mice 0 1 103 287
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
////////////////////////////////////////////////////////////////////
51
inline void WindowProperties::clear_raw_mice(void);

761 8 set_open 0 4 1317 26 WindowProperties::set_open 0 1 104 417
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::set_open(bool open);

762 8 get_open 0 4 1317 26 WindowProperties::get_open 0 1 105 261
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::get_open(void) const;

763 8 has_open 0 4 1317 26 WindowProperties::has_open 0 1 106 272
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
////////////////////////////////////////////////////////////////////
51
inline bool WindowProperties::has_open(void) const;

764 10 clear_open 0 4 1317 28 WindowProperties::clear_open 0 1 107 279
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
////////////////////////////////////////////////////////////////////
47
inline void WindowProperties::clear_open(void);

765 17 set_cursor_hidden 0 4 1317 35 WindowProperties::set_cursor_hidden 0 1 108 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
////////////////////////////////////////////////////////////////////
68
inline void WindowProperties::set_cursor_hidden(bool cursor_hidden);

766 17 get_cursor_hidden 0 4 1317 35 WindowProperties::get_cursor_hidden 0 1 109 281
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::get_cursor_hidden(void) const;

767 17 has_cursor_hidden 0 4 1317 35 WindowProperties::has_cursor_hidden 0 1 110 290
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_cursor_hidden(void) const;

768 19 clear_cursor_hidden 0 4 1317 37 WindowProperties::clear_cursor_hidden 0 1 111 297
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_cursor_hidden(void);

769 17 set_icon_filename 0 4 1317 35 WindowProperties::set_icon_filename 0 1 112 344
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
////////////////////////////////////////////////////////////////////
79
inline void WindowProperties::set_icon_filename(Filename const &icon_filename);

770 17 get_icon_filename 0 4 1317 35 WindowProperties::get_icon_filename 0 1 113 288
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
////////////////////////////////////////////////////////////////////
71
inline Filename const &WindowProperties::get_icon_filename(void) const;

771 17 has_icon_filename 0 4 1317 35 WindowProperties::has_icon_filename 0 1 114 307
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_icon_filename(void) const;

772 19 clear_icon_filename 0 4 1317 37 WindowProperties::clear_icon_filename 0 1 115 314
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_icon_filename(void);

773 19 set_cursor_filename 0 4 1317 37 WindowProperties::set_cursor_filename 0 1 116 391
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
////////////////////////////////////////////////////////////////////
83
inline void WindowProperties::set_cursor_filename(Filename const &cursor_filename);

774 19 get_cursor_filename 0 4 1317 37 WindowProperties::get_cursor_filename 0 1 117 313
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
////////////////////////////////////////////////////////////////////
73
inline Filename const &WindowProperties::get_cursor_filename(void) const;

775 19 has_cursor_filename 0 4 1317 37 WindowProperties::has_cursor_filename 0 1 118 311
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
////////////////////////////////////////////////////////////////////
62
inline bool WindowProperties::has_cursor_filename(void) const;

776 21 clear_cursor_filename 0 4 1317 39 WindowProperties::clear_cursor_filename 0 1 119 318
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
////////////////////////////////////////////////////////////////////
58
inline void WindowProperties::clear_cursor_filename(void);

777 11 set_z_order 0 4 1317 29 WindowProperties::set_z_order 0 1 120 609
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
////////////////////////////////////////////////////////////////////
76
inline void WindowProperties::set_z_order(WindowProperties::ZOrder z_order);

778 11 get_z_order 0 4 1317 29 WindowProperties::get_z_order 0 1 121 258
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
////////////////////////////////////////////////////////////////////
74
inline WindowProperties::ZOrder WindowProperties::get_z_order(void) const;

779 11 has_z_order 0 4 1317 29 WindowProperties::has_z_order 0 1 122 317
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool WindowProperties::has_z_order(void) const;

780 13 clear_z_order 0 4 1317 31 WindowProperties::clear_z_order 0 1 123 285
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
////////////////////////////////////////////////////////////////////
50
inline void WindowProperties::clear_z_order(void);

781 17 set_parent_window 0 4 1317 35 WindowProperties::set_parent_window 0 2 124 125 2086
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
////////////////////////////////////////////////////////////////////
138
void WindowProperties::set_parent_window(size_t parent);
inline void WindowProperties::set_parent_window(WindowHandle *parent_window = 0);

782 17 get_parent_window 0 4 1317 35 WindowProperties::get_parent_window 0 1 126 340
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
////////////////////////////////////////////////////////////////////
69
inline WindowHandle *WindowProperties::get_parent_window(void) const;

783 17 has_parent_window 0 4 1317 35 WindowProperties::has_parent_window 0 1 127 296
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
60
inline bool WindowProperties::has_parent_window(void) const;

784 19 clear_parent_window 0 4 1317 37 WindowProperties::clear_parent_window 0 1 128 299
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
////////////////////////////////////////////////////////////////////
56
inline void WindowProperties::clear_parent_window(void);

785 14 add_properties 0 4 1317 32 WindowProperties::add_properties 0 1 129 376
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
69
void WindowProperties::add_properties(WindowProperties const &other);

786 6 output 0 4 1317 24 WindowProperties::output 0 1 130 368
////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
50
void WindowProperties::output(ostream &out) const;

787 27 upcast_to_DisplayRegionBase 0 12 1320 42 DisplayRegion::upcast_to_DisplayRegionBase 0 1 184 46
upcast from DisplayRegion to DisplayRegionBase
68
DisplayRegionBase *DisplayRegion::upcast_to_DisplayRegionBase(void);

788 25 downcast_to_DisplayRegion 0 12 1321 44 DisplayRegionBase::downcast_to_DisplayRegion 0 1 185 48
downcast from DisplayRegionBase to DisplayRegion
66
DisplayRegion *DisplayRegionBase::downcast_to_DisplayRegion(void);

789 24 upcast_to_DrawableRegion 0 12 1320 39 DisplayRegion::upcast_to_DrawableRegion 0 1 186 43
upcast from DisplayRegion to DrawableRegion
62
DrawableRegion *DisplayRegion::upcast_to_DrawableRegion(void);

790 25 downcast_to_DisplayRegion 0 12 1313 41 DrawableRegion::downcast_to_DisplayRegion 0 1 187 45
downcast from DrawableRegion to DisplayRegion
63
DisplayRegion *DrawableRegion::downcast_to_DisplayRegion(void);

791 14 ~DisplayRegion 0 6 1320 29 DisplayRegion::~DisplayRegion 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
44
virtual DisplayRegion::~DisplayRegion(void);

792 15 get_num_regions 0 4 1320 30 DisplayRegion::get_num_regions 0 1 131 280
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_num_regions
//       Access: Published
//  Description: Returns the number of regions, see set_num_regions.
////////////////////////////////////////////////////////////////////
54
inline int DisplayRegion::get_num_regions(void) const;

793 15 set_num_regions 0 4 1320 30 DisplayRegion::set_num_regions 0 1 132 607
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_num_regions
//       Access: Published
//  Description: Sets the number of regions that this DisplayRegion
//               indicates.  Usually, this number is 1 (and it is
//               always at least 1), and only the first is used for
//               rendering.  However, if more than one is provided,
//               you may select which one to render into using a
//               geometry shader (gl_ViewportIndex in GLSL).
////////////////////////////////////////////////////////////////////
50
inline void DisplayRegion::set_num_regions(int i);

794 14 get_dimensions 0 4 1320 29 DisplayRegion::get_dimensions 0 1 133 1177
///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
297
inline void DisplayRegion::get_dimensions(PN_stdfloat &l, PN_stdfloat &r, PN_stdfloat &b, PN_stdfloat &t) const;
inline void DisplayRegion::get_dimensions(int i, PN_stdfloat &l, PN_stdfloat &r, PN_stdfloat &b, PN_stdfloat &t) const;
inline LVecBase4 DisplayRegion::get_dimensions(int i = 0) const;

795 8 get_left 0 4 1320 23 DisplayRegion::get_left 0 1 134 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
60
inline PN_stdfloat DisplayRegion::get_left(int i = 0) const;

796 9 get_right 0 4 1320 24 DisplayRegion::get_right 0 1 135 388
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
61
inline PN_stdfloat DisplayRegion::get_right(int i = 0) const;

797 10 get_bottom 0 4 1320 25 DisplayRegion::get_bottom 0 1 136 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
////////////////////////////////////////////////////////////////////
62
inline PN_stdfloat DisplayRegion::get_bottom(int i = 0) const;

798 7 get_top 0 4 1320 22 DisplayRegion::get_top 0 1 137 384
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
////////////////////////////////////////////////////////////////////
59
inline PN_stdfloat DisplayRegion::get_top(int i = 0) const;

799 14 set_dimensions 0 4 1320 29 DisplayRegion::set_dimensions 0 4 138 139 140 141 2082
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
////////////////////////////////////////////////////////////////////
364
inline void DisplayRegion::set_dimensions(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);
inline void DisplayRegion::set_dimensions(int i, PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);
inline void DisplayRegion::set_dimensions(LVecBase4 const &dimensions);
virtual void DisplayRegion::set_dimensions(int i, LVecBase4 const &dimensions);

800 10 get_window 0 4 1320 25 DisplayRegion::get_window 0 1 142 376
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
////////////////////////////////////////////////////////////////////
61
inline GraphicsOutput *DisplayRegion::get_window(void) const;

801 8 get_pipe 0 4 1320 23 DisplayRegion::get_pipe 0 1 143 370
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
////////////////////////////////////////////////////////////////////
50
GraphicsPipe *DisplayRegion::get_pipe(void) const;

802 9 is_stereo 0 6 1320 24 DisplayRegion::is_stereo 0 1 144 313
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
////////////////////////////////////////////////////////////////////
50
virtual bool DisplayRegion::is_stereo(void) const;

803 10 set_camera 0 6 1320 25 DisplayRegion::set_camera 0 1 145 669
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
////////////////////////////////////////////////////////////////////
63
virtual void DisplayRegion::set_camera(NodePath const &camera);

804 10 get_camera 0 4 1320 25 DisplayRegion::get_camera 0 1 146 362
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
////////////////////////////////////////////////////////////////////
97
inline NodePath DisplayRegion::get_camera(Thread *current_thread = (get_current_thread())) const;

805 10 set_active 0 6 1320 25 DisplayRegion::set_active 0 1 147 386
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
52
virtual void DisplayRegion::set_active(bool active);

806 9 is_active 0 4 1320 24 DisplayRegion::is_active 0 1 148 299
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
49
inline bool DisplayRegion::is_active(void) const;

807 8 set_sort 0 6 1320 23 DisplayRegion::set_sort 0 1 149 439
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
////////////////////////////////////////////////////////////////////
47
virtual void DisplayRegion::set_sort(int sort);

808 8 get_sort 0 4 1320 23 DisplayRegion::get_sort 0 1 150 297
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
47
inline int DisplayRegion::get_sort(void) const;

809 18 set_stereo_channel 0 6 1320 33 DisplayRegion::set_stereo_channel 0 1 151 1825
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
//
//               This call also resets tex_view_offset to its default
//               value, which is 0 for the left eye or 1 for the right
//               eye of a stereo display region, or 0 for a mono
//               display region.
////////////////////////////////////////////////////////////////////
83
virtual void DisplayRegion::set_stereo_channel(Lens::StereoChannel stereo_channel);

810 18 get_stereo_channel 0 4 1320 33 DisplayRegion::get_stereo_channel 0 1 152 448
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
73
inline Lens::StereoChannel DisplayRegion::get_stereo_channel(void) const;

811 19 set_tex_view_offset 0 6 1320 34 DisplayRegion::set_tex_view_offset 0 1 153 776
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_tex_view_offset
//       Access: Published, Virtual
//  Description: Sets the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.  This is set automatically when you call
//               set_stereo_channel().
////////////////////////////////////////////////////////////////////
69
virtual void DisplayRegion::set_tex_view_offset(int tex_view_offset);

812 19 get_tex_view_offset 0 4 1320 34 DisplayRegion::get_tex_view_offset 0 1 154 687
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_tex_view_offset
//       Access: Public
//  Description: Returns the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.
////////////////////////////////////////////////////////////////////
58
inline int DisplayRegion::get_tex_view_offset(void) const;

813 21 set_incomplete_render 0 6 1320 36 DisplayRegion::set_incomplete_render 0 1 155 949
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
////////////////////////////////////////////////////////////////////
74
virtual void DisplayRegion::set_incomplete_render(bool incomplete_render);

814 21 get_incomplete_render 0 4 1320 36 DisplayRegion::get_incomplete_render 0 1 156 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
////////////////////////////////////////////////////////////////////
61
inline bool DisplayRegion::get_incomplete_render(void) const;

815 27 set_texture_reload_priority 0 6 1320 42 DisplayRegion::set_texture_reload_priority 0 1 157 988
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
////////////////////////////////////////////////////////////////////
85
virtual void DisplayRegion::set_texture_reload_priority(int texture_reload_priority);

816 27 get_texture_reload_priority 0 4 1320 42 DisplayRegion::get_texture_reload_priority 0 1 158 391
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
////////////////////////////////////////////////////////////////////
66
inline int DisplayRegion::get_texture_reload_priority(void) const;

817 14 set_lens_index 0 4 1320 29 DisplayRegion::set_lens_index 0 1 159 443
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
////////////////////////////////////////////////////////////////////
46
void DisplayRegion::set_lens_index(int index);

818 14 get_lens_index 0 4 1320 29 DisplayRegion::get_lens_index 0 1 160 479
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
////////////////////////////////////////////////////////////////////
53
inline int DisplayRegion::get_lens_index(void) const;

819 18 set_cull_traverser 0 6 1320 33 DisplayRegion::set_cull_traverser 0 1 161 494
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
////////////////////////////////////////////////////////////////////
68
virtual void DisplayRegion::set_cull_traverser(CullTraverser *trav);

820 18 get_cull_traverser 0 4 1320 33 DisplayRegion::get_cull_traverser 0 1 162 337
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
////////////////////////////////////////////////////////////////////
55
CullTraverser *DisplayRegion::get_cull_traverser(void);

821 18 set_cube_map_index 0 4 1320 33 DisplayRegion::set_cube_map_index 0 1 163 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published
//  Description: Deprecated; replaced by set_target_tex_page().
////////////////////////////////////////////////////////////////////
66
inline void DisplayRegion::set_cube_map_index(int cube_map_index);

822 19 set_target_tex_page 0 6 1320 34 DisplayRegion::set_target_tex_page 0 1 164 907
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_target_tex_page
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map or multipage and/or
//               multiview texture.
//
//               This sets up the DisplayRegion to render to the ith
//               page and jth view of its associated texture(s); the
//               value must be consistent with the range of values
//               availble to the texture.  A normal DisplayRegion that
//               is not associated with any particular page should be
//               set to page -1 and view 0.
//
//               This is particularly useful when rendering cube maps
//               and/or stereo textures.
////////////////////////////////////////////////////////////////////
58
virtual void DisplayRegion::set_target_tex_page(int page);

823 19 get_target_tex_page 0 4 1320 34 DisplayRegion::get_target_tex_page 0 1 165 433
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_target_tex_page
//       Access: Published
//  Description: Returns the target page number associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a page.  See
//               set_target_tex_page().
////////////////////////////////////////////////////////////////////
58
inline int DisplayRegion::get_target_tex_page(void) const;

824 19 set_scissor_enabled 0 4 1320 34 DisplayRegion::set_scissor_enabled 0 1 166 392
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_scissor_enabled
//       Access: Published
//  Description: Sets whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_scissor_enabled(bool scissor_enabled);

825 19 get_scissor_enabled 0 4 1320 34 DisplayRegion::get_scissor_enabled 0 1 167 395
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_scissor_enabled
//       Access: Published
//  Description: Returns whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
////////////////////////////////////////////////////////////////////
59
inline bool DisplayRegion::get_scissor_enabled(void) const;

826 17 set_cull_callback 0 4 1320 32 DisplayRegion::set_cull_callback 0 1 168 1597
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_cull_callback(CallbackObject *object);

827 19 clear_cull_callback 0 4 1320 34 DisplayRegion::clear_cull_callback 0 1 169 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_cull_callback(void);

828 17 get_cull_callback 0 4 1320 32 DisplayRegion::get_cull_callback 0 1 170 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_cull_callback(void) const;

829 17 set_draw_callback 0 4 1320 32 DisplayRegion::set_draw_callback 0 1 171 1951
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
////////////////////////////////////////////////////////////////////
69
inline void DisplayRegion::set_draw_callback(CallbackObject *object);

830 19 clear_draw_callback 0 4 1320 34 DisplayRegion::clear_draw_callback 0 1 172 318
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
////////////////////////////////////////////////////////////////////
53
inline void DisplayRegion::clear_draw_callback(void);

831 17 get_draw_callback 0 4 1320 32 DisplayRegion::get_draw_callback 0 1 173 286
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
////////////////////////////////////////////////////////////////////
68
inline CallbackObject *DisplayRegion::get_draw_callback(void) const;

832 15 get_pixel_width 0 4 1320 30 DisplayRegion::get_pixel_width 0 1 174 279
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
59
inline int DisplayRegion::get_pixel_width(int i = 0) const;

833 16 get_pixel_height 0 4 1320 31 DisplayRegion::get_pixel_height 0 1 175 281
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
////////////////////////////////////////////////////////////////////
60
inline int DisplayRegion::get_pixel_height(int i = 0) const;

834 6 output 0 6 1320 21 DisplayRegion::output 0 1 176 229
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
55
virtual void DisplayRegion::output(ostream &out) const;

835 24 make_screenshot_filename 0 4 1320 39 DisplayRegion::make_screenshot_filename 0 1 177 757
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
93
static Filename DisplayRegion::make_screenshot_filename(string const &prefix = "screenshot");

836 23 save_screenshot_default 0 4 1320 38 DisplayRegion::save_screenshot_default 0 1 178 470
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
85
Filename DisplayRegion::save_screenshot_default(string const &prefix = "screenshot");

837 15 save_screenshot 0 4 1320 30 DisplayRegion::save_screenshot 0 1 179 350
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
96
bool DisplayRegion::save_screenshot(Filename const &filename, string const &image_comment = "");

838 14 get_screenshot 0 4 1320 29 DisplayRegion::get_screenshot 0 2 180 181 774
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as a Texture, or NULL
//               on failure.
////////////////////////////////////////////////////////////////////
110
bool DisplayRegion::get_screenshot(PNMImage &image);
PointerTo< Texture > DisplayRegion::get_screenshot(void);

839 22 make_cull_result_graph 0 6 1320 37 DisplayRegion::make_cull_result_graph 0 1 182 1131
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
////////////////////////////////////////////////////////////////////
75
virtual PointerTo< PandaNode > DisplayRegion::make_cull_result_graph(void);

840 14 get_class_type 0 4 1320 29 DisplayRegion::get_class_type 0 1 183 0
54
static TypeHandle DisplayRegion::get_class_type(void);

841 12 get_left_eye 0 4 1322 33 StereoDisplayRegion::get_left_eye 0 1 188 324
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
62
inline DisplayRegion *StereoDisplayRegion::get_left_eye(void);

842 13 get_right_eye 0 4 1322 34 StereoDisplayRegion::get_right_eye 0 1 189 326
////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
////////////////////////////////////////////////////////////////////
63
inline DisplayRegion *StereoDisplayRegion::get_right_eye(void);

843 14 get_class_type 0 4 1322 35 StereoDisplayRegion::get_class_type 0 1 190 0
60
static TypeHandle StereoDisplayRegion::get_class_type(void);

844 14 get_depth_bits 0 4 1323 37 FrameBufferProperties::get_depth_bits 0 1 193 260
// Individual queries.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_depth_bits(void) const;

845 14 get_color_bits 0 4 1323 37 FrameBufferProperties::get_color_bits 0 1 194 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_color_bits(void) const;

846 12 get_red_bits 0 4 1323 35 FrameBufferProperties::get_red_bits 0 1 195 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_red_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int FrameBufferProperties::get_red_bits(void) const;

847 14 get_green_bits 0 4 1323 37 FrameBufferProperties::get_green_bits 0 1 196 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_green_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_green_bits(void) const;

848 13 get_blue_bits 0 4 1323 36 FrameBufferProperties::get_blue_bits 0 1 197 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_blue_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_blue_bits(void) const;

849 14 get_alpha_bits 0 4 1323 37 FrameBufferProperties::get_alpha_bits 0 1 198 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_alpha_bits(void) const;

850 16 get_stencil_bits 0 4 1323 39 FrameBufferProperties::get_stencil_bits 0 1 199 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_stencil_bits(void) const;

851 14 get_accum_bits 0 4 1323 37 FrameBufferProperties::get_accum_bits 0 1 200 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int FrameBufferProperties::get_accum_bits(void) const;

852 12 get_aux_rgba 0 4 1323 35 FrameBufferProperties::get_aux_rgba 0 1 201 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int FrameBufferProperties::get_aux_rgba(void) const;

853 13 get_aux_hrgba 0 4 1323 36 FrameBufferProperties::get_aux_hrgba 0 1 202 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_hrgba(void) const;

854 13 get_aux_float 0 4 1323 36 FrameBufferProperties::get_aux_float 0 1 203 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
60
inline int FrameBufferProperties::get_aux_float(void) const;

855 16 get_multisamples 0 4 1323 39 FrameBufferProperties::get_multisamples 0 1 204 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_multisamples(void) const;

856 20 get_coverage_samples 0 4 1323 43 FrameBufferProperties::get_coverage_samples 0 1 205 356
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
////////////////////////////////////////////////////////////////////
67
inline int FrameBufferProperties::get_coverage_samples(void) const;

857 16 get_back_buffers 0 4 1323 39 FrameBufferProperties::get_back_buffers 0 1 206 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline int FrameBufferProperties::get_back_buffers(void) const;

858 17 get_indexed_color 0 4 1323 40 FrameBufferProperties::get_indexed_color 0 1 207 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
65
inline bool FrameBufferProperties::get_indexed_color(void) const;

859 13 get_rgb_color 0 4 1323 36 FrameBufferProperties::get_rgb_color 0 1 208 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline bool FrameBufferProperties::get_rgb_color(void) const;

860 10 get_stereo 0 4 1323 33 FrameBufferProperties::get_stereo 0 1 209 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline bool FrameBufferProperties::get_stereo(void) const;

861 18 get_force_hardware 0 4 1323 41 FrameBufferProperties::get_force_hardware 0 1 210 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool FrameBufferProperties::get_force_hardware(void) const;

862 18 get_force_software 0 4 1323 41 FrameBufferProperties::get_force_software 0 1 211 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool FrameBufferProperties::get_force_software(void) const;

863 14 get_srgb_color 0 4 1323 37 FrameBufferProperties::get_srgb_color 0 1 212 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_srgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline bool FrameBufferProperties::get_srgb_color(void) const;

864 15 get_float_color 0 4 1323 38 FrameBufferProperties::get_float_color 0 1 213 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool FrameBufferProperties::get_float_color(void) const;

865 15 get_float_depth 0 4 1323 38 FrameBufferProperties::get_float_depth 0 1 214 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_depth
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
63
inline bool FrameBufferProperties::get_float_depth(void) const;

866 14 set_depth_bits 0 4 1323 37 FrameBufferProperties::set_depth_bits 0 1 215 262
// Individual assigners.

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_depth_bits(int n);

867 14 set_color_bits 0 4 1323 37 FrameBufferProperties::set_color_bits 0 1 216 616
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description: Sets the number of requested color bits as a single
//               number that represents the sum of the individual
//               numbers of red, green and blue bits.  Panda won't
//               care how the individual bits are divided up.
//
//               See also set_rgba_bits, which allows you to specify
//               requirements for the individual components.
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_color_bits(int n);

868 13 set_rgba_bits 0 4 1323 36 FrameBufferProperties::set_rgba_bits 0 1 217 330
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgba_bits
//       Access: Published
//  Description: Convenience method for setting the red, green, blue
//               and alpha bits in one go.
////////////////////////////////////////////////////////////////////
77
inline void FrameBufferProperties::set_rgba_bits(int r, int g, int b, int a);

869 12 set_red_bits 0 4 1323 35 FrameBufferProperties::set_red_bits 0 1 218 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_red_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void FrameBufferProperties::set_red_bits(int n);

870 14 set_green_bits 0 4 1323 37 FrameBufferProperties::set_green_bits 0 1 219 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_green_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_green_bits(int n);

871 13 set_blue_bits 0 4 1323 36 FrameBufferProperties::set_blue_bits 0 1 220 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_blue_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_blue_bits(int n);

872 14 set_alpha_bits 0 4 1323 37 FrameBufferProperties::set_alpha_bits 0 1 221 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_alpha_bits(int n);

873 16 set_stencil_bits 0 4 1323 39 FrameBufferProperties::set_stencil_bits 0 1 222 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_stencil_bits(int n);

874 14 set_accum_bits 0 4 1323 37 FrameBufferProperties::set_accum_bits 0 1 223 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_accum_bits(int n);

875 12 set_aux_rgba 0 4 1323 35 FrameBufferProperties::set_aux_rgba 0 1 224 234
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
55
inline void FrameBufferProperties::set_aux_rgba(int n);

876 13 set_aux_hrgba 0 4 1323 36 FrameBufferProperties::set_aux_hrgba 0 1 225 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_hrgba(int n);

877 13 set_aux_float 0 4 1323 36 FrameBufferProperties::set_aux_float 0 1 226 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void FrameBufferProperties::set_aux_float(int n);

878 16 set_multisamples 0 4 1323 39 FrameBufferProperties::set_multisamples 0 1 227 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_multisamples(int n);

879 20 set_coverage_samples 0 4 1323 43 FrameBufferProperties::set_coverage_samples 0 1 228 355
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
////////////////////////////////////////////////////////////////////
63
inline void FrameBufferProperties::set_coverage_samples(int n);

880 16 set_back_buffers 0 4 1323 39 FrameBufferProperties::set_back_buffers 0 1 229 238
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_back_buffers(int n);

881 17 set_indexed_color 0 4 1323 40 FrameBufferProperties::set_indexed_color 0 1 230 239
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline void FrameBufferProperties::set_indexed_color(bool n);

882 13 set_rgb_color 0 4 1323 36 FrameBufferProperties::set_rgb_color 0 1 231 235
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline void FrameBufferProperties::set_rgb_color(bool n);

883 10 set_stereo 0 4 1323 33 FrameBufferProperties::set_stereo 0 1 232 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
54
inline void FrameBufferProperties::set_stereo(bool n);

884 18 set_force_hardware 0 4 1323 41 FrameBufferProperties::set_force_hardware 0 1 233 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void FrameBufferProperties::set_force_hardware(bool n);

885 18 set_force_software 0 4 1323 41 FrameBufferProperties::set_force_software 0 1 234 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline void FrameBufferProperties::set_force_software(bool n);

886 14 set_srgb_color 0 4 1323 37 FrameBufferProperties::set_srgb_color 0 1 235 236
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_srgb_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
58
inline void FrameBufferProperties::set_srgb_color(bool n);

887 15 set_float_color 0 4 1323 38 FrameBufferProperties::set_float_color 0 1 236 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_color
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_float_color(bool n);

888 15 set_float_depth 0 4 1323 38 FrameBufferProperties::set_float_depth 0 1 237 237
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_depth
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline void FrameBufferProperties::set_float_depth(bool n);

889 21 FrameBufferProperties 0 4 1323 44 FrameBufferProperties::FrameBufferProperties 0 2 191 192 473
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
139
FrameBufferProperties::FrameBufferProperties(void);
inline FrameBufferProperties::FrameBufferProperties(FrameBufferProperties const &copy);

890 22 ~FrameBufferProperties 0 4 1323 45 FrameBufferProperties::~FrameBufferProperties 0 0 232
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline FrameBufferProperties::~FrameBufferProperties(void);

891 10 operator = 0 4 1323 33 FrameBufferProperties::operator = 0 1 238 0
74
void FrameBufferProperties::operator =(FrameBufferProperties const &copy);

892 11 get_default 0 4 1323 34 FrameBufferProperties::get_default 0 1 239 395
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
////////////////////////////////////////////////////////////////////
77
static FrameBufferProperties const &FrameBufferProperties::get_default(void);

893 11 operator == 0 4 1323 34 FrameBufferProperties::operator == 0 1 240 0
82
bool FrameBufferProperties::operator ==(FrameBufferProperties const &other) const;

894 11 operator != 0 4 1323 34 FrameBufferProperties::operator != 0 1 241 0
89
inline bool FrameBufferProperties::operator !=(FrameBufferProperties const &other) const;

895 5 clear 0 4 1323 28 FrameBufferProperties::clear 0 1 242 391
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
////////////////////////////////////////////////////////////////////
40
void FrameBufferProperties::clear(void);

896 17 set_all_specified 0 4 1323 40 FrameBufferProperties::set_all_specified 0 1 243 280
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: Marks all bits as having been specified.
////////////////////////////////////////////////////////////////////
52
void FrameBufferProperties::set_all_specified(void);

897 8 subsumes 0 4 1323 31 FrameBufferProperties::subsumes 0 1 244 405
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
////////////////////////////////////////////////////////////////////
79
bool FrameBufferProperties::subsumes(FrameBufferProperties const &other) const;

898 14 add_properties 0 4 1323 37 FrameBufferProperties::add_properties 0 1 245 381
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
////////////////////////////////////////////////////////////////////
79
void FrameBufferProperties::add_properties(FrameBufferProperties const &other);

899 6 output 0 4 1323 29 FrameBufferProperties::output 0 1 246 263
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Generates a string representation.
////////////////////////////////////////////////////////////////////
55
void FrameBufferProperties::output(ostream &out) const;

900 23 set_one_bit_per_channel 0 4 1323 46 FrameBufferProperties::set_one_bit_per_channel 0 1 247 398
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
////////////////////////////////////////////////////////////////////
58
void FrameBufferProperties::set_one_bit_per_channel(void);

901 9 is_stereo 0 4 1323 32 FrameBufferProperties::is_stereo 0 1 248 231
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
57
inline bool FrameBufferProperties::is_stereo(void) const;

902 18 is_single_buffered 0 4 1323 41 FrameBufferProperties::is_single_buffered 0 1 249 240
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
66
inline bool FrameBufferProperties::is_single_buffered(void) const;

903 11 get_quality 0 4 1323 34 FrameBufferProperties::get_quality 0 1 250 1390
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
////////////////////////////////////////////////////////////////////
80
int FrameBufferProperties::get_quality(FrameBufferProperties const &reqs) const;

904 16 is_any_specified 0 4 1323 39 FrameBufferProperties::is_any_specified 0 1 251 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
////////////////////////////////////////////////////////////////////
57
bool FrameBufferProperties::is_any_specified(void) const;

905 8 is_basic 0 4 1323 31 FrameBufferProperties::is_basic 0 1 252 444
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
////////////////////////////////////////////////////////////////////
49
bool FrameBufferProperties::is_basic(void) const;

906 12 get_aux_mask 0 4 1323 35 FrameBufferProperties::get_aux_mask 0 1 253 324
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
52
int FrameBufferProperties::get_aux_mask(void) const;

907 15 get_buffer_mask 0 4 1323 38 FrameBufferProperties::get_buffer_mask 0 1 254 329
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
////////////////////////////////////////////////////////////////////
55
int FrameBufferProperties::get_buffer_mask(void) const;

908 24 verify_hardware_software 0 4 1323 47 FrameBufferProperties::verify_hardware_software 0 1 255 426
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
////////////////////////////////////////////////////////////////////
119
bool FrameBufferProperties::verify_hardware_software(FrameBufferProperties const &props, string const &renderer) const;

909 19 setup_color_texture 0 4 1323 42 FrameBufferProperties::setup_color_texture 0 1 256 597
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_color_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
////////////////////////////////////////////////////////////////////
68
bool FrameBufferProperties::setup_color_texture(Texture *tex) const;

910 19 setup_depth_texture 0 4 1323 42 FrameBufferProperties::setup_depth_texture 0 1 257 597
////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_depth_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
////////////////////////////////////////////////////////////////////
68
bool FrameBufferProperties::setup_depth_texture(Texture *tex) const;

911 22 GraphicsThreadingModel 0 4 1324 46 GraphicsThreadingModel::GraphicsThreadingModel 0 2 258 259 2042
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
////////////////////////////////////////////////////////////////////
170
GraphicsThreadingModel::GraphicsThreadingModel(string const &model = string());
inline GraphicsThreadingModel::GraphicsThreadingModel(GraphicsThreadingModel const &copy);

912 10 operator = 0 4 1324 34 GraphicsThreadingModel::operator = 0 1 260 0
83
inline void GraphicsThreadingModel::operator =(GraphicsThreadingModel const &copy);

913 9 get_model 0 4 1324 33 GraphicsThreadingModel::get_model 0 1 261 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
////////////////////////////////////////////////////////////////////
53
string GraphicsThreadingModel::get_model(void) const;

914 13 get_cull_name 0 4 1324 37 GraphicsThreadingModel::get_cull_name 0 1 262 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
////////////////////////////////////////////////////////////////////
71
inline string const &GraphicsThreadingModel::get_cull_name(void) const;

915 13 set_cull_name 0 4 1324 37 GraphicsThreadingModel::set_cull_name 0 1 263 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
75
inline void GraphicsThreadingModel::set_cull_name(string const &cull_name);

916 14 get_cull_stage 0 4 1324 38 GraphicsThreadingModel::get_cull_stage 0 1 264 454
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_cull_stage(void) const;

917 13 get_draw_name 0 4 1324 37 GraphicsThreadingModel::get_draw_name 0 1 265 392
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
////////////////////////////////////////////////////////////////////
71
inline string const &GraphicsThreadingModel::get_draw_name(void) const;

918 13 set_draw_name 0 4 1324 37 GraphicsThreadingModel::set_draw_name 0 1 266 481
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
////////////////////////////////////////////////////////////////////
75
inline void GraphicsThreadingModel::set_draw_name(string const &cull_name);

919 14 get_draw_stage 0 4 1324 38 GraphicsThreadingModel::get_draw_stage 0 1 267 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
////////////////////////////////////////////////////////////////////
62
inline int GraphicsThreadingModel::get_draw_stage(void) const;

920 16 get_cull_sorting 0 4 1324 40 GraphicsThreadingModel::get_cull_sorting 0 1 268 396
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsThreadingModel::get_cull_sorting(void) const;

921 16 set_cull_sorting 0 4 1324 40 GraphicsThreadingModel::set_cull_sorting 0 1 269 521
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
////////////////////////////////////////////////////////////////////
72
inline void GraphicsThreadingModel::set_cull_sorting(bool cull_sorting);

922 18 is_single_threaded 0 4 1324 42 GraphicsThreadingModel::is_single_threaded 0 1 270 372
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
////////////////////////////////////////////////////////////////////
67
inline bool GraphicsThreadingModel::is_single_threaded(void) const;

923 10 is_default 0 4 1324 34 GraphicsThreadingModel::is_default 0 1 271 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsThreadingModel::is_default(void) const;

924 6 output 0 4 1324 30 GraphicsThreadingModel::output 0 1 272 230
////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void GraphicsThreadingModel::output(ostream &out) const;

925 23 ~GraphicsThreadingModel 0 4 1324 47 GraphicsThreadingModel::~GraphicsThreadingModel 0 0 0
54
GraphicsThreadingModel::~GraphicsThreadingModel(void);

926 11 release_all 0 4 1325 34 GraphicsStateGuardian::release_all 0 1 273 261
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
////////////////////////////////////////////////////////////////////
53
inline void GraphicsStateGuardian::release_all(void);

927 20 release_all_textures 0 4 1325 43 GraphicsStateGuardian::release_all_textures 0 1 274 319
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::release_all_textures(void);

928 20 release_all_samplers 0 4 1325 43 GraphicsStateGuardian::release_all_samplers 0 1 275 319
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_samplers
//       Access: Public
//  Description: Frees the resources for all samplers associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::release_all_samplers(void);

929 17 release_all_geoms 0 4 1325 40 GraphicsStateGuardian::release_all_geoms 0 1 276 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
////////////////////////////////////////////////////////////////////
58
inline int GraphicsStateGuardian::release_all_geoms(void);

930 26 release_all_vertex_buffers 0 4 1325 49 GraphicsStateGuardian::release_all_vertex_buffers 0 1 277 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
67
inline int GraphicsStateGuardian::release_all_vertex_buffers(void);

931 25 release_all_index_buffers 0 4 1325 48 GraphicsStateGuardian::release_all_index_buffers 0 1 278 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::release_all_index_buffers(void);

932 10 set_active 0 4 1325 33 GraphicsStateGuardian::set_active 0 1 279 538
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsStateGuardian::set_active(bool active);

933 9 is_active 0 4 1325 32 GraphicsStateGuardian::is_active 0 1 280 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////
57
inline bool GraphicsStateGuardian::is_active(void) const;

934 8 is_valid 0 4 1325 31 GraphicsStateGuardian::is_valid 0 1 281 435
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsStateGuardian::is_valid(void) const;

935 11 needs_reset 0 4 1325 34 GraphicsStateGuardian::needs_reset 0 1 282 301
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::needs_reset(void) const;

936 21 set_incomplete_render 0 4 1325 44 GraphicsStateGuardian::set_incomplete_render 0 1 283 1472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
////////////////////////////////////////////////////////////////////
81
inline void GraphicsStateGuardian::set_incomplete_render(bool incomplete_render);

937 10 set_loader 0 4 1325 33 GraphicsStateGuardian::set_loader 0 1 284 385
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
62
inline void GraphicsStateGuardian::set_loader(Loader *loader);

938 10 get_loader 0 4 1325 33 GraphicsStateGuardian::get_loader 0 1 285 388
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
////////////////////////////////////////////////////////////////////
61
inline Loader *GraphicsStateGuardian::get_loader(void) const;

939 20 set_shader_generator 0 4 1325 43 GraphicsStateGuardian::set_shader_generator 0 1 286 354
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_generator
//       Access: Public
//  Description: Sets the ShaderGenerator object that will be used
//               by this GSG to generate shaders when necessary.
////////////////////////////////////////////////////////////////////
91
inline void GraphicsStateGuardian::set_shader_generator(ShaderGenerator *shader_generator);

940 20 get_shader_generator 0 4 1325 43 GraphicsStateGuardian::get_shader_generator 0 1 287 357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_generator
//       Access: Public
//  Description: Returns the ShaderGenerator object that will be used
//               by this GSG to generate shaders when necessary.
////////////////////////////////////////////////////////////////////
80
inline ShaderGenerator *GraphicsStateGuardian::get_shader_generator(void) const;

941 8 get_pipe 0 4 1325 31 GraphicsStateGuardian::get_pipe 0 1 288 304
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
////////////////////////////////////////////////////////////////////
65
inline GraphicsPipe *GraphicsStateGuardian::get_pipe(void) const;

942 10 get_engine 0 4 1325 33 GraphicsStateGuardian::get_engine 0 1 289 463
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
GraphicsEngine *GraphicsStateGuardian::get_engine(void) const;

943 19 get_threading_model 0 4 1325 42 GraphicsStateGuardian::get_threading_model 0 1 290 320
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
////////////////////////////////////////////////////////////////////
92
inline GraphicsThreadingModel const &GraphicsStateGuardian::get_threading_model(void) const;

944 11 is_hardware 0 4 1325 34 GraphicsStateGuardian::is_hardware 0 1 291 373
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsStateGuardian::is_hardware(void) const;

945 22 get_max_texture_stages 0 4 1325 45 GraphicsStateGuardian::get_max_texture_stages 0 1 292 859
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
69
inline int GraphicsStateGuardian::get_max_texture_stages(void) const;

946 28 get_max_3d_texture_dimension 0 4 1325 51 GraphicsStateGuardian::get_max_3d_texture_dimension 0 1 293 654
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
75
inline int GraphicsStateGuardian::get_max_3d_texture_dimension(void) const;

947 31 get_max_2d_texture_array_layers 0 4 1325 54 GraphicsStateGuardian::get_max_2d_texture_array_layers 0 1 294 615
//z axis

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_2d_texture_array_layers
//       Access: Published
//  Description: Returns the largest possible number of pages, or -1
//               if there is no particular limit. Returns 0 if 2-d
//               texture arrays not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
78
inline int GraphicsStateGuardian::get_max_2d_texture_array_layers(void) const;

948 26 get_max_cube_map_dimension 0 4 1325 49 GraphicsStateGuardian::get_max_cube_map_dimension 0 1 295 672
//z axis

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
73
inline int GraphicsStateGuardian::get_max_cube_map_dimension(void) const;

949 27 get_max_buffer_texture_size 0 4 1325 50 GraphicsStateGuardian::get_max_buffer_texture_size 0 1 296 609
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_buffer_texture_size
//       Access: Published
//  Description: Returns the largest possible buffer texture size,
//               or -1 if there is no particular limit.  Returns 0
//               if cube map textures are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
74
inline int GraphicsStateGuardian::get_max_buffer_texture_size(void) const;

950 28 get_supports_texture_combine 0 4 1325 51 GraphicsStateGuardian::get_supports_texture_combine 0 1 297 595
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_texture_combine(void) const;

951 33 get_supports_texture_saved_result 0 4 1325 56 GraphicsStateGuardian::get_supports_texture_saved_result 0 1 298 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_texture_saved_result(void) const;

952 25 get_supports_texture_dot3 0 4 1325 48 GraphicsStateGuardian::get_supports_texture_dot3 0 1 299 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_texture_dot3(void) const;

953 23 get_supports_3d_texture 0 4 1325 46 GraphicsStateGuardian::get_supports_3d_texture 0 1 300 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_supports_3d_texture(void) const;

954 29 get_supports_2d_texture_array 0 4 1325 52 GraphicsStateGuardian::get_supports_2d_texture_array 0 1 301 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_2d_texture_array
//       Access: Published
//  Description: Returns true if this GSG can render 2-d textures
//               array.
////////////////////////////////////////////////////////////////////
77
inline bool GraphicsStateGuardian::get_supports_2d_texture_array(void) const;

955 21 get_supports_cube_map 0 4 1325 44 GraphicsStateGuardian::get_supports_cube_map 0 1 302 298
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
////////////////////////////////////////////////////////////////////
69
inline bool GraphicsStateGuardian::get_supports_cube_map(void) const;

956 27 get_supports_buffer_texture 0 4 1325 50 GraphicsStateGuardian::get_supports_buffer_texture 0 1 303 302
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_buffer_texture
//       Access: Published
//  Description: Returns true if this GSG can render buffer textures.
////////////////////////////////////////////////////////////////////
75
inline bool GraphicsStateGuardian::get_supports_buffer_texture(void) const;

957 27 get_supports_cube_map_array 0 4 1325 50 GraphicsStateGuardian::get_supports_cube_map_array 0 1 304 302
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map_array
//       Access: Published
//  Description: Returns true if this GSG can render cube map arrays.
////////////////////////////////////////////////////////////////////
75
inline bool GraphicsStateGuardian::get_supports_cube_map_array(void) const;

958 25 get_supports_tex_non_pow2 0 4 1325 48 GraphicsStateGuardian::get_supports_tex_non_pow2 0 1 305 333
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_supports_tex_non_pow2(void) const;

959 31 get_supports_compressed_texture 0 4 1325 54 GraphicsStateGuardian::get_supports_compressed_texture 0 1 306 423
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
////////////////////////////////////////////////////////////////////
79
inline bool GraphicsStateGuardian::get_supports_compressed_texture(void) const;

960 14 get_max_lights 0 4 1325 37 GraphicsStateGuardian::get_max_lights 0 1 307 579
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
61
inline int GraphicsStateGuardian::get_max_lights(void) const;

961 19 get_max_clip_planes 0 4 1325 42 GraphicsStateGuardian::get_max_clip_planes 0 1 308 588
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
66
inline int GraphicsStateGuardian::get_max_clip_planes(void) const;

962 25 get_max_vertex_transforms 0 4 1325 48 GraphicsStateGuardian::get_max_vertex_transforms 0 1 309 818
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
72
inline int GraphicsStateGuardian::get_max_vertex_transforms(void) const;

963 32 get_max_vertex_transform_indices 0 4 1325 55 GraphicsStateGuardian::get_max_vertex_transform_indices 0 1 310 811
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
79
inline int GraphicsStateGuardian::get_max_vertex_transform_indices(void) const;

964 25 get_copy_texture_inverted 0 4 1325 48 GraphicsStateGuardian::get_copy_texture_inverted 0 1 311 976
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
////////////////////////////////////////////////////////////////////
73
inline bool GraphicsStateGuardian::get_copy_texture_inverted(void) const;

965 28 get_supports_generate_mipmap 0 4 1325 51 GraphicsStateGuardian::get_supports_generate_mipmap 0 1 312 555
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_generate_mipmap(void) const;

966 26 get_supports_depth_texture 0 4 1325 49 GraphicsStateGuardian::get_supports_depth_texture 0 1 313 543
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_texture(void) const;

967 26 get_supports_depth_stencil 0 4 1325 49 GraphicsStateGuardian::get_supports_depth_stencil 0 1 314 475
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_depth_stencil(void) const;

968 28 get_supports_sampler_objects 0 4 1325 51 GraphicsStateGuardian::get_supports_sampler_objects 0 1 315 675
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_sampler_objects
//       Access: Published
//  Description: Returns true if this particular GSG supports the
//               use of sampler objects to record texture sampling
//               parameters separately from the texture objects.
//               This doesn't really affect functionality, but if
//               this is false, it may mean that using the same
//               texture with different SamplerState objects will
//               result in reduced performance.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_sampler_objects(void) const;

969 26 get_supports_basic_shaders 0 4 1325 49 GraphicsStateGuardian::get_supports_basic_shaders 0 1 316 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
////////////////////////////////////////////////////////////////////
74
inline bool GraphicsStateGuardian::get_supports_basic_shaders(void) const;

970 29 get_supports_geometry_shaders 0 4 1325 52 GraphicsStateGuardian::get_supports_geometry_shaders 0 1 317 331
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               geometry shaders.
////////////////////////////////////////////////////////////////////
77
inline bool GraphicsStateGuardian::get_supports_geometry_shaders(void) const;

971 33 get_supports_tessellation_shaders 0 4 1325 56 GraphicsStateGuardian::get_supports_tessellation_shaders 0 1 318 338
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tessellation_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               tesselation shaders.
////////////////////////////////////////////////////////////////////
81
inline bool GraphicsStateGuardian::get_supports_tessellation_shaders(void) const;

972 28 get_supports_compute_shaders 0 4 1325 51 GraphicsStateGuardian::get_supports_compute_shaders 0 1 319 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compute_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               compute shaders.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_compute_shaders(void) const;

973 17 get_supports_glsl 0 4 1325 40 GraphicsStateGuardian::get_supports_glsl 0 1 320 315
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
////////////////////////////////////////////////////////////////////
65
inline bool GraphicsStateGuardian::get_supports_glsl(void) const;

974 20 get_supports_stencil 0 4 1325 43 GraphicsStateGuardian::get_supports_stencil 0 1 321 328
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
////////////////////////////////////////////////////////////////////
68
inline bool GraphicsStateGuardian::get_supports_stencil(void) const;

975 30 get_supports_two_sided_stencil 0 4 1325 53 GraphicsStateGuardian::get_supports_two_sided_stencil 0 1 322 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
////////////////////////////////////////////////////////////////////
78
inline bool GraphicsStateGuardian::get_supports_two_sided_stencil(void) const;

976 32 get_supports_geometry_instancing 0 4 1325 55 GraphicsStateGuardian::get_supports_geometry_instancing 0 1 323 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
////////////////////////////////////////////////////////////////////
80
inline bool GraphicsStateGuardian::get_supports_geometry_instancing(void) const;

977 28 get_supports_occlusion_query 0 4 1325 51 GraphicsStateGuardian::get_supports_occlusion_query 0 1 324 564
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_occlusion_query
//       Access: Published
//  Description: Returns true if this GSG supports an occlusion query.
//               If this is true, then begin_occlusion_query() and
//               end_occlusion_query() may be called to bracket a
//               sequence of draw_triangles() (or whatever) calls to
//               measure pixels that pass the depth test.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_supports_occlusion_query(void) const;

978 24 get_supports_timer_query 0 4 1325 47 GraphicsStateGuardian::get_supports_timer_query 0 1 325 295
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_timer_query
//       Access: Published
//  Description: Returns true if this GSG supports a timer query.
////////////////////////////////////////////////////////////////////
72
inline bool GraphicsStateGuardian::get_supports_timer_query(void) const;

979 24 get_timer_queries_active 0 4 1325 47 GraphicsStateGuardian::get_timer_queries_active 0 1 326 328
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_timer_queries_active
//       Access: Published
//  Description: Returns true if timer queries are currently
//               enabled on this GSG.
////////////////////////////////////////////////////////////////////
72
inline bool GraphicsStateGuardian::get_timer_queries_active(void) const;

980 21 get_max_color_targets 0 4 1325 44 GraphicsStateGuardian::get_max_color_targets 0 1 327 855
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_color_targets
//       Access: Published
//  Description: Returns the maximum number of simultaneous color
//               textures that may be attached for render-to-texture,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority render targets will
//               not be applied.  Use RenderTarget::set_priority() to
//               adjust the relative importance of the different
//               render targets.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
////////////////////////////////////////////////////////////////////
68
inline int GraphicsStateGuardian::get_max_color_targets(void) const;

981 39 get_maximum_simultaneous_render_targets 0 4 1325 62 GraphicsStateGuardian::get_maximum_simultaneous_render_targets 0 1 328 364
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Deprecated.  Use get_max_color_targets() instead,
//               which returns the exact same value.
////////////////////////////////////////////////////////////////////
86
inline int GraphicsStateGuardian::get_maximum_simultaneous_render_targets(void) const;

982 16 get_shader_model 0 4 1325 39 GraphicsStateGuardian::get_shader_model 0 1 329 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
////////////////////////////////////////////////////////////////////
94
inline GraphicsStateGuardian::ShaderModel GraphicsStateGuardian::get_shader_model(void) const;

983 16 set_shader_model 0 4 1325 39 GraphicsStateGuardian::set_shader_model 0 1 330 403
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
////////////////////////////////////////////////////////////////////
101
inline void GraphicsStateGuardian::set_shader_model(GraphicsStateGuardian::ShaderModel shader_model);

984 23 get_supports_cg_profile 0 6 1325 46 GraphicsStateGuardian::get_supports_cg_profile 0 1 331 349
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the
//               specified Cg Shader Profile.
////////////////////////////////////////////////////////////////////
86
virtual bool GraphicsStateGuardian::get_supports_cg_profile(string const &name) const;

985 28 get_color_scale_via_lighting 0 4 1325 51 GraphicsStateGuardian::get_color_scale_via_lighting 0 1 332 499
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
////////////////////////////////////////////////////////////////////
76
inline bool GraphicsStateGuardian::get_color_scale_via_lighting(void) const;

986 27 get_alpha_scale_via_texture 0 4 1325 50 GraphicsStateGuardian::get_alpha_scale_via_texture 0 2 333 334 1116
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
////////////////////////////////////////////////////////////////////
178
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(void) const;
inline bool GraphicsStateGuardian::get_alpha_scale_via_texture(TextureAttrib const *tex_attrib) const;

987 23 get_runtime_color_scale 0 4 1325 46 GraphicsStateGuardian::get_runtime_color_scale 0 1 335 483
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
////////////////////////////////////////////////////////////////////
71
inline bool GraphicsStateGuardian::get_runtime_color_scale(void) const;

988 29 get_alpha_scale_texture_stage 0 4 1325 52 GraphicsStateGuardian::get_alpha_scale_texture_stage 0 1 336 408
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
////////////////////////////////////////////////////////////////////
87
static inline TextureStage *GraphicsStateGuardian::get_alpha_scale_texture_stage(void);

989 21 set_coordinate_system 0 4 1325 44 GraphicsStateGuardian::set_coordinate_system 0 1 337 771
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.  It will
//               automatically be copied from the current lens's
//               coordinate system as each DisplayRegion is rendered.
////////////////////////////////////////////////////////////////////
71
void GraphicsStateGuardian::set_coordinate_system(CoordinateSystem cs);

990 21 get_coordinate_system 0 4 1325 44 GraphicsStateGuardian::get_coordinate_system 0 1 338 457
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
////////////////////////////////////////////////////////////////////
81
inline CoordinateSystem GraphicsStateGuardian::get_coordinate_system(void) const;

991 30 get_internal_coordinate_system 0 6 1325 53 GraphicsStateGuardian::get_internal_coordinate_system 0 1 339 756
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
////////////////////////////////////////////////////////////////////
91
virtual CoordinateSystem GraphicsStateGuardian::get_internal_coordinate_system(void) const;

992 20 get_prepared_objects 0 6 1325 43 GraphicsStateGuardian::get_prepared_objects 0 1 340 411
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
////////////////////////////////////////////////////////////////////
83
virtual PreparedGraphicsObjects *GraphicsStateGuardian::get_prepared_objects(void);

993 9 set_gamma 0 6 1325 32 GraphicsStateGuardian::set_gamma 0 1 341 277
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
////////////////////////////////////////////////////////////////////
65
virtual bool GraphicsStateGuardian::set_gamma(PN_stdfloat gamma);

994 9 get_gamma 0 4 1325 32 GraphicsStateGuardian::get_gamma 0 1 342 262
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
////////////////////////////////////////////////////////////////////
64
PN_stdfloat GraphicsStateGuardian::get_gamma(PN_stdfloat gamma);

995 13 restore_gamma 0 6 1325 36 GraphicsStateGuardian::restore_gamma 0 1 343 276
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsStateGuardian::restore_gamma(void);

996 28 set_texture_quality_override 0 4 1325 51 GraphicsStateGuardian::set_texture_quality_override 0 1 344 749
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
101
inline void GraphicsStateGuardian::set_texture_quality_override(Texture::QualityLevel quality_level);

997 28 get_texture_quality_override 0 4 1325 51 GraphicsStateGuardian::get_texture_quality_override 0 1 345 485
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
////////////////////////////////////////////////////////////////////
93
inline Texture::QualityLevel GraphicsStateGuardian::get_texture_quality_override(void) const;

998 21 get_prepared_textures 0 4 1325 44 GraphicsStateGuardian::get_prepared_textures 0 1 346 0
67
PyObject *GraphicsStateGuardian::get_prepared_textures(void) const;

999 26 traverse_prepared_textures 0 4 1325 49 GraphicsStateGuardian::traverse_prepared_textures 0 0 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::traverse_prepared_textures
//       Access: Public
//  Description: Calls the indicated function on all
//               currently-prepared textures, or until the callback
//               function returns false.
////////////////////////////////////////////////////////////////////
121
void GraphicsStateGuardian::traverse_prepared_textures(GraphicsStateGuardian::TextureCallback *func, void *callback_arg);

1000 17 set_flash_texture 0 4 1325 40 GraphicsStateGuardian::set_flash_texture 0 1 347 1337
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
////////////////////////////////////////////////////////////////////
60
void GraphicsStateGuardian::set_flash_texture(Texture *tex);

1001 19 clear_flash_texture 0 4 1325 42 GraphicsStateGuardian::clear_flash_texture 0 1 348 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
54
void GraphicsStateGuardian::clear_flash_texture(void);

1002 17 get_flash_texture 0 4 1325 40 GraphicsStateGuardian::get_flash_texture 0 1 349 344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
////////////////////////////////////////////////////////////////////
62
Texture *GraphicsStateGuardian::get_flash_texture(void) const;

1003 13 has_extension 0 6 1325 36 GraphicsStateGuardian::has_extension 0 1 350 416
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::has_extension
//       Access: Public, Virtual
//  Description: Returns true if the GSG implements the extension
//               identified by the given string.  This currently
//               is only implemented by the OpenGL back-end.
////////////////////////////////////////////////////////////////////
81
virtual bool GraphicsStateGuardian::has_extension(string const &extension) const;

1004 17 get_driver_vendor 0 6 1325 40 GraphicsStateGuardian::get_driver_vendor 0 1 351 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns the vendor of the video card driver
////////////////////////////////////////////////////////////////////
62
virtual string GraphicsStateGuardian::get_driver_vendor(void);

1005 19 get_driver_renderer 0 6 1325 42 GraphicsStateGuardian::get_driver_renderer 0 1 352 267
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_renderer
//       Access: Public, Virtual
//  Description: Returns GL_Renderer
////////////////////////////////////////////////////////////////////
64
virtual string GraphicsStateGuardian::get_driver_renderer(void);

1006 18 get_driver_version 0 6 1325 41 GraphicsStateGuardian::get_driver_version 0 1 353 470
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version
//       Access: Public, Virtual
//  Description: Returns driver version
//               This has an implementation-defined meaning, and may
//               be "" if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
63
virtual string GraphicsStateGuardian::get_driver_version(void);

1007 24 get_driver_version_major 0 6 1325 47 GraphicsStateGuardian::get_driver_version_major 0 1 354 496
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_major
//       Access: Public, Virtual
//  Description: Returns major version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
66
virtual int GraphicsStateGuardian::get_driver_version_major(void);

1008 24 get_driver_version_minor 0 6 1325 47 GraphicsStateGuardian::get_driver_version_minor 0 1 355 500
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
////////////////////////////////////////////////////////////////////
66
virtual int GraphicsStateGuardian::get_driver_version_minor(void);

1009 31 get_driver_shader_version_major 0 6 1325 54 GraphicsStateGuardian::get_driver_shader_version_major 0 1 356 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_major
//       Access: Public, Virtual
//  Description: Returns the major version of the shader model.
////////////////////////////////////////////////////////////////////
73
virtual int GraphicsStateGuardian::get_driver_shader_version_major(void);

1010 31 get_driver_shader_version_minor 0 6 1325 54 GraphicsStateGuardian::get_driver_shader_version_minor 0 1 357 306
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the shader model.
////////////////////////////////////////////////////////////////////
73
virtual int GraphicsStateGuardian::get_driver_shader_version_minor(void);

1011 9 set_scene 0 4 1325 32 GraphicsStateGuardian::set_scene 0 1 358 539
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
////////////////////////////////////////////////////////////////////
63
bool GraphicsStateGuardian::set_scene(SceneSetup *scene_setup);

1012 9 get_scene 0 6 1325 32 GraphicsStateGuardian::get_scene 0 1 359 279
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
////////////////////////////////////////////////////////////////////
65
virtual SceneSetup *GraphicsStateGuardian::get_scene(void) const;

1013 11 begin_scene 0 6 1325 34 GraphicsStateGuardian::begin_scene 0 1 360 933
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
////////////////////////////////////////////////////////////////////
54
virtual bool GraphicsStateGuardian::begin_scene(void);

1014 9 end_scene 0 6 1325 32 GraphicsStateGuardian::end_scene 0 1 361 565
////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
////////////////////////////////////////////////////////////////////
52
virtual void GraphicsStateGuardian::end_scene(void);

1015 14 get_class_type 0 4 1325 37 GraphicsStateGuardian::get_class_type 0 1 362 0
62
static TypeHandle GraphicsStateGuardian::get_class_type(void);

1016 28 upcast_to_GraphicsOutputBase 0 12 1328 44 GraphicsOutput::upcast_to_GraphicsOutputBase 0 1 448 48
upcast from GraphicsOutput to GraphicsOutputBase
71
GraphicsOutputBase *GraphicsOutput::upcast_to_GraphicsOutputBase(void);

1017 26 downcast_to_GraphicsOutput 0 12 1329 46 GraphicsOutputBase::downcast_to_GraphicsOutput 0 1 449 50
downcast from GraphicsOutputBase to GraphicsOutput
69
GraphicsOutput *GraphicsOutputBase::downcast_to_GraphicsOutput(void);

1018 24 upcast_to_DrawableRegion 0 12 1328 40 GraphicsOutput::upcast_to_DrawableRegion 0 1 450 44
upcast from GraphicsOutput to DrawableRegion
63
DrawableRegion *GraphicsOutput::upcast_to_DrawableRegion(void);

1019 26 downcast_to_GraphicsOutput 0 12 1313 42 DrawableRegion::downcast_to_GraphicsOutput 0 1 451 46
downcast from DrawableRegion to GraphicsOutput
65
GraphicsOutput *DrawableRegion::downcast_to_GraphicsOutput(void);

1020 15 ~GraphicsOutput 0 6 1328 31 GraphicsOutput::~GraphicsOutput 0 0 234
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::Destructor
//       Access: Published, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
46
virtual GraphicsOutput::~GraphicsOutput(void);

1021 7 get_gsg 0 4 1328 23 GraphicsOutput::get_gsg 0 1 363 606
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
////////////////////////////////////////////////////////////////////
66
inline GraphicsStateGuardian *GraphicsOutput::get_gsg(void) const;

1022 8 get_pipe 0 4 1328 24 GraphicsOutput::get_pipe 0 1 364 586
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
////////////////////////////////////////////////////////////////////
58
inline GraphicsPipe *GraphicsOutput::get_pipe(void) const;

1023 10 get_engine 0 4 1328 26 GraphicsOutput::get_engine 0 1 365 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
////////////////////////////////////////////////////////////////////
62
inline GraphicsEngine *GraphicsOutput::get_engine(void) const;

1024 8 get_name 0 4 1328 24 GraphicsOutput::get_name 0 1 366 308
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
////////////////////////////////////////////////////////////////////
58
inline string const &GraphicsOutput::get_name(void) const;

1025 14 count_textures 0 4 1328 30 GraphicsOutput::count_textures 0 1 367 539
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::count_textures(void) const;

1026 11 has_texture 0 4 1328 27 GraphicsOutput::has_texture 0 1 368 318
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
////////////////////////////////////////////////////////////////////
52
inline bool GraphicsOutput::has_texture(void) const;

1027 11 get_texture 0 6 1328 27 GraphicsOutput::get_texture 0 1 369 725
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
////////////////////////////////////////////////////////////////////
69
virtual inline Texture *GraphicsOutput::get_texture(int i = 0) const;

1028 17 get_texture_plane 0 4 1328 33 GraphicsOutput::get_texture_plane 0 1 370 377
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
////////////////////////////////////////////////////////////////////
93
inline DrawableRegion::RenderTexturePlane GraphicsOutput::get_texture_plane(int i = 0) const;

1029 12 get_rtm_mode 0 4 1328 28 GraphicsOutput::get_rtm_mode 0 1 371 378
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
////////////////////////////////////////////////////////////////////
87
inline GraphicsOutput::RenderTextureMode GraphicsOutput::get_rtm_mode(int i = 0) const;

1030 21 clear_render_textures 0 4 1328 37 GraphicsOutput::clear_render_textures 0 1 372 387
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::clear_render_textures(void);

1031 18 add_render_texture 0 4 1328 34 GraphicsOutput::add_render_texture 0 1 373 1875
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
////////////////////////////////////////////////////////////////////
169
void GraphicsOutput::add_render_texture(Texture *tex, GraphicsOutput::RenderTextureMode mode, DrawableRegion::RenderTexturePlane bitplane = ::DrawableRegion::RTP_COUNT);

1032 20 setup_render_texture 0 4 1328 36 GraphicsOutput::setup_render_texture 0 1 374 494
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
////////////////////////////////////////////////////////////////////
86
void GraphicsOutput::setup_render_texture(Texture *tex, bool allow_bind, bool to_ram);

1033 8 get_size 0 4 1328 24 GraphicsOutput::get_size 0 1 375 743
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_size
//       Access: Published
//  Description: Returns the visible size of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
62
inline LVecBase2i const &GraphicsOutput::get_size(void) const;

1034 10 get_x_size 0 4 1328 26 GraphicsOutput::get_x_size 0 1 376 746
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_x_size(void) const;

1035 10 get_y_size 0 4 1328 26 GraphicsOutput::get_y_size 0 1 377 747
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
////////////////////////////////////////////////////////////////////
50
inline int GraphicsOutput::get_y_size(void) const;

1036 11 get_fb_size 0 4 1328 27 GraphicsOutput::get_fb_size 0 1 378 435
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_size
//       Access: Published
//  Description: Returns the internal size of the window or buffer.
//               This is almost always the same as get_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
58
inline LVecBase2i GraphicsOutput::get_fb_size(void) const;

1037 13 get_fb_x_size 0 4 1328 29 GraphicsOutput::get_fb_x_size 0 1 379 440
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_x_size(void) const;

1038 13 get_fb_y_size 0 4 1328 29 GraphicsOutput::get_fb_y_size 0 1 380 441
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
////////////////////////////////////////////////////////////////////
53
inline int GraphicsOutput::get_fb_y_size(void) const;

1039 17 get_sbs_left_size 0 4 1328 33 GraphicsOutput::get_sbs_left_size 0 1 381 515
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel size of the left eye, based on scaling
//               get_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_size().
////////////////////////////////////////////////////////////////////
64
inline LVecBase2i GraphicsOutput::get_sbs_left_size(void) const;

1040 19 get_sbs_left_x_size 0 4 1328 35 GraphicsOutput::get_sbs_left_x_size 0 1 382 522
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the left eye, based on scaling
//               get_x_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
////////////////////////////////////////////////////////////////////
59
inline int GraphicsOutput::get_sbs_left_x_size(void) const;

1041 19 get_sbs_left_y_size 0 4 1328 35 GraphicsOutput::get_sbs_left_y_size 0 1 383 523
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the left eye, based on scaling
//               get_y_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
////////////////////////////////////////////////////////////////////
59
inline int GraphicsOutput::get_sbs_left_y_size(void) const;

1042 18 get_sbs_right_size 0 4 1328 34 GraphicsOutput::get_sbs_right_size 0 1 384 518
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel size of the right eye, based on scaling
//               get_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_size().
////////////////////////////////////////////////////////////////////
65
inline LVecBase2i GraphicsOutput::get_sbs_right_size(void) const;

1043 20 get_sbs_right_x_size 0 4 1328 36 GraphicsOutput::get_sbs_right_x_size 0 1 385 525
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the right eye, based on scaling
//               get_x_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
////////////////////////////////////////////////////////////////////
60
inline int GraphicsOutput::get_sbs_right_x_size(void) const;

1044 20 get_sbs_right_y_size 0 4 1328 36 GraphicsOutput::get_sbs_right_y_size 0 1 386 526
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the right eye, based on scaling
//               get_y_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
////////////////////////////////////////////////////////////////////
60
inline int GraphicsOutput::get_sbs_right_y_size(void) const;

1045 8 has_size 0 4 1328 24 GraphicsOutput::has_size 0 1 387 530
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::has_size(void) const;

1046 8 is_valid 0 4 1328 24 GraphicsOutput::is_valid 0 1 388 326
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool GraphicsOutput::is_valid(void) const;

1047 15 is_nonzero_size 0 4 1328 31 GraphicsOutput::is_nonzero_size 0 1 389 375
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_nonzero_size
//       Access: Published
//  Description: Returns true if the output has a nonzero size in both
//               X and Y, or false if it is zero (and therefore
//               invalid).
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsOutput::is_nonzero_size(void) const;

1048 10 set_active 0 4 1328 26 GraphicsOutput::set_active 0 1 390 380
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
////////////////////////////////////////////////////////////////////
45
void GraphicsOutput::set_active(bool active);

1049 9 is_active 0 6 1328 25 GraphicsOutput::is_active 0 1 391 324
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool GraphicsOutput::is_active(void) const;

1050 12 set_one_shot 0 4 1328 28 GraphicsOutput::set_one_shot 0 1 392 1275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render the
//               current frame and then automatically set itself
//               inactive.  This is particularly useful for buffers
//               that are created for the purposes of
//               render-to-texture, for static textures that don't
//               need to be continually re-rendered once they have
//               been rendered the first time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_one_shot(bool one_shot);

1051 12 get_one_shot 0 4 1328 28 GraphicsOutput::get_one_shot 0 1 393 427
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically set itself inactive after the next
//               frame.
////////////////////////////////////////////////////////////////////
46
bool GraphicsOutput::get_one_shot(void) const;

1052 12 set_inverted 0 4 1328 28 GraphicsOutput::set_inverted 0 1 394 947
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
////////////////////////////////////////////////////////////////////
49
void GraphicsOutput::set_inverted(bool inverted);

1053 12 get_inverted 0 4 1328 28 GraphicsOutput::get_inverted 0 1 395 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
////////////////////////////////////////////////////////////////////
53
inline bool GraphicsOutput::get_inverted(void) const;

1054 13 set_swap_eyes 0 4 1328 29 GraphicsOutput::set_swap_eyes 0 1 396 688
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_swap_eyes
//       Access: Public
//  Description: Changes the "swap eyes" flag.  This flag is normally
//               false.  When it is true, the left and right channels
//               of a stereo DisplayRegion are sent to the opposite
//               channels in the rendering backend.  This is meant to
//               work around hardware that inadvertently swaps the
//               output channels, or hardware for which it cannot be
//               determined which channel is which until runtime.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsOutput::set_swap_eyes(bool swap_eyes);

1055 13 get_swap_eyes 0 4 1328 29 GraphicsOutput::get_swap_eyes 0 1 397 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_swap_eyes
//       Access: Public
//  Description: Returns the current setting of the "swap eyes" flag.
//               See set_swap_eyes().
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsOutput::get_swap_eyes(void) const;

1056 19 set_red_blue_stereo 0 4 1328 35 GraphicsOutput::set_red_blue_stereo 0 1 398 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
////////////////////////////////////////////////////////////////////
139
inline void GraphicsOutput::set_red_blue_stereo(bool red_blue_stereo, unsigned int left_eye_color_mask, unsigned int right_eye_color_mask);

1057 19 get_red_blue_stereo 0 4 1328 35 GraphicsOutput::get_red_blue_stereo 0 1 399 357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
60
inline bool GraphicsOutput::get_red_blue_stereo(void) const;

1058 23 get_left_eye_color_mask 0 4 1328 39 GraphicsOutput::get_left_eye_color_mask 0 1 400 470
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
72
inline unsigned int GraphicsOutput::get_left_eye_color_mask(void) const;

1059 24 get_right_eye_color_mask 0 4 1328 40 GraphicsOutput::get_right_eye_color_mask 0 1 401 472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
////////////////////////////////////////////////////////////////////
73
inline unsigned int GraphicsOutput::get_right_eye_color_mask(void) const;

1060 23 set_side_by_side_stereo 0 4 1328 39 GraphicsOutput::set_side_by_side_stereo 0 2 402 403 2016
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
////////////////////////////////////////////////////////////////////
220
void GraphicsOutput::set_side_by_side_stereo(bool side_by_side_stereo);
void GraphicsOutput::set_side_by_side_stereo(bool side_by_side_stereo, LVecBase4 const &sbs_left_dimensions, LVecBase4 const &sbs_right_dimensions);

1061 23 get_side_by_side_stereo 0 4 1328 39 GraphicsOutput::get_side_by_side_stereo 0 1 404 369
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_side_by_side_stereo
//       Access: Published
//  Description: Returns whether side-by-side stereo mode is in effect for
//               this particular window.  See set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
64
inline bool GraphicsOutput::get_side_by_side_stereo(void) const;

1062 23 get_sbs_left_dimensions 0 4 1328 39 GraphicsOutput::get_sbs_left_dimensions 0 1 405 458
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the left channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
76
inline LVecBase4 const &GraphicsOutput::get_sbs_left_dimensions(void) const;

1063 24 get_sbs_right_dimensions 0 4 1328 40 GraphicsOutput::get_sbs_right_dimensions 0 1 406 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the right channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
////////////////////////////////////////////////////////////////////
77
inline LVecBase4 const &GraphicsOutput::get_sbs_right_dimensions(void) const;

1064 17 get_fb_properties 0 4 1328 33 GraphicsOutput::get_fb_properties 0 1 407 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
////////////////////////////////////////////////////////////////////
82
inline FrameBufferProperties const &GraphicsOutput::get_fb_properties(void) const;

1065 9 is_stereo 0 4 1328 25 GraphicsOutput::is_stereo 0 1 408 447
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsOutput::is_stereo(void) const;

1066 17 clear_delete_flag 0 4 1328 33 GraphicsOutput::clear_delete_flag 0 1 409 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
////////////////////////////////////////////////////////////////////
52
inline void GraphicsOutput::clear_delete_flag(void);

1067 15 get_delete_flag 0 4 1328 31 GraphicsOutput::get_delete_flag 0 1 410 460
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
////////////////////////////////////////////////////////////////////
49
bool GraphicsOutput::get_delete_flag(void) const;

1068 8 set_sort 0 6 1328 24 GraphicsOutput::set_sort 0 1 411 345
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
////////////////////////////////////////////////////////////////////
48
virtual void GraphicsOutput::set_sort(int sort);

1069 8 get_sort 0 4 1328 24 GraphicsOutput::get_sort 0 1 412 432
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
////////////////////////////////////////////////////////////////////
48
inline int GraphicsOutput::get_sort(void) const;

1070 14 set_child_sort 0 4 1328 30 GraphicsOutput::set_child_sort 0 1 413 1026
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
////////////////////////////////////////////////////////////////////
59
inline void GraphicsOutput::set_child_sort(int child_sort);

1071 16 clear_child_sort 0 4 1328 32 GraphicsOutput::clear_child_sort 0 1 414 390
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
////////////////////////////////////////////////////////////////////
51
inline void GraphicsOutput::clear_child_sort(void);

1072 14 get_child_sort 0 4 1328 30 GraphicsOutput::get_child_sort 0 1 415 351
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
////////////////////////////////////////////////////////////////////
54
inline int GraphicsOutput::get_child_sort(void) const;

1073 12 trigger_copy 0 4 1328 28 GraphicsOutput::trigger_copy 0 1 416 376
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
////////////////////////////////////////////////////////////////////
47
inline void GraphicsOutput::trigger_copy(void);

1074 19 make_display_region 0 4 1328 35 GraphicsOutput::make_display_region 0 3 417 418 419 2126
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
////////////////////////////////////////////////////////////////////
264
inline DisplayRegion *GraphicsOutput::make_display_region(void);
inline DisplayRegion *GraphicsOutput::make_display_region(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);
DisplayRegion *GraphicsOutput::make_display_region(LVecBase4 const &dimensions);

1075 24 make_mono_display_region 0 4 1328 40 GraphicsOutput::make_mono_display_region 0 3 420 421 422 2283
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
////////////////////////////////////////////////////////////////////
279
inline DisplayRegion *GraphicsOutput::make_mono_display_region(void);
inline DisplayRegion *GraphicsOutput::make_mono_display_region(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);
DisplayRegion *GraphicsOutput::make_mono_display_region(LVecBase4 const &dimensions);

1076 26 make_stereo_display_region 0 4 1328 42 GraphicsOutput::make_stereo_display_region 0 3 423 424 425 1371
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
////////////////////////////////////////////////////////////////////
303
inline StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(void);
inline StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(PN_stdfloat l, PN_stdfloat r, PN_stdfloat b, PN_stdfloat t);
StereoDisplayRegion *GraphicsOutput::make_stereo_display_region(LVecBase4 const &dimensions);

1077 21 remove_display_region 0 4 1328 37 GraphicsOutput::remove_display_region 0 1 426 492
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
////////////////////////////////////////////////////////////////////
74
bool GraphicsOutput::remove_display_region(DisplayRegion *display_region);

1078 26 remove_all_display_regions 0 4 1328 42 GraphicsOutput::remove_all_display_regions 0 1 427 359
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
////////////////////////////////////////////////////////////////////
54
void GraphicsOutput::remove_all_display_regions(void);

1079 26 get_overlay_display_region 0 4 1328 42 GraphicsOutput::get_overlay_display_region 0 1 428 951
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_overlay_display_region
//       Access: Published
//  Description: Returns the special "overlay" DisplayRegion that is
//               created for each window or buffer.  This
//               DisplayRegion covers the entire window, but cannot be
//               used for rendering.  It is a placeholder only, to
//               indicate the dimensions of the window, and is usually
//               used internally for purposes such as clearing the
//               window, or grabbing a screenshot of the window.
//
//               There are very few applications that require access
//               to this DisplayRegion.  Normally, you should create
//               your own DisplayRegion that covers the window, if you
//               want to render to the window.
////////////////////////////////////////////////////////////////////
77
inline DisplayRegion *GraphicsOutput::get_overlay_display_region(void) const;

1080 26 set_overlay_display_region 0 4 1328 42 GraphicsOutput::set_overlay_display_region 0 1 429 1132
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_overlay_display_region
//       Access: Published
//  Description: Replaces the special "overlay" DisplayRegion that is
//               created for each window or buffer.  See
//               get_overlay_display_region().  This must be a new
//               DisplayRegion that has already been created for this
//               window, for instance via a call to
//               make_mono_display_region().  You are responsible for
//               ensuring that the new DisplayRegion covers the entire
//               window.  The previous overlay display region is not
//               automatically removed; you must explicitly call
//               remove_display_region() on it after replacing it with
//               this method, if you wish it to be removed.
//
//               Normally, there is no reason to change the overlay
//               DisplayRegion, so this method should be used only
//               in very unusual circumstances.
////////////////////////////////////////////////////////////////////
79
void GraphicsOutput::set_overlay_display_region(DisplayRegion *display_region);

1081 23 get_num_display_regions 0 4 1328 39 GraphicsOutput::get_num_display_regions 0 1 430 355
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
////////////////////////////////////////////////////////////////////
56
int GraphicsOutput::get_num_display_regions(void) const;

1082 18 get_display_region 0 4 1328 34 GraphicsOutput::get_display_region 0 1 431 542
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
////////////////////////////////////////////////////////////////////
75
PointerTo< DisplayRegion > GraphicsOutput::get_display_region(int n) const;

1083 30 get_num_active_display_regions 0 4 1328 46 GraphicsOutput::get_num_active_display_regions 0 1 432 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
////////////////////////////////////////////////////////////////////
63
int GraphicsOutput::get_num_active_display_regions(void) const;

1084 25 get_active_display_region 0 4 1328 41 GraphicsOutput::get_active_display_region 0 1 433 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
////////////////////////////////////////////////////////////////////
82
PointerTo< DisplayRegion > GraphicsOutput::get_active_display_region(int n) const;

1085 19 make_texture_buffer 0 4 1328 35 GraphicsOutput::make_texture_buffer 0 1 434 1790
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
////////////////////////////////////////////////////////////////////
163
GraphicsOutput *GraphicsOutput::make_texture_buffer(string const &name, int x_size, int y_size, Texture *tex = 0, bool to_ram = 0, FrameBufferProperties *fbp = 0);

1086 13 make_cube_map 0 4 1328 29 GraphicsOutput::make_cube_map 0 1 435 1206
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
////////////////////////////////////////////////////////////////////
195
GraphicsOutput *GraphicsOutput::make_cube_map(string const &name, int size, NodePath &camera_rig, DrawMask camera_mask = (get_all_camera_mask()), bool to_ram = 0, FrameBufferProperties *fbp = 0);

1087 24 make_screenshot_filename 0 4 1328 40 GraphicsOutput::make_screenshot_filename 0 1 436 806
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
////////////////////////////////////////////////////////////////////
101
static inline Filename GraphicsOutput::make_screenshot_filename(string const &prefix = "screenshot");

1088 23 save_screenshot_default 0 4 1328 39 GraphicsOutput::save_screenshot_default 0 1 437 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
////////////////////////////////////////////////////////////////////
93
inline Filename GraphicsOutput::save_screenshot_default(string const &prefix = "screenshot");

1089 15 save_screenshot 0 4 1328 31 GraphicsOutput::save_screenshot 0 1 438 600
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
104
inline bool GraphicsOutput::save_screenshot(Filename const &filename, string const &image_comment = "");

1090 14 get_screenshot 0 4 1328 30 GraphicsOutput::get_screenshot 0 2 439 440 774
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as Texture, or NULL on
//               failure.
////////////////////////////////////////////////////////////////////
126
inline bool GraphicsOutput::get_screenshot(PNMImage &image);
inline PointerTo< Texture > GraphicsOutput::get_screenshot(void);

1091 16 get_texture_card 0 4 1328 32 GraphicsOutput::get_texture_card 0 1 441 959
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
////////////////////////////////////////////////////////////////////
48
NodePath GraphicsOutput::get_texture_card(void);

1092 18 share_depth_buffer 0 6 1328 34 GraphicsOutput::share_depth_buffer 0 1 442 386
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
////////////////////////////////////////////////////////////////////
81
virtual bool GraphicsOutput::share_depth_buffer(GraphicsOutput *graphics_output);

1093 20 unshare_depth_buffer 0 6 1328 36 GraphicsOutput::unshare_depth_buffer 0 1 443 282
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
////////////////////////////////////////////////////////////////////
56
virtual void GraphicsOutput::unshare_depth_buffer(void);

1094 27 get_supports_render_texture 0 6 1328 43 GraphicsOutput::get_supports_render_texture 0 1 444 477
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_supports_render_texture
//       Access: Published, Virtual
//  Description: Returns true if this particular GraphicsOutput can
//               render directly into a texture, or false if it must
//               always copy-to-texture at the end of each frame to
//               achieve this effect.
////////////////////////////////////////////////////////////////////
69
virtual bool GraphicsOutput::get_supports_render_texture(void) const;

1095 10 flip_ready 0 6 1328 26 GraphicsOutput::flip_ready 0 1 445 497
// These are not intended to be called directly by the user, but
// they're published anyway since they might occasionally be useful
// for low-level debugging.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::flip_ready
//       Access: Published, Virtual
//  Description: Returns true if a frame has been rendered and needs
//               to be flipped, false otherwise.
////////////////////////////////////////////////////////////////////
52
virtual bool GraphicsOutput::flip_ready(void) const;

1096 8 get_host 0 6 1328 24 GraphicsOutput::get_host 0 1 446 502
////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_host
//       Access: Published, Virtual
//  Description: This is normally called only from within
//               make_texture_buffer().  When called on a
//               ParasiteBuffer, it returns the host of that buffer;
//               but when called on some other buffer, it returns the
//               buffer itself.
////////////////////////////////////////////////////////////////////
55
virtual GraphicsOutput *GraphicsOutput::get_host(void);

1097 14 get_class_type 0 4 1328 30 GraphicsOutput::get_class_type 0 1 447 0
55
static TypeHandle GraphicsOutput::get_class_type(void);

1098 26 ~GraphicsWindowInputDevice 0 4 1332 53 GraphicsWindowInputDevice::~GraphicsWindowInputDevice 0 0 233
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
60
GraphicsWindowInputDevice::~GraphicsWindowInputDevice(void);

1099 11 button_down 0 4 1332 38 GraphicsWindowInputDevice::button_down 0 2 452 453 702
// The following interface is for the various kinds of
// GraphicsWindows to record the data incoming on the device.

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////
151
inline void GraphicsWindowInputDevice::button_down(ButtonHandle button);
void GraphicsWindowInputDevice::button_down(ButtonHandle button, double time);

1100 18 button_resume_down 0 4 1332 45 GraphicsWindowInputDevice::button_resume_down 0 2 454 455 938
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Published
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Published
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
////////////////////////////////////////////////////////////////////
165
inline void GraphicsWindowInputDevice::button_resume_down(ButtonHandle button);
void GraphicsWindowInputDevice::button_resume_down(ButtonHandle button, double time);

1101 9 button_up 0 4 1332 36 GraphicsWindowInputDevice::button_up 0 2 456 457 578
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////
147
inline void GraphicsWindowInputDevice::button_up(ButtonHandle button);
void GraphicsWindowInputDevice::button_up(ButtonHandle button, double time);

1102 9 keystroke 0 4 1332 36 GraphicsWindowInputDevice::keystroke 0 2 458 459 620
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Published
//  Description: Records that the indicated keystroke has been
//               generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Published
//  Description: Records that the indicated keystroke has been
//               generated.
////////////////////////////////////////////////////////////////////
131
inline void GraphicsWindowInputDevice::keystroke(int keycode);
void GraphicsWindowInputDevice::keystroke(int keycode, double time);

1103 10 focus_lost 0 4 1332 37 GraphicsWindowInputDevice::focus_lost 0 2 460 461 1344
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Published
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Published
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
////////////////////////////////////////////////////////////////////
113
inline void GraphicsWindowInputDevice::focus_lost(void);
void GraphicsWindowInputDevice::focus_lost(double time);

1104 15 raw_button_down 0 4 1332 42 GraphicsWindowInputDevice::raw_button_down 0 2 462 463 592
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
////////////////////////////////////////////////////////////////////
159
inline void GraphicsWindowInputDevice::raw_button_down(ButtonHandle button);
void GraphicsWindowInputDevice::raw_button_down(ButtonHandle button, double time);

1105 13 raw_button_up 0 4 1332 40 GraphicsWindowInputDevice::raw_button_up 0 2 464 465 586
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
////////////////////////////////////////////////////////////////////
155
inline void GraphicsWindowInputDevice::raw_button_up(ButtonHandle button);
void GraphicsWindowInputDevice::raw_button_up(ButtonHandle button, double time);

1106 21 set_pointer_in_window 0 4 1332 48 GraphicsWindowInputDevice::set_pointer_in_window 0 2 466 467 834
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
////////////////////////////////////////////////////////////////////
176
inline void GraphicsWindowInputDevice::set_pointer_in_window(double x, double y);
inline void GraphicsWindowInputDevice::set_pointer_in_window(double x, double y, double time);

1107 25 set_pointer_out_of_window 0 4 1332 52 GraphicsWindowInputDevice::set_pointer_out_of_window 0 2 468 469 798
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
////////////////////////////////////////////////////////////////////
150
inline void GraphicsWindowInputDevice::set_pointer_out_of_window(void);
inline void GraphicsWindowInputDevice::set_pointer_out_of_window(double time);

1108 9 candidate 0 4 1332 36 GraphicsWindowInputDevice::candidate 0 1 470 466
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::candidate
//       Access: Published
//  Description: Records that the indicated candidate string has been
//               highlighted.  This is used to implement IME support
//               for typing in international languages, especially
//               Chinese/Japanese/Korean.
////////////////////////////////////////////////////////////////////
140
void GraphicsWindowInputDevice::candidate(wstring const &candidate_string, size_t highlight_start, size_t highlight_end, size_t cursor_pos);

1109 11 set_pointer 0 4 1332 38 GraphicsWindowInputDevice::set_pointer 0 1 471 284
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer
//       Access: Published
//  Description: Records that a mouse movement has taken place.
////////////////////////////////////////////////////////////////////
89
void GraphicsWindowInputDevice::set_pointer(bool inwin, double x, double y, double time);

1110 5 get_x 0 4 1333 16 TouchInfo::get_x 0 1 472 0
27
int TouchInfo::get_x(void);

1111 5 get_y 0 4 1333 16 TouchInfo::get_y 0 1 473 0
27
int TouchInfo::get_y(void);

1112 6 get_id 0 4 1333 17 TouchInfo::get_id 0 1 474 0
28
int TouchInfo::get_id(void);

1113 9 get_flags 0 4 1333 20 TouchInfo::get_flags 0 1 475 0
31
int TouchInfo::get_flags(void);

1114 10 ~TouchInfo 0 4 1333 21 TouchInfo::~TouchInfo 0 0 0
28
TouchInfo::~TouchInfo(void);

1115 8 get_hwnd 0 4 1335 40 GraphicsWindowProcCallbackData::get_hwnd 0 1 476 280
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_hwnd
//       Access: Published
//  Description: Returns the Windows proc hwnd parameter.
////////////////////////////////////////////////////////////////////
64
inline int GraphicsWindowProcCallbackData::get_hwnd(void) const;

1116 7 get_msg 0 4 1335 39 GraphicsWindowProcCallbackData::get_msg 0 1 477 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_msg
//       Access: Published
//  Description: Returns the Windows proc msg parameter.
////////////////////////////////////////////////////////////////////
63
inline int GraphicsWindowProcCallbackData::get_msg(void) const;

1117 10 get_wparam 0 4 1335 42 GraphicsWindowProcCallbackData::get_wparam 0 1 478 284
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_wparam
//       Access: Published
//  Description: Returns the Windows proc wparam parameter.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsWindowProcCallbackData::get_wparam(void) const;

1118 10 get_lparam 0 4 1335 42 GraphicsWindowProcCallbackData::get_lparam 0 1 479 284
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_lparam
//       Access: Published
//  Description: Returns the Windows proc lparam parameter.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsWindowProcCallbackData::get_lparam(void) const;

1119 14 is_touch_event 0 4 1335 46 GraphicsWindowProcCallbackData::is_touch_event 0 1 480 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::is_touch_event
//       Access: Public, Virtual
//  Description: Returns whether the event is a touch event.
//               
////////////////////////////////////////////////////////////////////
58
bool GraphicsWindowProcCallbackData::is_touch_event(void);

1120 15 get_num_touches 0 4 1335 47 GraphicsWindowProcCallbackData::get_num_touches 0 1 481 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_num_touches
//       Access: Public, Virtual
//  Description: Returns the current number of touches on the window.
//               
////////////////////////////////////////////////////////////////////
58
int GraphicsWindowProcCallbackData::get_num_touches(void);

1121 14 get_touch_info 0 4 1335 46 GraphicsWindowProcCallbackData::get_touch_info 0 1 482 330
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_touch_info
//       Access: Public, Virtual
//  Description: Returns the TouchInfo object describing the specified touch.
//               
////////////////////////////////////////////////////////////////////
68
TouchInfo GraphicsWindowProcCallbackData::get_touch_info(int index);

1122 14 get_class_type 0 4 1335 46 GraphicsWindowProcCallbackData::get_class_type 0 1 483 0
71
static TypeHandle GraphicsWindowProcCallbackData::get_class_type(void);

1123 31 ~GraphicsWindowProcCallbackData 0 4 1335 63 GraphicsWindowProcCallbackData::~GraphicsWindowProcCallbackData 0 0 0
70
GraphicsWindowProcCallbackData::~GraphicsWindowProcCallbackData(void);

1124 14 get_properties 0 4 1337 30 GraphicsWindow::get_properties 0 1 484 275
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
////////////////////////////////////////////////////////////////////
66
WindowProperties const GraphicsWindow::get_properties(void) const;

1125 24 get_requested_properties 0 4 1337 40 GraphicsWindow::get_requested_properties 0 1 485 459
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
////////////////////////////////////////////////////////////////////
76
WindowProperties const GraphicsWindow::get_requested_properties(void) const;

1126 25 clear_rejected_properties 0 4 1337 41 GraphicsWindow::clear_rejected_properties 0 1 486 346
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
////////////////////////////////////////////////////////////////////
53
void GraphicsWindow::clear_rejected_properties(void);

1127 23 get_rejected_properties 0 4 1337 39 GraphicsWindow::get_rejected_properties 0 1 487 563
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
////////////////////////////////////////////////////////////////////
69
WindowProperties GraphicsWindow::get_rejected_properties(void) const;

1128 18 request_properties 0 4 1337 34 GraphicsWindow::request_properties 0 1 488 603
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
////////////////////////////////////////////////////////////////////
86
void GraphicsWindow::request_properties(WindowProperties const &requested_properties);

1129 9 is_closed 0 4 1337 25 GraphicsWindow::is_closed 0 1 489 631
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
////////////////////////////////////////////////////////////////////
50
inline bool GraphicsWindow::is_closed(void) const;

1130 13 is_fullscreen 0 4 1337 29 GraphicsWindow::is_fullscreen 0 1 490 329
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsWindow::is_fullscreen(void) const;

1131 16 set_window_event 0 4 1337 32 GraphicsWindow::set_window_event 0 1 491 630
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
////////////////////////////////////////////////////////////////////
66
void GraphicsWindow::set_window_event(string const &window_event);

1132 16 get_window_event 0 4 1337 32 GraphicsWindow::get_window_event 0 1 492 421
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
////////////////////////////////////////////////////////////////////
52
string GraphicsWindow::get_window_event(void) const;

1133 23 set_close_request_event 0 4 1337 39 GraphicsWindow::set_close_request_event 0 1 493 1393
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
////////////////////////////////////////////////////////////////////
80
void GraphicsWindow::set_close_request_event(string const &close_request_event);

1134 23 get_close_request_event 0 4 1337 39 GraphicsWindow::get_close_request_event 0 1 494 515
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
////////////////////////////////////////////////////////////////////
59
string GraphicsWindow::get_close_request_event(void) const;

1135 18 set_unexposed_draw 0 4 1337 34 GraphicsWindow::set_unexposed_draw 0 1 495 894
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_unexposed_draw
//       Access: Published
//  Description: If this flag is false, the window is redrawn only
//               after it has received a recent "unexpose" or "draw"
//               event from the underlying windowing systme.  If this
//               flag is true, the window is redrawn every frame
//               regardless.  Setting this false may prevent the
//               window from redrawing unnecessarily when it is
//               hidden, and may play nicer with other windows on the
//               desktop, but may adversely affect frame rate even
//               when the window is fully visible; setting it true will
//               ensure that the window contents are always current.
////////////////////////////////////////////////////////////////////
68
inline void GraphicsWindow::set_unexposed_draw(bool unexposed_draw);

1136 18 get_unexposed_draw 0 4 1337 34 GraphicsWindow::get_unexposed_draw 0 1 496 259
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_unexposed_draw
//       Access: Published
//  Description: See set_unexposed_draw().
////////////////////////////////////////////////////////////////////
59
inline bool GraphicsWindow::get_unexposed_draw(void) const;

1137 17 get_window_handle 0 4 1337 33 GraphicsWindow::get_window_handle 0 1 497 641
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
////////////////////////////////////////////////////////////////////
67
inline WindowHandle *GraphicsWindow::get_window_handle(void) const;

1138 21 get_num_input_devices 0 4 1337 37 GraphicsWindow::get_num_input_devices 0 1 498 626
// Mouse and keyboard routines

////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
////////////////////////////////////////////////////////////////////
54
int GraphicsWindow::get_num_input_devices(void) const;

1139 21 get_input_device_name 0 4 1337 37 GraphicsWindow::get_input_device_name 0 1 499 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
////////////////////////////////////////////////////////////////////
63
string GraphicsWindow::get_input_device_name(int device) const;

1140 11 has_pointer 0 4 1337 27 GraphicsWindow::has_pointer 0 1 500 366
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
////////////////////////////////////////////////////////////////////
51
bool GraphicsWindow::has_pointer(int device) const;

1141 12 has_keyboard 0 4 1337 28 GraphicsWindow::has_keyboard 0 1 501 314
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
////////////////////////////////////////////////////////////////////
52
bool GraphicsWindow::has_keyboard(int device) const;

1142 16 get_keyboard_map 0 6 1337 32 GraphicsWindow::get_keyboard_map 0 1 502 348
////////////////////////////////////////////////////////////////////
//     Function: x11GraphicsWindow::get_keyboard_map
//       Access: Published, Virtual
//  Description: Returns a ButtonMap containing the association
//               between raw buttons and virtual buttons.
////////////////////////////////////////////////////////////////////
64
virtual ButtonMap *GraphicsWindow::get_keyboard_map(void) const;

1143 21 enable_pointer_events 0 4 1337 37 GraphicsWindow::enable_pointer_events 0 1 503 278
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
////////////////////////////////////////////////////////////////////
55
void GraphicsWindow::enable_pointer_events(int device);

1144 22 disable_pointer_events 0 4 1337 38 GraphicsWindow::disable_pointer_events 0 1 504 280
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
////////////////////////////////////////////////////////////////////
56
void GraphicsWindow::disable_pointer_events(int device);

1145 19 enable_pointer_mode 0 4 1337 35 GraphicsWindow::enable_pointer_mode 0 1 505 285
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
////////////////////////////////////////////////////////////////////
67
void GraphicsWindow::enable_pointer_mode(int device, double speed);

1146 20 disable_pointer_mode 0 4 1337 36 GraphicsWindow::disable_pointer_mode 0 1 506 289
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
////////////////////////////////////////////////////////////////////
54
void GraphicsWindow::disable_pointer_mode(int device);

1147 11 get_pointer 0 4 1337 27 GraphicsWindow::get_pointer 0 1 507 471
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth
//               input device's pointer.  This is deprecated; use
//               get_pointer_device().get_pointer() instead, or for
//               raw mice, use the InputDeviceManager interface.
////////////////////////////////////////////////////////////////////
56
MouseData GraphicsWindow::get_pointer(int device) const;

1148 12 move_pointer 0 6 1337 28 GraphicsWindow::move_pointer 0 1 508 540
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
////////////////////////////////////////////////////////////////////
68
virtual bool GraphicsWindow::move_pointer(int device, int x, int y);

1149 9 close_ime 0 6 1337 25 GraphicsWindow::close_ime 0 1 509 274
////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
////////////////////////////////////////////////////////////////////
45
virtual void GraphicsWindow::close_ime(void);

1150 14 get_class_type 0 4 1337 30 GraphicsWindow::get_class_type 0 1 510 0
55
static TypeHandle GraphicsWindow::get_class_type(void);

1151 10 get_window 0 4 1339 54 CallbackGraphicsWindow::WindowCallbackData::get_window 0 1 523 306
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::WindowCallbackData::get_window
//       Access: Published
//  Description: Returns the window this callback was triggered from.
////////////////////////////////////////////////////////////////////
98
inline CallbackGraphicsWindow *CallbackGraphicsWindow::WindowCallbackData::get_window(void) const;

1152 14 get_class_type 0 4 1339 58 CallbackGraphicsWindow::WindowCallbackData::get_class_type 0 1 524 0
83
static TypeHandle CallbackGraphicsWindow::WindowCallbackData::get_class_type(void);

1153 19 ~WindowCallbackData 0 4 1339 63 CallbackGraphicsWindow::WindowCallbackData::~WindowCallbackData 0 0 0
70
CallbackGraphicsWindow::WindowCallbackData::~WindowCallbackData(void);

1154 14 get_class_type 0 4 1340 58 CallbackGraphicsWindow::EventsCallbackData::get_class_type 0 1 525 0
83
static TypeHandle CallbackGraphicsWindow::EventsCallbackData::get_class_type(void);

1155 19 ~EventsCallbackData 0 4 1340 63 CallbackGraphicsWindow::EventsCallbackData::~EventsCallbackData 0 0 0
70
CallbackGraphicsWindow::EventsCallbackData::~EventsCallbackData(void);

1156 14 get_properties 0 4 1341 62 CallbackGraphicsWindow::PropertiesCallbackData::get_properties 0 1 526 504
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::PropertiesCallbackData::get_properties
//       Access: Published
//  Description: Returns the WindowProperties object that this
//               callback should process.  Any properties that are
//               handled should be removed from this object;
//               properties that are unhandled should be left alone.
////////////////////////////////////////////////////////////////////
100
inline WindowProperties &CallbackGraphicsWindow::PropertiesCallbackData::get_properties(void) const;

1157 14 get_class_type 0 4 1341 62 CallbackGraphicsWindow::PropertiesCallbackData::get_class_type 0 1 527 0
87
static TypeHandle CallbackGraphicsWindow::PropertiesCallbackData::get_class_type(void);

1158 23 ~PropertiesCallbackData 0 4 1341 71 CallbackGraphicsWindow::PropertiesCallbackData::~PropertiesCallbackData 0 0 0
78
CallbackGraphicsWindow::PropertiesCallbackData::~PropertiesCallbackData(void);

1159 17 get_callback_type 0 4 1343 61 CallbackGraphicsWindow::RenderCallbackData::get_callback_type 0 1 528 467
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_callback_type
//       Access: Published
//  Description: Since the render callback is shared for several
//               functions, this method is needed to indicate which
//               particular function is being invoked with this
//               callback.
////////////////////////////////////////////////////////////////////
124
inline CallbackGraphicsWindow::RenderCallbackType CallbackGraphicsWindow::RenderCallbackData::get_callback_type(void) const;

1160 14 get_frame_mode 0 4 1343 58 CallbackGraphicsWindow::RenderCallbackData::get_frame_mode 0 1 529 507
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_frame_mode
//       Access: Published
//  Description: If the callback type (returned by get_callback_type)
//               is RCT_begin_frame or RCT_end_frame, then this method
//               will return the particular frame mode indicating
//               what, precisely, we want to do this frame.
////////////////////////////////////////////////////////////////////
104
inline GraphicsOutput::FrameMode CallbackGraphicsWindow::RenderCallbackData::get_frame_mode(void) const;

1161 15 set_render_flag 0 4 1343 59 CallbackGraphicsWindow::RenderCallbackData::set_render_flag 0 1 530 549
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::set_render_flag
//       Access: Published
//  Description: If the callback type is RCT_begin_frame, this call is
//               available to specify the return value from the
//               begin_frame() call.  If this is true (the default),
//               the frame is rendered normally; if it is false, the
//               frame is omitted.
////////////////////////////////////////////////////////////////////
90
inline void CallbackGraphicsWindow::RenderCallbackData::set_render_flag(bool render_flag);

1162 15 get_render_flag 0 4 1343 59 CallbackGraphicsWindow::RenderCallbackData::get_render_flag 0 1 531 347
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_render_flag
//       Access: Published
//  Description: Returns the current setting of the render flag.  See
//               set_render_flag().
////////////////////////////////////////////////////////////////////
84
inline bool CallbackGraphicsWindow::RenderCallbackData::get_render_flag(void) const;

1163 14 get_class_type 0 4 1343 58 CallbackGraphicsWindow::RenderCallbackData::get_class_type 0 1 532 0
83
static TypeHandle CallbackGraphicsWindow::RenderCallbackData::get_class_type(void);

1164 19 ~RenderCallbackData 0 4 1343 63 CallbackGraphicsWindow::RenderCallbackData::~RenderCallbackData 0 0 0
70
CallbackGraphicsWindow::RenderCallbackData::~RenderCallbackData(void);

1165 19 set_events_callback 0 4 1338 43 CallbackGraphicsWindow::set_events_callback 0 1 511 829
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_events_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is polled for window events, including
//               mouse and keyboard events, as well as window resize
//               events and other system-generated events.
//
//               This callback will receive a
//               CallbackGraphicsWindow::EventsCallbackData.
//
//               This callback should process any system-generated
//               events, and call data->upcall() to process requested
//               property change requests made via
//               request_properties().
////////////////////////////////////////////////////////////////////
80
inline void CallbackGraphicsWindow::set_events_callback(CallbackObject *object);

1166 21 clear_events_callback 0 4 1338 45 CallbackGraphicsWindow::clear_events_callback 0 1 512 331
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_events_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_events_callback().
////////////////////////////////////////////////////////////////////
64
inline void CallbackGraphicsWindow::clear_events_callback(void);

1167 19 get_events_callback 0 4 1338 43 CallbackGraphicsWindow::get_events_callback 0 1 513 299
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_events_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_events_callback().
////////////////////////////////////////////////////////////////////
79
inline CallbackObject *CallbackGraphicsWindow::get_events_callback(void) const;

1168 23 set_properties_callback 0 4 1338 47 CallbackGraphicsWindow::set_properties_callback 0 1 514 1100
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_properties_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window receives a property change request from
//               user code (e.g. via request_properties).
//
//               This callback will receive a
//               CallbackGraphicsWindow::PropertiesCallbackData, which
//               provides a get_properties() method that returns a
//               modifiable reference to a WindowsProperties object.
//               This object will contain only those properties
//               requested by user code.  The callback should handle
//               any of the requests it finds, including and
//               especially set_open(), and remove them from the
//               object when it has handled them.  Any unhandled
//               properties should be left unchanged in the properties
//               object.
////////////////////////////////////////////////////////////////////
84
inline void CallbackGraphicsWindow::set_properties_callback(CallbackObject *object);

1169 25 clear_properties_callback 0 4 1338 49 CallbackGraphicsWindow::clear_properties_callback 0 1 515 339
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_properties_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_properties_callback().
////////////////////////////////////////////////////////////////////
68
inline void CallbackGraphicsWindow::clear_properties_callback(void);

1170 23 get_properties_callback 0 4 1338 47 CallbackGraphicsWindow::get_properties_callback 0 1 516 307
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_properties_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_properties_callback().
////////////////////////////////////////////////////////////////////
83
inline CallbackObject *CallbackGraphicsWindow::get_properties_callback(void) const;

1171 19 set_render_callback 0 4 1338 43 CallbackGraphicsWindow::set_render_callback 0 1 517 702
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_render_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is invoked (in the draw thread) to render
//               its contents, and/or flip the graphics buffers.
//
//               This callback will actually serve several different
//               functions.  It receivces a RenderCallbackData, and
//               you can query data->get_callback_type() to return the
//               actual function of each particular callback.
////////////////////////////////////////////////////////////////////
80
inline void CallbackGraphicsWindow::set_render_callback(CallbackObject *object);

1172 21 clear_render_callback 0 4 1338 45 CallbackGraphicsWindow::clear_render_callback 0 1 518 331
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_render_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_render_callback().
////////////////////////////////////////////////////////////////////
64
inline void CallbackGraphicsWindow::clear_render_callback(void);

1173 19 get_render_callback 0 4 1338 43 CallbackGraphicsWindow::get_render_callback 0 1 519 299
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_render_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_render_callback().
////////////////////////////////////////////////////////////////////
79
inline CallbackObject *CallbackGraphicsWindow::get_render_callback(void) const;

1174 16 get_input_device 0 4 1338 40 CallbackGraphicsWindow::get_input_device 0 1 520 480
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_input_device
//       Access: Published
//  Description: Returns a writable reference to the nth input device
//               (mouse).  This is intended to be used for the window
//               implementation to record mouse and keyboard input
//               information for the Panda system.
////////////////////////////////////////////////////////////////////
80
GraphicsWindowInputDevice &CallbackGraphicsWindow::get_input_device(int device);

1175 19 create_input_device 0 4 1338 43 CallbackGraphicsWindow::create_input_device 0 1 521 385
////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::create_input_device
//       Access: Published
//  Description: Adds a new input device (mouse) to the window with
//               the indicated name.  Returns the index of the new
//               device.
////////////////////////////////////////////////////////////////////
68
int CallbackGraphicsWindow::create_input_device(string const &name);

1176 14 get_class_type 0 4 1338 38 CallbackGraphicsWindow::get_class_type 0 1 522 0
63
static TypeHandle CallbackGraphicsWindow::get_class_type(void);

1177 9 get_width 0 20 1344 22 DisplayMode::get_width 0 1 537 34
getter for int DisplayMode::width;
39
int DisplayMode::get_width(void) const;

1178 9 set_width 0 36 1344 22 DisplayMode::set_width 0 1 536 34
setter for int DisplayMode::width;
39
void DisplayMode::set_width(int value);

1179 10 get_height 0 20 1344 23 DisplayMode::get_height 0 1 539 35
getter for int DisplayMode::height;
40
int DisplayMode::get_height(void) const;

1180 10 set_height 0 36 1344 23 DisplayMode::set_height 0 1 538 35
setter for int DisplayMode::height;
40
void DisplayMode::set_height(int value);

1181 18 get_bits_per_pixel 0 20 1344 31 DisplayMode::get_bits_per_pixel 0 1 541 43
getter for int DisplayMode::bits_per_pixel;
48
int DisplayMode::get_bits_per_pixel(void) const;

1182 18 set_bits_per_pixel 0 36 1344 31 DisplayMode::set_bits_per_pixel 0 1 540 43
setter for int DisplayMode::bits_per_pixel;
48
void DisplayMode::set_bits_per_pixel(int value);

1183 16 get_refresh_rate 0 20 1344 29 DisplayMode::get_refresh_rate 0 1 543 41
getter for int DisplayMode::refresh_rate;
46
int DisplayMode::get_refresh_rate(void) const;

1184 16 set_refresh_rate 0 36 1344 29 DisplayMode::set_refresh_rate 0 1 542 41
setter for int DisplayMode::refresh_rate;
46
void DisplayMode::set_refresh_rate(int value);

1185 19 get_fullscreen_only 0 20 1344 32 DisplayMode::get_fullscreen_only 0 1 545 44
getter for int DisplayMode::fullscreen_only;
49
int DisplayMode::get_fullscreen_only(void) const;

1186 19 set_fullscreen_only 0 36 1344 32 DisplayMode::set_fullscreen_only 0 1 544 44
setter for int DisplayMode::fullscreen_only;
49
void DisplayMode::set_fullscreen_only(int value);

1187 11 operator == 0 4 1344 24 DisplayMode::operator == 0 1 533 0
62
bool DisplayMode::operator ==(DisplayMode const &other) const;

1188 11 operator != 0 4 1344 24 DisplayMode::operator != 0 1 534 0
62
bool DisplayMode::operator !=(DisplayMode const &other) const;

1189 6 output 0 4 1344 19 DisplayMode::output 0 1 535 218
////////////////////////////////////////////////////////////////////
//     Function: DisplayMode::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
void DisplayMode::output(ostream &out) const;

1190 12 ~DisplayMode 0 4 1344 25 DisplayMode::~DisplayMode 0 0 0
32
DisplayMode::~DisplayMode(void);

1191 19 ~DisplayInformation 0 4 1346 39 DisplayInformation::~DisplayInformation 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
DisplayInformation::~DisplayInformation(void);

1192 18 DisplayInformation 0 4 1346 38 DisplayInformation::DisplayInformation 0 1 546 231
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
DisplayInformation::DisplayInformation(void);

1193 17 get_display_state 0 4 1346 37 DisplayInformation::get_display_state 0 1 547 220
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_display_state(void);

1194 24 get_maximum_window_width 0 4 1346 44 DisplayInformation::get_maximum_window_width 0 1 548 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
int DisplayInformation::get_maximum_window_width(void);

1195 25 get_maximum_window_height 0 4 1346 45 DisplayInformation::get_maximum_window_height 0 1 549 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_maximum_window_height(void);

1196 25 get_window_bits_per_pixel 0 4 1346 45 DisplayInformation::get_window_bits_per_pixel 0 1 550 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
int DisplayInformation::get_window_bits_per_pixel(void);

1197 23 get_total_display_modes 0 4 1346 43 DisplayInformation::get_total_display_modes 0 1 551 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
int DisplayInformation::get_total_display_modes(void);

1198 16 get_display_mode 0 4 1346 36 DisplayInformation::get_display_mode 0 1 552 235
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
75
DisplayMode const &DisplayInformation::get_display_mode(int display_index);

1199 22 get_display_mode_width 0 4 1346 42 DisplayInformation::get_display_mode_width 0 1 553 281
// Older interface for display modes.

////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
int DisplayInformation::get_display_mode_width(int display_index);

1200 23 get_display_mode_height 0 4 1346 43 DisplayInformation::get_display_mode_height 0 1 554 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
int DisplayInformation::get_display_mode_height(int display_index);

1201 31 get_display_mode_bits_per_pixel 0 4 1346 51 DisplayInformation::get_display_mode_bits_per_pixel 0 1 555 251
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
75
int DisplayInformation::get_display_mode_bits_per_pixel(int display_index);

1202 29 get_display_mode_refresh_rate 0 4 1346 49 DisplayInformation::get_display_mode_refresh_rate 0 1 556 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
int DisplayInformation::get_display_mode_refresh_rate(int display_index);

1203 32 get_display_mode_fullscreen_only 0 4 1346 52 DisplayInformation::get_display_mode_fullscreen_only 0 1 557 252
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
76
int DisplayInformation::get_display_mode_fullscreen_only(int display_index);

1204 16 get_shader_model 0 4 1346 36 DisplayInformation::get_shader_model 0 1 558 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
78
GraphicsStateGuardian::ShaderModel DisplayInformation::get_shader_model(void);

1205 16 get_video_memory 0 4 1346 36 DisplayInformation::get_video_memory 0 1 559 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_video_memory(void);

1206 18 get_texture_memory 0 4 1346 38 DisplayInformation::get_texture_memory 0 1 560 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_texture_memory(void);

1207 25 update_memory_information 0 4 1346 45 DisplayInformation::update_memory_information 0 1 561 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
void DisplayInformation::update_memory_information(void);

1208 19 get_physical_memory 0 4 1346 39 DisplayInformation::get_physical_memory 0 1 562 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
PN_uint64 DisplayInformation::get_physical_memory(void);

1209 29 get_available_physical_memory 0 4 1346 49 DisplayInformation::get_available_physical_memory 0 1 563 249
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
66
PN_uint64 DisplayInformation::get_available_physical_memory(void);

1210 18 get_page_file_size 0 4 1346 38 DisplayInformation::get_page_file_size 0 1 564 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
PN_uint64 DisplayInformation::get_page_file_size(void);

1211 28 get_available_page_file_size 0 4 1346 48 DisplayInformation::get_available_page_file_size 0 1 565 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
PN_uint64 DisplayInformation::get_available_page_file_size(void);

1212 26 get_process_virtual_memory 0 4 1346 46 DisplayInformation::get_process_virtual_memory 0 1 566 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
PN_uint64 DisplayInformation::get_process_virtual_memory(void);

1213 36 get_available_process_virtual_memory 0 4 1346 56 DisplayInformation::get_available_process_virtual_memory 0 1 567 256
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
73
PN_uint64 DisplayInformation::get_available_process_virtual_memory(void);

1214 15 get_memory_load 0 4 1346 35 DisplayInformation::get_memory_load 0 1 568 235
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_memory_load(void);

1215 20 get_page_fault_count 0 4 1346 40 DisplayInformation::get_page_fault_count 0 1 569 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
57
PN_uint64 DisplayInformation::get_page_fault_count(void);

1216 18 get_process_memory 0 4 1346 38 DisplayInformation::get_process_memory 0 1 570 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
PN_uint64 DisplayInformation::get_process_memory(void);

1217 23 get_peak_process_memory 0 4 1346 43 DisplayInformation::get_peak_process_memory 0 1 571 243
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
60
PN_uint64 DisplayInformation::get_peak_process_memory(void);

1218 19 get_page_file_usage 0 4 1346 39 DisplayInformation::get_page_file_usage 0 1 572 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
PN_uint64 DisplayInformation::get_page_file_usage(void);

1219 24 get_peak_page_file_usage 0 4 1346 44 DisplayInformation::get_peak_page_file_usage 0 1 573 244
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
PN_uint64 DisplayInformation::get_peak_page_file_usage(void);

1220 13 get_vendor_id 0 4 1346 33 DisplayInformation::get_vendor_id 0 1 574 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_vendor_id(void);

1221 13 get_device_id 0 4 1346 33 DisplayInformation::get_device_id 0 1 575 233
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
int DisplayInformation::get_device_id(void);

1222 18 get_driver_product 0 4 1346 38 DisplayInformation::get_driver_product 0 1 576 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_product(void);

1223 18 get_driver_version 0 4 1346 38 DisplayInformation::get_driver_version 0 1 577 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_driver_version(void);

1224 22 get_driver_sub_version 0 4 1346 42 DisplayInformation::get_driver_sub_version 0 1 578 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
int DisplayInformation::get_driver_sub_version(void);

1225 16 get_driver_build 0 4 1346 36 DisplayInformation::get_driver_build 0 1 579 236
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
47
int DisplayInformation::get_driver_build(void);

1226 21 get_driver_date_month 0 4 1346 41 DisplayInformation::get_driver_date_month 0 1 580 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
52
int DisplayInformation::get_driver_date_month(void);

1227 19 get_driver_date_day 0 4 1346 39 DisplayInformation::get_driver_date_day 0 1 581 239
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
int DisplayInformation::get_driver_date_day(void);

1228 20 get_driver_date_year 0 4 1346 40 DisplayInformation::get_driver_date_year 0 1 582 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_driver_date_year(void);

1229 18 get_cpu_id_version 0 4 1346 38 DisplayInformation::get_cpu_id_version 0 1 583 238
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_cpu_id_version(void);

1230 15 get_cpu_id_size 0 4 1346 35 DisplayInformation::get_cpu_id_size 0 1 584 312
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
////////////////////////////////////////////////////////////////////
46
int DisplayInformation::get_cpu_id_size(void);

1231 15 get_cpu_id_data 0 4 1346 35 DisplayInformation::get_cpu_id_data 0 1 585 309
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
////////////////////////////////////////////////////////////////////
60
unsigned int DisplayInformation::get_cpu_id_data(int index);

1232 21 get_cpu_vendor_string 0 4 1346 41 DisplayInformation::get_cpu_vendor_string 0 1 586 242
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
60
char const *DisplayInformation::get_cpu_vendor_string(void);

1233 20 get_cpu_brand_string 0 4 1346 40 DisplayInformation::get_cpu_brand_string 0 1 587 241
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
char const *DisplayInformation::get_cpu_brand_string(void);

1234 27 get_cpu_version_information 0 4 1346 47 DisplayInformation::get_cpu_version_information 0 1 588 248
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
67
unsigned int DisplayInformation::get_cpu_version_information(void);

1235 19 get_cpu_brand_index 0 4 1346 39 DisplayInformation::get_cpu_brand_index 0 1 589 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
////////////////////////////////////////////////////////////////////
59
unsigned int DisplayInformation::get_cpu_brand_index(void);

1236 17 get_cpu_frequency 0 4 1346 37 DisplayInformation::get_cpu_frequency 0 1 590 237
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
PN_uint64 DisplayInformation::get_cpu_frequency(void);

1237 12 get_cpu_time 0 4 1346 32 DisplayInformation::get_cpu_time 0 1 591 232
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
49
PN_uint64 DisplayInformation::get_cpu_time(void);

1238 25 get_maximum_cpu_frequency 0 4 1346 45 DisplayInformation::get_maximum_cpu_frequency 0 1 592 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PN_uint64 DisplayInformation::get_maximum_cpu_frequency(void);

1239 25 get_current_cpu_frequency 0 4 1346 45 DisplayInformation::get_current_cpu_frequency 0 1 593 245
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
PN_uint64 DisplayInformation::get_current_cpu_frequency(void);

1240 20 update_cpu_frequency 0 4 1346 40 DisplayInformation::update_cpu_frequency 0 1 594 240
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
68
void DisplayInformation::update_cpu_frequency(int processor_number);

1241 17 get_num_cpu_cores 0 4 1346 37 DisplayInformation::get_num_cpu_cores 0 1 595 405
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
////////////////////////////////////////////////////////////////////
48
int DisplayInformation::get_num_cpu_cores(void);

1242 20 get_num_logical_cpus 0 4 1346 40 DisplayInformation::get_num_logical_cpus 0 1 596 411
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_num_logical_cpus(void);

1243 20 get_os_version_major 0 4 1346 40 DisplayInformation::get_os_version_major 0 1 597 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_major(void);

1244 20 get_os_version_minor 0 4 1346 40 DisplayInformation::get_os_version_minor 0 1 598 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_minor(void);

1245 20 get_os_version_build 0 4 1346 40 DisplayInformation::get_os_version_build 0 1 599 263
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
////////////////////////////////////////////////////////////////////
51
int DisplayInformation::get_os_version_build(void);

1246 18 get_os_platform_id 0 4 1346 38 DisplayInformation::get_os_platform_id 0 1 600 260
////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
////////////////////////////////////////////////////////////////////
49
int DisplayInformation::get_os_platform_id(void);

1247 16 get_cull_handler 0 4 1348 47 DisplayRegionCullCallbackData::get_cull_handler 0 1 601 364
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
////////////////////////////////////////////////////////////////////
80
inline CullHandler *DisplayRegionCullCallbackData::get_cull_handler(void) const;

1248 15 get_scene_setup 0 4 1348 46 DisplayRegionCullCallbackData::get_scene_setup 0 1 602 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionCullCallbackData::get_scene_setup(void) const;

1249 14 get_class_type 0 4 1348 45 DisplayRegionCullCallbackData::get_class_type 0 1 603 0
70
static TypeHandle DisplayRegionCullCallbackData::get_class_type(void);

1250 30 ~DisplayRegionCullCallbackData 0 4 1348 61 DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData 0 0 0
68
DisplayRegionCullCallbackData::~DisplayRegionCullCallbackData(void);

1251 15 get_cull_result 0 4 1349 46 DisplayRegionDrawCallbackData::get_cull_result 0 1 604 388
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
////////////////////////////////////////////////////////////////////
78
inline CullResult *DisplayRegionDrawCallbackData::get_cull_result(void) const;

1252 15 get_scene_setup 0 4 1349 46 DisplayRegionDrawCallbackData::get_scene_setup 0 1 605 360
////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
////////////////////////////////////////////////////////////////////
78
inline SceneSetup *DisplayRegionDrawCallbackData::get_scene_setup(void) const;

1253 14 get_class_type 0 4 1349 45 DisplayRegionDrawCallbackData::get_class_type 0 1 606 0
70
static TypeHandle DisplayRegionDrawCallbackData::get_class_type(void);

1254 30 ~DisplayRegionDrawCallbackData 0 4 1349 61 DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData 0 0 0
68
DisplayRegionDrawCallbackData::~DisplayRegionDrawCallbackData(void);

1255 23 DisplaySearchParameters 0 4 1350 48 DisplaySearchParameters::DisplaySearchParameters 0 1 607 236
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
DisplaySearchParameters::DisplaySearchParameters(void);

1256 24 ~DisplaySearchParameters 0 4 1350 49 DisplaySearchParameters::~DisplaySearchParameters 0 0 235
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
56
DisplaySearchParameters::~DisplaySearchParameters(void);

1257 17 set_minimum_width 0 4 1350 42 DisplaySearchParameters::set_minimum_width 0 1 608 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_minimum_width(int minimum_width);

1258 17 set_maximum_width 0 4 1350 42 DisplaySearchParameters::set_maximum_width 0 1 609 242
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
void DisplaySearchParameters::set_maximum_width(int maximum_width);

1259 18 set_minimum_height 0 4 1350 43 DisplaySearchParameters::set_minimum_height 0 1 610 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_minimum_height(int minimum_height);

1260 18 set_maximum_height 0 4 1350 43 DisplaySearchParameters::set_maximum_height 0 1 611 243
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
69
void DisplaySearchParameters::set_maximum_height(int maximum_height);

1261 26 set_minimum_bits_per_pixel 0 4 1350 51 DisplaySearchParameters::set_minimum_bits_per_pixel 0 1 612 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_minimum_bits_per_pixel(int minimum_bits_per_pixel);

1262 26 set_maximum_bits_per_pixel 0 4 1350 51 DisplaySearchParameters::set_maximum_bits_per_pixel 0 1 613 251
////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
85
void DisplaySearchParameters::set_maximum_bits_per_pixel(int maximum_bits_per_pixel);

1263 8 set_size 0 6 1351 24 GraphicsBuffer::set_size 0 1 614 548
////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
52
virtual void GraphicsBuffer::set_size(int x, int y);

1264 14 get_class_type 0 4 1351 30 GraphicsBuffer::get_class_type 0 1 615 0
55
static TypeHandle GraphicsBuffer::get_class_type(void);

1265 14 GraphicsEngine 0 4 1352 30 GraphicsEngine::GraphicsEngine 0 1 616 448
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
////////////////////////////////////////////////////////////////////
55
GraphicsEngine::GraphicsEngine(Pipeline *pipeline = 0);

1266 19 set_threading_model 0 4 1352 35 GraphicsEngine::set_threading_model 0 1 617 422
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
////////////////////////////////////////////////////////////////////
88
void GraphicsEngine::set_threading_model(GraphicsThreadingModel const &threading_model);

1267 19 get_threading_model 0 4 1352 35 GraphicsEngine::get_threading_model 0 1 618 347
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
////////////////////////////////////////////////////////////////////
71
GraphicsThreadingModel GraphicsEngine::get_threading_model(void) const;

1268 15 get_render_lock 0 4 1352 31 GraphicsEngine::get_render_lock 0 1 619 520
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_render_lock
//       Access: Published
//  Description: Returns a ReMutex object that is held by the
//               GraphicsEngine during the entire call to
//               render_frame().  While you hold this lock you can be
//               confident that no part of the frame will be rendered
//               (at least by the app thread).
////////////////////////////////////////////////////////////////////
66
inline ReMutex const &GraphicsEngine::get_render_lock(void) const;

1269 13 set_auto_flip 0 4 1352 29 GraphicsEngine::set_auto_flip 0 1 620 925
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
////////////////////////////////////////////////////////////////////
58
inline void GraphicsEngine::set_auto_flip(bool auto_flip);

1270 13 get_auto_flip 0 4 1352 29 GraphicsEngine::get_auto_flip 0 1 621 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
////////////////////////////////////////////////////////////////////
54
inline bool GraphicsEngine::get_auto_flip(void) const;

1271 15 set_portal_cull 0 4 1352 31 GraphicsEngine::set_portal_cull 0 1 622 325
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
////////////////////////////////////////////////////////////////////
56
inline void GraphicsEngine::set_portal_cull(bool value);

1272 15 get_portal_cull 0 4 1352 31 GraphicsEngine::get_portal_cull 0 1 623 287
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
////////////////////////////////////////////////////////////////////
56
inline bool GraphicsEngine::get_portal_cull(void) const;

1273 18 set_default_loader 0 4 1352 34 GraphicsEngine::set_default_loader 0 1 624 398
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
63
inline void GraphicsEngine::set_default_loader(Loader *loader);

1274 18 get_default_loader 0 4 1352 34 GraphicsEngine::get_default_loader 0 1 625 410
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
////////////////////////////////////////////////////////////////////
62
inline Loader *GraphicsEngine::get_default_loader(void) const;

1275 11 make_output 0 4 1352 27 GraphicsEngine::make_output 0 1 626 0
235
GraphicsOutput *GraphicsEngine::make_output(GraphicsPipe *pipe, string const &name, int sort, FrameBufferProperties const &fb_prop, WindowProperties const &win_prop, int flags, GraphicsStateGuardian *gsg = 0, GraphicsOutput *host = 0);

1276 11 make_buffer 0 4 1352 27 GraphicsEngine::make_buffer 0 2 627 628 1950
// Syntactic shorthand versions of make_output

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
////////////////////////////////////////////////////////////////////
261
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsOutput *host, string const &name, int sort, int x_size, int y_size);
inline GraphicsOutput *GraphicsEngine::make_buffer(GraphicsStateGuardian *gsg, string const &name, int sort, int x_size, int y_size);

1277 13 make_parasite 0 4 1352 29 GraphicsEngine::make_parasite 0 1 629 265
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
////////////////////////////////////////////////////////////////////
129
inline GraphicsOutput *GraphicsEngine::make_parasite(GraphicsOutput *host, string const &name, int sort, int x_size, int y_size);

1278 10 add_window 0 4 1352 26 GraphicsEngine::add_window 0 1 630 632
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::add_window
//       Access: Published
//  Description: This can be used to add a newly-created
//               GraphicsOutput object (and its GSG) to the engine's
//               list of windows, and requests that it be opened.
//               This shouldn't be called by user code as
//               make_output normally does this under the hood; it
//               may be useful in esoteric cases in which a custom
//               window object is used.
////////////////////////////////////////////////////////////////////
66
bool GraphicsEngine::add_window(GraphicsOutput *window, int sort);

1279 13 remove_window 0 4 1352 29 GraphicsEngine::remove_window 0 1 631 1357
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
////////////////////////////////////////////////////////////////////
59
bool GraphicsEngine::remove_window(GraphicsOutput *window);

1280 18 remove_all_windows 0 4 1352 34 GraphicsEngine::remove_all_windows 0 1 632 412
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
////////////////////////////////////////////////////////////////////
46
void GraphicsEngine::remove_all_windows(void);

1281 17 reset_all_windows 0 4 1352 33 GraphicsEngine::reset_all_windows 0 1 633 465
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to
//               release/create old/new framebuffer
////////////////////////////////////////////////////////////////////
55
void GraphicsEngine::reset_all_windows(bool swapchain);

1282 8 is_empty 0 4 1352 24 GraphicsEngine::is_empty 0 1 634 360
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
////////////////////////////////////////////////////////////////////
42
bool GraphicsEngine::is_empty(void) const;

1283 15 get_num_windows 0 4 1352 31 GraphicsEngine::get_num_windows 0 1 635 313
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
////////////////////////////////////////////////////////////////////
48
int GraphicsEngine::get_num_windows(void) const;

1284 10 get_window 0 4 1352 26 GraphicsEngine::get_window 0 1 636 316
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
////////////////////////////////////////////////////////////////////
56
GraphicsOutput *GraphicsEngine::get_window(int n) const;

1285 12 render_frame 0 4 1352 28 GraphicsEngine::render_frame 0 1 637 334
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::render_frame(void);

1286 12 open_windows 0 4 1352 28 GraphicsEngine::open_windows 0 1 638 658
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
////////////////////////////////////////////////////////////////////
40
void GraphicsEngine::open_windows(void);

1287 10 sync_frame 0 4 1352 26 GraphicsEngine::sync_frame 0 1 639 558
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::sync_frame(void);

1288 10 ready_flip 0 4 1352 26 GraphicsEngine::ready_flip 0 1 640 962
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::ready_flip
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing. Returns when all threads have
//               actually finished drawing, as opposed to 'sync_frame'
//               we seems to return once all draw calls have been submitted.
//               Calling 'flip_frame' after this function should immediately
//               cause a buffer flip.  This function will only work in
//               opengl right now, for all other graphics pipelines it will
//               simply return immediately.  In opengl it's a bit of a hack:
//               it will attempt to read a single pixel from the frame buffer to
//               force the graphics card to finish drawing before it returns
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::ready_flip(void);

1289 10 flip_frame 0 4 1352 26 GraphicsEngine::flip_frame 0 1 641 516
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
////////////////////////////////////////////////////////////////////
38
void GraphicsEngine::flip_frame(void);

1290 20 extract_texture_data 0 4 1352 36 GraphicsEngine::extract_texture_data 0 1 642 1560
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
84
bool GraphicsEngine::extract_texture_data(Texture *tex, GraphicsStateGuardian *gsg);

1291 16 dispatch_compute 0 4 1352 32 GraphicsEngine::dispatch_compute 0 1 643 1071
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::dispatch_compute
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to dispatch
//               the compute shader in the given ShaderAttrib using
//               the given work group counts.  This can act as an
//               interface for running a one-off compute shader,
//               without having to store it in the scene graph using
//               a ComputeNode.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               The return value is true if the operation is
//               successful, false otherwise.
////////////////////////////////////////////////////////////////////
124
void GraphicsEngine::dispatch_compute(LVecBase3i const &work_groups, ShaderAttrib const *sattr, GraphicsStateGuardian *gsg);

1292 14 get_global_ptr 0 4 1352 30 GraphicsEngine::get_global_ptr 0 1 644 237
////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description:
////////////////////////////////////////////////////////////////////
60
static GraphicsEngine *GraphicsEngine::get_global_ptr(void);

1293 18 get_num_pipe_types 0 4 1354 41 GraphicsPipeSelection::get_num_pipe_types 0 1 645 382
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
////////////////////////////////////////////////////////////////////
58
int GraphicsPipeSelection::get_num_pipe_types(void) const;

1294 13 get_pipe_type 0 4 1354 36 GraphicsPipeSelection::get_pipe_type 0 1 646 323
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
////////////////////////////////////////////////////////////////////
61
TypeHandle GraphicsPipeSelection::get_pipe_type(int n) const;

1295 16 print_pipe_types 0 4 1354 39 GraphicsPipeSelection::print_pipe_types 0 1 647 348
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
////////////////////////////////////////////////////////////////////
57
void GraphicsPipeSelection::print_pipe_types(void) const;

1296 9 make_pipe 0 4 1354 32 GraphicsPipeSelection::make_pipe 0 2 648 649 1109
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
////////////////////////////////////////////////////////////////////
199
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(string const &type_name, string const &module_name = string());
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_pipe(TypeHandle type);

1297 16 make_module_pipe 0 4 1354 39 GraphicsPipeSelection::make_module_pipe 0 1 650 430
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
////////////////////////////////////////////////////////////////////
93
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_module_pipe(string const &module_name);

1298 17 make_default_pipe 0 4 1354 40 GraphicsPipeSelection::make_default_pipe 0 1 651 426
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
////////////////////////////////////////////////////////////////////
73
PointerTo< GraphicsPipe > GraphicsPipeSelection::make_default_pipe(void);

1299 19 get_num_aux_modules 0 4 1354 42 GraphicsPipeSelection::get_num_aux_modules 0 1 652 472
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
////////////////////////////////////////////////////////////////////
66
inline int GraphicsPipeSelection::get_num_aux_modules(void) const;

1300 16 load_aux_modules 0 4 1354 39 GraphicsPipeSelection::load_aux_modules 0 1 653 391
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
////////////////////////////////////////////////////////////////////
51
void GraphicsPipeSelection::load_aux_modules(void);

1301 14 get_global_ptr 0 4 1354 37 GraphicsPipeSelection::get_global_ptr 0 1 654 327
////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
////////////////////////////////////////////////////////////////////
81
static inline GraphicsPipeSelection *GraphicsPipeSelection::get_global_ptr(void);

1302 8 make_int 0 4 1355 28 NativeWindowHandle::make_int 0 1 655 607
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
////////////////////////////////////////////////////////////////////
77
static PointerTo< WindowHandle > NativeWindowHandle::make_int(size_t window);

1303 15 make_subprocess 0 4 1355 35 NativeWindowHandle::make_subprocess 0 1 656 636
////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
////////////////////////////////////////////////////////////////////
95
static PointerTo< WindowHandle > NativeWindowHandle::make_subprocess(Filename const &filename);

1304 14 get_class_type 0 4 1355 34 NativeWindowHandle::get_class_type 0 1 657 0
59
static TypeHandle NativeWindowHandle::get_class_type(void);

1305 19 ~NativeWindowHandle 0 4 1355 39 NativeWindowHandle::~NativeWindowHandle 0 0 0
46
NativeWindowHandle::~NativeWindowHandle(void);

1306 8 set_size 0 4 1356 24 ParasiteBuffer::set_size 0 1 658 548
////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
////////////////////////////////////////////////////////////////////
44
void ParasiteBuffer::set_size(int x, int y);

1307 14 get_class_type 0 4 1356 30 ParasiteBuffer::get_class_type 0 1 659 0
55
static TypeHandle ParasiteBuffer::get_class_type(void);

659
1 0 0 7 3 1359 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsDevice::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this device is
//               associated with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1357  
2 0 0 7 4 1361 0 0 0 0 
3 0 0 6 8 1364 0 0 694 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::is_valid
//       Access: Published
//  Description: Returns false if this pipe is known to be invalid,
//               meaning that an attempt to create a GraphicsWindow
//               with the pipe will certainly fail.  Returns true if
//               the pipe is probably valid (is this case, an attempt
//               to create a GraphicsWindow should succeed, but might
//               still fail).
//
//               Use the GraphicsEngine class to create a
//               GraphicsWindow on a particular pipe.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
4 0 0 6 9 1345 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_supported_types
//       Access: Published
//  Description: Returns the mask of bits that represents the kinds of
//               GraphicsOutput objects this pipe might be able to
//               successfully create.  The return value is the union
//               of bits in GraphicsPipe::OutputTypes that represents
//               the set of GraphicsOutput types.
//
//               A 1 bit in a particular position is not a guarantee
//               of success, but a 0 bit is a guarantee of failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
5 0 0 6 10 1364 0 0 766 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::supports_type
//       Access: Published
//  Description: A convenience function to ask if a particular type or
//               types of GraphicsObjects are supported.  The
//               parameter is a union of one or more bits defined in
//               GrpahicsPipe::OutputTypes.
//
//               Returns true if all of the requested types are listed
//               in the supported_types mask, false if any one of them
//               is not.  This is not a guarantee that the indicated
//               output type will successfully be created when it is
//               attempted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1362  5 flags 1 1345  
6 0 0 6 11 1345 0 0 547 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_width
//       Access: Published
//  Description: Returns the width of the entire display, if it is
//               known.  This may return 0.  This is not a guarantee
//               that windows (particularly fullscreen windows) may
//               not be created larger than this width, but it is
//               intended to provide a hint to the application.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
7 0 0 6 12 1345 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_height
//       Access: Published
//  Description: Returns the height of the entire display, if it is
//               known.  This may return 0.  See the caveats for
//               get_display_width().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1362  
8 0 0 6 13 1365 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::get_display_information
//       Access: Published
//  Description: Gets the pipe's DisplayInformation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1359  
9 0 0 4 14 1366 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipe::lookup_cpu_data
//       Access: Public, Virtual
//  Description: Looks up the detailed CPU information and stores it
//               in _display_information, if supported by the OS.
//               This may take a second or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1359  
10 0 0 6 15 1367 0 0 0 1 4 this 3 1362  
11 0 0 7 16 1361 0 0 0 0 
12 0 0 4 20 1366 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the color
//               buffer should be cleared every frame.  If this is
//               true, the color buffer will be cleared to the color
//               indicated by set_clear_color(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1368  18 clear_color_active 1 1364  
13 0 0 6 21 1364 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_color_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
14 0 0 4 22 1366 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the depth
//               buffer should be cleared every frame.  If this is
//               true, the depth buffer will be cleared to the depth
//               value indicated by set_clear_depth(); otherwise, it
//               will be left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1368  18 clear_depth_active 1 1364  
15 0 0 6 23 1364 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the depth buffer should be cleared
//               every frame.  See set_clear_depth_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
16 0 0 4 24 1366 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_stencil_active
//       Access: Published
//  Description: Toggles the flag that indicates whether the stencil
//               buffer should be cleared every frame.  If this is
//               true, the stencil buffer will be cleared to the value
//               indicated by set_clear_stencil(); otherwise, it will be
//               left alone.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1368  20 clear_stencil_active 1 1364  
17 0 0 6 25 1364 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil_active
//       Access: Published
//  Description: Returns the current setting of the flag that
//               indicates whether the color buffer should be cleared
//               every frame.  See set_clear_stencil_active().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
18 0 0 4 26 1366 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_color
//       Access: Published
//  Description: Sets the clear color to the indicated value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1368  5 color 1 1371  
19 0 0 6 27 1371 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_color
//       Access: Published
//  Description: Returns the current clear color value.  This is
//               the value that will be used to clear the color buffer
//               every frame, but only if get_clear_color_active()
//               returns true.  If get_clear_color_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
20 0 0 4 28 1366 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_depth
//       Access: Published
//  Description: Sets the clear depth to the indicated value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1368  5 depth 1 1376  
21 0 0 6 29 1376 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_depth
//       Access: Published
//  Description: Returns the current clear depth value.  This is
//               the value that will be used to clear the depth buffer
//               every frame, but only if get_clear_depth_active()
//               returns true.  If get_clear_depth_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
22 0 0 4 30 1366 0 0 0 2 4 this 3 1368  7 stencil 1 1378  
23 0 0 6 31 1378 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_stencil
//       Access: Published
//  Description: Returns the current clear stencil value.  This is
//               the value that will be used to clear the stencil buffer
//               every frame, but only if get_clear_stencil_active()
//               returns true.  If get_clear_stencil_active() returns
//               false, this is meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
24 0 0 4 32 1366 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_active
//       Access: Published, Virtual
//  Description: Sets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1368  1 n 1 1345  16 clear_aux_active 1 1364  
25 0 0 6 33 1364 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_active
//       Access: Published, Virtual
//  Description: Gets the clear-active flag for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1369  1 n 1 1345  
26 0 0 4 34 1366 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_clear_value
//       Access: Published, Virtual
//  Description: Sets the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1368  1 n 1 1345  11 clear_value 1 1371  
27 0 0 6 35 1371 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_clear_value
//       Access: Published, Virtual
//  Description: Returns the clear value for any bitplane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1369  1 n 1 1345  
28 0 0 4 36 1366 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::disable_clears
//       Access: Published, Virtual
//  Description: Disables both the color and depth clear.  See
//               set_clear_color_active and set_clear_depth_active.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1368  
29 0 0 6 37 1364 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::is_any_clear_active
//       Access: Published, Virtual
//  Description: Returns true if any of the clear types (so far there
//               are just color or depth) have been set active, or
//               false if none of them are active and there is no need
//               to clear.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
30 0 0 4 38 1366 0 0 1485 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::set_pixel_zoom
//       Access: Published, Virtual
//  Description: Sets the amount by which the pixels of the region are
//               scaled internally when filling the image interally.
//               Setting this number larger makes the pixels blockier,
//               but may make the rendering faster, particularly for
//               software renderers.  Setting this number to 2.0
//               reduces the number of pixels that have to be filled
//               by the renderer by a factor of 2.0.  It doesn't make
//               sense to set this lower than 1.0.
//
//               It is possible to set this on either individual
//               DisplayRegions or on overall GraphicsWindows, but you
//               will get better performance for setting it on the
//               window rather than its individual DisplayRegions.
//               Also, you may not set it on a DisplayRegion that
//               doesn't have both clear_color() and clear_depth()
//               enabled.
//
//               This property is only supported on renderers for
//               which it is particularly useful--currently, this is
//               the tinydisplay software renderer.  Other kinds of
//               renderers allow you to set this property, but ignore
//               it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1368  10 pixel_zoom 1 1376  
31 0 0 6 39 1376 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_zoom
//       Access: Published
//  Description: Returns the value set by set_pixel_zoom(), regardless
//               of whether it is being respected or not.  Also see
//               get_pixel_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
32 0 0 6 40 1376 0 0 650 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_pixel_factor
//       Access: Published
//  Description: Returns the amount by which the height and width of
//               the region will be scaled internally, based on the
//               zoom factor set by set_pixel_zoom().  This will
//               return 1.0 if the pixel_zoom was not set or if it is
//               not being respected (for instance, because the
//               underlying renderer doesn't support it--see
//               supports_pixel_zoom).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
33 0 0 6 41 1364 0 0 802 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::supports_pixel_zoom
//       Access: Published, Virtual
//  Description: Returns true if a call to set_pixel_zoom() will be
//               respected, false if it will be ignored.  If this
//               returns false, then get_pixel_factor() will always
//               return 1.0, regardless of what value you specify for
//               set_pixel_zoom().
//
//               This may return false if the underlying renderer
//               doesn't support pixel zooming, or if you have called
//               this on a DisplayRegion that doesn't have both
//               set_clear_color() and set_clear_depth() enabled.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1369  
34 0 0 6 42 1345 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: DrawableRegion::get_renderbuffer_type
//       Access: Static, Published
//  Description: Returns the RenderBuffer::Type that corresponds
//               to a RenderTexturePlane.
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1345  
35 0 0 7 44 1381 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1379  
36 0 0 7 44 1381 0 0 0 1 9 os_handle 1 1382  
37 0 0 7 45 1382 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_os_handle
//       Access: Published
//  Description: Returns the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
38 0 0 4 46 1366 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::set_os_handle
//       Access: Published
//  Description: Changes the OS-specific handle stored internally to
//               the WindowHandle wrapper.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1381  9 os_handle 1 1382  
39 0 0 4 47 1366 0 0 566 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::send_windows_message
//       Access: Published
//  Description: Call this method on a parent WindowHandle to deliver
//               a Windows message to the current child window, if any.
//               This is used in the web plugin system to deliver
//               button events detected directly by the browser system
//               into Panda, which is particularly necessary on Vista.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1381  3 msg 1 1378  6 wparam 1 1345  6 lparam 1 1345  
40 0 0 6 48 1383 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::get_int_handle
//       Access: Published
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1379  
41 0 0 4 49 1366 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1379  3 out 1 1385  
42 0 0 7 54 1361 0 0 0 0 
43 0 0 6 51 1383 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::get_int_handle
//       Access: Published, Virtual
//  Description: Returns the OS-specific handle converted to an
//               integer, if this is possible for the particular
//               representation.  Returns 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1387  
44 0 0 4 52 1366 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: WindowHandle::OSHandle::output
//       Access: Published, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1387  3 out 1 1385  
45 0 0 7 53 1361 0 0 0 0 
46 0 0 7 58 1389 707 0 228 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
47 0 0 7 58 1389 707 0 233 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1390  
48 0 0 6 59 1389 0 0 0 2 4 this 3 1389  4 copy 1 1390  
49 0 0 7 61 1389 707 0 395 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_config_properties
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with all of the
//               default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
50 0 0 7 62 1389 707 0 457 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties.  If
//               set_default() has been called, this returns that
//               WindowProperties structure; otherwise, this returns
//               get_config_properties().
//////////////////////////////////////////////////////////////////// 0 
51 0 0 4 63 1366 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_default
//       Access: Published, Static
//  Description: Replaces the "default" WindowProperties with the
//               specified structure.  The specified WindowProperties
//               will be returned by future calls to get_default(),
//               until clear_default() is called.
//
//               Note that this completely replaces the default
//               properties; it is not additive.
//////////////////////////////////////////////////////////////////// 1 18 default_properties 1 1390  
52 0 0 4 64 1366 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_default
//       Access: Published, Static
//  Description: Returns the "default" WindowProperties to whatever
//               is specified in the user's config file.
//////////////////////////////////////////////////////////////////// 0 
53 0 0 7 65 1389 707 0 386 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::size
//       Access: Published, Static
//  Description: Returns a WindowProperties structure with only the
//               size specified.  The size is the only property that
//               matters to buffers.
//////////////////////////////////////////////////////////////////// 2 6 x_size 1 1345  6 y_size 1 1345  
54 0 0 6 66 1364 0 0 0 2 4 this 3 1390  5 other 1 1390  
55 0 0 6 67 1364 0 0 0 2 4 this 3 1390  5 other 1 1390  
56 0 0 4 68 1366 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the WindowProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
57 0 0 6 69 1364 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
58 0 0 4 70 1366 0 0 514 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  6 origin 1 1392  
59 0 0 4 70 1366 0 0 514 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_origin
//       Access: Published
//  Description: Specifies the origin on the screen (in pixels,
//               relative to the top-left corner) at which the window
//               should appear.  This is the origin of the top-left
//               corner of the useful part of the window, not
//               including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1389  8 x_origin 1 1345  8 y_origin 1 1345  
60 0 0 6 71 1392 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns the coordinates of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
61 0 0 6 72 1345 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_origin
//       Access: Published
//  Description: Returns the x coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
62 0 0 6 73 1345 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_origin
//       Access: Published
//  Description: Returns the y coordinate of the window's top-left
//               corner, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
63 0 0 6 74 1364 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_origin
//       Access: Published
//  Description: Returns true if the window origin has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
64 0 0 4 75 1366 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_origin
//       Access: Published
//  Description: Removes the origin specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
65 0 0 4 76 1366 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  4 size 1 1395  
66 0 0 4 76 1366 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_size
//       Access: Published
//  Description: Specifies the requested size of the window, in
//               pixels.  This is the size of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1389  6 x_size 1 1345  6 y_size 1 1345  
67 0 0 6 77 1395 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_origin
//       Access: Published
//  Description: Returns size in pixels of the useful part of the
//               window, not including decorations.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
68 0 0 6 78 1345 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_x_size
//       Access: Published
//  Description: Returns size in pixels in the x dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's width.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
69 0 0 6 79 1345 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_y_size
//       Access: Published
//  Description: Returns size in pixels in the y dimension of the
//               useful part of the window, not including decorations.
//               That is, this is the window's height.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
70 0 0 6 80 1364 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_size
//       Access: Published
//  Description: Returns true if the window size has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
71 0 0 4 81 1366 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_size
//       Access: Published
//  Description: Removes the size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
72 0 0 6 82 1364 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_mouse_mode
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
73 0 0 4 83 1366 0 0 1467 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_mouse_mode
//       Access: Published
//  Description: Specifies the mode in which the window is to operate
//               its mouse pointer.
//
//               M_absolute: the normal mode in which a mouse pointer
//               operates, where the mouse can move outside the window
//               and the mouse coordinates are relative to its
//               position in the window.
//
//               M_relative (OSX or Unix/X11 only): a mode where only
//               relative movements are reported; particularly useful
//               for FPS-style mouse movements where you have hidden
//               the mouse pointer and are are more interested in how
//               fast the mouse is moving, rather than precisely where
//               the pointer is hovering.
//
//               This has no effect on Windows.  On Unix/X11, this
//               requires the Xxf86dga extension to be available.
//
//               M_confined: this mode reports absolute mouse
//               positions, but confines the mouse pointer to
//               the window boundary.  It can portably replace
//               M_relative for an FPS, but you need to periodically
//               move the pointer to the center of the window
//               and track movement deltas.
//
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  4 mode 1 1319  
74 0 0 6 84 1319 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_mouse_mode
//       Access: Published
//  Description: See set_mouse_mode().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
75 0 0 4 85 1366 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_mouse_mode
//       Access: Published
//  Description: Removes the mouse_mode specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
76 0 0 4 86 1366 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_title
//       Access: Published
//  Description: Specifies the title that should be assigned to the
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  5 title 1 1367  
77 0 0 6 87 1367 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_title
//       Access: Published
//  Description: Returns the window's title.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
78 0 0 6 88 1364 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_title
//       Access: Published
//  Description: Returns true if the window title has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
79 0 0 4 89 1366 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_title
//       Access: Published
//  Description: Removes the title specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
80 0 0 4 90 1366 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_undecorated
//       Access: Published
//  Description: Specifies whether the window should be created with a
//               visible title and border (false, the default) or not
//               (true).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  11 undecorated 1 1364  
81 0 0 6 91 1364 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_undecorated
//       Access: Published
//  Description: Returns true if the window has no border.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
82 0 0 6 92 1364 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_undecorated
//       Access: Published
//  Description: Returns true if set_undecorated() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
83 0 0 4 93 1366 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_undecorated
//       Access: Published
//  Description: Removes the undecorated specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
84 0 0 4 94 1366 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fixed_size
//       Access: Published
//  Description: Specifies whether the window should be resizable by
//               the user.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  10 fixed_size 1 1364  
85 0 0 6 95 1364 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fixed_size
//       Access: Published
//  Description: Returns true if the window cannot be resized by the
//               user, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
86 0 0 6 96 1364 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fixed_size
//       Access: Published
//  Description: Returns true if set_fixed_size() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
87 0 0 4 97 1366 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fixed_size
//       Access: Published
//  Description: Removes the fixed_size specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
88 0 0 4 98 1366 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_fullscreen
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               fullscreen mode (true) or normal windowed mode
//               (false, the default).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  10 fullscreen 1 1364  
89 0 0 6 99 1364 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_fullscreen
//       Access: Published
//  Description: Returns true if the window is in fullscreen mode.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
90 0 0 6 100 1364 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_fullscreen
//       Access: Published
//  Description: Returns true if set_fullscreen() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
91 0 0 4 101 1366 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_fullscreen
//       Access: Published
//  Description: Removes the fullscreen specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
92 0 0 4 102 1366 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_foreground
//       Access: Published
//  Description: Specifies whether the window should be opened in
//               the foreground (true), or left in the background
//               (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  10 foreground 1 1364  
93 0 0 6 103 1364 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_foreground
//       Access: Published
//  Description: Returns true if the window is in the foreground.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
94 0 0 6 104 1364 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_foreground
//       Access: Published
//  Description: Returns true if set_foreground() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
95 0 0 4 105 1366 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_foreground
//       Access: Published
//  Description: Removes the foreground specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
96 0 0 4 106 1366 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_minimized
//       Access: Published
//  Description: Specifies whether the window should be created
//               minimized (true), or normal (false).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  9 minimized 1 1364  
97 0 0 6 107 1364 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_minimized
//       Access: Published
//  Description: Returns true if the window is minimized.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
98 0 0 6 108 1364 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_minimized
//       Access: Published
//  Description: Returns true if set_minimized() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
99 0 0 4 109 1366 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_minimized
//       Access: Published
//  Description: Removes the minimized specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
100 0 0 4 110 1366 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_raw_mice
//       Access: Published
//  Description: Specifies whether the window should read the raw
//               mouse devices.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  8 raw_mice 1 1364  
101 0 0 6 111 1364 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_raw_mice
//       Access: Published
//  Description: Returns true if the window reads the raw mice.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
102 0 0 6 112 1364 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_raw_mice
//       Access: Published
//  Description: Returns true if set_raw_mice() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
103 0 0 4 113 1366 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_raw_mice
//       Access: Published
//  Description: Removes the raw_mice specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
104 0 0 4 114 1366 0 0 417 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_open
//       Access: Published
//  Description: Specifies whether the window should be open.  It is
//               legal to create a GraphicsWindow in the closed state,
//               and later request it to open by changing this flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  4 open 1 1364  
105 0 0 6 115 1364 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_open
//       Access: Published
//  Description: Returns true if the window is open.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
106 0 0 6 116 1364 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_open
//       Access: Published
//  Description: Returns true if set_open() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
107 0 0 4 117 1366 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_open
//       Access: Published
//  Description: Removes the open specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
108 0 0 4 118 1366 0 0 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_hidden
//       Access: Published
//  Description: Specifies whether the mouse cursor should be visible.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  13 cursor_hidden 1 1364  
109 0 0 6 119 1364 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_hidden
//       Access: Published
//  Description: Returns true if the mouse cursor is invisible.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
110 0 0 6 120 1364 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_hidden
//       Access: Published
//  Description: Returns true if set_cursor_hidden() has been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
111 0 0 4 121 1366 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_hidden
//       Access: Published
//  Description: Removes the cursor_hidden specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
112 0 0 4 122 1366 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_icon_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the window when it is minimized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  13 icon_filename 1 1398  
113 0 0 6 123 1398 0 0 288 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_icon_filename
//       Access: Published
//  Description: Returns the icon filename associated with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
114 0 0 6 124 1364 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_icon_filename
//       Access: Published
//  Description: Returns true if set_icon_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
115 0 0 4 125 1366 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_icon_filename
//       Access: Published
//  Description: Removes the icon_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
116 0 0 4 126 1366 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_cursor_filename
//       Access: Published
//  Description: Specifies the file that contains the icon to
//               associate with the mouse cursor when it is within the
//               window (and visible).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  15 cursor_filename 1 1398  
117 0 0 6 127 1398 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_cursor_filename
//       Access: Published
//  Description: Returns the icon filename associated with the mouse
//               cursor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
118 0 0 6 128 1364 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_cursor_filename
//       Access: Published
//  Description: Returns true if set_cursor_filename() has been
//               specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
119 0 0 4 129 1366 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_cursor_filename
//       Access: Published
//  Description: Removes the cursor_filename specification from the
//               properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
120 0 0 4 130 1366 0 0 609 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_z_order
//       Access: Published
//  Description: Specifies the relative ordering of the window with
//               respect to other windows.  If the z_order is Z_top,
//               the window will always be on top of other windows; if
//               it is Z_bottom, it will always be below other
//               windows.  Most windows will want to be Z_normal,
//               which allows the user to control the order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  7 z_order 1 1318  
121 0 0 6 131 1318 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_z_order
//       Access: Published
//  Description: Returns the window's z_order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
122 0 0 6 132 1364 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_z_order
//       Access: Published
//  Description: Returns true if the window z_order has been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
123 0 0 4 133 1366 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_z_order
//       Access: Published
//  Description: Removes the z_order specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
124 0 0 4 134 1366 0 0 1028 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.  If this is NULL or unspecified, the
//               window will be created as a toplevel window on the
//               desktop; if this is non-NULL, the window will be
//               bound as a child window to the indicated parent
//               window.
//
//               You should use GraphicsPipe::make_window_handle() to
//               create an instance of a WindowHandle object given an
//               appropriate OS-specific window handle representation.
//               Each OS-specific GraphicsPipe class defines a
//               make_window_handle() method that returns an
//               appropriate WindowHandle object to wrap the
//               particular OS-specific representation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  13 parent_window 1 1381  
125 0 0 4 134 1366 0 0 1056 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::set_parent_window
//       Access: Published
//  Description: Specifies the window that this window should be
//               attached to.
//
//               This is a deprecated variant on this method, and
//               exists only for backward compatibility.  Future code
//               should use the version of set_parent_window() below
//               that receives a WindowHandle object; that interface
//               is much more robust.
//
//               In this deprecated variant, the actual value for
//               "parent" is platform-specific.  On Windows, it is the
//               HWND of the parent window, cast to an unsigned
//               integer.  On X11, it is the Window pointer of the
//               parent window, similarly cast.  On OSX, this is the
//               NSWindow pointer, which doesn't appear to work at
//               all.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  6 parent 1 1383  
126 0 0 7 135 1381 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::get_parent_window
//       Access: Published
//  Description: Returns the parent window specification, or NULL if
//               there is no parent window specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
127 0 0 6 136 1364 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::has_parent_window
//       Access: Published
//  Description: Checks the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1390  
128 0 0 4 137 1366 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::clear_parent_window
//       Access: Published
//  Description: Removes the S_parent_window specification from the properties.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1389  
129 0 0 4 138 1366 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1389  5 other 1 1390  
130 0 0 4 139 1366 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: WindowProperties::output
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1390  3 out 1 1385  
131 0 0 6 147 1345 0 0 280 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_num_regions
//       Access: Published
//  Description: Returns the number of regions, see set_num_regions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
132 0 0 4 148 1366 0 0 607 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_num_regions
//       Access: Published
//  Description: Sets the number of regions that this DisplayRegion
//               indicates.  Usually, this number is 1 (and it is
//               always at least 1), and only the first is used for
//               rendering.  However, if more than one is provided,
//               you may select which one to render into using a
//               geometry shader (gl_ViewportIndex in GLSL).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  1 i 1 1345  
133 0 0 7 149 1405 0 0 391 ///////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_dimensions
//       Access: Published
//  Description: Retrieves the coordinates of the DisplayRegion's
//               rectangle within its GraphicsOutput.  These numbers
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  1 i 1 1345  
134 0 0 6 150 1376 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_left
//       Access: Published
//  Description: Retrieves the x coordinate of the left edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  1 i 1 1345  
135 0 0 6 151 1376 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_right
//       Access: Published
//  Description: Retrieves the x coordinate of the right edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  1 i 1 1345  
136 0 0 6 152 1376 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_bottom
//       Access: Published
//  Description: Retrieves the y coordinate of the bottom edge of 
//               the rectangle within its GraphicsOutput.  This 
//               number will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  1 i 1 1345  
137 0 0 6 153 1376 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_top
//       Access: Published
//  Description: Retrieves the y coordinate of the top edge of the
//               rectangle within its GraphicsOutput.  This number
//               will be in the range [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  1 i 1 1345  
138 0 0 4 154 1366 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  10 dimensions 1 1406  
139 0 0 4 154 1366 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1403  1 l 1 1376  1 r 1 1376  1 b 1 1376  1 t 1 1376  
140 0 0 4 154 1366 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1403  1 i 1 1345  10 dimensions 1 1406  
141 0 0 4 154 1366 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_dimensions
//       Access: Published, Virtual
//  Description: Changes the portion of the framebuffer this
//               DisplayRegion corresponds to.  The parameters range
//               from 0 to 1, where 0,0 is the lower left corner and
//               1,1 is the upper right; (0, 1, 0, 1) represents the
//               whole screen.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1403  1 i 1 1345  1 l 1 1376  1 r 1 1376  1 b 1 1376  1 t 1 1376  
142 0 0 7 155 1408 1020 0 376 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_window
//       Access: Published
//  Description: Returns the GraphicsOutput that this DisplayRegion is
//               ultimately associated with, or NULL if no window is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
143 0 0 7 156 1359 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this DisplayRegion is
//               ultimately associated with, or NULL if no pipe is
//               associated.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
144 0 0 6 157 1364 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_stereo
//       Access: Published, Virtual
//  Description: Returns true if this is a StereoDisplayRegion, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
145 0 0 4 158 1366 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_camera
//       Access: Published, Virtual
//  Description: Sets the camera that is associated with this
//               DisplayRegion.  There is a one-to-many association
//               between cameras and DisplayRegions; one camera may be
//               shared by multiple DisplayRegions.
//
//               The camera is actually set via a NodePath, which
//               clarifies which instance of the camera (if there
//               happen to be multiple instances) we should use.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  6 camera 1 1409  
146 0 0 7 159 1414 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_camera
//       Access: Published
//  Description: Returns the camera associated with this
//               DisplayRegion, or an empty NodePath if no camera is
//               associated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  14 current_thread 1 1412  
147 0 0 4 160 1366 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_active
//       Access: Published, Virtual
//  Description: Sets the active flag associated with the
//               DisplayRegion.  If the DisplayRegion is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  6 active 1 1364  
148 0 0 6 161 1364 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
149 0 0 4 162 1366 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_sort
//       Access: Published, Virtual
//  Description: Sets the sort value associated with the
//               DisplayRegion.  Within a window, DisplayRegions will
//               be rendered in order from the lowest sort value to
//               the highest.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  4 sort 1 1345  
150 0 0 6 163 1345 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_sort
//       Access: Published
//  Description: Returns the sort value associated with the
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
151 0 0 4 164 1366 0 0 1825 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_stereo_channel
//       Access: Published, Virtual
//  Description: Specifies whether the DisplayRegion represents the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  This automatically
//               adjusts the lens that is used to render to this
//               DisplayRegion to its left or right eye, according to
//               the lens's stereo properties.
//
//               When the DisplayRegion is attached to a stereo window
//               (one for which is_stereo() returns true), this also
//               specifies which physical channel the DisplayRegion
//               renders to.
//
//               Normally you would create at least two DisplayRegions
//               for a stereo window, one for each of the left and
//               right channels.  The two DisplayRegions may share the
//               same camera (and thus the same lens); this parameter
//               is used to control the exact properties of the lens
//               when it is used to render into this DisplayRegion.
//
//               Also see the StereoDisplayRegion, which automates
//               managing a pair of left/right DisplayRegions.
//
//               An ordinary DisplayRegion may be set to SC_mono,
//               SC_left, or SC_right.  You may set SC_stereo only on
//               a StereoDisplayRegion.
//
//               This call also resets tex_view_offset to its default
//               value, which is 0 for the left eye or 1 for the right
//               eye of a stereo display region, or 0 for a mono
//               display region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  14 stereo_channel 1 1415  
152 0 0 6 165 1415 0 0 448 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_stereo_channel
//       Access: Published
//  Description: Returns whether the DisplayRegion is specified as the
//               left or right channel of a stereo pair, or whether it
//               is a normal, monocular image.  See
//               set_stereo_channel().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
153 0 0 4 166 1366 0 0 776 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_tex_view_offset
//       Access: Published, Virtual
//  Description: Sets the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.  This is set automatically when you call
//               set_stereo_channel().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  15 tex_view_offset 1 1345  
154 0 0 6 167 1345 0 0 687 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_tex_view_offset
//       Access: Public
//  Description: Returns the current texture view offset for this
//               DisplayRegion.  This is normally set to zero.  If
//               nonzero, it is used to select a particular view of
//               any multiview textures that are rendered within this
//               DisplayRegion.
//
//               For a StereoDisplayRegion, this is normally 0 for the
//               left eye, and 1 for the right eye, to support stereo
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
155 0 0 4 168 1366 0 0 949 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_incomplete_render
//       Access: Published, Virtual
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               This flag may also be set on the
//               GraphicsStateGuardian.  It will be considered true
//               for a given DisplayRegion only if it is true on both
//               the GSG and on the DisplayRegion.
//
//               See GraphicsStateGuardian::set_incomplete_render()
//               for more detail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  17 incomplete_render 1 1364  
156 0 0 6 169 1364 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_incomplete_render
//       Access: Published
//  Description: Returns the incomplete_render flag.  See
//               set_incomplete_render().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
157 0 0 4 170 1366 0 0 988 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_texture_reload_priority
//       Access: Published, Virtual
//  Description: Specifies an integer priority which is assigned to
//               any asynchronous texture reload requests spawned
//               while processing this DisplayRegion.  This controls
//               which textures are loaded first when multiple
//               textures need to be reloaded at once; it also
//               controls the relative priority between asynchronous
//               texture loads and asynchronous model or animation
//               loads.
//
//               Specifying a larger number here makes the textures
//               rendered by this DisplayRegion load up first.  This
//               may be particularly useful to do, for instance, for
//               the DisplayRegion that renders the gui.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  23 texture_reload_priority 1 1345  
158 0 0 6 171 1345 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_texture_reload_priority
//       Access: Published
//  Description: Returns the priority which is assigned to
//               asynchronous texture reload requests.  See
//               set_texture_reload_priority().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
159 0 0 4 172 1366 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_lens_index
//       Access: Published
//  Description: Sets the lens index, allows for multiple lenses to
//               be attached to a camera.  This is useful for a 
//               variety of setups, such as fish eye rendering.
//               The default is 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  5 index 1 1345  
160 0 0 6 173 1345 0 0 479 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_lens_index
//       Access: Public
//  Description: Returns the specific lens of the associated Camera
//               that will be used for rendering this scene.  Most
//               Cameras hold only one lens, but for multiple lenses
//               this method may be used to selected between them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
161 0 0 4 174 1366 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_traverser
//       Access: Published, Virtual
//  Description: Specifies the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.  Normally the
//               default CullTraverser is sufficient, but this may be
//               changed to change the default cull behavior.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  4 trav 1 1417  
162 0 0 7 175 1417 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_traverser
//       Access: Published
//  Description: Returns the CullTraverser that will be used to draw
//               the contents of this DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
163 0 0 4 176 1366 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cube_map_index
//       Access: Published
//  Description: Deprecated; replaced by set_target_tex_page().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  14 cube_map_index 1 1345  
164 0 0 4 177 1366 0 0 907 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_target_tex_page
//       Access: Published, Virtual
//  Description: This is a special parameter that is only used when
//               rendering the faces of a cube map or multipage and/or
//               multiview texture.
//
//               This sets up the DisplayRegion to render to the ith
//               page and jth view of its associated texture(s); the
//               value must be consistent with the range of values
//               availble to the texture.  A normal DisplayRegion that
//               is not associated with any particular page should be
//               set to page -1 and view 0.
//
//               This is particularly useful when rendering cube maps
//               and/or stereo textures.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  4 page 1 1345  
165 0 0 6 178 1345 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_target_tex_page
//       Access: Published
//  Description: Returns the target page number associated with this
//               particular DisplayRegion, or -1 if it is not
//               associated with a page.  See
//               set_target_tex_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
166 0 0 4 179 1366 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_scissor_enabled
//       Access: Published
//  Description: Sets whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  15 scissor_enabled 1 1364  
167 0 0 6 180 1364 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_scissor_enabled
//       Access: Published
//  Description: Returns whether or not scissor testing is enabled
//               for this region.  The default is true, except for
//               the overlay display region.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
168 0 0 4 181 1366 0 0 1597 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_cull_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the DisplayRegion is visited during the cull
//               traversal.  This callback will be made during the
//               cull thread.
//
//               The cull traversal is responsible for determining
//               which nodes are visible and within the view frustum,
//               and for accumulating state and transform, and
//               generally building up the list of CullableObjects
//               that are to be eventually passed to the draw
//               traversal for rendering.
//
//               At the time the cull traversal callback is made, the
//               traversal for this DisplayRegion has not yet started.
//
//               The callback is passed an instance of a
//               DisplayRegionCullCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal cull behavior, so if your
//               callback does nothing, the scene graph will not be
//               traversed and therefore nothing will be drawn.  If
//               you wish the normal cull traversal to be performed
//               for this DisplayRegion, you must call
//               cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  6 object 1 1419  
169 0 0 4 182 1366 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_cull_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
170 0 0 7 183 1419 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_cull_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_cull_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
171 0 0 4 184 1366 0 0 1951 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::set_draw_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               the contents of DisplayRegion is drawn during the
//               draw traversal.  This callback will be made during
//               the draw thread.
//
//               The draw traversal is responsible for actually
//               issuing the commands to the graphics engine to draw
//               primitives.  Its job is to walk through the list of
//               CullableObjects build up by the cull traversal, as
//               quickly as possible, issuing the appropriate commands
//               to draw each one.
//
//               At the time the draw traversal callback is made, the
//               graphics state is in the initial state, and no
//               projection matrix or modelview matrix is in effect.
//               begin_scene() has not yet been called, and no objects
//               have yet been drawn.  However, the viewport has
//               already been set to the appropriate part of the
//               window, and the clear commands for this DisplayRegion
//               (if any) have been issued.
//
//               The callback is passed an instance of a
//               DisplayRegionDrawCallbackData, which contains
//               pointers to the current scene information, as well as
//               the current DisplayRegion and GSG.  The callback
//               *replaces* the normal draw behavior, so if your
//               callback does nothing, nothing in the DisplayRegion
//               will be drawn.  If you wish the draw traversal to
//               continue to draw the contents of this DisplayRegion,
//               you must call cbdata->upcall() from your callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  6 object 1 1419  
172 0 0 4 185 1366 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::clear_draw_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
173 0 0 7 186 1419 0 0 286 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_draw_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_draw_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1401  
174 0 0 6 187 1345 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_width
//       Access: Published
//  Description: Returns the width of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  1 i 1 1345  
175 0 0 6 188 1345 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_pixel_height
//       Access: Published
//  Description: Returns the height of the DisplayRegion in pixels.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  1 i 1 1345  
176 0 0 4 189 1366 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::output
//       Access: Published, Virtual
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1401  3 out 1 1385  
177 0 0 7 190 1421 0 0 757 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_screenshot_filename
//       Access: Published, Static
//  Description: Synthesizes a suitable default filename for passing
//               to save_screenshot().
//
//               The default filename is generated from the supplied
//               prefix and from the Config variable
//               screenshot-filename, which contains the following
//               strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1367  
178 0 0 7 191 1421 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  6 prefix 1 1367  
179 0 0 6 192 1364 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1403  8 filename 1 1398  13 image_comment 1 1367  
180 0 0 7 193 1423 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as a Texture, or NULL
//               on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
181 0 0 6 193 1364 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1403  5 image 1 1424  
182 0 0 7 194 1427 0 0 1131 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegion::make_cull_result_graph
//       Access: Published
//  Description: Returns a special scene graph constructed to
//               represent the results of the last frame's cull
//               operation.
//
//               This will be a hierarchy of nodes, one node for each
//               bin, each of which will in term be a parent of a
//               number of GeomNodes, representing the geometry drawn
//               in each bin.
//
//               This is useful mainly for high-level debugging and
//               abstraction tools; it should not be mistaken for the
//               low-level cull result itself, which is constructed
//               and maintained internally.  No such scene graph is
//               normally constructed during the rendering of a frame;
//               this is an artificial construct created for the
//               purpose of making it easy to analyze the results of
//               the cull operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1403  
183 0 0 7 195 1361 0 0 0 0 
184 0 0 7 142 1428 0 0 0 1 4 this 3 1403  
185 0 0 7 143 1403 791 0 0 1 4 this 3 1428  
186 0 0 6 144 1368 0 0 0 1 4 this 3 1403  
187 0 0 7 145 1403 791 0 0 1 4 this 3 1368  
188 0 0 7 197 1403 791 0 324 ////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_left_eye
//       Access: Published
//  Description: Returns a pointer to the left DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1429  
189 0 0 7 198 1403 791 0 326 ////////////////////////////////////////////////////////////////////
//     Function: StereoDisplayRegion::get_right_eye
//       Access: Published
//  Description: Returns a pointer to the right DisplayRegion managed
//               by this stereo object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1429  
190 0 0 7 199 1361 0 0 0 0 
191 0 0 7 246 1430 890 0 233 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
192 0 0 7 246 1430 890 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1431  
193 0 0 6 201 1345 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_depth_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
194 0 0 6 202 1345 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_color_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
195 0 0 6 203 1345 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_red_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
196 0 0 6 204 1345 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_green_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
197 0 0 6 205 1345 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_blue_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
198 0 0 6 206 1345 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_alpha_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
199 0 0 6 207 1345 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stencil_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
200 0 0 6 208 1345 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_accum_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
201 0 0 6 209 1345 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_rgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
202 0 0 6 210 1345 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_hrgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
203 0 0 6 211 1345 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_float
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
204 0 0 6 212 1345 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_multisamples
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
205 0 0 6 213 1345 0 0 356 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
206 0 0 6 214 1345 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_back_buffers
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
207 0 0 6 215 1364 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_indexed_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
208 0 0 6 216 1364 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_rgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
209 0 0 6 217 1364 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
210 0 0 6 218 1364 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_hardware
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
211 0 0 6 219 1364 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_force_software
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
212 0 0 6 220 1364 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_srgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
213 0 0 6 221 1364 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
214 0 0 6 222 1364 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_float_depth
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
215 0 0 4 223 1366 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_depth_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
216 0 0 4 224 1366 0 0 616 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_color_bits
//       Access: Published
//  Description: Sets the number of requested color bits as a single
//               number that represents the sum of the individual
//               numbers of red, green and blue bits.  Panda won't
//               care how the individual bits are divided up.
//
//               See also set_rgba_bits, which allows you to specify
//               requirements for the individual components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
217 0 0 4 225 1366 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgba_bits
//       Access: Published
//  Description: Convenience method for setting the red, green, blue
//               and alpha bits in one go.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1430  1 r 1 1345  1 g 1 1345  1 b 1 1345  1 a 1 1345  
218 0 0 4 226 1366 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_red_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
219 0 0 4 227 1366 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_green_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
220 0 0 4 228 1366 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_blue_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
221 0 0 4 229 1366 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_alpha_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
222 0 0 4 230 1366 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stencil_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
223 0 0 4 231 1366 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_accum_bits
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
224 0 0 4 232 1366 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_rgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
225 0 0 4 233 1366 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_hrgba
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
226 0 0 4 234 1366 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_aux_float
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
227 0 0 4 235 1366 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_multisamples
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
228 0 0 4 236 1366 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_coverage_samples
//       Access: Published
//  Description: If coverage samples are specified, and there is
//               hardware support, we use coverage multisampling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
229 0 0 4 237 1366 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_back_buffers
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1345  
230 0 0 4 238 1366 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_indexed_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
231 0 0 4 239 1366 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_rgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
232 0 0 4 240 1366 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
233 0 0 4 241 1366 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_hardware
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
234 0 0 4 242 1366 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_force_software
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
235 0 0 4 243 1366 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_srgb_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
236 0 0 4 244 1366 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_color
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
237 0 0 4 245 1366 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_float_depth
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  1 n 1 1364  
238 0 0 6 248 1430 0 0 0 2 4 this 3 1430  4 copy 1 1431  
239 0 0 6 249 1431 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_default
//       Access: Published, Static
//  Description: Returns a FrameBufferProperties structure with all of
//               the default values filled in according to the user's
//               config file.
//////////////////////////////////////////////////////////////////// 0 
240 0 0 6 250 1364 0 0 0 2 4 this 3 1431  5 other 1 1431  
241 0 0 6 251 1364 0 0 0 2 4 this 3 1431  5 other 1 1431  
242 0 0 4 252 1366 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::clear
//       Access: Published
//  Description: Unsets all properties that have been specified so
//               far, and resets the FrameBufferProperties structure to its
//               initial empty state.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1430  
243 0 0 4 253 1366 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_all_specified
//       Access: Published
//  Description: Marks all bits as having been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1430  
244 0 0 6 254 1364 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::subsumes
//       Access: Public
//  Description: Returns true if this set of properties makes
//               strictly greater or equal demands of the framebuffer
//               than the other set of framebuffer properties.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1431  5 other 1 1431  
245 0 0 4 255 1366 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::add_properties
//       Access: Published
//  Description: Sets any properties that are explicitly specified in
//               other on this object.  Leaves other properties
//               unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1430  5 other 1 1431  
246 0 0 4 256 1366 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::output
//       Access: Published
//  Description: Generates a string representation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1431  3 out 1 1385  
247 0 0 4 257 1366 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::set_one_bit_per_channel
//       Access: Published
//  Description: If any of the depth, color, alpha, accum, or
//               stencil properties is set to more than one,
//               then they are reduced to one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1430  
248 0 0 6 258 1364 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_stereo
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
249 0 0 6 259 1364 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_single_buffered
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
250 0 0 6 260 1345 0 0 1390 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_quality
//       Access: Published
//  Description: Assumes that these properties are a description of
//               a window.
//
//               Measures how well this window satisfies a specified
//               set of requirements.  A higher quality number means
//               that more requirements were satisfied.  A quality of
//               zero means that the window is unsuitable.
//
//               The routine deducts a lot if the window fails to
//               provide a requested feature.  It deducts less
//               if the window provides a feature, but at a degraded
//               level of functionality (ie, the user asks for rgba8,
//               color, but the window only provides rgba4).  The
//               routine also deducts a small amount for unnecessary
//               features.  For example, if the window has an
//               accumulation buffer when one is not requested will
//               reduce quality slightly.  Maximum quality is obtained
//               when the window exactly matches the request.
//
//               If you want to know whether the window satisfies
//               all of the requirements, use the "subsumes" function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1431  4 reqs 1 1431  
251 0 0 6 261 1364 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_any_specified
//       Access: Published
//  Description: Returns true if any properties have been specified,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
252 0 0 6 262 1364 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::is_basic
//       Access: Published
//  Description: Returns true if the properties are extremely basic.
//               The following count as basic: rgb or rgba, depth.
//               If anything else is specified, the properties are
//               non-basic.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
253 0 0 6 263 1345 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_aux_mask
//       Access: Published
//  Description: Converts the aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
254 0 0 6 264 1345 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::get_buffer_mask
//       Access: Private
//  Description: Converts the non-aux bitplanes of the
//               framebuffer into a RenderBuffer::Type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1431  
255 0 0 6 265 1364 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::verify_hardware_software
//       Access: Public
//  Description: Validates that the properties represent the desired
//               kind of renderer (hardware or software).  If not,
//               prints out an error message and returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1431  5 props 1 1431  8 renderer 1 1367  
256 0 0 6 266 1364 0 0 597 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_color_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1431  3 tex 1 1423  
257 0 0 6 267 1364 0 0 597 ////////////////////////////////////////////////////////////////////
//     Function: FrameBufferProperties::setup_depth_texture
//       Access: Public
//  Description: Sets the texture up for render-to-texture matching
//               these framebuffer properties.
//
//               Returns true if there was a format that had enough
//               bits, false otherwise.  Of course, this is no
//               guarantee that a particular graphics back-end
//               supports rendering to textures of that format.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1431  3 tex 1 1423  
258 0 0 7 269 1435 925 0 240 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1433  
259 0 0 7 269 1435 925 0 1800 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::Constructor
//       Access: Published
//  Description: The threading model accepts a string representing the
//               names of the two threads that will process cull and
//               draw for the given window, separated by a slash.  The
//               names are completely arbitrary and are used only to
//               differentiate threads.  The two names may be the
//               same, meaning the same thread, or each may be the
//               empty string, which represents the previous thread.
//
//               Thus, for example, "cull/draw" indicates that the
//               window will be culled in a thread called "cull", and
//               drawn in a separate thread called "draw".
//               "draw/draw" or simply "draw" indicates the window
//               will be culled and drawn in the same thread, "draw".
//               On the other hand, "/draw" indicates the thread will
//               be culled in the main, or app thread, and drawn in a
//               separate thread named "draw".  The empty string, ""
//               or "/", indicates the thread will be culled and drawn
//               in the main thread; that is to say, a single-process
//               model.
//
//               Finally, if the threading model begins with a "-"
//               character, then cull and draw are run simultaneously,
//               in the same thread, with no binning or state sorting.
//               It simplifies the cull process but it forces the
//               scene to render in scene graph order; state sorting
//               and alpha sorting is lost.
//////////////////////////////////////////////////////////////////// 1 5 model 1 1367  
260 0 0 6 270 1435 0 0 0 2 4 this 3 1435  4 copy 1 1433  
261 0 0 6 271 1367 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_model
//       Access: Published
//  Description: Returns the string that describes the threading
//               model.  See the constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
262 0 0 6 272 1367 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               culling in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
263 0 0 4 273 1366 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               culling in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1435  9 cull_name 1 1367  
264 0 0 6 274 1345 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the cull thread
//               should access data.  This will be 0 if the cull is
//               run in the same thread as app, or 1 if it is its own
//               thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
265 0 0 6 275 1367 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_name
//       Access: Published
//  Description: Returns the name of the thread that will handle
//               sending the actual graphics primitives to the
//               graphics API in this model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
266 0 0 4 276 1366 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_draw_name
//       Access: Published
//  Description: Changes the name of the thread that will handle
//               drawing in this model.  This won't change any windows
//               that were already created with this model; this only
//               has an effect on newly-opened windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1435  9 cull_name 1 1367  
267 0 0 6 277 1345 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_draw_stage
//       Access: Published
//  Description: Returns the pipeline stage from which the draw thread
//               should access data.  This will be the same value as
//               get_cull_stage() if cull and draw are run in the same
//               thread, or one more than that value if draw should be
//               in its own thread.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
268 0 0 6 278 1364 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::get_cull_sorting
//       Access: Published
//  Description: Returns true if the model involves a separate cull
//               pass, or false if culling happens implicitly, at the
//               same time as draw.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
269 0 0 4 279 1366 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::set_cull_sorting
//       Access: Published
//  Description: Changes the flag that indicates whether the threading
//               model involves a separate cull pass.  This won't
//               change any windows that were already created with
//               this model; this only has an effect on newly-opened
//               windows.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1435  12 cull_sorting 1 1364  
270 0 0 6 280 1364 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_single_threaded
//       Access: Published
//  Description: Returns true if the threading model is a
//               single-threaded model, or false if it involves
//               threads.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
271 0 0 6 281 1364 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::is_default
//       Access: Published
//  Description: Returns true if the threading model is the default,
//               cull-then-draw single-threaded model, or false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1433  
272 0 0 4 282 1366 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsThreadingModel::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1433  3 out 1 1385  
273 0 0 4 287 1366 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all
//       Access: Public
//  Description: Releases all prepared objects.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
274 0 0 6 288 1345 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_textures
//       Access: Public
//  Description: Frees the resources for all textures associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
275 0 0 6 289 1345 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_samplers
//       Access: Public
//  Description: Frees the resources for all samplers associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
276 0 0 6 290 1345 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_geoms
//       Access: Public
//  Description: Frees the resources for all geoms associated with
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
277 0 0 6 291 1345 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_vertex_buffers
//       Access: Public
//  Description: Frees the resources for all vertex buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
278 0 0 6 292 1345 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::release_all_index_buffers
//       Access: Public
//  Description: Frees the resources for all index buffers associated
//               with this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
279 0 0 4 293 1366 0 0 538 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsStateGuardian.  If the GraphicsStateGuardian
//               is marked inactive, nothing is rendered.  This is not
//               normally turned off unless there is a problem with
//               the rendering detected at a low level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  6 active 1 1364  
280 0 0 6 294 1364 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_active
//       Access: Published
//  Description: Returns the active flag associated with the
//               GraphicsStateGuardian.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
281 0 0 6 295 1364 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_valid
//       Access: Published
//  Description: Returns true if the GSG has been correctly
//               initialized within a graphics context, false if there
//               has been some problem or it hasn't been initialized
//               yet.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
282 0 0 6 296 1364 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::needs_reset
//       Access: Public
//  Description: Returns true if the gsg is marked as needing a
//               reset.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
283 0 0 4 297 1366 0 0 1472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_incomplete_render
//       Access: Public
//  Description: Sets the incomplete_render flag.  When this is
//               true, the frame will be rendered even if some of the
//               geometry or textures in the scene are not available
//               (e.g. they have been temporarily paged out).  When
//               this is false, the frame will be held up while this
//               data is reloaded.
//
//               Setting this true allows for a smoother frame rate,
//               but occasionally parts of the frame will be invisible
//               or missing (they will generally come in within a
//               second or two).  Setting this false guarantees that
//               every frame will be complete, but may cause more
//               chugs as things are loaded up at runtime.
//
//               You may want to set this false during loading
//               screens, to guarantee that all of your assets are
//               available by the time you take the loading screen
//               down.
//
//               This flag may also be set individually on each
//               DisplayRegion.  It will be considered true for a
//               given DisplayRegion only if it is true on both the
//               GSG and on the DisplayRegion.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  17 incomplete_render 1 1364  
284 0 0 4 298 1366 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_loader
//       Access: Public
//  Description: Sets the Loader object that will be used by this GSG
//               to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  6 loader 1 1439  
285 0 0 7 299 1439 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_loader
//       Access: Public
//  Description: Returns the Loader object that will be used by this
//               GSG to load textures when necessary, if
//               get_incomplete_render() is true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
286 0 0 4 300 1366 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_generator
//       Access: Public
//  Description: Sets the ShaderGenerator object that will be used
//               by this GSG to generate shaders when necessary.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  16 shader_generator 1 1441  
287 0 0 7 301 1441 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_generator
//       Access: Public
//  Description: Returns the ShaderGenerator object that will be used
//               by this GSG to generate shaders when necessary.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
288 0 0 7 302 1359 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_pipe
//       Access: Published
//  Description: Returns the graphics pipe on which this GSG was
//               created.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
289 0 0 7 303 1443 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this GSG.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
290 0 0 6 304 1433 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_threading_model
//       Access: Published
//  Description: Returns the threading model that was used to create
//               this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
291 0 0 6 305 1364 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::is_hardware
//       Access: Published
//  Description: Returns true if this GSG appears to be
//               hardware-accelerated, or false if it is known to be
//               software only.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
292 0 0 6 306 1345 0 0 859 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_texture_stages
//       Access: Published
//  Description: Returns the maximum number of simultaneous textures
//               that may be applied to geometry with multitexturing,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority texture stages will
//               not be applied.  Use TextureStage::set_priority() to
//               adjust the relative importance of the different
//               texture stages.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
293 0 0 6 307 1345 0 0 654 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_3d_texture_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a 3-d texture, or -1 if there is no
//               particular limit.  Returns 0 if 3-d textures are not
//               supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
294 0 0 6 308 1345 0 0 605 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_2d_texture_array_layers
//       Access: Published
//  Description: Returns the largest possible number of pages, or -1
//               if there is no particular limit. Returns 0 if 2-d
//               texture arrays not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
295 0 0 6 309 1345 0 0 662 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_cube_map_dimension
//       Access: Published
//  Description: Returns the largest possible texture size in any one
//               dimension for a cube map texture, or -1 if there is
//               no particular limit.  Returns 0 if cube map textures
//               are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
296 0 0 6 310 1345 0 0 609 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_buffer_texture_size
//       Access: Published
//  Description: Returns the largest possible buffer texture size,
//               or -1 if there is no particular limit.  Returns 0
//               if cube map textures are not supported.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
297 0 0 6 311 1364 0 0 595 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_combine
//       Access: Published
//  Description: Returns true if this particular GSG can use the
//               TextureStage::M_combine mode, which includes all of
//               the texture blend modes specified by
//               set_combine_rgb() and/or set_combine_alpha().  If
//               this is false, you must limit yourself to using the
//               simpler blend modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
298 0 0 6 312 1364 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_saved_result
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CS_last_saved_result source, which
//               allows you to save the result of a TextureStage and
//               re-use it for multiple inputs.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
299 0 0 6 313 1364 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_texture_dot3
//       Access: Published
//  Description: Returns true if this GSG can use the
//               TextureStage::CM_dot3_rgb or CM_dot3_rgba combine
//               modes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
300 0 0 6 314 1364 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_3d_texture
//       Access: Published
//  Description: Returns true if this GSG can render 3-d (volumetric)
//               textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
301 0 0 6 315 1364 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_2d_texture_array
//       Access: Published
//  Description: Returns true if this GSG can render 2-d textures
//               array.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
302 0 0 6 316 1364 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map
//       Access: Published
//  Description: Returns true if this GSG can render cube map textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
303 0 0 6 317 1364 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_buffer_texture
//       Access: Published
//  Description: Returns true if this GSG can render buffer textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
304 0 0 6 318 1364 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cube_map_array
//       Access: Published
//  Description: Returns true if this GSG can render cube map arrays.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
305 0 0 6 319 1364 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tex_non_pow2
//       Access: Published
//  Description: Returns true if this GSG can handle non power of two
//               sized textures.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
306 0 0 6 320 1364 0 0 423 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compressed_texture
//       Access: Published
//  Description: Returns true if this GSG can compress textures as it
//               loads them into texture memory, and/or accept
//               pre-compressed textures for storing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
307 0 0 6 321 1345 0 0 579 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_lights
//       Access: Published
//  Description: Returns the maximum number of simultaneous lights
//               that may be rendered on geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
308 0 0 6 322 1345 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_clip_planes
//       Access: Published
//  Description: Returns the maximum number of simultaneous clip planes
//               that may be applied to geometry, or -1 if there is
//               no particular limit.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
309 0 0 6 323 1345 0 0 818 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transforms
//       Access: Published
//  Description: Returns the maximum number of transform matrices that
//               may be simultaneously used to transform any one
//               vertex by the graphics hardware.  If this number is
//               0, then the hardware (or the graphics backend)
//               doesn't support soft-skinned vertices (in which case
//               Panda will animate the vertices in software).
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
310 0 0 6 324 1345 0 0 811 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_vertex_transform_indices
//       Access: Published
//  Description: Returns the maximum number of transforms there may be
//               in a single TransformTable for this graphics
//               hardware.  If this number is 0 (but
//               get_max_transforms() is nonzero), then the graphics
//               hardware (or API) doesn't support indexed transforms,
//               but can support direct transform references.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
311 0 0 6 325 1364 0 0 976 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_copy_texture_inverted
//       Access: Published
//  Description: Returns true if this particular GSG has the property
//               that any framebuffer-to-texture copy results in a
//               texture that is upside-down and backwards from
//               Panda's usual convention; that is, it copies into a
//               texture from the bottom up instead of from the top
//               down.
//
//               If this is true, then on offscreen GraphicsBuffer
//               created for the purposes of rendering into a texture
//               should be created with the invert flag set true, to
//               compensate.  Panda will do this automatically if you
//               create an offscreen buffer using
//               GraphicsOutput::make_texture_buffer().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
312 0 0 6 326 1364 0 0 555 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_generate_mipmap
//       Access: Published
//  Description: Returns true if this particular GSG can generate
//               mipmaps for a texture automatically, or if they must
//               be generated in software.  If this is true, then
//               mipmaps can safely be enabled for rendered textures
//               (e.g. using the MultitexReducer).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
313 0 0 6 327 1364 0 0 543 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_texture
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               returns true if the GSG supports GL_DEPTH_COMPONENT
//               textures, which are considered a limited but still
//               valid case of F_depth_stencil.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
314 0 0 6 328 1364 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_depth_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               textures whose format is F_depth_stencil.  This
//               only returns true if the GSG supports the full
//               packed depth-stencil functionality.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
315 0 0 6 329 1364 0 0 675 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_sampler_objects
//       Access: Published
//  Description: Returns true if this particular GSG supports the
//               use of sampler objects to record texture sampling
//               parameters separately from the texture objects.
//               This doesn't really affect functionality, but if
//               this is false, it may mean that using the same
//               texture with different SamplerState objects will
//               result in reduced performance.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
316 0 0 6 330 1364 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_basic_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               arbfp1+arbvp1 or above.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
317 0 0 6 331 1364 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               geometry shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
318 0 0 6 332 1364 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_tessellation_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               tesselation shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
319 0 0 6 333 1364 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_compute_shaders
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               compute shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
320 0 0 6 334 1364 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_glsl
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               GLSL shaders.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
321 0 0 6 335 1364 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               stencil buffers at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
322 0 0 6 336 1364 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_two_sided_stencil
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               two sided stencil: different stencil settings for the
//               front and back side of the same polygon.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
323 0 0 6 337 1364 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_geometry_instancing
//       Access: Published
//  Description: Returns true if this particular GSG supports
//               hardware geometry instancing: the ability to render
//               multiple copies of a model. In OpenGL, this is
//               done using the EXT_draw_instanced extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
324 0 0 6 338 1364 0 0 564 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_occlusion_query
//       Access: Published
//  Description: Returns true if this GSG supports an occlusion query.
//               If this is true, then begin_occlusion_query() and
//               end_occlusion_query() may be called to bracket a
//               sequence of draw_triangles() (or whatever) calls to
//               measure pixels that pass the depth test.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
325 0 0 6 339 1364 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_timer_query
//       Access: Published
//  Description: Returns true if this GSG supports a timer query.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
326 0 0 6 340 1364 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_timer_queries_active
//       Access: Published
//  Description: Returns true if timer queries are currently
//               enabled on this GSG.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
327 0 0 6 341 1345 0 0 855 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_max_color_targets
//       Access: Published
//  Description: Returns the maximum number of simultaneous color
//               textures that may be attached for render-to-texture,
//               as supported by this particular GSG.  If you exceed
//               this number, the lowest-priority render targets will
//               not be applied.  Use RenderTarget::set_priority() to
//               adjust the relative importance of the different
//               render targets.
//
//               The value returned may not be meaningful until after
//               the graphics context has been fully created (e.g. the
//               window has been opened).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
328 0 0 6 342 1345 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_maximum_simultaneous_render_targets
//       Access: Published
//  Description: Deprecated.  Use get_max_color_targets() instead,
//               which returns the exact same value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
329 0 0 6 343 1327 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_shader_model
//       Access: Published
//  Description: Returns the ShaderModel
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
330 0 0 4 344 1366 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_shader_model
//       Access: Published
//  Description: Sets the ShaderModel.  This will override the auto-
//               detected shader model during GSG reset.  Useful for
//               testing lower-end shaders.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  12 shader_model 1 1327  
331 0 0 6 345 1364 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_supports_cg_profile
//       Access: Published, Virtual
//  Description: Returns true if this particular GSG supports the
//               specified Cg Shader Profile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1437  4 name 1 1367  
332 0 0 6 346 1364 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_color_scale_via_lighting
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale using materials and/or ambient lights, or
//               false if we need to actually munge the color.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
333 0 0 6 347 1364 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) an alpha scale via an
//               additional Texture layer, or false if we need to
//               actually munge the alpha.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
334 0 0 6 347 1364 0 0 636 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_via_texture
//       Access: Published
//  Description: This variant of get_alpha_scale_via_texture() answers
//               the question of whether the GSG can implement an
//               alpha scale via an additional Texture layer,
//               considering the current TextureAttrib that will be in
//               effect.  This considers whether there is at least one
//               additional texture slot available on the GSG.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1437  10 tex_attrib 1 1444  
335 0 0 6 348 1364 0 0 483 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_runtime_color_scale
//       Access: Published
//  Description: Returns true if this particular GSG can implement (or
//               would prefer to implement) set color and/or color
//               scale directly, without requiring any munging of
//               vertices or tricks with lighting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
336 0 0 7 349 1448 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_alpha_scale_texture_stage
//       Access: Published, Static
//  Description: Returns the TextureStage that will be used to apply
//               an alpha scale, if get_alpha_scale_via_texture()
//               returns true.
//////////////////////////////////////////////////////////////////// 0 
337 0 0 4 350 1366 0 0 771 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_coordinate_system
//       Access: Published
//  Description: Changes the coordinate system in effect on this
//               particular gsg.  This is also called the "external"
//               coordinate system, since it is the coordinate system
//               used by the scene graph, external to to GSG.
//
//               Normally, this will be the default coordinate system,
//               but it might be set differently at runtime.  It will
//               automatically be copied from the current lens's
//               coordinate system as each DisplayRegion is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  2 cs 1 1449  
338 0 0 6 351 1449 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_coordinate_system
//       Access: Published
//  Description: Returns the coordinate system in effect on this
//               particular gsg.  Normally, this will be the default
//               coordinate system, but it might be set differently at
//               runtime.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
339 0 0 6 352 1449 0 0 756 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_internal_coordinate_system
//       Access: Published, Virtual
//  Description: Returns the coordinate system used internally by the
//               GSG.  This may be the same as the external coordinate
//               system reported by get_coordinate_system(), or it may
//               be something different.
//
//               In any case, vertices that have been transformed
//               before being handed to the GSG (that is, vertices
//               with a contents value of C_clip_point) will be
//               expected to be in this coordinate system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
340 0 0 7 353 1451 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_prepared_objects
//       Access: Public, Virtual
//  Description: Returns the set of texture and geom objects that have
//               been prepared with this GSG (and possibly other GSG's
//               that share objects).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
341 0 0 6 354 1364 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_gamma
//       Access: Published, Virtual
//  Description: Set gamma.  Returns true on success.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  5 gamma 1 1376  
342 0 0 6 355 1376 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_gamma
//       Access: Published
//  Description: Get the current gamma setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  5 gamma 1 1376  
343 0 0 4 356 1366 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::restore_gamma
//       Access: Published, Virtual
//  Description: Restore original gamma setting.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
344 0 0 4 357 1366 0 0 749 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_texture_quality_override
//       Access: Published
//  Description: Specifies the global quality_level to be imposed for
//               all Textures rendered by this GSG.  This overrides
//               the value set on individual textures via
//               Texture::set_quality_level().  Set this to
//               Texture::QL_default in order to allow the individual
//               texture quality levels to be respected.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  13 quality_level 1 1452  
345 0 0 6 358 1452 0 0 485 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_texture_quality_override
//       Access: Published
//  Description: Returns the global quality_level override specified
//               by set_texture_quality_override.
//
//               This is mainly useful for the tinydisplay software
//               renderer.  See Texture::set_quality_level().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
346 0 0 6 359 1453 0 0 0 1 4 this 3 1437  
347 0 0 4 361 1366 0 0 1337 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_flash_texture
//       Access: Published
//  Description: Sets the "flash texture".  This is a debug feature;
//               when enabled, the specified texture will begin
//               flashing in the scene, helping you to find it
//               visually.
//
//               The texture also flashes with a color code: blue for
//               mipmap level 0, yellow for mipmap level 1, and red
//               for mipmap level 2 or higher (even for textures that
//               don't have mipmaps).  This gives you an idea of the
//               choice of the texture size.  If it is blue, the
//               texture is being drawn the proper size or magnified;
//               if it is yellow, it is being minified a little bit;
//               and if it red, it is being minified considerably.  If
//               you see a red texture when you are right in front of
//               it, you should consider reducing the size of the
//               texture to avoid wasting texture memory.
//
//               Not all rendering backends support the flash_texture
//               feature.  Presently, it is only supported by OpenGL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  3 tex 1 1423  
348 0 0 4 362 1366 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::clear_flash_texture
//       Access: Published
//  Description: Resets the "flash texture", so that no textures will
//               flash.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
349 0 0 7 363 1423 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_flash_texture
//       Access: Published
//  Description: Returns the current "flash texture", if any, or NULL
//               if none.  See set_flash_texture().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
350 0 0 6 364 1364 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::has_extension
//       Access: Public, Virtual
//  Description: Returns true if the GSG implements the extension
//               identified by the given string.  This currently
//               is only implemented by the OpenGL back-end.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1437  9 extension 1 1367  
351 0 0 6 365 1367 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_vendor
//       Access: Public, Virtual
//  Description: Returns the vendor of the video card driver
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
352 0 0 6 366 1367 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_renderer
//       Access: Public, Virtual
//  Description: Returns GL_Renderer
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
353 0 0 6 367 1367 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version
//       Access: Public, Virtual
//  Description: Returns driver version
//               This has an implementation-defined meaning, and may
//               be "" if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
354 0 0 6 368 1345 0 0 496 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_major
//       Access: Public, Virtual
//  Description: Returns major version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
355 0 0 6 369 1345 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the video driver.
//               This has an implementation-defined meaning, and may
//               be -1 if the particular graphics implementation
//               does not provide a way to query this information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
356 0 0 6 370 1345 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_major
//       Access: Public, Virtual
//  Description: Returns the major version of the shader model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
357 0 0 6 371 1345 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_driver_shader_version_minor
//       Access: Public, Virtual
//  Description: Returns the minor version of the shader model.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
358 0 0 6 372 1364 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::set_scene
//       Access: Published
//  Description: Sets the SceneSetup object that indicates the initial
//               camera position, etc.  This must be called before
//               traversal begins.  Returns true if the scene is
//               acceptable, false if something's wrong.  This should
//               be called in the draw thread only.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1436  11 scene_setup 1 1456  
359 0 0 7 373 1456 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::get_scene
//       Access: Published, Virtual
//  Description: Returns the current SceneSetup object.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1437  
360 0 0 6 374 1364 0 0 933 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::begin_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the beginning of drawing commands for a "scene"
//               (usually a particular DisplayRegion) within a frame.
//               All 3-D drawing commands, except the clear operation,
//               must be enclosed within begin_scene() .. end_scene().
//               This must be called in the draw thread.
//
//               The return value is true if successful (in which case
//               the scene will be drawn and end_scene() will be
//               called later), or false if unsuccessful (in which
//               case nothing will be drawn and end_scene() will not
//               be called).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
361 0 0 4 375 1366 0 0 565 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsStateGuardian::end_scene
//       Access: Published, Virtual
//  Description: Called between begin_frame() and end_frame() to mark
//               the end of drawing commands for a "scene" (usually a
//               particular DisplayRegion) within a frame.  All 3-D
//               drawing commands, except the clear operation, must be
//               enclosed within begin_scene() .. end_scene().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1436  
362 0 0 7 376 1361 0 0 0 0 
363 0 0 7 386 1436 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_gsg
//       Access: Published
//  Description: Returns the GSG that is associated with this window.
//               There is a one-to-one association between windows and
//               GSG's.
//
//               This may return NULL if the graphics context has not
//               yet been created for the window, e.g. before the
//               first frame has rendered; or after the window has
//               been closed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
364 0 0 7 387 1359 0 0 586 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_pipe
//       Access: Published
//  Description: Returns the GraphicsPipe that this window is
//               associated with.  It is possible that the
//               GraphicsPipe might have been deleted while an
//               outstanding PT(GraphicsOutput) prevented all of its
//               children windows from also being deleted; in this
//               unlikely case, get_pipe() may return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
365 0 0 7 388 1443 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_engine
//       Access: Published
//  Description: Returns the graphics engine that created this output.
//               Since there is normally only one GraphicsEngine
//               object in an application, this is usually the same as
//               the global GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
366 0 0 6 389 1367 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_name
//       Access: Published
//  Description: Returns the name that was passed to the
//               GraphicsOutput constructor.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
367 0 0 6 390 1345 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::count_textures
//       Access: Published
//  Description: If the GraphicsOutput is set to render into a
//               texture, returns the number of textures that are
//               being rendered into.  Normally, the textures would
//               be associated with different buffers - a color
//               texture, a depth texture, and a stencil texture.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
368 0 0 6 391 1364 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_texture
//       Access: Published
//  Description: Returns true if the GraphicsOutput is rendering 
//               into any textures at all.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
369 0 0 7 392 1423 0 0 725 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture
//       Access: Published
//  Description: Returns the nth texture into which the GraphicsOutput
//               renders.  Returns NULL if there is no such texture.
//
//               If the texture is non-NULL, it may be applied to
//               geometry to be rendered for any other windows or
//               outputs that share the same GSG as this
//               GraphicsOutput.  The effect is undefined for windows
//               that share a different GSG; usually in these cases
//               the texture will be invalid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1458  1 i 1 1345  
370 0 0 6 393 1314 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_plane
//       Access: Published
//  Description: Returns the RenderTexturePlane associated with the
//               nth render-texture.  Returns 0 if there is no such
//               texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1458  1 i 1 1345  
371 0 0 6 394 1330 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_rtm_mode
//       Access: Published
//  Description: Returns the RenderTextureMode associated with the
//               nth render-texture.  Returns RTM_none if there is
//               no such texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1458  1 i 1 1345  
372 0 0 4 395 1366 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_render_textures
//       Access: Published
//  Description: If the GraphicsOutput is currently rendering to
//               a texture, then all textures are dissociated from
//               the GraphicsOuput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
373 0 0 4 396 1366 0 0 1875 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::add_render_texture
//       Access: Published
//  Description: Creates a new Texture object, suitable for rendering
//               the contents of this buffer into, and appends it to
//               the list of render textures.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created, in which case you may call
//               get_texture() to retrieve the new texture pointer.
//
//               You can specify a bitplane to attach the texture to.
//               the legal choices are:
//
//               * RTP_depth
//               * RTP_depth_stencil
//               * RTP_color
//               * RTP_aux_rgba_0
//               * RTP_aux_rgba_1
//               * RTP_aux_rgba_2
//               * RTP_aux_rgba_3
//
//               If you do not specify a bitplane to attach the
//               texture to, this routine will use a default based
//               on the texture's format:
//
//               * F_depth_component attaches to RTP_depth
//               * F_depth_stencil attaches to RTP_depth_stencil
//               * all other formats attach to RTP_color.
//
//               The texture's format will be changed to match
//               the format of the bitplane to which it is attached.
//               For example, if you pass in an F_rgba texture and
//               order that it be attached to RTP_depth_stencil, it will turn
//               into an F_depth_stencil texture.
//
//               Also see make_texture_buffer(), which is a
//               higher-level interface for preparing
//               render-to-a-texture mode.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1408  3 tex 1 1423  4 mode 1 1330  8 bitplane 1 1314  
374 0 0 4 397 1366 0 0 494 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::setup_render_texture
//       Access: Published
//  Description: This is a deprecated interface that made sense back
//               when GraphicsOutputs could only render into one
//               texture at a time.  From now on, use
//               clear_render_textures and add_render_texture
//               instead.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1408  3 tex 1 1423  10 allow_bind 1 1364  6 to_ram 1 1364  
375 0 0 6 398 1460 0 0 743 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_size
//       Access: Published
//  Description: Returns the visible size of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
376 0 0 6 399 1345 0 0 746 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_x_size
//       Access: Published
//  Description: Returns the visible width of the window or buffer, if
//               it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
377 0 0 6 400 1345 0 0 747 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_y_size
//       Access: Published
//  Description: Returns the visible height of the window or buffer,
//               if it is known.  In certain cases (e.g. fullscreen
//               windows), the size may not be known until after the
//               object has been fully created.  Check has_size()
//               first.
//
//               Certain objects (like windows) may change size
//               spontaneously; this method is not thread-safe.  To
//               get the size of a window in a thread-safe manner,
//               query get_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
378 0 0 7 401 1463 0 0 435 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_size
//       Access: Published
//  Description: Returns the internal size of the window or buffer.
//               This is almost always the same as get_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
379 0 0 6 402 1345 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_x_size
//       Access: Published
//  Description: Returns the internal width of the window or buffer.
//               This is almost always the same as get_x_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
380 0 0 6 403 1345 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_y_size
//       Access: Published
//  Description: Returns the internal height of the window or buffer.
//               This is almost always the same as get_y_size(),
//               except when a pixel_zoom is in effect--see
//               set_pixel_zoom().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
381 0 0 7 404 1463 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel size of the left eye, based on scaling
//               get_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
382 0 0 6 405 1345 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the left eye, based on scaling
//               get_x_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
383 0 0 6 406 1345 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the left eye, based on scaling
//               get_y_size() by get_sbs_left_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
384 0 0 7 407 1463 0 0 518 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel size of the right eye, based on scaling
//               get_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
385 0 0 6 408 1345 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_x_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel width of the right eye, based on scaling
//               get_x_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_x_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
386 0 0 6 409 1345 0 0 526 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_y_size
//       Access: Published
//  Description: If side-by-side stereo is enabled, this returns the
//               pixel height of the right eye, based on scaling
//               get_y_size() by get_sbs_right_dimensions().  If
//               side-by-side stereo is not enabled, this returns the
//               same as get_y_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
387 0 0 6 410 1364 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::has_size
//       Access: Published
//  Description: Returns true if the size of the window/frame buffer
//               is known, false otherwise.  In certain cases the size
//               may not be known until after the object has been
//               fully created.  Also, certain objects (like windows)
//               may change size spontaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
388 0 0 6 411 1364 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_valid
//       Access: Published
//  Description: Returns true if the output is fully created and ready
//               for rendering, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
389 0 0 6 412 1364 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_nonzero_size
//       Access: Published
//  Description: Returns true if the output has a nonzero size in both
//               X and Y, or false if it is zero (and therefore
//               invalid).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
390 0 0 4 413 1366 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_active
//       Access: Published
//  Description: Sets the active flag associated with the
//               GraphicsOutput.  If the GraphicsOutput is marked
//               inactive, nothing is rendered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  6 active 1 1364  
391 0 0 6 414 1364 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_active
//       Access: Published, Virtual
//  Description: Returns true if the window is ready to be rendered
//               into, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
392 0 0 4 415 1366 0 0 1275 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_one_shot
//       Access: Published
//  Description: Changes the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will render the
//               current frame and then automatically set itself
//               inactive.  This is particularly useful for buffers
//               that are created for the purposes of
//               render-to-texture, for static textures that don't
//               need to be continually re-rendered once they have
//               been rendered the first time.
//
//               Setting the buffer inactive is not the same thing as
//               destroying it.  You are still responsible for passing
//               this buffer to GraphicsEngine::remove_window() when
//               you no longer need the texture, in order to clean up
//               fully.  (However, you should not call remove_window()
//               on this buffer while the texture is still needed,
//               because depending on the render-to-texture mechanism
//               in use, this may invalidate the texture contents.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  8 one_shot 1 1364  
393 0 0 6 416 1364 0 0 427 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_one_shot
//       Access: Published
//  Description: Returns the current setting of the one-shot flag.
//               When this is true, the GraphicsOutput will
//               automatically set itself inactive after the next
//               frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
394 0 0 4 417 1366 0 0 947 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_inverted
//       Access: Published
//  Description: Changes the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down and backwards, that is, inverted
//               as if viewed through a mirror placed on the floor.
//
//               This is primarily intended to support DirectX (and a
//               few buggy OpenGL graphics drivers) that perform a
//               framebuffer-to-texture copy upside-down from the
//               usual OpenGL (and Panda) convention.  Panda will
//               automatically set this flag for offscreen buffers on
//               hardware that is known to do this, to compensate when
//               rendering offscreen into a texture.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  8 inverted 1 1364  
395 0 0 6 418 1364 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_inverted
//       Access: Published
//  Description: Returns the current setting of the inverted flag.
//               When this is true, the scene is rendered into the
//               window upside-down, flipped like a mirror along the X
//               axis.  See set_inverted().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
396 0 0 4 419 1366 0 0 688 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_swap_eyes
//       Access: Public
//  Description: Changes the "swap eyes" flag.  This flag is normally
//               false.  When it is true, the left and right channels
//               of a stereo DisplayRegion are sent to the opposite
//               channels in the rendering backend.  This is meant to
//               work around hardware that inadvertently swaps the
//               output channels, or hardware for which it cannot be
//               determined which channel is which until runtime.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  9 swap_eyes 1 1364  
397 0 0 6 420 1364 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_swap_eyes
//       Access: Public
//  Description: Returns the current setting of the "swap eyes" flag.
//               See set_swap_eyes().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
398 0 0 4 421 1366 0 0 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_red_blue_stereo
//       Access: Published
//  Description: Enables red-blue stereo mode on this particular
//               window.  When red-blue stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render in the red (or specified) channel only, while
//               DisplayRegions that have the "right" channel set will
//               render in the blue (or specified) channel only.
//
//               The remaining two parameters specify the particular
//               color channel(s) to associate with each eye.  Use the
//               bits defined in ColorWriteAttrib::Channels.
//
//               This can be used to achieve a cheesy stereo mode in
//               the absence of hardware-supported stereo.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1408  15 red_blue_stereo 1 1364  19 left_eye_color_mask 1 1378  20 right_eye_color_mask 1 1378  
399 0 0 6 422 1364 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_red_blue_stereo
//       Access: Published
//  Description: Returns whether red-blue stereo mode is in effect for
//               this particular window.  See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
400 0 0 6 423 1378 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_left_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               left-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
401 0 0 6 424 1378 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_right_eye_color_mask
//       Access: Published
//  Description: Returns the color mask in effect when rendering a
//               right-eye view in red_blue stereo mode.  This is one
//               or more bits defined in ColorWriteAttrib::Channels.
//               See set_red_blue_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
402 0 0 4 425 1366 0 0 1007 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  19 side_by_side_stereo 1 1364  
403 0 0 4 425 1366 0 0 1007 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_side_by_side_stereo
//       Access: Published
//  Description: Enables side-by-side stereo mode on this particular
//               window.  When side-by-side stereo mode is in effect,
//               DisplayRegions that have the "left" channel set will
//               render on the part of the window specified by
//               sbs_left_dimensions (typically the left half: (0,
//               0.5, 0, 1)), while DisplayRegions that have the
//               "right" channel set will render on the part of the
//               window specified by sbs_right_dimensions (typically
//               the right half: (0.5, 1, 0, 1)).
//
//               This is commonly used in a dual-monitor mode, where a
//               window is opened that spans two monitors, and each
//               monitor represents a different eye.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1408  19 side_by_side_stereo 1 1364  19 sbs_left_dimensions 1 1406  20 sbs_right_dimensions 1 1406  
404 0 0 6 426 1364 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_side_by_side_stereo
//       Access: Published
//  Description: Returns whether side-by-side stereo mode is in effect for
//               this particular window.  See set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
405 0 0 6 427 1406 0 0 458 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_left_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the left channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
406 0 0 6 428 1406 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sbs_right_dimensions
//       Access: Published
//  Description: Returns the effective sub-region of the window for
//               displaying the right channel, if side-by-side stereo
//               mode is in effect for the window.  See
//               set_side_by_side_stereo().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
407 0 0 6 429 1431 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_fb_properties
//       Access: Published
//  Description: Returns the framebuffer properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
408 0 0 6 430 1364 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::is_stereo
//       Access: Published
//  Description: Returns Returns true if this window can render stereo
//               DisplayRegions, either through red-blue stereo (see
//               set_red_blue_stereo()) or through true hardware
//               stereo rendering.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
409 0 0 4 431 1366 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_delete_flag
//       Access: Published
//  Description: Resets the delete flag, so the GraphicsOutput will
//               not be automatically deleted before the beginning of
//               the next frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
410 0 0 6 432 1364 0 0 460 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_delete_flag
//       Access: Published
//  Description: Returns the current setting of the delete flag.  When
//               this is true, the GraphicsOutput will automatically
//               be removed before the beginning of the next frame by
//               the GraphicsEngine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
411 0 0 4 433 1366 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_sort
//       Access: Published, Virtual
//  Description: Adjusts the sorting order of this particular
//               GraphicsOutput, relative to other GraphicsOutputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  4 sort 1 1345  
412 0 0 6 434 1345 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_sort
//       Access: Published
//  Description: Returns the sorting order of this particular
//               GraphicsOutput.  The various GraphicsOutputs within a
//               particular thread will be rendered in the indicated
//               order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
413 0 0 4 435 1366 0 0 1026 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_child_sort
//       Access: Published
//  Description: Specifies the sort value of future offscreen buffers
//               created by make_texture_sort().
//
//               The purpose of this method is to allow the user to
//               limit the sort value chosen for a buffer created via
//               make_texture_buffer().  Normally, this buffer will be
//               assigned a value of get_sort() - 1, so that it
//               will be rendered before this window is rendered; but
//               sometimes this isn't sufficiently early, especially
//               if other buffers also have a view into the same
//               scene.
//
//               If you specify a value here, then new buffers created
//               via make_texture_buffer() will be given that sort
//               value instead of get_sort() - 1.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  10 child_sort 1 1345  
414 0 0 4 436 1366 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::clear_child_sort
//       Access: Published
//  Description: Resets the sort value of future offscreen buffers
//               created by make_texture_sort() to the default value.
//               See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
415 0 0 6 437 1345 0 0 351 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_child_sort
//       Access: Published
//  Description: Returns the sort value of future offscreen buffers
//               created by make_texture_sort(). See set_child_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
416 0 0 4 438 1366 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::trigger_copy
//       Access: Published
//  Description: When the GraphicsOutput is in triggered copy mode,
//               this function triggers the copy (at the end of the
//               next frame).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
417 0 0 7 439 1403 791 0 652 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
418 0 0 7 439 1403 791 0 735 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  10 dimensions 1 1406  
419 0 0 7 439 1403 791 0 735 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               If is_stereo() is true for this window, and
//               default-stereo-camera is configured true, this
//               actually makes a StereoDisplayRegion.  Call
//               make_mono_display_region() or
//               make_stereo_display_region() if you want to insist on
//               one or the other.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1408  1 l 1 1376  1 r 1 1376  1 b 1 1376  1 t 1 1376  
420 0 0 7 440 1403 791 0 732 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
421 0 0 7 440 1403 791 0 815 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  10 dimensions 1 1406  
422 0 0 7 440 1403 791 0 732 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_mono_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This generally returns a mono DisplayRegion, even if
//               is_stereo() is true.  However, if side-by-side stereo
//               is enabled, this will return a StereoDisplayRegion
//               whose two eyes are both set to SC_mono.  (This is
//               necessary because in side-by-side stereo mode, it is
//               necessary to draw even mono DisplayRegions twice).
//////////////////////////////////////////////////////////////////// 5 4 this 3 1408  1 l 1 1376  1 r 1 1376  1 b 1 1376  1 t 1 1376  
423 0 0 7 441 1429 791 0 428 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
424 0 0 7 441 1429 791 0 511 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the indicated
//               sub-rectangle within the window.  The range on all
//               parameters is 0..1.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  10 dimensions 1 1406  
425 0 0 7 441 1429 791 0 428 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_stereo_display_region
//       Access: Published
//  Description: Creates a new DisplayRegion that covers the entire
//               window.
//
//               This always returns a stereo DisplayRegion, even if
//               is_stereo() is false.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1408  1 l 1 1376  1 r 1 1376  1 b 1 1376  1 t 1 1376  
426 0 0 6 442 1364 0 0 492 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_display_region
//       Access: Published
//  Description: Removes the indicated DisplayRegion from the window,
//               and destructs it if there are no other references.
//
//               Returns true if the DisplayRegion is found and
//               removed, false if it was not a part of the window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  14 display_region 1 1403  
427 0 0 4 443 1366 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::remove_all_display_regions
//       Access: Published
//  Description: Removes all display regions from the window, except
//               the default one that is created with the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
428 0 0 7 444 1403 791 0 951 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_overlay_display_region
//       Access: Published
//  Description: Returns the special "overlay" DisplayRegion that is
//               created for each window or buffer.  This
//               DisplayRegion covers the entire window, but cannot be
//               used for rendering.  It is a placeholder only, to
//               indicate the dimensions of the window, and is usually
//               used internally for purposes such as clearing the
//               window, or grabbing a screenshot of the window.
//
//               There are very few applications that require access
//               to this DisplayRegion.  Normally, you should create
//               your own DisplayRegion that covers the window, if you
//               want to render to the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
429 0 0 4 445 1366 0 0 1132 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::set_overlay_display_region
//       Access: Published
//  Description: Replaces the special "overlay" DisplayRegion that is
//               created for each window or buffer.  See
//               get_overlay_display_region().  This must be a new
//               DisplayRegion that has already been created for this
//               window, for instance via a call to
//               make_mono_display_region().  You are responsible for
//               ensuring that the new DisplayRegion covers the entire
//               window.  The previous overlay display region is not
//               automatically removed; you must explicitly call
//               remove_display_region() on it after replacing it with
//               this method, if you wish it to be removed.
//
//               Normally, there is no reason to change the overlay
//               DisplayRegion, so this method should be used only
//               in very unusual circumstances.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  14 display_region 1 1403  
430 0 0 6 446 1345 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_display_regions
//       Access: Published
//  Description: Returns the number of DisplayRegions that have
//               been created within the window, active or otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
431 0 0 7 447 1403 791 0 542 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_display_region
//       Access: Published
//  Description: Returns the nth DisplayRegion of those that have been
//               created within the window.  This may return NULL if n
//               is out of bounds; particularly likely if the number
//               of display regions has changed since the last call to
//               get_num_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1458  1 n 1 1345  
432 0 0 6 448 1345 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_num_active_display_regions
//       Access: Published
//  Description: Returns the number of active DisplayRegions that have
//               been created within the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
433 0 0 7 449 1403 791 0 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_active_display_region
//       Access: Published
//  Description: Returns the nth active DisplayRegion of those that
//               have been created within the window.  This may return
//               NULL if n is out of bounds; particularly likely if
//               the number of display regions has changed since the
//               last call to get_num_active_display_regions().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1458  1 n 1 1345  
434 0 0 7 450 1408 1020 0 1790 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_texture_buffer
//       Access: Published
//  Description: Creates and returns an offscreen buffer for rendering
//               into, the result of which will be a texture suitable
//               for applying to geometry within the scene rendered
//               into this window.
//
//               If tex is not NULL, it is the texture that will be
//               set up for rendering into; otherwise, a new Texture
//               object will be created.  In either case, the target
//               texture can be retrieved from the return value with
//               buffer->get_texture() (assuming the return value is
//               not NULL).
//
//               If to_ram is true, the buffer will be set up to
//               download its contents to the system RAM memory
//               associated with the Texture object, instead of
//               keeping it strictly within texture memory; this is
//               much slower, but it allows using the texture with any
//               GSG.
//
//               This will attempt to be smart about maximizing render
//               performance while minimizing framebuffer waste.  It
//               might return a GraphicsBuffer set to render directly
//               into a texture, if possible; or it might return a
//               ParasiteBuffer that renders into this window.  The
//               return value is NULL if the buffer could not be
//               created for some reason.
//
//               When you are done using the buffer, you should remove
//               it with a call to GraphicsEngine::remove_window().
//////////////////////////////////////////////////////////////////// 7 4 this 3 1408  4 name 1 1367  6 x_size 1 1345  6 y_size 1 1345  3 tex 1 1423  6 to_ram 1 1364  3 fbp 1 1430  
435 0 0 7 451 1408 1020 0 1206 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_cube_map
//       Access: Published
//  Description: This is similar to make_texture_buffer() in that it
//               allocates a separate buffer suitable for rendering to
//               a texture that can be assigned to geometry in this
//               window, but in this case, the buffer is set up to
//               render the six faces of a cube map.
//
//               The buffer is automatically set up with six display
//               regions and six cameras, each of which are assigned
//               the indicated draw_mask and parented to the given
//               camera_rig node (which you should then put in your
//               scene to render the cube map from the appropriate
//               point of view).
//
//               You may take the texture associated with the buffer
//               and apply it to geometry, particularly with
//               TexGenAttrib::M_world_cube_map also in effect, to
//               apply a reflection of everything seen by the camera
//               rig.
//////////////////////////////////////////////////////////////////// 7 4 this 3 1408  4 name 1 1367  4 size 1 1345  10 camera_rig 1 1414  11 camera_mask 1 1464  6 to_ram 1 1364  3 fbp 1 1430  
436 0 0 7 452 1421 0 0 806 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::make_screenshot_filename
//       Access: Published, Static
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The default filename is
//               generated from the supplied prefix and from the
//               Config variable screenshot-filename, which contains
//               the following strings:
//
//                 %~p - the supplied prefix
//                 %~f - the frame count
//                 %~e - the value of screenshot-extension
//                 All other % strings in strftime().
//////////////////////////////////////////////////////////////////// 1 6 prefix 1 1367  
437 0 0 7 453 1421 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot_default
//       Access: Published
//  Description: Saves a screenshot of the region to a default
//               filename, and returns the filename, or empty string
//               if the screenshot failed.  The filename is generated
//               by make_screenshot_filename().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  6 prefix 1 1367  
438 0 0 6 454 1364 0 0 600 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::save_screenshot
//       Access: Published
//  Description: Saves a screenshot of the region to the indicated
//               filename.  The image comment is an optional user
//               readable string that will be saved with the header
//               of the image (if the file format supports embedded
//               data; for example jpg allows comments).  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1408  8 filename 1 1398  13 image_comment 1 1367  
439 0 0 7 455 1423 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer and returns it as Texture, or NULL on
//               failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
440 0 0 6 455 1364 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_screenshot
//       Access: Published
//  Description: Captures the most-recently rendered image from the
//               framebuffer into the indicated PNMImage.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  5 image 1 1424  
441 0 0 7 456 1414 0 0 959 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_texture_card
//       Access: Published
//  Description: Returns a PandaNode containing a square polygon.
//               The dimensions are (-1,0,-1) to (1,0,1). The texture
//               coordinates are such that the texture of this
//               GraphicsOutput is aligned properly to the polygon.
//               The GraphicsOutput promises to surgically update
//               the Geom inside the PandaNode if necessary to maintain
//               this invariant.
//
//               Each invocation of this function returns a freshly-
//               allocated PandaNode.  You can therefore safely modify
//               the RenderAttribs of the PandaNode.  The
//               PandaNode is initially textured with the texture
//               of this GraphicOutput.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
442 0 0 6 457 1364 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::share_depth_buffer
//       Access: Published, Virtual
//  Description: Will attempt to use the depth buffer of the input
//               graphics_output. The buffer sizes must be exactly
//               the same.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1408  15 graphics_output 1 1408  
443 0 0 4 458 1366 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::unshare_depth_buffer
//       Access: Published, Virtual
//  Description: Discontinue sharing the depth buffer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
444 0 0 6 459 1364 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_supports_render_texture
//       Access: Published, Virtual
//  Description: Returns true if this particular GraphicsOutput can
//               render directly into a texture, or false if it must
//               always copy-to-texture at the end of each frame to
//               achieve this effect.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
445 0 0 6 460 1364 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::flip_ready
//       Access: Published, Virtual
//  Description: Returns true if a frame has been rendered and needs
//               to be flipped, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1458  
446 0 0 7 461 1408 1020 0 502 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsOutput::get_host
//       Access: Published, Virtual
//  Description: This is normally called only from within
//               make_texture_buffer().  When called on a
//               ParasiteBuffer, it returns the host of that buffer;
//               but when called on some other buffer, it returns the
//               buffer itself.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1408  
447 0 0 7 462 1361 0 0 0 0 
448 0 0 7 379 1468 0 0 0 1 4 this 3 1408  
449 0 0 7 380 1408 1020 0 0 1 4 this 3 1468  
450 0 0 6 381 1368 0 0 0 1 4 this 3 1408  
451 0 0 7 382 1408 1020 0 0 1 4 this 3 1368  
452 0 0 4 465 1366 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  6 button 1 1470  
453 0 0 4 465 1366 0 0 291 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1469  6 button 1 1470  4 time 1 1472  
454 0 0 4 466 1366 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Published
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  6 button 1 1470  
455 0 0 4 466 1366 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_resume_down
//       Access: Published
//  Description: Records that the indicated button was depressed
//               earlier, and we only just detected the event after
//               the fact.  This is mainly useful for tracking the
//               state of modifier keys.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1469  6 button 1 1470  4 time 1 1472  
456 0 0 4 467 1366 0 0 288 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  6 button 1 1470  
457 0 0 4 467 1366 0 0 288 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1469  6 button 1 1470  4 time 1 1472  
458 0 0 4 468 1366 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Published
//  Description: Records that the indicated keystroke has been
//               generated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  7 keycode 1 1345  
459 0 0 4 468 1366 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::keystroke
//       Access: Published
//  Description: Records that the indicated keystroke has been
//               generated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1469  7 keycode 1 1345  4 time 1 1472  
460 0 0 4 469 1366 0 0 671 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Published
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1469  
461 0 0 4 469 1366 0 0 671 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::focus_lost
//       Access: Published
//  Description: This should be called when the window focus is lost,
//               so that we may miss upcoming button events
//               (especially "up" events) for the next period of time.
//               It generates keyboard and mouse "up" events for those
//               buttons that we previously sent unpaired "down"
//               events, so that the Panda application will believe
//               all buttons are now released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  4 time 1 1472  
462 0 0 4 470 1366 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  6 button 1 1470  
463 0 0 4 470 1366 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_down
//       Access: Published
//  Description: Records that the indicated button has been depressed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1469  6 button 1 1470  4 time 1 1472  
464 0 0 4 471 1366 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  6 button 1 1470  
465 0 0 4 471 1366 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::raw_button_up
//       Access: Published
//  Description: Records that the indicated button has been released.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1469  6 button 1 1470  4 time 1 1472  
466 0 0 4 472 1366 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1469  1 x 1 1472  1 y 1 1472  
467 0 0 4 472 1366 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_in_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is within the window, at
//               the given pixel coordinates.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1469  1 x 1 1472  1 y 1 1472  4 time 1 1472  
468 0 0 4 473 1366 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1469  
469 0 0 4 473 1366 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer_out_of_window
//       Access: Published
//  Description: To be called by a particular kind of GraphicsWindow
//               to indicate that the pointer is no longer within the
//               window.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1469  4 time 1 1472  
470 0 0 4 474 1366 0 0 466 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::candidate
//       Access: Published
//  Description: Records that the indicated candidate string has been
//               highlighted.  This is used to implement IME support
//               for typing in international languages, especially
//               Chinese/Japanese/Korean.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1469  16 candidate_string 1 1367  15 highlight_start 1 1383  13 highlight_end 1 1383  10 cursor_pos 1 1383  
471 0 0 4 475 1366 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowInputDevice::set_pointer
//       Access: Published
//  Description: Records that a mouse movement has taken place.
//////////////////////////////////////////////////////////////////// 5 4 this 3 1469  5 inwin 1 1364  1 x 1 1472  1 y 1 1472  4 time 1 1472  
472 0 0 6 478 1345 0 0 0 1 4 this 3 1473  
473 0 0 6 479 1345 0 0 0 1 4 this 3 1473  
474 0 0 6 480 1345 0 0 0 1 4 this 3 1473  
475 0 0 6 481 1345 0 0 0 1 4 this 3 1473  
476 0 0 6 485 1345 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_hwnd
//       Access: Published
//  Description: Returns the Windows proc hwnd parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1474  
477 0 0 6 486 1345 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_msg
//       Access: Published
//  Description: Returns the Windows proc msg parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1474  
478 0 0 6 487 1345 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_wparam
//       Access: Published
//  Description: Returns the Windows proc wparam parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1474  
479 0 0 6 488 1345 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_lparam
//       Access: Published
//  Description: Returns the Windows proc lparam parameter.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1474  
480 0 0 6 489 1364 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::is_touch_event
//       Access: Public, Virtual
//  Description: Returns whether the event is a touch event.
//               
//////////////////////////////////////////////////////////////////// 1 4 this 3 1476  
481 0 0 6 490 1345 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_num_touches
//       Access: Public, Virtual
//  Description: Returns the current number of touches on the window.
//               
//////////////////////////////////////////////////////////////////// 1 4 this 3 1476  
482 0 0 7 491 1473 1114 0 330 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindowProcCallbackData::get_touch_info
//       Access: Public, Virtual
//  Description: Returns the TouchInfo object describing the specified touch.
//               
//////////////////////////////////////////////////////////////////// 2 4 this 3 1476  5 index 1 1345  
483 0 0 7 492 1361 0 0 0 0 
484 0 0 7 495 1390 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_properties
//       Access: Published
//  Description: Returns the current properties of the window.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
485 0 0 7 496 1390 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_requested_properties
//       Access: Published
//  Description: Returns the properties of the window that are
//               currently requested.  These properties will be
//               applied to the window (if valid) at the next
//               execution of process_events().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
486 0 0 4 497 1366 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::clear_rejected_properties
//       Access: Published
//  Description: Empties the set of failed properties that will be
//               returned by get_rejected_properties().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1479  
487 0 0 7 498 1389 707 0 563 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_rejected_properties
//       Access: Published
//  Description: Returns the set of properties that have recently been
//               requested, but could not be applied to the window for
//               some reason.  This set of properties will remain
//               unchanged until they are changed by a new failed
//               request, or clear_rejected_properties() is called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
488 0 0 4 499 1366 0 0 603 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::request_properties
//       Access: Published
//  Description: Requests a property change on the window.  For
//               example, use this method to request a window change
//               size or minimize or something.
//
//               The change is not made immediately; rather, the
//               request is saved and will be applied the next time
//               the window task is run (probably at the next frame).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1479  20 requested_properties 1 1390  
489 0 0 6 500 1364 0 0 631 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_closed
//       Access: Published
//  Description: Returns true if the window has not yet been opened,
//               or has been fully closed, false if it is open.  The
//               window is not opened immediately after
//               GraphicsEngine::make_window() is called; nor is it
//               closed immediately after
//               GraphicsEngine::remove_window() is called.  Either
//               operation may take a frame or two.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
490 0 0 6 501 1364 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::is_fullscreen
//       Access: Published
//  Description: Returns true if the window has been opened as a
//               fullscreen window, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
491 0 0 4 502 1366 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_window_event
//       Access: Published
//  Description: Changes the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.
//
//               By default, all windows have the same window event
//               unless they are explicitly changed.  When the event
//               is generated, it includes one parameter: the window
//               itself.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1479  12 window_event 1 1367  
492 0 0 6 503 1367 0 0 421 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_event
//       Access: Published
//  Description: Returns the name of the event that is generated when
//               this window is modified externally, e.g. to be
//               resized or closed by the user.  See set_window_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
493 0 0 4 504 1366 0 0 1393 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_close_request_event
//       Access: Published
//  Description: Sets the event that is triggered when the user
//               requests to close the window, e.g. via alt-F4, or
//               clicking on the close box.
//
//               The default for each window is for this event to be
//               the empty string, which means the window-close
//               request is handled immediately by Panda (and the
//               window will be closed without the app getting a
//               chance to intervene).  If you set this to a nonempty
//               string, then the window is not closed, but instead
//               the event is thrown.  It is then up to the app to
//               respond appropriately, for instance by presenting an
//               "are you sure?" dialog box, and eventually calling
//               close_window() when the user is sure.
//
//               It is considered poor form to set this string and
//               then not handle the event.  This can frustrate the
//               user by making it difficult for him to cleanly shut
//               down the application (and may force the user to
//               hard-kill the app, or reboot the machine).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1479  19 close_request_event 1 1367  
494 0 0 6 505 1367 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_close_request_event
//       Access: Published
//  Description: Returns the name of the event set via
//               set_close_request_event().  If this string is
//               nonempty, then when the user requests to close
//               window, this event will be generated instead.  See
//               set_close_request_event().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
495 0 0 4 506 1366 0 0 894 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::set_unexposed_draw
//       Access: Published
//  Description: If this flag is false, the window is redrawn only
//               after it has received a recent "unexpose" or "draw"
//               event from the underlying windowing systme.  If this
//               flag is true, the window is redrawn every frame
//               regardless.  Setting this false may prevent the
//               window from redrawing unnecessarily when it is
//               hidden, and may play nicer with other windows on the
//               desktop, but may adversely affect frame rate even
//               when the window is fully visible; setting it true will
//               ensure that the window contents are always current.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1479  14 unexposed_draw 1 1364  
496 0 0 6 507 1364 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_unexposed_draw
//       Access: Published
//  Description: See set_unexposed_draw().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
497 0 0 7 508 1381 0 0 641 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_window_handle
//       Access: Published
//  Description: Returns the WindowHandle corresponding to this window
//               on the desktop.  This is mainly useful for
//               communicating with external libraries.  Use
//               window_handle->get_os_handle()->get_handle(), or
//               window_handle->get_string_handle(), to get the actual
//               OS-specific window handle object, whatever type that
//               might be.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
498 0 0 6 509 1345 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_num_input_devices
//       Access: Published
//  Description: Returns the number of separate input devices
//               associated with the window.  Typically, a window will
//               have exactly one input device: the keyboard/mouse
//               pair.  However, some windows may have no input
//               devices, and others may add additional devices, for
//               instance for a joystick.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
499 0 0 6 510 1367 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_input_device_name
//       Access: Published
//  Description: Returns the name of the nth input device.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1477  6 device 1 1345  
500 0 0 6 511 1364 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_pointer
//       Access: Published
//  Description: Returns true if the nth input device has a
//               screen-space pointer (for instance, a mouse), false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1477  6 device 1 1345  
501 0 0 6 512 1364 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::has_keyboard
//       Access: Published
//  Description: Returns true if the nth input device has a keyboard,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1477  6 device 1 1345  
502 0 0 7 513 1481 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: x11GraphicsWindow::get_keyboard_map
//       Access: Published, Virtual
//  Description: Returns a ButtonMap containing the association
//               between raw buttons and virtual buttons.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1477  
503 0 0 4 514 1366 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_events
//       Access: Published
//  Description: Turn on the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1479  6 device 1 1345  
504 0 0 4 515 1366 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: Turn off the generation of pointer events.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1479  6 device 1 1345  
505 0 0 4 516 1366 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::enable_pointer_mode
//       Access: Published
//  Description: See GraphicsWindowInputDevice::enable_pointer_mode
//////////////////////////////////////////////////////////////////// 3 4 this 3 1479  6 device 1 1345  5 speed 1 1472  
506 0 0 4 517 1366 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::disable_pointer_events
//       Access: Published
//  Description: See GraphicsWindowInputDevice::disable_pointer_mode
//////////////////////////////////////////////////////////////////// 2 4 this 3 1479  6 device 1 1345  
507 0 0 7 518 1483 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::get_pointer
//       Access: Published
//  Description: Returns the MouseData associated with the nth
//               input device's pointer.  This is deprecated; use
//               get_pointer_device().get_pointer() instead, or for
//               raw mice, use the InputDeviceManager interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1477  6 device 1 1345  
508 0 0 6 519 1364 0 0 540 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::move_pointer
//       Access: Published, Virtual
//  Description: Forces the pointer to the indicated position within
//               the window, if possible.
//
//               Returns true if successful, false on failure.  This
//               may fail if the mouse is not currently within the
//               window, or if the API doesn't support this operation.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1479  6 device 1 1345  1 x 1 1345  1 y 1 1345  
509 0 0 4 520 1366 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsWindow::close_ime
//       Access: Published, Virtual
//  Description: Forces the ime window to close if any
//
//////////////////////////////////////////////////////////////////// 1 4 this 3 1479  
510 0 0 7 521 1361 0 0 0 0 
511 0 0 4 542 1366 0 0 829 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_events_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is polled for window events, including
//               mouse and keyboard events, as well as window resize
//               events and other system-generated events.
//
//               This callback will receive a
//               CallbackGraphicsWindow::EventsCallbackData.
//
//               This callback should process any system-generated
//               events, and call data->upcall() to process requested
//               property change requests made via
//               request_properties().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1484  6 object 1 1419  
512 0 0 4 543 1366 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_events_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_events_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1484  
513 0 0 7 544 1419 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_events_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_events_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1485  
514 0 0 4 545 1366 0 0 1100 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_properties_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window receives a property change request from
//               user code (e.g. via request_properties).
//
//               This callback will receive a
//               CallbackGraphicsWindow::PropertiesCallbackData, which
//               provides a get_properties() method that returns a
//               modifiable reference to a WindowsProperties object.
//               This object will contain only those properties
//               requested by user code.  The callback should handle
//               any of the requests it finds, including and
//               especially set_open(), and remove them from the
//               object when it has handled them.  Any unhandled
//               properties should be left unchanged in the properties
//               object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1484  6 object 1 1419  
515 0 0 4 546 1366 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_properties_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_properties_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1484  
516 0 0 7 547 1419 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_properties_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_properties_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1485  
517 0 0 4 548 1366 0 0 702 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::set_render_callback
//       Access: Published
//  Description: Sets the CallbackObject that will be notified when
//               this window is invoked (in the draw thread) to render
//               its contents, and/or flip the graphics buffers.
//
//               This callback will actually serve several different
//               functions.  It receivces a RenderCallbackData, and
//               you can query data->get_callback_type() to return the
//               actual function of each particular callback.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1484  6 object 1 1419  
518 0 0 4 549 1366 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::clear_render_callback
//       Access: Published
//  Description: Removes the callback set by an earlier call to
//               set_render_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1484  
519 0 0 7 550 1419 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_render_callback
//       Access: Published
//  Description: Returns the CallbackObject set by set_render_callback().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1485  
520 0 0 6 551 1469 0 0 480 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::get_input_device
//       Access: Published
//  Description: Returns a writable reference to the nth input device
//               (mouse).  This is intended to be used for the window
//               implementation to record mouse and keyboard input
//               information for the Panda system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1484  6 device 1 1345  
521 0 0 6 552 1345 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::create_input_device
//       Access: Published
//  Description: Adds a new input device (mouse) to the window with
//               the indicated name.  Returns the index of the new
//               device.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1484  4 name 1 1367  
522 0 0 7 553 1361 0 0 0 0 
523 0 0 7 524 1484 1020 0 306 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::WindowCallbackData::get_window
//       Access: Published
//  Description: Returns the window this callback was triggered from.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1487  
524 0 0 7 525 1361 0 0 0 0 
525 0 0 7 528 1361 0 0 0 0 
526 0 0 6 531 1389 0 0 504 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::PropertiesCallbackData::get_properties
//       Access: Published
//  Description: Returns the WindowProperties object that this
//               callback should process.  Any properties that are
//               handled should be removed from this object;
//               properties that are unhandled should be left alone.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1489  
527 0 0 7 532 1361 0 0 0 0 
528 0 0 6 536 1342 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_callback_type
//       Access: Published
//  Description: Since the render callback is shared for several
//               functions, this method is needed to indicate which
//               particular function is being invoked with this
//               callback.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1491  
529 0 0 6 537 1331 0 0 507 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_frame_mode
//       Access: Published
//  Description: If the callback type (returned by get_callback_type)
//               is RCT_begin_frame or RCT_end_frame, then this method
//               will return the particular frame mode indicating
//               what, precisely, we want to do this frame.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1491  
530 0 0 4 538 1366 0 0 549 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::set_render_flag
//       Access: Published
//  Description: If the callback type is RCT_begin_frame, this call is
//               available to specify the return value from the
//               begin_frame() call.  If this is true (the default),
//               the frame is rendered normally; if it is false, the
//               frame is omitted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1493  11 render_flag 1 1364  
531 0 0 6 539 1364 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: CallbackGraphicsWindow::RenderCallbackData::get_render_flag
//       Access: Published
//  Description: Returns the current setting of the render flag.  See
//               set_render_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1491  
532 0 0 7 540 1361 0 0 0 0 
533 0 0 6 571 1364 0 0 0 2 4 this 3 1494  5 other 1 1494  
534 0 0 6 572 1364 0 0 0 2 4 this 3 1494  5 other 1 1494  
535 0 0 4 573 1366 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: DisplayMode::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1494  3 out 1 1385  
536 0 0 4 557 1366 0 0 0 2 4 this 3 1496  5 value 1 1345  
537 0 0 6 556 1345 0 0 0 1 4 this 3 1494  
538 0 0 4 560 1366 0 0 0 2 4 this 3 1496  5 value 1 1345  
539 0 0 6 559 1345 0 0 0 1 4 this 3 1494  
540 0 0 4 563 1366 0 0 0 2 4 this 3 1496  5 value 1 1345  
541 0 0 6 562 1345 0 0 0 1 4 this 3 1494  
542 0 0 4 566 1366 0 0 0 2 4 this 3 1496  5 value 1 1345  
543 0 0 6 565 1345 0 0 0 1 4 this 3 1494  
544 0 0 4 569 1366 0 0 0 2 4 this 3 1496  5 value 1 1345  
545 0 0 6 568 1345 0 0 0 1 4 this 3 1494  
546 0 0 7 578 1365 1191 0 231 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
547 0 0 6 579 1345 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
548 0 0 6 580 1345 0 0 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
549 0 0 6 581 1345 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_window_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
550 0 0 6 582 1345 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_window_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
551 0 0 6 583 1345 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_total_display_modes
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
552 0 0 6 584 1494 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 display_index 1 1345  
553 0 0 6 585 1345 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 display_index 1 1345  
554 0 0 6 586 1345 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 display_index 1 1345  
555 0 0 6 587 1345 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 display_index 1 1345  
556 0 0 6 588 1345 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_refresh_rate
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 display_index 1 1345  
557 0 0 6 589 1345 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_display_mode_fullscreen_only
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  13 display_index 1 1345  
558 0 0 6 590 1327 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_shader_model
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
559 0 0 6 591 1345 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_video_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
560 0 0 6 592 1345 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_texture_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
561 0 0 4 593 1366 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_memory_information
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
562 0 0 6 594 1497 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
563 0 0 6 595 1497 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_physical_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
564 0 0 6 596 1497 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
565 0 0 6 597 1497 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_page_file_size
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
566 0 0 6 598 1497 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
567 0 0 6 599 1497 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_available_process_virtual_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
568 0 0 6 600 1345 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_memory_load
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
569 0 0 6 601 1497 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_fault_count
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
570 0 0 6 602 1497 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
571 0 0 6 603 1497 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_process_memory
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
572 0 0 6 604 1497 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
573 0 0 6 605 1497 0 0 244 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_peak_page_file_usage
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
574 0 0 6 606 1345 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_vendor_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
575 0 0 6 607 1345 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_device_id
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
576 0 0 6 608 1345 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_product
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
577 0 0 6 609 1345 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
578 0 0 6 610 1345 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_sub_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
579 0 0 6 611 1345 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_build
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
580 0 0 6 612 1345 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_month
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
581 0 0 6 613 1345 0 0 239 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_day
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
582 0 0 6 614 1345 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_driver_date_year
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
583 0 0 6 615 1345 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_version
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
584 0 0 6 616 1345 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_size
//       Access: Published
//  Description: Returns the number of 32-bit values for cpu id 
//               binary data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
585 0 0 6 617 1378 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_id_data
//       Access: Published
//  Description: Returns part of cpu id binary data based on the 
//               index.  
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  5 index 1 1345  
586 0 0 6 618 1367 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_vendor_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
587 0 0 6 619 1367 0 0 241 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_string
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
588 0 0 6 620 1378 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_version_information
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
589 0 0 6 621 1378 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_brand_index
//       Access: Published
//  Description:  
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
590 0 0 6 622 1497 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
591 0 0 6 623 1497 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_cpu_time
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
592 0 0 6 624 1497 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_maximum_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
593 0 0 6 625 1497 0 0 245 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_current_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
594 0 0 4 626 1366 0 0 240 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::update_cpu_frequency
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1365  16 processor_number 1 1345  
595 0 0 6 627 1345 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_cpu_cores
//       Access: Published
//  Description: Returns the number of individual CPU cores in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts once here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
596 0 0 6 628 1345 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_num_logical_cpus
//       Access: Published
//  Description: Returns the number of logical CPU's in the
//               system, or 0 if this number is not available.  A
//               hyperthreaded CPU counts as two or more here.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
597 0 0 6 629 1345 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_major
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
598 0 0 6 630 1345 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_minor
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
599 0 0 6 631 1345 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_version_build
//       Access: Published
//  Description: Returns -1 if not set. 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
600 0 0 6 632 1345 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: DisplayInformation::get_os_platform_id
//       Access: Published
//  Description: Returns -1 if not set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1365  
601 0 0 6 634 1501 0 0 364 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_cull_handler
//       Access: Published
//  Description: Returns a pointer to the CullHandler, which accepts
//               each object to be added to the list for drawing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1499  
602 0 0 7 635 1456 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionCullCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1499  
603 0 0 7 636 1361 0 0 0 0 
604 0 0 7 639 1506 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_cull_result
//       Access: Published
//  Description: Returns a pointer to the CullResult, the list of
//               CullableObjects that should be drawn in this
//               DisplayRegion.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1504  
605 0 0 7 640 1456 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: DisplayRegionDrawCallbackData::get_scene_setup
//       Access: Published
//  Description: Returns a pointer to the SceneSetup object, which
//               contains information about the camera and such.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1504  
606 0 0 7 641 1361 0 0 0 0 
607 0 0 7 644 1507 1256 0 236 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
608 0 0 4 646 1366 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1507  13 minimum_width 1 1345  
609 0 0 4 647 1366 0 0 242 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_width
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1507  13 maximum_width 1 1345  
610 0 0 4 648 1366 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1507  14 minimum_height 1 1345  
611 0 0 4 649 1366 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_height
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1507  14 maximum_height 1 1345  
612 0 0 4 650 1366 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_minimum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1507  22 minimum_bits_per_pixel 1 1345  
613 0 0 4 651 1366 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: DisplaySearchParameters::set_maximum_bits_per_pixel
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 1507  22 maximum_bits_per_pixel 1 1345  
614 0 0 4 653 1366 0 0 548 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1508  1 x 1 1345  1 y 1 1345  
615 0 0 7 654 1361 0 0 0 0 
616 0 0 7 657 1443 0 0 448 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::Constructor
//       Access: Published
//  Description: Creates a new GraphicsEngine object.  The Pipeline is
//               normally left to default to NULL, which indicates the
//               global render pipeline, but it may be any Pipeline
//               you choose.
//////////////////////////////////////////////////////////////////// 1 8 pipeline 1 1509  
617 0 0 4 658 1366 0 0 422 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_threading_model
//       Access: Published
//  Description: Specifies how future objects created via make_gsg(),
//               make_buffer(), and make_window() will be threaded.
//               This does not affect any already-created objects.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1443  15 threading_model 1 1433  
618 0 0 7 659 1435 925 0 347 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_threading_model
//       Access: Published
//  Description: Returns the threading model that will be applied to
//               future objects.  See set_threading_model().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
619 0 0 6 660 1513 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_render_lock
//       Access: Published
//  Description: Returns a ReMutex object that is held by the
//               GraphicsEngine during the entire call to
//               render_frame().  While you hold this lock you can be
//               confident that no part of the frame will be rendered
//               (at least by the app thread).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
620 0 0 4 661 1366 0 0 925 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_auto_flip
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should automatically cause windows to sync and flip
//               as soon as they have finished drawing, rather than
//               waiting for all of the windows to finish drawing
//               first so they can flip together.
//
//               This only affects the timing of when the flip occurs.
//               If this is true (the default), the flip occurs before
//               render_frame() returns.  If this is false, the flip
//               occurs whenever flip_frame() is called, or at the
//               beginning of the next call to render_frame(), if
//               flip_frame() is never called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1443  9 auto_flip 1 1364  
621 0 0 6 662 1364 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_auto_flip
//       Access: Published
//  Description: Returns the current setting for the auto-flip flag.
//               See set_auto_flip.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
622 0 0 4 663 1366 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_portal_cull
//       Access: Published
//  Description: Set this flag true to indicate the GraphicsEngine
//               should start portal culling
//////////////////////////////////////////////////////////////////// 2 4 this 3 1443  5 value 1 1364  
623 0 0 6 664 1364 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_portal_cull
//       Access: Published
//  Description: Returns the current setting for the portal culling flag.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
624 0 0 4 665 1366 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::set_default_loader
//       Access: Public
//  Description: Sets the Loader object that will be assigned to every
//               GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1443  6 loader 1 1439  
625 0 0 7 666 1439 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_default_loader
//       Access: Public, Virtual
//  Description: Returns the Loader object that will be assigned to
//               every GSG created with this GraphicsEngine.  See
//               GraphicsStateGuardian::set_loader().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
626 0 0 7 667 1408 1020 0 0 9 4 this 3 1443  4 pipe 1 1359  4 name 1 1367  4 sort 1 1345  7 fb_prop 1 1431  8 win_prop 1 1390  5 flags 1 1345  3 gsg 1 1436  4 host 1 1408  
627 0 0 7 668 1408 1020 0 723 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This is the
//               preferred way to create an offscreen buffer, when you
//               already have an onscreen window or another buffer to
//               start with.  For the first parameter, pass an
//               existing GraphicsOutput object, e.g. the main window;
//               this allows the buffer to adapt itself to that
//               window's framebuffer properties, and allows maximum
//               sharing of resources.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1443  4 host 1 1408  4 name 1 1367  4 sort 1 1345  6 x_size 1 1345  6 y_size 1 1345  
628 0 0 7 668 1408 1020 0 1177 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_buffer
//       Access: Published
//  Description: Syntactic shorthand for make_output.  This flavor
//               accepts a GSG rather than a GraphicsOutput as the
//               first parameter, which is too limiting and disallows
//               the possibility of creating a ParasiteBuffer if the
//               user's graphics hardware prefers that.  It also
//               attempts to request specific framebuffer properties
//               and may therefore do a poorer job of sharing the GSG
//               between the old buffer and the new.
//
//               For these reasons, this variant is a poor choice
//               unless you are creating an offscreen buffer for the
//               first time, without an onscreen window already in
//               existence.  If you already have an onscreen window,
//               you should use the other flavor of make_buffer()
//               instead, which accepts a GraphicsOutput as the first
//               parameter.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1443  3 gsg 1 1436  4 name 1 1367  4 sort 1 1345  6 x_size 1 1345  6 y_size 1 1345  
629 0 0 7 669 1408 1020 0 265 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::make_parasite
//       Access: Published
//  Description: Syntactic shorthand for make_buffer.
//////////////////////////////////////////////////////////////////// 6 4 this 3 1443  4 host 1 1408  4 name 1 1367  4 sort 1 1345  6 x_size 1 1345  6 y_size 1 1345  
630 0 0 6 670 1364 0 0 632 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::add_window
//       Access: Published
//  Description: This can be used to add a newly-created
//               GraphicsOutput object (and its GSG) to the engine's
//               list of windows, and requests that it be opened.
//               This shouldn't be called by user code as
//               make_output normally does this under the hood; it
//               may be useful in esoteric cases in which a custom
//               window object is used.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1443  6 window 1 1408  4 sort 1 1345  
631 0 0 6 671 1364 0 0 1357 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_window
//       Access: Published
//  Description: Removes the indicated window or offscreen buffer from
//               the set of windows that will be processed when
//               render_frame() is called.  This also closes the
//               window if it is open, and removes the window from its
//               GraphicsPipe, allowing the window to be destructed if
//               there are no other references to it.  (However, the
//               window may not be actually closed until next frame,
//               if it is controlled by a sub-thread.)
//
//               The return value is true if the window was removed,
//               false if it was not found.
//
//               Unlike remove_all_windows(), this function does not
//               terminate any of the threads that may have been
//               started to service this window; they are left running
//               (since you might open a new window later on these
//               threads).  If your intention is to clean up before
//               shutting down, it is better to call
//               remove_all_windows() then to call remove_window() one
//               at a time.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1443  6 window 1 1408  
632 0 0 4 672 1366 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::remove_all_windows
//       Access: Published
//  Description: Removes and closes all windows from the engine.  This
//               also cleans up and terminates any threads that have
//               been started to service those windows.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
633 0 0 4 673 1366 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::reset_all_windows
//       Access: Published
//  Description: Resets the framebuffer of the current window.  This
//               is currently used by DirectX 8 only. It calls a
//               reset_window function on each active window to
//               release/create old/new framebuffer
//////////////////////////////////////////////////////////////////// 2 4 this 3 1443  9 swapchain 1 1364  
634 0 0 6 674 1364 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::is_empty
//       Access: Published
//  Description: Returns true if there are no windows or buffers
//               managed by the engine, false if there is at least
//               one.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
635 0 0 6 675 1345 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_num_windows
//       Access: Published
//  Description: Returns the number of windows (or buffers) managed by
//               the engine.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1511  
636 0 0 7 676 1408 1020 0 316 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_window
//       Access: Published
//  Description: Returns the nth window or buffers managed by the
//               engine, in sorted order.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1511  1 n 1 1345  
637 0 0 4 677 1366 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::render_frame
//       Access: Published
//  Description: Renders the next frame in all the registered windows,
//               and flips all of the frame buffers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
638 0 0 4 678 1366 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::open_windows
//       Access: Published
//  Description: Fully opens (or closes) any windows that have
//               recently been requested open or closed, without
//               rendering any frames.  It is not necessary to call
//               this explicitly, since windows will be automatically
//               opened or closed when the next frame is rendered, but
//               you may call this if you want your windows now
//               without seeing a frame go by.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
639 0 0 4 679 1366 0 0 558 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::sync_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing.  The windows are not
//               yet flipped when this returns; see also flip_frame().
//               It is not usually necessary to call this explicitly,
//               unless you need to see the previous frame right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
640 0 0 4 680 1366 0 0 962 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::ready_flip
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing. Returns when all threads have
//               actually finished drawing, as opposed to 'sync_frame'
//               we seems to return once all draw calls have been submitted.
//               Calling 'flip_frame' after this function should immediately
//               cause a buffer flip.  This function will only work in
//               opengl right now, for all other graphics pipelines it will
//               simply return immediately.  In opengl it's a bit of a hack:
//               it will attempt to read a single pixel from the frame buffer to
//               force the graphics card to finish drawing before it returns
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
641 0 0 4 681 1366 0 0 516 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::flip_frame
//       Access: Published
//  Description: Waits for all the threads that started drawing their
//               last frame to finish drawing, and then flips all the
//               windows.  It is not usually necessary to call this
//               explicitly, unless you need to see the previous frame
//               right away.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1443  
642 0 0 6 682 1364 0 0 1560 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::extract_texture_data
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to retrieve
//               the texture memory image of the indicated texture and
//               store it in the texture's ram_image field.  The image
//               can then be written to disk via Texture::write(), or
//               otherwise manipulated on the CPU.
//
//               This is useful for retrieving the contents of a
//               texture that has been somehow generated on the
//               graphics card, instead of having been loaded the
//               normal way via Texture::read() or Texture::load().
//               It is particularly useful for getting the data
//               associated with a compressed texture image.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               If the texture has not yet been loaded to the GSG in
//               question, it will be loaded immediately.
//
//               The return value is true if the operation is
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1443  3 tex 1 1423  3 gsg 1 1436  
643 0 0 4 683 1366 0 0 1071 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::dispatch_compute
//       Access: Published
//  Description: Asks the indicated GraphicsStateGuardian to dispatch
//               the compute shader in the given ShaderAttrib using
//               the given work group counts.  This can act as an
//               interface for running a one-off compute shader,
//               without having to store it in the scene graph using
//               a ComputeNode.
//
//               Since this requires a round-trip to the draw thread,
//               it may require waiting for the current thread to
//               finish rendering if it is called in a multithreaded
//               environment.  However, you can call this several
//               consecutive times on different textures for little
//               additional cost.
//
//               The return value is true if the operation is
//               successful, false otherwise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1443  11 work_groups 1 1516  5 sattr 1 1519  3 gsg 1 1436  
644 0 0 7 684 1443 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsEngine::get_global_ptr
//       Access: Published, Static
//  Description:
//////////////////////////////////////////////////////////////////// 0 
645 0 0 6 686 1345 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_pipe_types
//       Access: Published
//  Description: Returns the number of different types of
//               GraphicsPipes that are available to create through
//               this interface.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1522  
646 0 0 7 687 1361 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_pipe_type
//       Access: Published
//  Description: Returns the nth type of GraphicsPipe available
//               through this interface.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1522  1 n 1 1345  
647 0 0 4 688 1366 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::print_pipe_types
//       Access: Published
//  Description: Writes a list of the currently known GraphicsPipe
//               types to nout, for the user's information.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1522  
648 0 0 7 689 1359 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1524  4 type 1 1361  
649 0 0 7 689 1359 0 0 651 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of the indicated type (or
//               a type more specific than the indicated type, if
//               necessary) and returns it.  Returns NULL if the type
//               cannot be matched.
//
//               If the type is not already defined, this will
//               implicitly load the named module, or if module_name
//               is empty, it will call load_aux_modules().
//////////////////////////////////////////////////////////////////// 3 4 this 3 1524  9 type_name 1 1367  11 module_name 1 1367  
650 0 0 7 690 1359 0 0 430 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_module_pipe
//       Access: Published
//  Description: Returns a new GraphicsPipe of a type defined by the
//               indicated module.  Returns NULL if the module is not
//               found or does not properly recommend a GraphicsPipe.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1524  11 module_name 1 1367  
651 0 0 7 691 1359 0 0 426 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::make_default_pipe
//       Access: Published
//  Description: Creates a new GraphicsPipe of some arbitrary type.
//               The user may specify a preference using the Configrc
//               file; otherwise, one will be chosen arbitrarily.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1524  
652 0 0 6 692 1345 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_num_aux_modules
//       Access: Published
//  Description: Returns the number of display modules that are still
//               to be loaded.  If this is nonzero, then calling
//               load_aux_modules() will likely increase the number of
//               GraphicsPipes available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1522  
653 0 0 4 693 1366 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::load_aux_modules
//       Access: Published
//  Description: Loads all the modules named in the aux-display
//               Configrc variable, making as many graphics pipes as
//               possible available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1524  
654 0 0 6 694 1524 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: GraphicsPipeSelection::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one global
//               GraphicsPipeSelection object.
//////////////////////////////////////////////////////////////////// 0 
655 0 0 7 696 1381 0 0 607 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_int
//       Access: Published, Static
//  Description: Constructs a new WindowHandle with an int value,
//               which is understood to be either an HWND or a Window,
//               cast to int.  This method exists for the convenience
//               of Python, which likes to deal with ints; C++ code
//               should use one of the more specific make_x11() or
//               make_win32() methods instead.
//////////////////////////////////////////////////////////////////// 1 6 window 1 1383  
656 0 0 7 697 1381 0 0 636 ////////////////////////////////////////////////////////////////////
//     Function: NativeWindowHandle::make_subprocess
//       Access: Published, Static
//  Description: Constructs a new WindowHandle that references a
//               SubprocessWindowBuffer read in another process, with
//               the named pipe filename that it uses for
//               communication.
//
//               This is (at present, and maybe always) useful only on
//               the OS X platform, where parenting child windows is
//               particularly problematic.
//////////////////////////////////////////////////////////////////// 1 8 filename 1 1398  
657 0 0 7 698 1361 0 0 0 0 
658 0 0 4 701 1366 0 0 548 ////////////////////////////////////////////////////////////////////
//     Function: ParasiteBuffer::set_size
//       Access: Public, Virtual
//  Description: This is called by the GraphicsEngine to request that
//               the buffer resize itself.  Although calls to get the
//               size will return the new value, much of the actual
//               resizing work doesn't take place until the next
//               begin_frame.  Not all buffers are resizeable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1525  1 x 1 1345  1 y 1 1345  
659 0 0 7 702 1361 0 0 0 0 
218
1308 14 GraphicsDevice 0 75777 14 GraphicsDevice 14 GraphicsDevice 0 0 0 0 0 0 2 660 661 0 0 1 0 1309 0 0 0 0 499
////////////////////////////////////////////////////////////////////
//       Class : GraphicsDevice
// Description : An abstract device object that is part of Graphics
//               Pipe. This device is set to NULL for OpenGL. But 
//               DirectX uses it to take control of multiple windows
//               under single device or multiple devices (i.e. more
//               than one adapters in the machine).   
//
////////////////////////////////////////////////////////////////////

1309 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1310 12 GraphicsPipe 0 75777 12 GraphicsPipe 12 GraphicsPipe 0 0 0 0 0 0 9 662 663 664 665 666 667 668 669 670 0 0 1 0 1309 0 0 0 2 1311 1312 1126
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipe
// Description : An object to create GraphicsOutputs that share a
//               particular 3-D API.  Normally, there will only be one
//               GraphicsPipe in an application, although it is
//               possible to have multiple of these at once if there
//               are multiple different API's available in the same
//               machine.
//
//               Often, the GraphicsPipe corresponds to a physical
//               output device, hence the term "pipe", but this is not
//               necessarily the case.
//
//               The GraphicsPipe is used by the GraphicsEngine object
//               to create and destroy windows; it keeps ownership of
//               the windows it creates.
//
//               M. Asad added new/interim functionality where GraphicsPipe
//               now contains a device interface to directx/opengl which
//               will be used to handle multiple windows from same device.
//
////////////////////////////////////////////////////////////////////

1311 11 OutputTypes 0 794624 25 GraphicsPipe::OutputTypes 25 GraphicsPipe::OutputTypes 1310 0 0 0 0 0 0 0 0 0 4 9 OT_window 23 GraphicsPipe::OT_window 0
1 20 OT_fullscreen_window 34 GraphicsPipe::OT_fullscreen_window 0
2 9 OT_buffer 23 GraphicsPipe::OT_buffer 0
4 17 OT_texture_buffer 31 GraphicsPipe::OT_texture_buffer 0
8 0 0

1312 19 BufferCreationFlags 0 794624 33 GraphicsPipe::BufferCreationFlags 33 GraphicsPipe::BufferCreationFlags 1310 0 0 0 0 0 0 0 0 0 14 18 BF_refuse_parasite 32 GraphicsPipe::BF_refuse_parasite 54
// Flags that control what type of output is returned.
1 19 BF_require_parasite 33 GraphicsPipe::BF_require_parasite 0
2 16 BF_refuse_window 30 GraphicsPipe::BF_refuse_window 0
4 17 BF_require_window 31 GraphicsPipe::BF_require_window 0
8 26 BF_require_callback_window 40 GraphicsPipe::BF_require_callback_window 0
16 17 BF_can_bind_color 31 GraphicsPipe::BF_can_bind_color 53
// Need capability: bind the color bitplane to a tex.
64 17 BF_can_bind_every 31 GraphicsPipe::BF_can_bind_every 48
// Need capability: bind all bitplanes to a tex.
128 13 BF_resizeable 27 GraphicsPipe::BF_resizeable 32
// Buffer should allow set_size.
256 18 BF_size_track_host 32 GraphicsPipe::BF_size_track_host 37
// Buffer should track the host size.
512 17 BF_rtt_cumulative 31 GraphicsPipe::BF_rtt_cumulative 48
// Buffer supports cumulative render-to-texture.
1024 20 BF_fb_props_optional 34 GraphicsPipe::BF_fb_props_optional 40
// FrameBufferProperties can be ignored.
2048 14 BF_size_square 28 GraphicsPipe::BF_size_square 48
// x_size must equal y_size (e.g. for cube maps)
4096 15 BF_size_power_2 29 GraphicsPipe::BF_size_power_2 48
// x_size and y_size must each be a power of two
8192 19 BF_can_bind_layered 33 GraphicsPipe::BF_can_bind_layered 45
// Need capability: support RTM_bind_layered.
16384 0 0

1313 14 DrawableRegion 0 26625 14 DrawableRegion 14 DrawableRegion 0 0 0 0 671 0 23 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 0 0 0 0 1 1314 655
////////////////////////////////////////////////////////////////////
//       Class : DrawableRegion
// Description : This is a base class for GraphicsWindow (actually,
//               GraphicsOutput) and DisplayRegion, both of which are
//               conceptually rectangular regions into which drawing
//               commands may be issued.  Sometimes you want to deal
//               with a single display region, and sometimes you want
//               to deal with the whole window at once, particularly
//               for issuing clear commands and capturing screenshots.
////////////////////////////////////////////////////////////////////

1314 18 RenderTexturePlane 0 794624 34 DrawableRegion::RenderTexturePlane 34 DrawableRegion::RenderTexturePlane 1313 0 0 0 0 0 0 0 0 0 17 11 RTP_stencil 27 DrawableRegion::RTP_stencil 0
0 17 RTP_depth_stencil 33 DrawableRegion::RTP_depth_stencil 0
1 9 RTP_color 25 DrawableRegion::RTP_color 0
2 14 RTP_aux_rgba_0 30 DrawableRegion::RTP_aux_rgba_0 0
3 14 RTP_aux_rgba_1 30 DrawableRegion::RTP_aux_rgba_1 0
4 14 RTP_aux_rgba_2 30 DrawableRegion::RTP_aux_rgba_2 0
5 14 RTP_aux_rgba_3 30 DrawableRegion::RTP_aux_rgba_3 0
6 15 RTP_aux_hrgba_0 31 DrawableRegion::RTP_aux_hrgba_0 0
7 15 RTP_aux_hrgba_1 31 DrawableRegion::RTP_aux_hrgba_1 0
8 15 RTP_aux_hrgba_2 31 DrawableRegion::RTP_aux_hrgba_2 0
9 15 RTP_aux_hrgba_3 31 DrawableRegion::RTP_aux_hrgba_3 0
10 15 RTP_aux_float_0 31 DrawableRegion::RTP_aux_float_0 0
11 15 RTP_aux_float_1 31 DrawableRegion::RTP_aux_float_1 0
12 15 RTP_aux_float_2 31 DrawableRegion::RTP_aux_float_2 0
13 15 RTP_aux_float_3 31 DrawableRegion::RTP_aux_float_3 0
14 9 RTP_depth 25 DrawableRegion::RTP_depth 0
15 9 RTP_COUNT 25 DrawableRegion::RTP_COUNT 0
16 0 168
// It seems awkward to have this type, and also
// RenderBuffer::Type.  However, the fact that RenderBuffer::Type
// is a bitmask makes it awfully awkward to work with.

1315 12 WindowHandle 0 75777 12 WindowHandle 12 WindowHandle 0 0 0 1 695 0 0 6 696 697 698 699 700 704 0 0 1 0 1309 0 0 0 1 1316 859
////////////////////////////////////////////////////////////////////
//       Class : WindowHandle
// Description : This object represents a window on the desktop, not
//               necessarily a Panda window.  This structure can be
//               assigned to a WindowProperties to indicate a parent
//               window.
//
//               It also has callbacks so the Panda window can
//               communicate with its parent window, which is
//               particularly important when running embedded in a
//               browser.
//
//               To create a WindowHandle, you would usually call one
//               of the NativeWindowHandle::make_*() methods,
//               depending on the kind of native window handle object
//               you already have.
////////////////////////////////////////////////////////////////////

1316 8 OSHandle 0 337921 22 WindowHandle::OSHandle 22 WindowHandle::OSHandle 1315 0 0 0 0 0 3 701 702 703 0 0 1 0 1309 0 0 0 0 154
// This internal pointer within WindowHandle stores the actual
// OS-specific window handle type, whatever type that is.  It is
// subclassed for each OS.

1317 16 WindowProperties 0 26625 16 WindowProperties 16 WindowProperties 0 0 0 1 705 707 0 80 706 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 0 0 0 0 2 1318 1319 436
////////////////////////////////////////////////////////////////////
//       Class : WindowProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics window before we open
//               it.  This also serves to hold the current properties
//               for a window after it has been opened.
////////////////////////////////////////////////////////////////////

1318 6 ZOrder 0 794624 24 WindowProperties::ZOrder 24 WindowProperties::ZOrder 1317 0 0 0 0 0 0 0 0 0 3 8 Z_bottom 26 WindowProperties::Z_bottom 0
0 8 Z_normal 26 WindowProperties::Z_normal 0
1 5 Z_top 23 WindowProperties::Z_top 0
2 0 0

1319 9 MouseMode 0 794624 27 WindowProperties::MouseMode 27 WindowProperties::MouseMode 1317 0 0 0 0 0 0 0 0 0 3 10 M_absolute 28 WindowProperties::M_absolute 0
0 10 M_relative 28 WindowProperties::M_relative 0
1 10 M_confined 28 WindowProperties::M_confined 0
2 0 0

1320 13 DisplayRegion 0 26625 13 DisplayRegion 13 DisplayRegion 0 0 0 0 791 0 49 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 0 0 2 3 1321 787 788 3 1313 789 790 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegion
// Description : A rectangular subregion within a window for rendering
//               into.  Typically, there is one DisplayRegion that
//               covers the whole window, but you may also create
//               smaller DisplayRegions for having different regions
//               within the window that represent different scenes.
//               You may also stack up DisplayRegions like panes of
//               glass, usually for layering 2-d interfaces on top of
//               a 3-d scene.
////////////////////////////////////////////////////////////////////

1321 17 DisplayRegionBase 0 2049 17 DisplayRegionBase 17 DisplayRegionBase 0 0 0 0 0 0 0 0 0 0 0 0 307
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionBase
// Description : An abstract base class for DisplayRegion, mainly so
//               we can store DisplayRegion pointers in a Camera.
////////////////////////////////////////////////////////////////////

1322 19 StereoDisplayRegion 0 75777 19 StereoDisplayRegion 19 StereoDisplayRegion 0 0 0 0 791 0 3 841 842 843 0 0 1 0 1320 0 0 0 0 862
////////////////////////////////////////////////////////////////////
//       Class : StereoDisplayRegion
// Description : This is a special DisplayRegion wrapper that actually
//               includes a pair of DisplayRegions internally: the
//               left and right eyes.  The DisplayRegion represented
//               here does not have a physical association with the
//               window, but it pretends it does.  Instead, it
//               maintains a pointer to the left and right
//               DisplayRegions separately.
//
//               Operations on the StereoDisplayRegion object affect
//               both left and right eyes together.  To access the
//               left or right eyes independently, use get_left_eye()
//               and get_right_eye().
////////////////////////////////////////////////////////////////////

1323 21 FrameBufferProperties 0 26625 21 FrameBufferProperties 21 FrameBufferProperties 0 0 0 1 889 890 0 65 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 0 0 0 0 0 346
////////////////////////////////////////////////////////////////////
//       Class : FrameBufferProperties
// Description : A container for the various kinds of properties we
//               might ask to have on a graphics frameBuffer before we
//               create a GSG.
////////////////////////////////////////////////////////////////////

1324 22 GraphicsThreadingModel 0 141313 22 GraphicsThreadingModel 22 GraphicsThreadingModel 0 0 0 1 911 925 0 13 912 913 914 915 916 917 918 919 920 921 922 923 924 0 0 0 0 0 313
////////////////////////////////////////////////////////////////////
//       Class : GraphicsThreadingModel
// Description : This represents the user's specification of how a
//               particular frame is handled by the various threads.
////////////////////////////////////////////////////////////////////

1325 21 GraphicsStateGuardian 0 75777 21 GraphicsStateGuardian 21 GraphicsStateGuardian 0 0 0 0 0 0 90 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 0 0 1 0 1326 0 0 0 1 1327 564
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardian
// Description : Encapsulates all the communication with a particular
//               instance of a given rendering backend.  Tries to
//               guarantee that redundant state-change requests are
//               not issued (hence "state guardian").
//
//               There will be one of these objects for each different
//               graphics context active in the system.
////////////////////////////////////////////////////////////////////

1326 25 GraphicsStateGuardianBase 0 2049 25 GraphicsStateGuardianBase 25 GraphicsStateGuardianBase 0 0 0 0 0 0 0 1 1531 0 0 0 0 957
////////////////////////////////////////////////////////////////////
//       Class : GraphicsStateGuardianBase
// Description : This is a base class for the GraphicsStateGuardian
//               class, which is itself a base class for the various
//               GSG's for different platforms.  This class contains
//               all the function prototypes to support the
//               double-dispatch of GSG to geoms, transitions, etc.  It
//               lives in a separate class in its own package so we
//               can avoid circular build dependency problems.
//
//               GraphicsStateGuardians are not actually writable to
//               bam files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1327 11 ShaderModel 0 794624 34 GraphicsStateGuardian::ShaderModel 34 GraphicsStateGuardian::ShaderModel 1325 0 0 0 0 0 0 0 0 0 8 5 SM_00 28 GraphicsStateGuardian::SM_00 0
0 5 SM_11 28 GraphicsStateGuardian::SM_11 0
1 5 SM_20 28 GraphicsStateGuardian::SM_20 0
2 5 SM_2X 28 GraphicsStateGuardian::SM_2X 0
3 5 SM_30 28 GraphicsStateGuardian::SM_30 0
4 5 SM_40 28 GraphicsStateGuardian::SM_40 0
5 5 SM_50 28 GraphicsStateGuardian::SM_50 0
6 5 SM_51 28 GraphicsStateGuardian::SM_51 0
7 0 0

1328 14 GraphicsOutput 0 26625 14 GraphicsOutput 14 GraphicsOutput 0 0 0 0 1020 0 77 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 2 1532 1533 0 2 3 1329 1016 1017 3 1313 1018 1019 0 2 1330 1331 1111
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutput
// Description : This is a base class for the various different
//               classes that represent the result of a frame of
//               rendering.  The most common kind of GraphicsOutput is
//               a GraphicsWindow, which is a real-time window on the
//               desktop, but another example is GraphicsBuffer, which
//               is an offscreen buffer.
//
//               The actual rendering, and anything associated with
//               the graphics context itself, is managed by the
//               associated GraphicsStateGuardian (which might output
//               to multiple GraphicsOutput objects).
//
//               GraphicsOutputs are not actually writable to bam
//               files, of course, but they may be passed as event
//               parameters, so they inherit from
//               TypedWritableReferenceCount instead of
//               TypedReferenceCount for that convenience.
////////////////////////////////////////////////////////////////////

1329 18 GraphicsOutputBase 0 2049 18 GraphicsOutputBase 18 GraphicsOutputBase 0 0 0 0 0 0 0 0 0 0 0 0 277
////////////////////////////////////////////////////////////////////
//       Class : GraphicsOutputBase
// Description : An abstract base class for GraphicsOutput, for all
//               the usual reasons.
////////////////////////////////////////////////////////////////////

1330 17 RenderTextureMode 0 794624 33 GraphicsOutput::RenderTextureMode 33 GraphicsOutput::RenderTextureMode 1328 0 0 0 0 0 0 0 0 0 7 8 RTM_none 24 GraphicsOutput::RTM_none 0
0 16 RTM_bind_or_copy 32 GraphicsOutput::RTM_bind_or_copy 104
// Try to render to the texture directly, but if that is
// not possible, fall back to RTM_copy_texture.
1 16 RTM_copy_texture 32 GraphicsOutput::RTM_copy_texture 61
// Copy the image from the buffer to the texture every frame.
2 12 RTM_copy_ram 28 GraphicsOutput::RTM_copy_ram 60
// Copy the image from the buffer to system RAM every frame.
3 26 RTM_triggered_copy_texture 42 GraphicsOutput::RTM_triggered_copy_texture 83
// Copy the image from the buffer to the texture after a
// call to trigger_copy().
4 22 RTM_triggered_copy_ram 38 GraphicsOutput::RTM_triggered_copy_ram 82
// Copy the image from the buffer to system RAM after a
// call to trigger_copy().
5 16 RTM_bind_layered 32 GraphicsOutput::RTM_bind_layered 169
// Render directly to a layered texture, such as a cube map,
// 3D texture or 2D texture array.  The layer that is being
// rendered to is selected by a geometry shader.
6 0 0

1331 9 FrameMode 0 794624 25 GraphicsOutput::FrameMode 25 GraphicsOutput::FrameMode 1328 0 0 0 0 0 0 0 0 0 3 9 FM_render 25 GraphicsOutput::FM_render 28
// We are rendering a frame.
0 11 FM_parasite 27 GraphicsOutput::FM_parasite 42
// We are rendering a frame of a parasite.
1 10 FM_refresh 26 GraphicsOutput::FM_refresh 61
// We are just refreshing the display or exposing the window.
2 0 56
// There are many reasons to call begin_frame/end_frame.

1332 25 GraphicsWindowInputDevice 0 26625 25 GraphicsWindowInputDevice 25 GraphicsWindowInputDevice 0 0 0 0 1098 0 11 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 0 0 0 0 0 505
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindowInputDevice
// Description : This is a structure representing a single input
//               device that may be associated with a window.
//               Typically this will be a keyboard/mouse pair, and
//               there will be exactly one of these associated with
//               each window, but other variants are possible.
////////////////////////////////////////////////////////////////////

1333 9 TouchInfo 0 141313 9 TouchInfo 9 TouchInfo 0 0 0 0 1114 0 4 1110 1111 1112 1113 0 0 0 0 1 1334 226
////////////////////////////////////////////////////////////////////
//       Class : TouchInfo
// Description : Stores information for a single touch event.
////////////////////////////////////////////////////////////////////

1334 14 TouchInfoFlags 0 794624 25 TouchInfo::TouchInfoFlags 25 TouchInfo::TouchInfoFlags 1333 0 0 0 0 0 0 0 0 0 3 8 TIF_move 19 TouchInfo::TIF_move 0
1 8 TIF_down 19 TouchInfo::TIF_down 0
2 6 TIF_up 17 TouchInfo::TIF_up 0
4 0 0

1335 30 GraphicsWindowProcCallbackData 0 141313 30 GraphicsWindowProcCallbackData 30 GraphicsWindowProcCallbackData 0 0 0 0 1123 0 8 1115 1116 1117 1118 1119 1120 1121 1122 0 0 1 0 1336 0 0 0 0 408
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindowProcCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from from an implementation
//               of the GraphicsWindowProc class, such as PythonGraphicsWindowProc.
////////////////////////////////////////////////////////////////////

1336 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 610
////////////////////////////////////////////////////////////////////
//       Class : CallbackData
// Description : This is a generic data block that is passed along to
//               a CallbackObject when a callback is made.  It
//               contains data specific to the particular callback
//               type in question.
//
//               This is actually an abstract base class and contains
//               no data.  Specializations of this class will contain
//               the actual data relevant to each callback type.
////////////////////////////////////////////////////////////////////

1337 14 GraphicsWindow 0 75777 14 GraphicsWindow 14 GraphicsWindow 0 0 0 0 1020 0 27 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1 1534 0 1 0 1328 0 0 0 0 329
////////////////////////////////////////////////////////////////////
//       Class : GraphicsWindow
// Description : A window, fullscreen or on a desktop, into which a
//               graphics device sends its output for interactive
//               display.
////////////////////////////////////////////////////////////////////

1338 22 CallbackGraphicsWindow 0 75777 22 CallbackGraphicsWindow 22 CallbackGraphicsWindow 0 0 0 0 1020 0 12 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 0 0 1 0 1337 0 0 0 5 1339 1340 1341 1342 1343 545
////////////////////////////////////////////////////////////////////
//       Class : CallbackGraphicsWindow
// Description : This special window object doesn't represent a window
//               in its own right, but instead hooks into some
//               third-party API for creating and rendering to windows
//               via callbacks.  This can be used to allow Panda to
//               render into an already-created OpenGL context, for
//               instance.
////////////////////////////////////////////////////////////////////

1339 18 WindowCallbackData 0 403457 42 CallbackGraphicsWindow::WindowCallbackData 42 CallbackGraphicsWindow::WindowCallbackData 1338 0 0 0 1153 0 2 1151 1152 0 0 1 0 1336 0 0 0 0 0

1340 18 EventsCallbackData 0 403457 42 CallbackGraphicsWindow::EventsCallbackData 42 CallbackGraphicsWindow::EventsCallbackData 1338 0 0 0 1155 0 1 1154 0 0 1 0 1339 0 0 0 0 0

1341 22 PropertiesCallbackData 0 403457 46 CallbackGraphicsWindow::PropertiesCallbackData 46 CallbackGraphicsWindow::PropertiesCallbackData 1338 0 0 0 1158 0 2 1156 1157 0 0 1 0 1339 0 0 0 0 0

1342 18 RenderCallbackType 0 794624 42 CallbackGraphicsWindow::RenderCallbackType 42 CallbackGraphicsWindow::RenderCallbackType 1338 0 0 0 0 0 0 0 0 0 4 15 RCT_begin_frame 39 CallbackGraphicsWindow::RCT_begin_frame 0
0 13 RCT_end_frame 37 CallbackGraphicsWindow::RCT_end_frame 0
1 14 RCT_begin_flip 38 CallbackGraphicsWindow::RCT_begin_flip 0
2 12 RCT_end_flip 36 CallbackGraphicsWindow::RCT_end_flip 0
3 0 0

1343 18 RenderCallbackData 0 403457 42 CallbackGraphicsWindow::RenderCallbackData 42 CallbackGraphicsWindow::RenderCallbackData 1338 0 0 0 1164 0 5 1159 1160 1161 1162 1163 0 0 1 0 1339 0 0 0 0 0

1344 11 DisplayMode 0 140289 11 DisplayMode 11 DisplayMode 0 0 0 0 1190 5 1526 1527 1528 1529 1530 3 1187 1188 1189 0 0 0 0 0 0

1345 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1346 18 DisplayInformation 0 26625 18 DisplayInformation 18 DisplayInformation 0 0 0 1 1192 1191 0 54 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1 1535 0 0 0 1 1347 239
////////////////////////////////////////////////////////////////////
//       Class : DisplayInformation
// Description : This class contains various display information.
////////////////////////////////////////////////////////////////////

1347 14 DetectionState 0 794624 34 DisplayInformation::DetectionState 34 DisplayInformation::DetectionState 1346 0 0 0 0 0 0 0 0 0 5 10 DS_unknown 30 DisplayInformation::DS_unknown 0
0 10 DS_success 30 DisplayInformation::DS_success 0
1 25 DS_direct_3d_create_error 45 DisplayInformation::DS_direct_3d_create_error 0
2 22 DS_create_window_error 42 DisplayInformation::DS_create_window_error 0
3 22 DS_create_device_error 42 DisplayInformation::DS_create_device_error 0
4 0 0

1348 29 DisplayRegionCullCallbackData 0 141313 29 DisplayRegionCullCallbackData 29 DisplayRegionCullCallbackData 0 0 0 0 1250 0 3 1247 1248 1249 0 0 1 0 1336 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionCullCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the cull traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1349 29 DisplayRegionDrawCallbackData 0 141313 29 DisplayRegionDrawCallbackData 29 DisplayRegionDrawCallbackData 0 0 0 0 1254 0 3 1251 1252 1253 0 0 1 0 1336 0 0 0 0 358
////////////////////////////////////////////////////////////////////
//       Class : DisplayRegionDrawCallbackData
// Description : This specialization on CallbackData is passed when
//               the callback is initiated from the draw traversal,
//               for a DisplayRegion.
////////////////////////////////////////////////////////////////////

1350 23 DisplaySearchParameters 0 26625 23 DisplaySearchParameters 23 DisplaySearchParameters 0 0 0 1 1255 1256 0 6 1257 1258 1259 1260 1261 1262 0 0 0 0 0 247
////////////////////////////////////////////////////////////////////
//       Class : DisplaySearchParameters
// Description : Parameters used for searching display capabilities.
////////////////////////////////////////////////////////////////////

1351 14 GraphicsBuffer 0 75777 14 GraphicsBuffer 14 GraphicsBuffer 0 0 0 0 1020 0 2 1263 1264 0 0 1 0 1328 0 0 0 0 361
////////////////////////////////////////////////////////////////////
//       Class : GraphicsBuffer
// Description : An offscreen buffer for rendering into.  This is
//               similar in function to a GraphicsWindow, except that
//               the output is not visible to the user.
////////////////////////////////////////////////////////////////////

1352 14 GraphicsEngine 0 75777 14 GraphicsEngine 14 GraphicsEngine 0 0 0 1 1265 0 0 27 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1 1536 0 1 0 1353 0 0 0 0 823
////////////////////////////////////////////////////////////////////
//       Class : GraphicsEngine
// Description : This class is the main interface to controlling the
//               render process.  There is typically only one
//               GraphicsEngine in an application, and it synchronizes
//               rendering to all all of the active windows; although
//               it is possible to have multiple GraphicsEngine
//               objects if multiple synchronicity groups are
//               required.
//
//               The GraphicsEngine is responsible for managing the
//               various cull and draw threads.  The application
//               simply calls engine->render_frame() and considers it
//               done.
////////////////////////////////////////////////////////////////////

1353 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

1354 21 GraphicsPipeSelection 0 43009 21 GraphicsPipeSelection 21 GraphicsPipeSelection 0 0 0 0 0 0 9 1293 1294 1295 1296 1297 1298 1299 1300 1301 1 1537 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : GraphicsPipeSelection
// Description : This maintains a list of GraphicsPipes by type that
//               are available for creation.  Normally there is one
//               default interactive GraphicsPipe, and possibly other
//               types available as well.
////////////////////////////////////////////////////////////////////

1355 18 NativeWindowHandle 0 141313 18 NativeWindowHandle 18 NativeWindowHandle 0 0 0 0 1305 0 3 1302 1303 1304 0 0 1 0 1315 0 0 0 0 510
////////////////////////////////////////////////////////////////////
//       Class : NativeWindowHandle
// Description : This subclass of WindowHandle exists to allow simple
//               creation of a WindowHandle of the appropriate type to
//               the current OS.
//
//               This class exists for name scoping only.  Don't use
//               the constructor directly; use one of the make_*
//               methods.
////////////////////////////////////////////////////////////////////

1356 14 ParasiteBuffer 0 75777 14 ParasiteBuffer 14 ParasiteBuffer 0 0 0 0 1020 0 2 1306 1307 0 0 1 0 1328 0 0 0 0 1508
////////////////////////////////////////////////////////////////////
//       Class : ParasiteBuffer
// Description : This is a special GraphicsOutput type that acts a lot
//               like a GraphicsBuffer, effectively allowing rendering
//               to an offscreen buffer, except it does not create any
//               framebuffer space for itself.  Instead, it renders
//               into the framebuffer owned by some other
//               GraphicsOutput.
//
//               The x_size and y_size must therefore fit within the
//               bounds of the source GraphicsOutput.
//
//               Since the framebuffer will be subsequently cleared
//               when the actual owner draws in it later, this only
//               makes sense if we are going to copy the contents of
//               the framebuffer to a texture immediately after we
//               draw it.  Thus, has_texture() is implicitly true for
//               a ParasiteBuffer.
//
//               This class is useful to render offscreen to a texture
//               while preventing the waste of framebuffer memory for
//               API's that are unable to render directly into a
//               texture (and must render into a separate framebuffer
//               first and then copy to texture).  It is also the only
//               way to render to a texture on API's that do not
//               support offscreen rendering.
////////////////////////////////////////////////////////////////////

1357 22 GraphicsDevice const * 0 8576 22 GraphicsDevice const * 22 GraphicsDevice const * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1358 20 GraphicsDevice const 0 8832 20 GraphicsDevice const 20 GraphicsDevice const 0 0 1308 0 0 0 0 0 0 0 0 0 0

1359 14 GraphicsPipe * 0 8576 14 GraphicsPipe * 14 GraphicsPipe * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1360 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1361 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1362 20 GraphicsPipe const * 0 8576 20 GraphicsPipe const * 20 GraphicsPipe const * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1363 18 GraphicsPipe const 0 8832 18 GraphicsPipe const 18 GraphicsPipe const 0 0 1310 0 0 0 0 0 0 0 0 0 0

1364 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1365 20 DisplayInformation * 0 8576 20 DisplayInformation * 20 DisplayInformation * 0 0 1346 0 0 0 0 0 0 0 0 0 0

1366 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1367 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1368 16 DrawableRegion * 0 8576 16 DrawableRegion * 16 DrawableRegion * 0 0 1313 0 0 0 0 0 0 0 0 0 0

1369 22 DrawableRegion const * 0 8576 22 DrawableRegion const * 22 DrawableRegion const * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1370 20 DrawableRegion const 0 8832 20 DrawableRegion const 20 DrawableRegion const 0 0 1313 0 0 0 0 0 0 0 0 0 0

1371 14 LColor const * 0 8576 14 LColor const * 14 LColor const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 12 LColor const 0 8832 12 LColor const 12 LColor const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1373 6 LColor 0 2105344 6 LColor 6 LColor 0 0 1374 0 0 0 0 0 0 0 0 0 0

1374 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 1375 0 0 0 0 0 0 0 0 0 0

1375 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1376 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1377 0 0 0 0 0 0 0 0 0 0

1377 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1378 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1379 20 WindowHandle const * 0 8576 20 WindowHandle const * 20 WindowHandle const * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 18 WindowHandle const 0 8832 18 WindowHandle const 18 WindowHandle const 0 0 1315 0 0 0 0 0 0 0 0 0 0

1381 14 WindowHandle * 0 8576 14 WindowHandle * 14 WindowHandle * 0 0 1315 0 0 0 0 0 0 0 0 0 0

1382 10 OSHandle * 0 8576 24 WindowHandle::OSHandle * 24 WindowHandle::OSHandle * 0 0 1316 0 0 0 0 0 0 0 0 0 0

1383 6 size_t 0 2105344 6 size_t 6 size_t 0 0 1384 0 0 0 0 0 0 0 0 0 0

1384 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1385 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1387 16 OSHandle const * 0 8576 30 WindowHandle::OSHandle const * 30 WindowHandle::OSHandle const * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1388 14 OSHandle const 0 8832 28 WindowHandle::OSHandle const 28 WindowHandle::OSHandle const 0 0 1316 0 0 0 0 0 0 0 0 0 0

1389 18 WindowProperties * 0 8576 18 WindowProperties * 18 WindowProperties * 0 0 1317 0 0 0 0 0 0 0 0 0 0

1390 24 WindowProperties const * 0 8576 24 WindowProperties const * 24 WindowProperties const * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1391 22 WindowProperties const 0 8832 22 WindowProperties const 22 WindowProperties const 0 0 1317 0 0 0 0 0 0 0 0 0 0

1392 16 LPoint2i const * 0 8576 16 LPoint2i const * 16 LPoint2i const * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1393 14 LPoint2i const 0 8832 14 LPoint2i const 14 LPoint2i const 0 0 1394 0 0 0 0 0 0 0 0 0 0

1394 8 LPoint2i 0 2048 8 LPoint2i 8 LPoint2i 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1395 17 LVector2i const * 0 8576 17 LVector2i const * 17 LVector2i const * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1396 15 LVector2i const 0 8832 15 LVector2i const 15 LVector2i const 0 0 1397 0 0 0 0 0 0 0 0 0 0

1397 9 LVector2i 0 2048 9 LVector2i 9 LVector2i 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LVector2
// Description : This is a two-component vector offset.
////////////////////////////////////////////////////////////////////

1398 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1399 0 0 0 0 0 0 0 0 0 0

1399 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1400 0 0 0 0 0 0 0 0 0 0

1400 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

1401 21 DisplayRegion const * 0 8576 21 DisplayRegion const * 21 DisplayRegion const * 0 0 1402 0 0 0 0 0 0 0 0 0 0

1402 19 DisplayRegion const 0 8832 19 DisplayRegion const 19 DisplayRegion const 0 0 1320 0 0 0 0 0 0 0 0 0 0

1403 15 DisplayRegion * 0 8576 15 DisplayRegion * 15 DisplayRegion * 0 0 1320 0 0 0 0 0 0 0 0 0 0

1404 9 LVecBase4 0 2105344 9 LVecBase4 9 LVecBase4 0 0 1375 0 0 0 0 0 0 0 0 0 0

1405 11 LVecBase4 * 0 8576 11 LVecBase4 * 11 LVecBase4 * 0 0 1404 0 0 0 0 0 0 0 0 0 0

1406 17 LVecBase4 const * 0 8576 17 LVecBase4 const * 17 LVecBase4 const * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1407 15 LVecBase4 const 0 8832 15 LVecBase4 const 15 LVecBase4 const 0 0 1404 0 0 0 0 0 0 0 0 0 0

1408 16 GraphicsOutput * 0 8576 16 GraphicsOutput * 16 GraphicsOutput * 0 0 1328 0 0 0 0 0 0 0 0 0 0

1409 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1410 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1411 0 0 0 0 0 0 0 0 0 0

1411 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 2 1538 1539 0 0 0 0 1139
////////////////////////////////////////////////////////////////////
//       Class : NodePath
// Description : NodePath is the fundamental system for disambiguating
//               instances, and also provides a higher-level interface
//               for manipulating the scene graph.
//
//               A NodePath is a list of connected nodes from the root
//               of the graph to any sub-node.  Each NodePath
//               therefore uniquely describes one instance of a node.
//
//               NodePaths themselves are lightweight objects that may
//               easily be copied and passed by value.  Their data is
//               stored as a series of NodePathComponents that are
//               stored on the nodes.  Holding a NodePath will keep a
//               reference count to all the nodes in the path.
//               However, if any node in the path is removed or
//               reparented (perhaps through a different NodePath),
//               the NodePath will automatically be updated to reflect
//               the changes.
////////////////////////////////////////////////////////////////////

1412 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 1413 0 0 0 0 0 0 0 0 0 0

1413 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Thread
// Description : A thread; that is, a lightweight process.  This is an
//               abstract base class; to use it, you must subclass
//               from it and redefine thread_main().
//
//               The thread itself will keep a reference count on the
//               Thread object while it is running; when the thread
//               returns from its root function, the Thread object
//               will automatically be destructed if no other pointers
//               are referencing it.
////////////////////////////////////////////////////////////////////

1414 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1415 13 StereoChannel 0 794624 19 Lens::StereoChannel 19 Lens::StereoChannel 1416 0 0 0 0 0 0 0 0 0 4 7 SC_mono 13 Lens::SC_mono 0
0 7 SC_left 13 Lens::SC_left 0
1 8 SC_right 14 Lens::SC_right 0
2 9 SC_stereo 15 Lens::SC_stereo 24
// == SC_left | SC_right
3 0 0

1416 4 Lens 0 2048 4 Lens 4 Lens 0 0 0 0 0 0 0 0 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : Lens
// Description : A base class for any number of different kinds of
//               lenses, linear and otherwise.  Presently, this
//               includes perspective and orthographic lenses.
//
//               A Lens object is the main part of a Camera node,
//               which defines the fundamental interface to
//               point-of-view for rendering.  Lenses are also used in
//               other contexts, however; for instance, a Spotlight is
//               also defined using a lens.
////////////////////////////////////////////////////////////////////

1417 15 CullTraverser * 0 8576 15 CullTraverser * 15 CullTraverser * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 13 CullTraverser 0 2048 13 CullTraverser 13 CullTraverser 0 0 0 0 0 0 0 0 0 0 0 0 512
////////////////////////////////////////////////////////////////////
//       Class : CullTraverser
// Description : This object performs a depth-first traversal of the
//               scene graph, with optional view-frustum culling,
//               collecting CullState and searching for GeomNodes.
//               Each renderable Geom encountered is passed along with
//               its associated RenderState to the CullHandler object.
////////////////////////////////////////////////////////////////////

1419 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1420 0 0 0 0 0 0 0 0 0 0

1420 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 527
////////////////////////////////////////////////////////////////////
//       Class : CallbackObject
// Description : This is a generic object that can be assigned to a
//               callback at various points in the rendering process.
//               This is actually a base class for a handful of
//               specialized callback object types.  You can also
//               subclass it yourself to make your own callback
//               handler.
////////////////////////////////////////////////////////////////////

1421 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1422 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 1051
////////////////////////////////////////////////////////////////////
//       Class : Texture
// Description : Represents a texture object, which is typically a
//               single 2-d image but may also represent a 1-d or 3-d
//               texture image, or the six 2-d faces of a cube map
//               texture.
//
//               A texture's image data might be stored in system RAM
//               (see get_ram_image()) or its image may be represented
//               in texture memory on one or more
//               GraphicsStateGuardians (see prepare()), or both.  The
//               typical usage pattern is that a texture is loaded
//               from an image file on disk, which copies its image
//               data into system RAM; then the first time the texture
//               is rendered its image data is copied to texture
//               memory (actually, to the graphics API), and the
//               system RAM image is automatically freed.
////////////////////////////////////////////////////////////////////

1423 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1422 0 0 0 0 0 0 0 0 0 0

1424 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1425 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 2116
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               A PNMImage has a color space and a maxval, the
//               combination of which defines how a floating-point
//               linear color value is encoded as an integer value in
//               memory.  The functions ending in _val operate on
//               encoded colors, whereas the regular ones work with
//               linear floating-point values.  All operations are
//               color space correct unless otherwise specified.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
//
//               This class is not inherently thread-safe; use it
//               from a single thread or protect access using a mutex.
////////////////////////////////////////////////////////////////////

1426 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 3 1540 1541 1542 0 0 0 0 374
////////////////////////////////////////////////////////////////////
//       Class : PandaNode
// Description : A basic node of the scene graph or data graph.  This
//               is the base class of all specialized nodes, and also
//               serves as a generic node with no special properties.
////////////////////////////////////////////////////////////////////

1427 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1426 0 0 0 0 0 0 0 0 0 0

1428 19 DisplayRegionBase * 0 8576 19 DisplayRegionBase * 19 DisplayRegionBase * 0 0 1321 0 0 0 0 0 0 0 0 0 0

1429 21 StereoDisplayRegion * 0 8576 21 StereoDisplayRegion * 21 StereoDisplayRegion * 0 0 1322 0 0 0 0 0 0 0 0 0 0

1430 23 FrameBufferProperties * 0 8576 23 FrameBufferProperties * 23 FrameBufferProperties * 0 0 1323 0 0 0 0 0 0 0 0 0 0

1431 29 FrameBufferProperties const * 0 8576 29 FrameBufferProperties const * 29 FrameBufferProperties const * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1432 27 FrameBufferProperties const 0 8832 27 FrameBufferProperties const 27 FrameBufferProperties const 0 0 1323 0 0 0 0 0 0 0 0 0 0

1433 30 GraphicsThreadingModel const * 0 8576 30 GraphicsThreadingModel const * 30 GraphicsThreadingModel const * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1434 28 GraphicsThreadingModel const 0 8832 28 GraphicsThreadingModel const 28 GraphicsThreadingModel const 0 0 1324 0 0 0 0 0 0 0 0 0 0

1435 24 GraphicsThreadingModel * 0 8576 24 GraphicsThreadingModel * 24 GraphicsThreadingModel * 0 0 1324 0 0 0 0 0 0 0 0 0 0

1436 23 GraphicsStateGuardian * 0 8576 23 GraphicsStateGuardian * 23 GraphicsStateGuardian * 0 0 1325 0 0 0 0 0 0 0 0 0 0

1437 29 GraphicsStateGuardian const * 0 8576 29 GraphicsStateGuardian const * 29 GraphicsStateGuardian const * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 27 GraphicsStateGuardian const 0 8832 27 GraphicsStateGuardian const 27 GraphicsStateGuardian const 0 0 1325 0 0 0 0 0 0 0 0 0 0

1439 8 Loader * 0 8576 8 Loader * 8 Loader * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 6 Loader 0 2048 6 Loader 6 Loader 0 0 0 0 0 0 0 0 0 0 0 0 819
////////////////////////////////////////////////////////////////////
//       Class : Loader
// Description : A convenient class for loading models from disk, in
//               bam or egg format (or any of a number of other
//               formats implemented by a LoaderFileType, such as
//               ptloader).
//
//               This class supports synchronous as well as
//               asynchronous loading.  In asynchronous loading, the
//               model is loaded in the background by a thread, and an
//               event will be generated when the model is available.
//               If threading is not available, the asynchronous
//               loading interface may be used, but it loads
//               synchronously.
////////////////////////////////////////////////////////////////////

1441 17 ShaderGenerator * 0 8576 17 ShaderGenerator * 17 ShaderGenerator * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 15 ShaderGenerator 0 2048 15 ShaderGenerator 15 ShaderGenerator 0 0 0 0 0 0 0 0 0 0 0 0 1610
////////////////////////////////////////////////////////////////////
//       Class : ShaderGenerator
// Description : The ShaderGenerator is a device that effectively
//               replaces the classic fixed function pipeline with
//               a 'next-gen' fixed function pipeline.  The next-gen
//               fixed function pipeline supports features like
//               normal mapping, gloss mapping, cartoon lighting,
//               and so forth.  It works by automatically generating
//               a shader from a given RenderState.
//
//               Currently, there is one ShaderGenerator object per
//               GraphicsStateGuardian.  It is our intent that in
//               time, people will write classes that derive from
//               ShaderGenerator but which yield slightly different
//               results.
//
//               The ShaderGenerator owes its existence to the
//               'Bamboo Team' at Carnegie Mellon's Entertainment
//               Technology Center.  This is a group of students
//               who, as a semester project, decided that next-gen
//               graphics should be accessible to everyone, even if
//               they don't know shader programming.  The group
//               consisted of:
//
//               Aaron Lo, Programmer
//               Heegun Lee, Programmer
//               Erin Fernandez, Artist/Tester
//               Joe Grubb, Artist/Tester
//               Ivan Ortega, Technical Artist/Tester
//
//               Thanks to them!
//
////////////////////////////////////////////////////////////////////

1443 16 GraphicsEngine * 0 8576 16 GraphicsEngine * 16 GraphicsEngine * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1444 21 TextureAttrib const * 0 8576 21 TextureAttrib const * 21 TextureAttrib const * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1445 19 TextureAttrib const 0 8832 19 TextureAttrib const 19 TextureAttrib const 0 0 1446 0 0 0 0 0 0 0 0 0 0

1446 13 TextureAttrib 0 2048 13 TextureAttrib 13 TextureAttrib 0 0 0 0 0 0 0 3 1543 1544 1545 0 0 0 0 336
////////////////////////////////////////////////////////////////////
//       Class : TextureAttrib
// Description : Indicates the set of TextureStages and their
//               associated Textures that should be applied to (or
//               removed from) a node.
////////////////////////////////////////////////////////////////////

1447 12 TextureStage 0 2048 12 TextureStage 12 TextureStage 0 0 0 0 0 0 0 0 0 0 0 0 600
////////////////////////////////////////////////////////////////////
//       Class : TextureStage
// Description : Defines the properties of a named stage of the
//               multitexture pipeline.  The TextureAttrib will
//               associated a number of these stages with Texture
//               objects, and the GSG will render geometry by sorting
//               all of the currently active TextureStages in order
//               and then issuing the appropriate rendering calls to
//               activate them.
////////////////////////////////////////////////////////////////////

1448 14 TextureStage * 0 8576 14 TextureStage * 14 TextureStage * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1449 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

1450 23 PreparedGraphicsObjects 0 2048 23 PreparedGraphicsObjects 23 PreparedGraphicsObjects 0 0 0 0 0 0 0 0 0 0 0 0 1037
////////////////////////////////////////////////////////////////////
//       Class : PreparedGraphicsObjects
// Description : A table of objects that are saved within the graphics
//               context for reference by handle later.  Generally,
//               this represents things like OpenGL texture objects or
//               display lists (or their equivalent on other
//               platforms).
//
//               This object simply records the pointers to the
//               context objects created by the individual GSG's;
//               these context objects will contain enough information
//               to reference or release the actual object stored
//               within the graphics context.
//
//               These tables may potentially be shared between
//               related graphics contexts, hence their storage here
//               in a separate object rather than as a part of the
//               GraphicsStateGuardian.
////////////////////////////////////////////////////////////////////

1451 25 PreparedGraphicsObjects * 0 8576 25 PreparedGraphicsObjects * 25 PreparedGraphicsObjects * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1452 12 QualityLevel 0 794624 21 Texture::QualityLevel 21 Texture::QualityLevel 1422 0 0 0 0 0 0 0 0 0 4 10 QL_default 19 Texture::QL_default 37
// according to texture-quality-level
0 10 QL_fastest 19 Texture::QL_fastest 0
1 9 QL_normal 18 Texture::QL_normal 0
2 7 QL_best 16 Texture::QL_best 0
3 0 0

1453 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1454 0 0 0 0 0 0 0 0 0 0

1454 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1455 0 0 0 0 0 0 0 0 0 0

1455 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1456 12 SceneSetup * 0 8576 12 SceneSetup * 12 SceneSetup * 0 0 1457 0 0 0 0 0 0 0 0 0 0

1457 10 SceneSetup 0 2048 10 SceneSetup 10 SceneSetup 0 0 0 0 0 0 0 0 0 0 0 0 331
////////////////////////////////////////////////////////////////////
//       Class : SceneSetup
// Description : This object holds the camera position, etc., and
//               other general setup information for rendering a
//               particular scene.
////////////////////////////////////////////////////////////////////

1458 22 GraphicsOutput const * 0 8576 22 GraphicsOutput const * 22 GraphicsOutput const * 0 0 1459 0 0 0 0 0 0 0 0 0 0

1459 20 GraphicsOutput const 0 8832 20 GraphicsOutput const 20 GraphicsOutput const 0 0 1328 0 0 0 0 0 0 0 0 0 0

1460 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1461 0 0 0 0 0 0 0 0 0 0

1461 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1463 12 LVecBase2i * 0 8576 12 LVecBase2i * 12 LVecBase2i * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1464 10 DrawMask * 0 8576 10 DrawMask * 10 DrawMask * 0 0 1465 0 0 0 0 0 0 0 0 0 0

1465 8 DrawMask 0 2105344 8 DrawMask 8 DrawMask 0 0 1466 0 0 0 0 0 0 0 0 0 0

1466 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1467 0 0 0 0 0 0 0 0 0 0

1467 24 BitMask< PN_uint32, 32 > 0 2048 24 BitMask< PN_uint32, 32 > 24 BitMask< PN_uint32, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1468 20 GraphicsOutputBase * 0 8576 20 GraphicsOutputBase * 20 GraphicsOutputBase * 0 0 1329 0 0 0 0 0 0 0 0 0 0

1469 27 GraphicsWindowInputDevice * 0 8576 27 GraphicsWindowInputDevice * 27 GraphicsWindowInputDevice * 0 0 1332 0 0 0 0 0 0 0 0 0 0

1470 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1471 0 0 0 0 0 0 0 0 0 0

1471 12 ButtonHandle 0 2048 12 ButtonHandle 12 ButtonHandle 0 0 0 0 0 0 0 0 0 0 0 0 364
////////////////////////////////////////////////////////////////////
//       Class : ButtonHandle
// Description : A ButtonHandle represents a single button from any
//               device, including keyboard buttons and mouse buttons
//               (but see KeyboardButton and MouseButton).
////////////////////////////////////////////////////////////////////

1472 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1473 11 TouchInfo * 0 8576 11 TouchInfo * 11 TouchInfo * 0 0 1333 0 0 0 0 0 0 0 0 0 0

1474 38 GraphicsWindowProcCallbackData const * 0 8576 38 GraphicsWindowProcCallbackData const * 38 GraphicsWindowProcCallbackData const * 0 0 1475 0 0 0 0 0 0 0 0 0 0

1475 36 GraphicsWindowProcCallbackData const 0 8832 36 GraphicsWindowProcCallbackData const 36 GraphicsWindowProcCallbackData const 0 0 1335 0 0 0 0 0 0 0 0 0 0

1476 32 GraphicsWindowProcCallbackData * 0 8576 32 GraphicsWindowProcCallbackData * 32 GraphicsWindowProcCallbackData * 0 0 1335 0 0 0 0 0 0 0 0 0 0

1477 22 GraphicsWindow const * 0 8576 22 GraphicsWindow const * 22 GraphicsWindow const * 0 0 1478 0 0 0 0 0 0 0 0 0 0

1478 20 GraphicsWindow const 0 8832 20 GraphicsWindow const 20 GraphicsWindow const 0 0 1337 0 0 0 0 0 0 0 0 0 0

1479 16 GraphicsWindow * 0 8576 16 GraphicsWindow * 16 GraphicsWindow * 0 0 1337 0 0 0 0 0 0 0 0 0 0

1480 9 ButtonMap 0 2048 9 ButtonMap 9 ButtonMap 0 0 0 0 0 0 0 0 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : ButtonMap
// Description : This class represents a map containing all of the
//               buttons of a (keyboard) device, though it can also
//               be used as a generic mapping between ButtonHandles.
//               It maps an underlying 'raw' button to a 'virtual'
//               button, which may optionally be associated with an
//               appropriate platform-specific name for the button.
////////////////////////////////////////////////////////////////////

1481 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1480 0 0 0 0 0 0 0 0 0 0

1482 9 MouseData 0 2048 9 MouseData 9 MouseData 0 0 0 0 0 0 0 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : MouseData
// Description : Holds the data that might be generated by a 2-d
//               pointer input device, such as the mouse in the
//               GraphicsWindow.
////////////////////////////////////////////////////////////////////

1483 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1482 0 0 0 0 0 0 0 0 0 0

1484 24 CallbackGraphicsWindow * 0 8576 24 CallbackGraphicsWindow * 24 CallbackGraphicsWindow * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1485 30 CallbackGraphicsWindow const * 0 8576 30 CallbackGraphicsWindow const * 30 CallbackGraphicsWindow const * 0 0 1486 0 0 0 0 0 0 0 0 0 0

1486 28 CallbackGraphicsWindow const 0 8832 28 CallbackGraphicsWindow const 28 CallbackGraphicsWindow const 0 0 1338 0 0 0 0 0 0 0 0 0 0

1487 26 WindowCallbackData const * 0 8576 50 CallbackGraphicsWindow::WindowCallbackData const * 50 CallbackGraphicsWindow::WindowCallbackData const * 0 0 1488 0 0 0 0 0 0 0 0 0 0

1488 24 WindowCallbackData const 0 8832 48 CallbackGraphicsWindow::WindowCallbackData const 48 CallbackGraphicsWindow::WindowCallbackData const 0 0 1339 0 0 0 0 0 0 0 0 0 0

1489 30 PropertiesCallbackData const * 0 8576 54 CallbackGraphicsWindow::PropertiesCallbackData const * 54 CallbackGraphicsWindow::PropertiesCallbackData const * 0 0 1490 0 0 0 0 0 0 0 0 0 0

1490 28 PropertiesCallbackData const 0 8832 52 CallbackGraphicsWindow::PropertiesCallbackData const 52 CallbackGraphicsWindow::PropertiesCallbackData const 0 0 1341 0 0 0 0 0 0 0 0 0 0

1491 26 RenderCallbackData const * 0 8576 50 CallbackGraphicsWindow::RenderCallbackData const * 50 CallbackGraphicsWindow::RenderCallbackData const * 0 0 1492 0 0 0 0 0 0 0 0 0 0

1492 24 RenderCallbackData const 0 8832 48 CallbackGraphicsWindow::RenderCallbackData const 48 CallbackGraphicsWindow::RenderCallbackData const 0 0 1343 0 0 0 0 0 0 0 0 0 0

1493 20 RenderCallbackData * 0 8576 44 CallbackGraphicsWindow::RenderCallbackData * 44 CallbackGraphicsWindow::RenderCallbackData * 0 0 1343 0 0 0 0 0 0 0 0 0 0

1494 19 DisplayMode const * 0 8576 19 DisplayMode const * 19 DisplayMode const * 0 0 1495 0 0 0 0 0 0 0 0 0 0

1495 17 DisplayMode const 0 8832 17 DisplayMode const 17 DisplayMode const 0 0 1344 0 0 0 0 0 0 0 0 0 0

1496 13 DisplayMode * 0 8576 13 DisplayMode * 13 DisplayMode * 0 0 1344 0 0 0 0 0 0 0 0 0 0

1497 9 PN_uint64 0 2105344 9 PN_uint64 9 PN_uint64 0 0 1498 0 0 0 0 0 0 0 0 0 0

1498 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1499 37 DisplayRegionCullCallbackData const * 0 8576 37 DisplayRegionCullCallbackData const * 37 DisplayRegionCullCallbackData const * 0 0 1500 0 0 0 0 0 0 0 0 0 0

1500 35 DisplayRegionCullCallbackData const 0 8832 35 DisplayRegionCullCallbackData const 35 DisplayRegionCullCallbackData const 0 0 1348 0 0 0 0 0 0 0 0 0 0

1501 13 CullHandler * 0 8576 13 CullHandler * 13 CullHandler * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1502 11 CullHandler 0 2048 11 CullHandler 11 CullHandler 0 0 0 0 0 0 0 0 0 0 0 0 442
////////////////////////////////////////////////////////////////////
//       Class : CullHandler
// Description : This defines the abstract interface for an object
//               that receives Geoms identified by the CullTraverser.
//               By itself, it's not a particularly useful class; to
//               use it, derive from it and redefine record_object().
////////////////////////////////////////////////////////////////////

1503 10 CullResult 0 2048 10 CullResult 10 CullResult 0 0 0 0 0 0 0 0 0 0 0 0 611
////////////////////////////////////////////////////////////////////
//       Class : CullResult
// Description : This stores the result of a BinCullHandler traversal:
//               an ordered collection of CullBins, each of which
//               holds a number of Geoms and RenderStates to be
//               rendered in some defined order.
//
//               This is also used to keep the results of last frame's
//               cull traversal around to make next frame's traversal
//               of the same scene a little easier.
////////////////////////////////////////////////////////////////////

1504 37 DisplayRegionDrawCallbackData const * 0 8576 37 DisplayRegionDrawCallbackData const * 37 DisplayRegionDrawCallbackData const * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1505 35 DisplayRegionDrawCallbackData const 0 8832 35 DisplayRegionDrawCallbackData const 35 DisplayRegionDrawCallbackData const 0 0 1349 0 0 0 0 0 0 0 0 0 0

1506 12 CullResult * 0 8576 12 CullResult * 12 CullResult * 0 0 1503 0 0 0 0 0 0 0 0 0 0

1507 25 DisplaySearchParameters * 0 8576 25 DisplaySearchParameters * 25 DisplaySearchParameters * 0 0 1350 0 0 0 0 0 0 0 0 0 0

1508 16 GraphicsBuffer * 0 8576 16 GraphicsBuffer * 16 GraphicsBuffer * 0 0 1351 0 0 0 0 0 0 0 0 0 0

1509 10 Pipeline * 0 8576 10 Pipeline * 10 Pipeline * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1510 8 Pipeline 0 2048 8 Pipeline 8 Pipeline 0 0 0 0 0 0 0 0 0 0 0 0 0

1511 22 GraphicsEngine const * 0 8576 22 GraphicsEngine const * 22 GraphicsEngine const * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1512 20 GraphicsEngine const 0 8832 20 GraphicsEngine const 20 GraphicsEngine const 0 0 1352 0 0 0 0 0 0 0 0 0 0

1513 15 ReMutex const * 0 8576 15 ReMutex const * 15 ReMutex const * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1514 13 ReMutex const 0 8832 13 ReMutex const 13 ReMutex const 0 0 1515 0 0 0 0 0 0 0 0 0 0

1515 7 ReMutex 0 2048 7 ReMutex 7 ReMutex 0 0 0 0 0 0 0 0 0 0 0 0 0

1516 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1517 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1519 20 ShaderAttrib const * 0 8576 20 ShaderAttrib const * 20 ShaderAttrib const * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 18 ShaderAttrib const 0 8832 18 ShaderAttrib const 18 ShaderAttrib const 0 0 1521 0 0 0 0 0 0 0 0 0 0

1521 12 ShaderAttrib 0 2048 12 ShaderAttrib 12 ShaderAttrib 0 0 0 0 0 0 0 0 0 0 0 0 184
////////////////////////////////////////////////////////////////////
//       Class : ShaderAttrib
// Description :
////////////////////////////////////////////////////////////////////

1522 29 GraphicsPipeSelection const * 0 8576 29 GraphicsPipeSelection const * 29 GraphicsPipeSelection const * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 27 GraphicsPipeSelection const 0 8832 27 GraphicsPipeSelection const 27 GraphicsPipeSelection const 0 0 1354 0 0 0 0 0 0 0 0 0 0

1524 23 GraphicsPipeSelection * 0 8576 23 GraphicsPipeSelection * 23 GraphicsPipeSelection * 0 0 1354 0 0 0 0 0 0 0 0 0 0

1525 16 ParasiteBuffer * 0 8576 16 ParasiteBuffer * 16 ParasiteBuffer * 0 0 1356 0 0 0 0 0 0 0 0 0 0

0
5
1526 5 width 0 6 1345 1177 1178 18 DisplayMode::width 0

1527 6 height 0 6 1345 1179 1180 19 DisplayMode::height 0

1528 14 bits_per_pixel 0 6 1345 1181 1182 27 DisplayMode::bits_per_pixel 0

1529 12 refresh_rate 0 6 1345 1183 1184 25 DisplayMode::refresh_rate 0

1530 15 fullscreen_only 0 6 1345 1185 1186 28 DisplayMode::fullscreen_only 0

15
1531 0 0 285 8 get_gsgs 12 get_num_gsgs 7 get_gsg 
1532 0 0 377 19 get_display_regions 23 get_num_display_regions 18 get_display_region 
1533 0 0 377 26 get_active_display_regions 30 get_num_active_display_regions 25 get_active_display_region 
1534 0 0 494 22 get_input_device_names 21 get_num_input_devices 21 get_input_device_name 
1535 0 0 575 17 get_display_modes 23 get_total_display_modes 16 get_display_mode 
1536 0 0 655 11 get_windows 15 get_num_windows 10 get_window 
1537 0 0 685 14 get_pipe_types 18 get_num_pipe_types 13 get_pipe_type 
1538 0 0 902 9 get_nodes 13 get_num_nodes 8 get_node 
1539 0 0 902 13 get_ancestors 13 get_num_nodes 12 get_ancestor 
1540 0 0 953 11 get_parents 15 get_num_parents 10 get_parent 
1541 0 0 953 12 get_children 16 get_num_children 9 get_child 
1542 0 0 953 11 get_stashed 15 get_num_stashed 11 get_stashed 
1543 0 0 1126 13 get_on_stages 17 get_num_on_stages 12 get_on_stage 
1544 0 0 1126 16 get_on_ff_stages 20 get_num_on_ff_stages 15 get_on_ff_stage 
1545 0 0 1126 14 get_off_stages 18 get_num_off_stages 13 get_off_stage 
