1428714169
2 3
13 libp3mathutil 4 LL_p 12 panda3d.core 
647
701 5 clear 0 4 1350 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 13 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

702 6 output 0 4 1350 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 14 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(ostream &out) const;

703 19 ~PointerToArrayBase 0 4 1349 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

704 19 ConstPointerToArray 0 4 1348 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 3 1 2 3 0
297
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);
ConstPointerToArray< LMatrix3d >::ConstPointerToArray(_object *self, _object *source);

705 4 size 0 4 1348 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
71
inline unsigned int ConstPointerToArray< LMatrix3d >::size(void) const;

706 11 get_element 0 4 1348 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
92
inline LMatrix3d const &ConstPointerToArray< LMatrix3d >::get_element(unsigned int n) const;

707 11 __getitem__ 0 4 1348 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
85
LMatrix3d const &ConstPointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

708 8 get_data 0 4 1348 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
83
inline basic_string< char > ConstPointerToArray< LMatrix3d >::get_data(void) const;

709 11 get_subdata 0 4 1348 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
116
inline basic_string< char > ConstPointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

710 13 get_ref_count 0 4 1348 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
71
inline int ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

711 18 get_node_ref_count 0 4 1348 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
76
inline int ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

712 13 __getbuffer__ 0 4 1348 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 11 0
101
int ConstPointerToArray< LMatrix3d >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

713 17 __releasebuffer__ 0 4 1348 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 12 0
95
void ConstPointerToArray< LMatrix3d >::__releasebuffer__(_object *self, Py_buffer *view) const;

714 20 ~ConstPointerToArray 0 4 1348 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

715 5 clear 0 4 1354 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 27 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

716 6 output 0 4 1354 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 28 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

717 19 ~PointerToArrayBase 0 4 1353 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

718 19 ConstPointerToArray 0 4 1352 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 3 15 16 17 0
297
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);
ConstPointerToArray< LMatrix3f >::ConstPointerToArray(_object *self, _object *source);

719 4 size 0 4 1352 38 ConstPointerToArray< LMatrix3f >::size 0 1 18 0
71
inline unsigned int ConstPointerToArray< LMatrix3f >::size(void) const;

720 11 get_element 0 4 1352 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 19 0
92
inline LMatrix3f const &ConstPointerToArray< LMatrix3f >::get_element(unsigned int n) const;

721 11 __getitem__ 0 4 1352 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 20 0
85
LMatrix3f const &ConstPointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

722 8 get_data 0 4 1352 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 21 0
83
inline basic_string< char > ConstPointerToArray< LMatrix3f >::get_data(void) const;

723 11 get_subdata 0 4 1352 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 22 0
116
inline basic_string< char > ConstPointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

724 13 get_ref_count 0 4 1352 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 23 0
71
inline int ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

725 18 get_node_ref_count 0 4 1352 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 24 0
76
inline int ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

726 13 __getbuffer__ 0 4 1352 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 25 0
101
int ConstPointerToArray< LMatrix3f >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

727 17 __releasebuffer__ 0 4 1352 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 26 0
95
void ConstPointerToArray< LMatrix3f >::__releasebuffer__(_object *self, Py_buffer *view) const;

728 20 ~ConstPointerToArray 0 4 1352 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

729 5 clear 0 4 1357 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 41 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

730 6 output 0 4 1357 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 42 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(ostream &out) const;

731 19 ~PointerToArrayBase 0 4 1356 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

732 19 ConstPointerToArray 0 4 1355 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 3 29 30 31 0
302
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);
ConstPointerToArray< LVecBase2d >::ConstPointerToArray(_object *self, _object *source);

733 4 size 0 4 1355 39 ConstPointerToArray< LVecBase2d >::size 0 1 32 0
72
inline unsigned int ConstPointerToArray< LVecBase2d >::size(void) const;

734 11 get_element 0 4 1355 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 33 0
94
inline LVecBase2d const &ConstPointerToArray< LVecBase2d >::get_element(unsigned int n) const;

735 11 __getitem__ 0 4 1355 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 34 0
87
LVecBase2d const &ConstPointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

736 8 get_data 0 4 1355 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 35 0
84
inline basic_string< char > ConstPointerToArray< LVecBase2d >::get_data(void) const;

737 11 get_subdata 0 4 1355 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 36 0
117
inline basic_string< char > ConstPointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

738 13 get_ref_count 0 4 1355 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 37 0
72
inline int ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

739 18 get_node_ref_count 0 4 1355 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 38 0
77
inline int ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

740 13 __getbuffer__ 0 4 1355 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 39 0
102
int ConstPointerToArray< LVecBase2d >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

741 17 __releasebuffer__ 0 4 1355 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 40 0
96
void ConstPointerToArray< LVecBase2d >::__releasebuffer__(_object *self, Py_buffer *view) const;

742 20 ~ConstPointerToArray 0 4 1355 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

743 5 clear 0 4 1360 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 55 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

744 6 output 0 4 1360 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 56 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

745 19 ~PointerToArrayBase 0 4 1359 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

746 19 ConstPointerToArray 0 4 1358 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 3 43 44 45 0
302
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);
ConstPointerToArray< LVecBase2f >::ConstPointerToArray(_object *self, _object *source);

747 4 size 0 4 1358 39 ConstPointerToArray< LVecBase2f >::size 0 1 46 0
72
inline unsigned int ConstPointerToArray< LVecBase2f >::size(void) const;

748 11 get_element 0 4 1358 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 47 0
94
inline LVecBase2f const &ConstPointerToArray< LVecBase2f >::get_element(unsigned int n) const;

749 11 __getitem__ 0 4 1358 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 48 0
87
LVecBase2f const &ConstPointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

750 8 get_data 0 4 1358 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 49 0
84
inline basic_string< char > ConstPointerToArray< LVecBase2f >::get_data(void) const;

751 11 get_subdata 0 4 1358 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 50 0
117
inline basic_string< char > ConstPointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

752 13 get_ref_count 0 4 1358 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 51 0
72
inline int ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

753 18 get_node_ref_count 0 4 1358 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 52 0
77
inline int ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

754 13 __getbuffer__ 0 4 1358 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 53 0
102
int ConstPointerToArray< LVecBase2f >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

755 17 __releasebuffer__ 0 4 1358 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 54 0
96
void ConstPointerToArray< LVecBase2f >::__releasebuffer__(_object *self, Py_buffer *view) const;

756 20 ~ConstPointerToArray 0 4 1358 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

757 5 clear 0 4 1363 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 69 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

758 6 output 0 4 1363 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 70 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(ostream &out) const;

759 19 ~PointerToArrayBase 0 4 1362 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

760 19 ConstPointerToArray 0 4 1361 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 3 57 58 59 0
302
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);
ConstPointerToArray< LVecBase2i >::ConstPointerToArray(_object *self, _object *source);

761 4 size 0 4 1361 39 ConstPointerToArray< LVecBase2i >::size 0 1 60 0
72
inline unsigned int ConstPointerToArray< LVecBase2i >::size(void) const;

762 11 get_element 0 4 1361 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 61 0
94
inline LVecBase2i const &ConstPointerToArray< LVecBase2i >::get_element(unsigned int n) const;

763 11 __getitem__ 0 4 1361 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 62 0
87
LVecBase2i const &ConstPointerToArray< LVecBase2i >::__getitem__(unsigned int n) const;

764 8 get_data 0 4 1361 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 63 0
84
inline basic_string< char > ConstPointerToArray< LVecBase2i >::get_data(void) const;

765 11 get_subdata 0 4 1361 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 64 0
117
inline basic_string< char > ConstPointerToArray< LVecBase2i >::get_subdata(unsigned int n, unsigned int count) const;

766 13 get_ref_count 0 4 1361 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 65 0
72
inline int ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

767 18 get_node_ref_count 0 4 1361 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 66 0
77
inline int ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

768 13 __getbuffer__ 0 4 1361 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 67 0
102
int ConstPointerToArray< LVecBase2i >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

769 17 __releasebuffer__ 0 4 1361 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 68 0
96
void ConstPointerToArray< LVecBase2i >::__releasebuffer__(_object *self, Py_buffer *view) const;

770 20 ~ConstPointerToArray 0 4 1361 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

771 5 clear 0 4 1366 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 83 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

772 6 output 0 4 1366 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 84 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(ostream &out) const;

773 19 ~PointerToArrayBase 0 4 1365 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

774 19 ConstPointerToArray 0 4 1364 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 3 71 72 73 0
302
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);
ConstPointerToArray< LVecBase3d >::ConstPointerToArray(_object *self, _object *source);

775 4 size 0 4 1364 39 ConstPointerToArray< LVecBase3d >::size 0 1 74 0
72
inline unsigned int ConstPointerToArray< LVecBase3d >::size(void) const;

776 11 get_element 0 4 1364 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 75 0
94
inline LVecBase3d const &ConstPointerToArray< LVecBase3d >::get_element(unsigned int n) const;

777 11 __getitem__ 0 4 1364 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 76 0
87
LVecBase3d const &ConstPointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

778 8 get_data 0 4 1364 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 77 0
84
inline basic_string< char > ConstPointerToArray< LVecBase3d >::get_data(void) const;

779 11 get_subdata 0 4 1364 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 78 0
117
inline basic_string< char > ConstPointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

780 13 get_ref_count 0 4 1364 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 79 0
72
inline int ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

781 18 get_node_ref_count 0 4 1364 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 80 0
77
inline int ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

782 13 __getbuffer__ 0 4 1364 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 81 0
102
int ConstPointerToArray< LVecBase3d >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

783 17 __releasebuffer__ 0 4 1364 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 82 0
96
void ConstPointerToArray< LVecBase3d >::__releasebuffer__(_object *self, Py_buffer *view) const;

784 20 ~ConstPointerToArray 0 4 1364 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

785 5 clear 0 4 1369 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 97 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

786 6 output 0 4 1369 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 98 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

787 19 ~PointerToArrayBase 0 4 1368 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

788 19 ConstPointerToArray 0 4 1367 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 3 85 86 87 0
302
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);
ConstPointerToArray< LVecBase3f >::ConstPointerToArray(_object *self, _object *source);

789 4 size 0 4 1367 39 ConstPointerToArray< LVecBase3f >::size 0 1 88 0
72
inline unsigned int ConstPointerToArray< LVecBase3f >::size(void) const;

790 11 get_element 0 4 1367 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 89 0
94
inline LVecBase3f const &ConstPointerToArray< LVecBase3f >::get_element(unsigned int n) const;

791 11 __getitem__ 0 4 1367 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 90 0
87
LVecBase3f const &ConstPointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

792 8 get_data 0 4 1367 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 91 0
84
inline basic_string< char > ConstPointerToArray< LVecBase3f >::get_data(void) const;

793 11 get_subdata 0 4 1367 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 92 0
117
inline basic_string< char > ConstPointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

794 13 get_ref_count 0 4 1367 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 93 0
72
inline int ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

795 18 get_node_ref_count 0 4 1367 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 94 0
77
inline int ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

796 13 __getbuffer__ 0 4 1367 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 95 0
102
int ConstPointerToArray< LVecBase3f >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

797 17 __releasebuffer__ 0 4 1367 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 96 0
96
void ConstPointerToArray< LVecBase3f >::__releasebuffer__(_object *self, Py_buffer *view) const;

798 20 ~ConstPointerToArray 0 4 1367 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

799 5 clear 0 4 1372 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 111 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

800 6 output 0 4 1372 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 112 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(ostream &out) const;

801 19 ~PointerToArrayBase 0 4 1371 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

802 19 ConstPointerToArray 0 4 1370 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 3 99 100 101 0
302
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);
ConstPointerToArray< LVecBase3i >::ConstPointerToArray(_object *self, _object *source);

803 4 size 0 4 1370 39 ConstPointerToArray< LVecBase3i >::size 0 1 102 0
72
inline unsigned int ConstPointerToArray< LVecBase3i >::size(void) const;

804 11 get_element 0 4 1370 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 103 0
94
inline LVecBase3i const &ConstPointerToArray< LVecBase3i >::get_element(unsigned int n) const;

805 11 __getitem__ 0 4 1370 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 104 0
87
LVecBase3i const &ConstPointerToArray< LVecBase3i >::__getitem__(unsigned int n) const;

806 8 get_data 0 4 1370 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 105 0
84
inline basic_string< char > ConstPointerToArray< LVecBase3i >::get_data(void) const;

807 11 get_subdata 0 4 1370 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 106 0
117
inline basic_string< char > ConstPointerToArray< LVecBase3i >::get_subdata(unsigned int n, unsigned int count) const;

808 13 get_ref_count 0 4 1370 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 107 0
72
inline int ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

809 18 get_node_ref_count 0 4 1370 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 108 0
77
inline int ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

810 13 __getbuffer__ 0 4 1370 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 109 0
102
int ConstPointerToArray< LVecBase3i >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

811 17 __releasebuffer__ 0 4 1370 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 110 0
96
void ConstPointerToArray< LVecBase3i >::__releasebuffer__(_object *self, Py_buffer *view) const;

812 20 ~ConstPointerToArray 0 4 1370 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

813 5 clear 0 4 1375 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 125 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

814 6 output 0 4 1375 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 126 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(ostream &out) const;

815 19 ~PointerToArrayBase 0 4 1374 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

816 19 ConstPointerToArray 0 4 1373 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 3 113 114 115 0
342
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);
ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(_object *self, _object *source);

817 4 size 0 4 1373 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 116 0
80
inline unsigned int ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

818 11 get_element 0 4 1373 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 117 0
110
inline UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

819 11 __getitem__ 0 4 1373 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 118 0
103
UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

820 8 get_data 0 4 1373 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 119 0
92
inline basic_string< char > ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

821 11 get_subdata 0 4 1373 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 120 0
125
inline basic_string< char > ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

822 13 get_ref_count 0 4 1373 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 121 0
80
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

823 18 get_node_ref_count 0 4 1373 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 122 0
85
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

824 13 __getbuffer__ 0 4 1373 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 123 0
110
int ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

825 17 __releasebuffer__ 0 4 1373 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 124 0
104
void ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(_object *self, Py_buffer *view) const;

826 20 ~ConstPointerToArray 0 4 1373 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

827 5 clear 0 4 1378 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 139 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

828 6 output 0 4 1378 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 140 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(ostream &out) const;

829 19 ~PointerToArrayBase 0 4 1377 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

830 19 ConstPointerToArray 0 4 1376 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 3 127 128 129 0
342
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);
ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(_object *self, _object *source);

831 4 size 0 4 1376 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 130 0
80
inline unsigned int ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

832 11 get_element 0 4 1376 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 131 0
110
inline UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

833 11 __getitem__ 0 4 1376 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 132 0
103
UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

834 8 get_data 0 4 1376 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 133 0
92
inline basic_string< char > ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

835 11 get_subdata 0 4 1376 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 134 0
125
inline basic_string< char > ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

836 13 get_ref_count 0 4 1376 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 135 0
80
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

837 18 get_node_ref_count 0 4 1376 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 136 0
85
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

838 13 __getbuffer__ 0 4 1376 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 137 0
110
int ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

839 17 __releasebuffer__ 0 4 1376 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 138 0
104
void ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(_object *self, Py_buffer *view) const;

840 20 ~ConstPointerToArray 0 4 1376 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

841 5 clear 0 4 1381 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 153 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

842 6 output 0 4 1381 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 154 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(ostream &out) const;

843 19 ~PointerToArrayBase 0 4 1380 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

844 19 ConstPointerToArray 0 4 1379 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 3 141 142 143 0
347
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);
ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(_object *self, _object *source);

845 4 size 0 4 1379 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 144 0
81
inline unsigned int ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

846 11 get_element 0 4 1379 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 145 0
112
inline UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

847 11 __getitem__ 0 4 1379 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 146 0
105
UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

848 8 get_data 0 4 1379 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 147 0
93
inline basic_string< char > ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

849 11 get_subdata 0 4 1379 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 148 0
126
inline basic_string< char > ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

850 13 get_ref_count 0 4 1379 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 149 0
81
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

851 18 get_node_ref_count 0 4 1379 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 150 0
86
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

852 13 __getbuffer__ 0 4 1379 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 151 0
111
int ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

853 17 __releasebuffer__ 0 4 1379 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 152 0
105
void ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(_object *self, Py_buffer *view) const;

854 20 ~ConstPointerToArray 0 4 1379 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

855 5 clear 0 4 1384 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 167 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

856 6 output 0 4 1384 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 168 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(ostream &out) const;

857 19 ~PointerToArrayBase 0 4 1383 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

858 19 ConstPointerToArray 0 4 1382 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 3 155 156 157 0
347
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);
ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(_object *self, _object *source);

859 4 size 0 4 1382 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 158 0
81
inline unsigned int ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

860 11 get_element 0 4 1382 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 159 0
112
inline UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

861 11 __getitem__ 0 4 1382 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 160 0
105
UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

862 8 get_data 0 4 1382 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 161 0
93
inline basic_string< char > ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

863 11 get_subdata 0 4 1382 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 162 0
126
inline basic_string< char > ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

864 13 get_ref_count 0 4 1382 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 163 0
81
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

865 18 get_node_ref_count 0 4 1382 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 164 0
86
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

866 13 __getbuffer__ 0 4 1382 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 165 0
111
int ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

867 17 __releasebuffer__ 0 4 1382 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 166 0
105
void ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(_object *self, Py_buffer *view) const;

868 20 ~ConstPointerToArray 0 4 1382 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

869 5 clear 0 4 1387 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 181 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

870 6 output 0 4 1387 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 182 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(ostream &out) const;

871 19 ~PointerToArrayBase 0 4 1386 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

872 19 ConstPointerToArray 0 4 1385 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 3 169 170 171 0
347
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);
ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(_object *self, _object *source);

873 4 size 0 4 1385 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 172 0
81
inline unsigned int ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

874 11 get_element 0 4 1385 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 173 0
112
inline UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned int n) const;

875 11 __getitem__ 0 4 1385 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 174 0
105
UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned int n) const;

876 8 get_data 0 4 1385 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 175 0
93
inline basic_string< char > ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

877 11 get_subdata 0 4 1385 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 176 0
126
inline basic_string< char > ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned int n, unsigned int count) const;

878 13 get_ref_count 0 4 1385 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 177 0
81
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

879 18 get_node_ref_count 0 4 1385 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 178 0
86
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

880 13 __getbuffer__ 0 4 1385 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 179 0
111
int ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

881 17 __releasebuffer__ 0 4 1385 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 180 0
105
void ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(_object *self, Py_buffer *view) const;

882 20 ~ConstPointerToArray 0 4 1385 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

883 14 PointerToArray 0 4 1388 43 PointerToArray< LMatrix3d >::PointerToArray 0 3 183 184 185 0
292
inline PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));
inline PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
PointerToArray< LMatrix3d >::PointerToArray(_object *self, _object *source);

884 11 empty_array 0 4 1388 40 PointerToArray< LMatrix3d >::empty_array 0 1 186 0
170
static inline PointerToArray< LMatrix3d > PointerToArray< LMatrix3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3d const *)(0)))));

885 4 size 0 4 1388 33 PointerToArray< LMatrix3d >::size 0 1 187 0
66
inline unsigned int PointerToArray< LMatrix3d >::size(void) const;

886 9 push_back 0 4 1388 38 PointerToArray< LMatrix3d >::push_back 0 1 188 0
71
inline void PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

887 8 pop_back 0 4 1388 37 PointerToArray< LMatrix3d >::pop_back 0 1 189 0
56
inline void PointerToArray< LMatrix3d >::pop_back(void);

888 11 get_element 0 4 1388 40 PointerToArray< LMatrix3d >::get_element 0 1 190 0
87
inline LMatrix3d const &PointerToArray< LMatrix3d >::get_element(unsigned int n) const;

889 11 set_element 0 4 1388 40 PointerToArray< LMatrix3d >::set_element 0 1 191 0
93
inline void PointerToArray< LMatrix3d >::set_element(unsigned int n, LMatrix3d const &value);

890 11 __getitem__ 0 4 1388 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 192 0
80
LMatrix3d const &PointerToArray< LMatrix3d >::__getitem__(unsigned int n) const;

891 11 __setitem__ 0 4 1388 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 193 0
86
void PointerToArray< LMatrix3d >::__setitem__(unsigned int n, LMatrix3d const &value);

892 8 get_data 0 4 1388 37 PointerToArray< LMatrix3d >::get_data 0 1 194 0
78
inline basic_string< char > PointerToArray< LMatrix3d >::get_data(void) const;

893 8 set_data 0 4 1388 37 PointerToArray< LMatrix3d >::set_data 0 1 195 0
84
inline void PointerToArray< LMatrix3d >::set_data(basic_string< char > const &data);

894 11 get_subdata 0 4 1388 40 PointerToArray< LMatrix3d >::get_subdata 0 1 196 0
111
inline basic_string< char > PointerToArray< LMatrix3d >::get_subdata(unsigned int n, unsigned int count) const;

895 11 set_subdata 0 4 1388 40 PointerToArray< LMatrix3d >::set_subdata 0 1 197 0
123
inline void PointerToArray< LMatrix3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

896 13 get_ref_count 0 4 1388 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 198 0
66
inline int PointerToArray< LMatrix3d >::get_ref_count(void) const;

897 18 get_node_ref_count 0 4 1388 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 199 0
71
inline int PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

898 13 __getbuffer__ 0 4 1388 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 200 0
90
int PointerToArray< LMatrix3d >::__getbuffer__(_object *self, Py_buffer *view, int flags);

899 17 __releasebuffer__ 0 4 1388 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 201 0
90
void PointerToArray< LMatrix3d >::__releasebuffer__(_object *self, Py_buffer *view) const;

900 15 ~PointerToArray 0 4 1388 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3d >::~PointerToArray(void);

901 14 PointerToArray 0 4 1389 43 PointerToArray< LMatrix3f >::PointerToArray 0 3 202 203 204 0
292
inline PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));
inline PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
PointerToArray< LMatrix3f >::PointerToArray(_object *self, _object *source);

902 11 empty_array 0 4 1389 40 PointerToArray< LMatrix3f >::empty_array 0 1 205 0
170
static inline PointerToArray< LMatrix3f > PointerToArray< LMatrix3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LMatrix3f const *)(0)))));

903 4 size 0 4 1389 33 PointerToArray< LMatrix3f >::size 0 1 206 0
66
inline unsigned int PointerToArray< LMatrix3f >::size(void) const;

904 9 push_back 0 4 1389 38 PointerToArray< LMatrix3f >::push_back 0 1 207 0
71
inline void PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

905 8 pop_back 0 4 1389 37 PointerToArray< LMatrix3f >::pop_back 0 1 208 0
56
inline void PointerToArray< LMatrix3f >::pop_back(void);

906 11 get_element 0 4 1389 40 PointerToArray< LMatrix3f >::get_element 0 1 209 0
87
inline LMatrix3f const &PointerToArray< LMatrix3f >::get_element(unsigned int n) const;

907 11 set_element 0 4 1389 40 PointerToArray< LMatrix3f >::set_element 0 1 210 0
93
inline void PointerToArray< LMatrix3f >::set_element(unsigned int n, LMatrix3f const &value);

908 11 __getitem__ 0 4 1389 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 211 0
80
LMatrix3f const &PointerToArray< LMatrix3f >::__getitem__(unsigned int n) const;

909 11 __setitem__ 0 4 1389 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 212 0
86
void PointerToArray< LMatrix3f >::__setitem__(unsigned int n, LMatrix3f const &value);

910 8 get_data 0 4 1389 37 PointerToArray< LMatrix3f >::get_data 0 1 213 0
78
inline basic_string< char > PointerToArray< LMatrix3f >::get_data(void) const;

911 8 set_data 0 4 1389 37 PointerToArray< LMatrix3f >::set_data 0 1 214 0
84
inline void PointerToArray< LMatrix3f >::set_data(basic_string< char > const &data);

912 11 get_subdata 0 4 1389 40 PointerToArray< LMatrix3f >::get_subdata 0 1 215 0
111
inline basic_string< char > PointerToArray< LMatrix3f >::get_subdata(unsigned int n, unsigned int count) const;

913 11 set_subdata 0 4 1389 40 PointerToArray< LMatrix3f >::set_subdata 0 1 216 0
123
inline void PointerToArray< LMatrix3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

914 13 get_ref_count 0 4 1389 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 217 0
66
inline int PointerToArray< LMatrix3f >::get_ref_count(void) const;

915 18 get_node_ref_count 0 4 1389 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 218 0
71
inline int PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

916 13 __getbuffer__ 0 4 1389 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 219 0
90
int PointerToArray< LMatrix3f >::__getbuffer__(_object *self, Py_buffer *view, int flags);

917 17 __releasebuffer__ 0 4 1389 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 220 0
90
void PointerToArray< LMatrix3f >::__releasebuffer__(_object *self, Py_buffer *view) const;

918 15 ~PointerToArray 0 4 1389 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3f >::~PointerToArray(void);

919 14 PointerToArray 0 4 1390 44 PointerToArray< LVecBase2d >::PointerToArray 0 3 221 222 223 0
297
inline PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));
inline PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
PointerToArray< LVecBase2d >::PointerToArray(_object *self, _object *source);

920 11 empty_array 0 4 1390 41 PointerToArray< LVecBase2d >::empty_array 0 1 224 0
173
static inline PointerToArray< LVecBase2d > PointerToArray< LVecBase2d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2d const *)(0)))));

921 4 size 0 4 1390 34 PointerToArray< LVecBase2d >::size 0 1 225 0
67
inline unsigned int PointerToArray< LVecBase2d >::size(void) const;

922 9 push_back 0 4 1390 39 PointerToArray< LVecBase2d >::push_back 0 1 226 0
73
inline void PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

923 8 pop_back 0 4 1390 38 PointerToArray< LVecBase2d >::pop_back 0 1 227 0
57
inline void PointerToArray< LVecBase2d >::pop_back(void);

924 11 get_element 0 4 1390 41 PointerToArray< LVecBase2d >::get_element 0 1 228 0
89
inline LVecBase2d const &PointerToArray< LVecBase2d >::get_element(unsigned int n) const;

925 11 set_element 0 4 1390 41 PointerToArray< LVecBase2d >::set_element 0 1 229 0
95
inline void PointerToArray< LVecBase2d >::set_element(unsigned int n, LVecBase2d const &value);

926 11 __getitem__ 0 4 1390 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 230 0
82
LVecBase2d const &PointerToArray< LVecBase2d >::__getitem__(unsigned int n) const;

927 11 __setitem__ 0 4 1390 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 231 0
88
void PointerToArray< LVecBase2d >::__setitem__(unsigned int n, LVecBase2d const &value);

928 8 get_data 0 4 1390 38 PointerToArray< LVecBase2d >::get_data 0 1 232 0
79
inline basic_string< char > PointerToArray< LVecBase2d >::get_data(void) const;

929 8 set_data 0 4 1390 38 PointerToArray< LVecBase2d >::set_data 0 1 233 0
85
inline void PointerToArray< LVecBase2d >::set_data(basic_string< char > const &data);

930 11 get_subdata 0 4 1390 41 PointerToArray< LVecBase2d >::get_subdata 0 1 234 0
112
inline basic_string< char > PointerToArray< LVecBase2d >::get_subdata(unsigned int n, unsigned int count) const;

931 11 set_subdata 0 4 1390 41 PointerToArray< LVecBase2d >::set_subdata 0 1 235 0
124
inline void PointerToArray< LVecBase2d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

932 13 get_ref_count 0 4 1390 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 236 0
67
inline int PointerToArray< LVecBase2d >::get_ref_count(void) const;

933 18 get_node_ref_count 0 4 1390 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 237 0
72
inline int PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

934 13 __getbuffer__ 0 4 1390 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 238 0
91
int PointerToArray< LVecBase2d >::__getbuffer__(_object *self, Py_buffer *view, int flags);

935 17 __releasebuffer__ 0 4 1390 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 239 0
91
void PointerToArray< LVecBase2d >::__releasebuffer__(_object *self, Py_buffer *view) const;

936 15 ~PointerToArray 0 4 1390 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2d >::~PointerToArray(void);

937 14 PointerToArray 0 4 1391 44 PointerToArray< LVecBase2f >::PointerToArray 0 3 240 241 242 0
297
inline PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));
inline PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
PointerToArray< LVecBase2f >::PointerToArray(_object *self, _object *source);

938 11 empty_array 0 4 1391 41 PointerToArray< LVecBase2f >::empty_array 0 1 243 0
173
static inline PointerToArray< LVecBase2f > PointerToArray< LVecBase2f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2f const *)(0)))));

939 4 size 0 4 1391 34 PointerToArray< LVecBase2f >::size 0 1 244 0
67
inline unsigned int PointerToArray< LVecBase2f >::size(void) const;

940 9 push_back 0 4 1391 39 PointerToArray< LVecBase2f >::push_back 0 1 245 0
73
inline void PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

941 8 pop_back 0 4 1391 38 PointerToArray< LVecBase2f >::pop_back 0 1 246 0
57
inline void PointerToArray< LVecBase2f >::pop_back(void);

942 11 get_element 0 4 1391 41 PointerToArray< LVecBase2f >::get_element 0 1 247 0
89
inline LVecBase2f const &PointerToArray< LVecBase2f >::get_element(unsigned int n) const;

943 11 set_element 0 4 1391 41 PointerToArray< LVecBase2f >::set_element 0 1 248 0
95
inline void PointerToArray< LVecBase2f >::set_element(unsigned int n, LVecBase2f const &value);

944 11 __getitem__ 0 4 1391 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 249 0
82
LVecBase2f const &PointerToArray< LVecBase2f >::__getitem__(unsigned int n) const;

945 11 __setitem__ 0 4 1391 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 250 0
88
void PointerToArray< LVecBase2f >::__setitem__(unsigned int n, LVecBase2f const &value);

946 8 get_data 0 4 1391 38 PointerToArray< LVecBase2f >::get_data 0 1 251 0
79
inline basic_string< char > PointerToArray< LVecBase2f >::get_data(void) const;

947 8 set_data 0 4 1391 38 PointerToArray< LVecBase2f >::set_data 0 1 252 0
85
inline void PointerToArray< LVecBase2f >::set_data(basic_string< char > const &data);

948 11 get_subdata 0 4 1391 41 PointerToArray< LVecBase2f >::get_subdata 0 1 253 0
112
inline basic_string< char > PointerToArray< LVecBase2f >::get_subdata(unsigned int n, unsigned int count) const;

949 11 set_subdata 0 4 1391 41 PointerToArray< LVecBase2f >::set_subdata 0 1 254 0
124
inline void PointerToArray< LVecBase2f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

950 13 get_ref_count 0 4 1391 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 255 0
67
inline int PointerToArray< LVecBase2f >::get_ref_count(void) const;

951 18 get_node_ref_count 0 4 1391 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 256 0
72
inline int PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

952 13 __getbuffer__ 0 4 1391 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 257 0
91
int PointerToArray< LVecBase2f >::__getbuffer__(_object *self, Py_buffer *view, int flags);

953 17 __releasebuffer__ 0 4 1391 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 258 0
91
void PointerToArray< LVecBase2f >::__releasebuffer__(_object *self, Py_buffer *view) const;

954 15 ~PointerToArray 0 4 1391 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2f >::~PointerToArray(void);

955 14 PointerToArray 0 4 1392 44 PointerToArray< LVecBase2i >::PointerToArray 0 3 259 260 261 0
297
inline PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase2i const *)(0)))));
inline PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
PointerToArray< LVecBase2i >::PointerToArray(_object *self, _object *source);

956 11 empty_array 0 4 1392 41 PointerToArray< LVecBase2i >::empty_array 0 1 262 0
173
static inline PointerToArray< LVecBase2i > PointerToArray< LVecBase2i >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase2i const *)(0)))));

957 4 size 0 4 1392 34 PointerToArray< LVecBase2i >::size 0 1 263 0
67
inline unsigned int PointerToArray< LVecBase2i >::size(void) const;

958 9 push_back 0 4 1392 39 PointerToArray< LVecBase2i >::push_back 0 1 264 0
73
inline void PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

959 8 pop_back 0 4 1392 38 PointerToArray< LVecBase2i >::pop_back 0 1 265 0
57
inline void PointerToArray< LVecBase2i >::pop_back(void);

960 11 get_element 0 4 1392 41 PointerToArray< LVecBase2i >::get_element 0 1 266 0
89
inline LVecBase2i const &PointerToArray< LVecBase2i >::get_element(unsigned int n) const;

961 11 set_element 0 4 1392 41 PointerToArray< LVecBase2i >::set_element 0 1 267 0
95
inline void PointerToArray< LVecBase2i >::set_element(unsigned int n, LVecBase2i const &value);

962 11 __getitem__ 0 4 1392 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 268 0
82
LVecBase2i const &PointerToArray< LVecBase2i >::__getitem__(unsigned int n) const;

963 11 __setitem__ 0 4 1392 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 269 0
88
void PointerToArray< LVecBase2i >::__setitem__(unsigned int n, LVecBase2i const &value);

964 8 get_data 0 4 1392 38 PointerToArray< LVecBase2i >::get_data 0 1 270 0
79
inline basic_string< char > PointerToArray< LVecBase2i >::get_data(void) const;

965 8 set_data 0 4 1392 38 PointerToArray< LVecBase2i >::set_data 0 1 271 0
85
inline void PointerToArray< LVecBase2i >::set_data(basic_string< char > const &data);

966 11 get_subdata 0 4 1392 41 PointerToArray< LVecBase2i >::get_subdata 0 1 272 0
112
inline basic_string< char > PointerToArray< LVecBase2i >::get_subdata(unsigned int n, unsigned int count) const;

967 11 set_subdata 0 4 1392 41 PointerToArray< LVecBase2i >::set_subdata 0 1 273 0
124
inline void PointerToArray< LVecBase2i >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

968 13 get_ref_count 0 4 1392 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 274 0
67
inline int PointerToArray< LVecBase2i >::get_ref_count(void) const;

969 18 get_node_ref_count 0 4 1392 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 275 0
72
inline int PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

970 13 __getbuffer__ 0 4 1392 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 276 0
91
int PointerToArray< LVecBase2i >::__getbuffer__(_object *self, Py_buffer *view, int flags);

971 17 __releasebuffer__ 0 4 1392 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 277 0
91
void PointerToArray< LVecBase2i >::__releasebuffer__(_object *self, Py_buffer *view) const;

972 15 ~PointerToArray 0 4 1392 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2i >::~PointerToArray(void);

973 14 PointerToArray 0 4 1393 44 PointerToArray< LVecBase3d >::PointerToArray 0 3 278 279 280 0
297
inline PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));
inline PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
PointerToArray< LVecBase3d >::PointerToArray(_object *self, _object *source);

974 11 empty_array 0 4 1393 41 PointerToArray< LVecBase3d >::empty_array 0 1 281 0
173
static inline PointerToArray< LVecBase3d > PointerToArray< LVecBase3d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3d const *)(0)))));

975 4 size 0 4 1393 34 PointerToArray< LVecBase3d >::size 0 1 282 0
67
inline unsigned int PointerToArray< LVecBase3d >::size(void) const;

976 9 push_back 0 4 1393 39 PointerToArray< LVecBase3d >::push_back 0 1 283 0
73
inline void PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

977 8 pop_back 0 4 1393 38 PointerToArray< LVecBase3d >::pop_back 0 1 284 0
57
inline void PointerToArray< LVecBase3d >::pop_back(void);

978 11 get_element 0 4 1393 41 PointerToArray< LVecBase3d >::get_element 0 1 285 0
89
inline LVecBase3d const &PointerToArray< LVecBase3d >::get_element(unsigned int n) const;

979 11 set_element 0 4 1393 41 PointerToArray< LVecBase3d >::set_element 0 1 286 0
95
inline void PointerToArray< LVecBase3d >::set_element(unsigned int n, LVecBase3d const &value);

980 11 __getitem__ 0 4 1393 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 287 0
82
LVecBase3d const &PointerToArray< LVecBase3d >::__getitem__(unsigned int n) const;

981 11 __setitem__ 0 4 1393 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 288 0
88
void PointerToArray< LVecBase3d >::__setitem__(unsigned int n, LVecBase3d const &value);

982 8 get_data 0 4 1393 38 PointerToArray< LVecBase3d >::get_data 0 1 289 0
79
inline basic_string< char > PointerToArray< LVecBase3d >::get_data(void) const;

983 8 set_data 0 4 1393 38 PointerToArray< LVecBase3d >::set_data 0 1 290 0
85
inline void PointerToArray< LVecBase3d >::set_data(basic_string< char > const &data);

984 11 get_subdata 0 4 1393 41 PointerToArray< LVecBase3d >::get_subdata 0 1 291 0
112
inline basic_string< char > PointerToArray< LVecBase3d >::get_subdata(unsigned int n, unsigned int count) const;

985 11 set_subdata 0 4 1393 41 PointerToArray< LVecBase3d >::set_subdata 0 1 292 0
124
inline void PointerToArray< LVecBase3d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

986 13 get_ref_count 0 4 1393 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 293 0
67
inline int PointerToArray< LVecBase3d >::get_ref_count(void) const;

987 18 get_node_ref_count 0 4 1393 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 294 0
72
inline int PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

988 13 __getbuffer__ 0 4 1393 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 295 0
91
int PointerToArray< LVecBase3d >::__getbuffer__(_object *self, Py_buffer *view, int flags);

989 17 __releasebuffer__ 0 4 1393 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 296 0
91
void PointerToArray< LVecBase3d >::__releasebuffer__(_object *self, Py_buffer *view) const;

990 15 ~PointerToArray 0 4 1393 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3d >::~PointerToArray(void);

991 14 PointerToArray 0 4 1394 44 PointerToArray< LVecBase3f >::PointerToArray 0 3 297 298 299 0
297
inline PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));
inline PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
PointerToArray< LVecBase3f >::PointerToArray(_object *self, _object *source);

992 11 empty_array 0 4 1394 41 PointerToArray< LVecBase3f >::empty_array 0 1 300 0
173
static inline PointerToArray< LVecBase3f > PointerToArray< LVecBase3f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3f const *)(0)))));

993 4 size 0 4 1394 34 PointerToArray< LVecBase3f >::size 0 1 301 0
67
inline unsigned int PointerToArray< LVecBase3f >::size(void) const;

994 9 push_back 0 4 1394 39 PointerToArray< LVecBase3f >::push_back 0 1 302 0
73
inline void PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

995 8 pop_back 0 4 1394 38 PointerToArray< LVecBase3f >::pop_back 0 1 303 0
57
inline void PointerToArray< LVecBase3f >::pop_back(void);

996 11 get_element 0 4 1394 41 PointerToArray< LVecBase3f >::get_element 0 1 304 0
89
inline LVecBase3f const &PointerToArray< LVecBase3f >::get_element(unsigned int n) const;

997 11 set_element 0 4 1394 41 PointerToArray< LVecBase3f >::set_element 0 1 305 0
95
inline void PointerToArray< LVecBase3f >::set_element(unsigned int n, LVecBase3f const &value);

998 11 __getitem__ 0 4 1394 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 306 0
82
LVecBase3f const &PointerToArray< LVecBase3f >::__getitem__(unsigned int n) const;

999 11 __setitem__ 0 4 1394 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 307 0
88
void PointerToArray< LVecBase3f >::__setitem__(unsigned int n, LVecBase3f const &value);

1000 8 get_data 0 4 1394 38 PointerToArray< LVecBase3f >::get_data 0 1 308 0
79
inline basic_string< char > PointerToArray< LVecBase3f >::get_data(void) const;

1001 8 set_data 0 4 1394 38 PointerToArray< LVecBase3f >::set_data 0 1 309 0
85
inline void PointerToArray< LVecBase3f >::set_data(basic_string< char > const &data);

1002 11 get_subdata 0 4 1394 41 PointerToArray< LVecBase3f >::get_subdata 0 1 310 0
112
inline basic_string< char > PointerToArray< LVecBase3f >::get_subdata(unsigned int n, unsigned int count) const;

1003 11 set_subdata 0 4 1394 41 PointerToArray< LVecBase3f >::set_subdata 0 1 311 0
124
inline void PointerToArray< LVecBase3f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1004 13 get_ref_count 0 4 1394 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 312 0
67
inline int PointerToArray< LVecBase3f >::get_ref_count(void) const;

1005 18 get_node_ref_count 0 4 1394 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 313 0
72
inline int PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1006 13 __getbuffer__ 0 4 1394 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 314 0
91
int PointerToArray< LVecBase3f >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1007 17 __releasebuffer__ 0 4 1394 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 315 0
91
void PointerToArray< LVecBase3f >::__releasebuffer__(_object *self, Py_buffer *view) const;

1008 15 ~PointerToArray 0 4 1394 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3f >::~PointerToArray(void);

1009 14 PointerToArray 0 4 1395 44 PointerToArray< LVecBase3i >::PointerToArray 0 3 316 317 318 0
297
inline PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((LVecBase3i const *)(0)))));
inline PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
PointerToArray< LVecBase3i >::PointerToArray(_object *self, _object *source);

1010 11 empty_array 0 4 1395 41 PointerToArray< LVecBase3i >::empty_array 0 1 319 0
173
static inline PointerToArray< LVecBase3i > PointerToArray< LVecBase3i >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((LVecBase3i const *)(0)))));

1011 4 size 0 4 1395 34 PointerToArray< LVecBase3i >::size 0 1 320 0
67
inline unsigned int PointerToArray< LVecBase3i >::size(void) const;

1012 9 push_back 0 4 1395 39 PointerToArray< LVecBase3i >::push_back 0 1 321 0
73
inline void PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1013 8 pop_back 0 4 1395 38 PointerToArray< LVecBase3i >::pop_back 0 1 322 0
57
inline void PointerToArray< LVecBase3i >::pop_back(void);

1014 11 get_element 0 4 1395 41 PointerToArray< LVecBase3i >::get_element 0 1 323 0
89
inline LVecBase3i const &PointerToArray< LVecBase3i >::get_element(unsigned int n) const;

1015 11 set_element 0 4 1395 41 PointerToArray< LVecBase3i >::set_element 0 1 324 0
95
inline void PointerToArray< LVecBase3i >::set_element(unsigned int n, LVecBase3i const &value);

1016 11 __getitem__ 0 4 1395 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 325 0
82
LVecBase3i const &PointerToArray< LVecBase3i >::__getitem__(unsigned int n) const;

1017 11 __setitem__ 0 4 1395 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 326 0
88
void PointerToArray< LVecBase3i >::__setitem__(unsigned int n, LVecBase3i const &value);

1018 8 get_data 0 4 1395 38 PointerToArray< LVecBase3i >::get_data 0 1 327 0
79
inline basic_string< char > PointerToArray< LVecBase3i >::get_data(void) const;

1019 8 set_data 0 4 1395 38 PointerToArray< LVecBase3i >::set_data 0 1 328 0
85
inline void PointerToArray< LVecBase3i >::set_data(basic_string< char > const &data);

1020 11 get_subdata 0 4 1395 41 PointerToArray< LVecBase3i >::get_subdata 0 1 329 0
112
inline basic_string< char > PointerToArray< LVecBase3i >::get_subdata(unsigned int n, unsigned int count) const;

1021 11 set_subdata 0 4 1395 41 PointerToArray< LVecBase3i >::set_subdata 0 1 330 0
124
inline void PointerToArray< LVecBase3i >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1022 13 get_ref_count 0 4 1395 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 331 0
67
inline int PointerToArray< LVecBase3i >::get_ref_count(void) const;

1023 18 get_node_ref_count 0 4 1395 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 332 0
72
inline int PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1024 13 __getbuffer__ 0 4 1395 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 333 0
91
int PointerToArray< LVecBase3i >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1025 17 __releasebuffer__ 0 4 1395 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 334 0
91
void PointerToArray< LVecBase3i >::__releasebuffer__(_object *self, Py_buffer *view) const;

1026 15 ~PointerToArray 0 4 1395 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3i >::~PointerToArray(void);

1027 14 PointerToArray 0 4 1396 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 3 335 336 337 0
337
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
PointerToArray< UnalignedLMatrix4d >::PointerToArray(_object *self, _object *source);

1028 11 empty_array 0 4 1396 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 1 338 0
197
static inline PointerToArray< UnalignedLMatrix4d > PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4d const *)(0)))));

1029 4 size 0 4 1396 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 339 0
75
inline unsigned int PointerToArray< UnalignedLMatrix4d >::size(void) const;

1030 9 push_back 0 4 1396 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 340 0
89
inline void PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1031 8 pop_back 0 4 1396 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 341 0
65
inline void PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1032 11 get_element 0 4 1396 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 342 0
105
inline UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::get_element(unsigned int n) const;

1033 11 set_element 0 4 1396 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 343 0
111
inline void PointerToArray< UnalignedLMatrix4d >::set_element(unsigned int n, UnalignedLMatrix4d const &value);

1034 11 __getitem__ 0 4 1396 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 344 0
98
UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned int n) const;

1035 11 __setitem__ 0 4 1396 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 345 0
104
void PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned int n, UnalignedLMatrix4d const &value);

1036 8 get_data 0 4 1396 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 346 0
87
inline basic_string< char > PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1037 8 set_data 0 4 1396 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 347 0
93
inline void PointerToArray< UnalignedLMatrix4d >::set_data(basic_string< char > const &data);

1038 11 get_subdata 0 4 1396 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 348 0
120
inline basic_string< char > PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned int n, unsigned int count) const;

1039 11 set_subdata 0 4 1396 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 349 0
132
inline void PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1040 13 get_ref_count 0 4 1396 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 350 0
75
inline int PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1041 18 get_node_ref_count 0 4 1396 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 351 0
80
inline int PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1042 13 __getbuffer__ 0 4 1396 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 352 0
99
int PointerToArray< UnalignedLMatrix4d >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1043 17 __releasebuffer__ 0 4 1396 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 353 0
99
void PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(_object *self, Py_buffer *view) const;

1044 15 ~PointerToArray 0 4 1396 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1045 14 PointerToArray 0 4 1397 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 3 354 355 356 0
337
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
PointerToArray< UnalignedLMatrix4f >::PointerToArray(_object *self, _object *source);

1046 11 empty_array 0 4 1397 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 1 357 0
197
static inline PointerToArray< UnalignedLMatrix4f > PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLMatrix4f const *)(0)))));

1047 4 size 0 4 1397 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 358 0
75
inline unsigned int PointerToArray< UnalignedLMatrix4f >::size(void) const;

1048 9 push_back 0 4 1397 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 359 0
89
inline void PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1049 8 pop_back 0 4 1397 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 360 0
65
inline void PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1050 11 get_element 0 4 1397 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 361 0
105
inline UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::get_element(unsigned int n) const;

1051 11 set_element 0 4 1397 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 362 0
111
inline void PointerToArray< UnalignedLMatrix4f >::set_element(unsigned int n, UnalignedLMatrix4f const &value);

1052 11 __getitem__ 0 4 1397 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 363 0
98
UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned int n) const;

1053 11 __setitem__ 0 4 1397 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 364 0
104
void PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned int n, UnalignedLMatrix4f const &value);

1054 8 get_data 0 4 1397 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 365 0
87
inline basic_string< char > PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1055 8 set_data 0 4 1397 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 366 0
93
inline void PointerToArray< UnalignedLMatrix4f >::set_data(basic_string< char > const &data);

1056 11 get_subdata 0 4 1397 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 367 0
120
inline basic_string< char > PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned int n, unsigned int count) const;

1057 11 set_subdata 0 4 1397 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 368 0
132
inline void PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1058 13 get_ref_count 0 4 1397 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 369 0
75
inline int PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1059 18 get_node_ref_count 0 4 1397 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 370 0
80
inline int PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1060 13 __getbuffer__ 0 4 1397 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 371 0
99
int PointerToArray< UnalignedLMatrix4f >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1061 17 __releasebuffer__ 0 4 1397 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 372 0
99
void PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(_object *self, Py_buffer *view) const;

1062 15 ~PointerToArray 0 4 1397 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1063 14 PointerToArray 0 4 1398 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 3 373 374 375 0
342
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
PointerToArray< UnalignedLVecBase4d >::PointerToArray(_object *self, _object *source);

1064 11 empty_array 0 4 1398 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 1 376 0
200
static inline PointerToArray< UnalignedLVecBase4d > PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4d const *)(0)))));

1065 4 size 0 4 1398 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 377 0
76
inline unsigned int PointerToArray< UnalignedLVecBase4d >::size(void) const;

1066 9 push_back 0 4 1398 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 378 0
91
inline void PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1067 8 pop_back 0 4 1398 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 379 0
66
inline void PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1068 11 get_element 0 4 1398 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 380 0
107
inline UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::get_element(unsigned int n) const;

1069 11 set_element 0 4 1398 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 381 0
113
inline void PointerToArray< UnalignedLVecBase4d >::set_element(unsigned int n, UnalignedLVecBase4d const &value);

1070 11 __getitem__ 0 4 1398 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 382 0
100
UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned int n) const;

1071 11 __setitem__ 0 4 1398 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 383 0
106
void PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned int n, UnalignedLVecBase4d const &value);

1072 8 get_data 0 4 1398 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 384 0
88
inline basic_string< char > PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1073 8 set_data 0 4 1398 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 385 0
94
inline void PointerToArray< UnalignedLVecBase4d >::set_data(basic_string< char > const &data);

1074 11 get_subdata 0 4 1398 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 386 0
121
inline basic_string< char > PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned int n, unsigned int count) const;

1075 11 set_subdata 0 4 1398 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 387 0
133
inline void PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1076 13 get_ref_count 0 4 1398 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 388 0
76
inline int PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1077 18 get_node_ref_count 0 4 1398 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 389 0
81
inline int PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1078 13 __getbuffer__ 0 4 1398 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 390 0
100
int PointerToArray< UnalignedLVecBase4d >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1079 17 __releasebuffer__ 0 4 1398 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 391 0
100
void PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(_object *self, Py_buffer *view) const;

1080 15 ~PointerToArray 0 4 1398 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1081 14 PointerToArray 0 4 1399 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 3 392 393 394 0
342
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
PointerToArray< UnalignedLVecBase4f >::PointerToArray(_object *self, _object *source);

1082 11 empty_array 0 4 1399 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 1 395 0
200
static inline PointerToArray< UnalignedLVecBase4f > PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4f const *)(0)))));

1083 4 size 0 4 1399 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 396 0
76
inline unsigned int PointerToArray< UnalignedLVecBase4f >::size(void) const;

1084 9 push_back 0 4 1399 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 397 0
91
inline void PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1085 8 pop_back 0 4 1399 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 398 0
66
inline void PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1086 11 get_element 0 4 1399 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 399 0
107
inline UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::get_element(unsigned int n) const;

1087 11 set_element 0 4 1399 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 400 0
113
inline void PointerToArray< UnalignedLVecBase4f >::set_element(unsigned int n, UnalignedLVecBase4f const &value);

1088 11 __getitem__ 0 4 1399 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 401 0
100
UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned int n) const;

1089 11 __setitem__ 0 4 1399 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 402 0
106
void PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned int n, UnalignedLVecBase4f const &value);

1090 8 get_data 0 4 1399 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 403 0
88
inline basic_string< char > PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1091 8 set_data 0 4 1399 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 404 0
94
inline void PointerToArray< UnalignedLVecBase4f >::set_data(basic_string< char > const &data);

1092 11 get_subdata 0 4 1399 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 405 0
121
inline basic_string< char > PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned int n, unsigned int count) const;

1093 11 set_subdata 0 4 1399 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 406 0
133
inline void PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1094 13 get_ref_count 0 4 1399 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 407 0
76
inline int PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1095 18 get_node_ref_count 0 4 1399 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 408 0
81
inline int PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1096 13 __getbuffer__ 0 4 1399 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 409 0
100
int PointerToArray< UnalignedLVecBase4f >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1097 17 __releasebuffer__ 0 4 1399 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 410 0
100
void PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(_object *self, Py_buffer *view) const;

1098 15 ~PointerToArray 0 4 1399 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1099 14 PointerToArray 0 4 1400 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 3 411 412 413 0
342
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4i const *)(0)))));
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
PointerToArray< UnalignedLVecBase4i >::PointerToArray(_object *self, _object *source);

1100 11 empty_array 0 4 1400 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 1 414 0
200
static inline PointerToArray< UnalignedLVecBase4i > PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((UnalignedLVecBase4i const *)(0)))));

1101 4 size 0 4 1400 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 415 0
76
inline unsigned int PointerToArray< UnalignedLVecBase4i >::size(void) const;

1102 9 push_back 0 4 1400 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 416 0
91
inline void PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1103 8 pop_back 0 4 1400 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 417 0
66
inline void PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1104 11 get_element 0 4 1400 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 418 0
107
inline UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::get_element(unsigned int n) const;

1105 11 set_element 0 4 1400 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 419 0
113
inline void PointerToArray< UnalignedLVecBase4i >::set_element(unsigned int n, UnalignedLVecBase4i const &value);

1106 11 __getitem__ 0 4 1400 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 420 0
100
UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned int n) const;

1107 11 __setitem__ 0 4 1400 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 421 0
106
void PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned int n, UnalignedLVecBase4i const &value);

1108 8 get_data 0 4 1400 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 422 0
88
inline basic_string< char > PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1109 8 set_data 0 4 1400 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 423 0
94
inline void PointerToArray< UnalignedLVecBase4i >::set_data(basic_string< char > const &data);

1110 11 get_subdata 0 4 1400 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 424 0
121
inline basic_string< char > PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned int n, unsigned int count) const;

1111 11 set_subdata 0 4 1400 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 425 0
133
inline void PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1112 13 get_ref_count 0 4 1400 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 426 0
76
inline int PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1113 18 get_node_ref_count 0 4 1400 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 427 0
81
inline int PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1114 13 __getbuffer__ 0 4 1400 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 428 0
100
int PointerToArray< UnalignedLVecBase4i >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1115 17 __releasebuffer__ 0 4 1400 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 429 0
100
void PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(_object *self, Py_buffer *view) const;

1116 15 ~PointerToArray 0 4 1400 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1117 9 make_copy 0 6 1401 25 BoundingVolume::make_copy 0 1 430 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1118 8 is_empty 0 4 1401 24 BoundingVolume::is_empty 0 1 431 525
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
////////////////////////////////////////////////////////////////////
49
inline bool BoundingVolume::is_empty(void) const;

1119 11 is_infinite 0 4 1401 27 BoundingVolume::is_infinite 0 1 432 905
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
////////////////////////////////////////////////////////////////////
52
inline bool BoundingVolume::is_infinite(void) const;

1120 12 set_infinite 0 4 1401 28 BoundingVolume::set_infinite 0 1 433 383
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
////////////////////////////////////////////////////////////////////
47
inline void BoundingVolume::set_infinite(void);

1121 9 extend_by 0 4 1401 25 BoundingVolume::extend_by 0 1 434 303
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1122 6 around 0 4 1401 22 BoundingVolume::around 0 0 573
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::around
//       Access: Published
//  Description: Resets the volume to enclose only the volumes
//               indicated.  Returns true if successful, false if the
//               volume doesn't know how to do that or can't do that.
////////////////////////////////////////////////////////////////////
87
bool BoundingVolume::around(BoundingVolume const **first, BoundingVolume const **last);

1123 8 contains 0 4 1401 24 BoundingVolume::contains 0 1 435 372
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1124 6 output 0 6 1401 22 BoundingVolume::output 0 1 436 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

1125 5 write 0 6 1401 21 BoundingVolume::write 0 1 437 220
////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
79
virtual void BoundingVolume::write(ostream &out, int indent_level = (0)) const;

1126 14 get_class_type 0 4 1401 30 BoundingVolume::get_class_type 0 1 438 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1127 15 ~BoundingVolume 0 4 1401 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1128 9 extend_by 0 4 1405 34 GeometricBoundingVolume::extend_by 0 2 439 440 619
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
////////////////////////////////////////////////////////////////////
153
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3 const &point);

1129 6 around 0 4 1405 31 GeometricBoundingVolume::around 0 1 441 769
// It might be nice to make these template member functions so we
// could have true STL-style first/last iterators, but that's
// impossible for virtual functions.

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the volumes
//               indicated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
////////////////////////////////////////////////////////////////////
209
inline bool GeometricBoundingVolume::around(GeometricBoundingVolume const **first, GeometricBoundingVolume const **last);
inline bool GeometricBoundingVolume::around(LPoint3 const *first, LPoint3 const *last);

1130 8 contains 0 4 1405 33 GeometricBoundingVolume::contains 0 3 442 443 444 1143
////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
////////////////////////////////////////////////////////////////////
249
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &a, LPoint3 const &b) const;

1131 17 get_approx_center 0 6 1405 42 GeometricBoundingVolume::get_approx_center 0 1 445 0
75
virtual LPoint3 GeometricBoundingVolume::get_approx_center(void) const = 0;

1132 5 xform 0 6 1405 30 GeometricBoundingVolume::xform 0 1 446 0
69
virtual void GeometricBoundingVolume::xform(LMatrix4 const &mat) = 0;

1133 14 get_class_type 0 4 1405 39 GeometricBoundingVolume::get_class_type 0 1 447 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1134 24 ~GeometricBoundingVolume 0 4 1405 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1135 7 get_min 0 6 1406 29 FiniteBoundingVolume::get_min 0 1 448 0
62
virtual LPoint3 FiniteBoundingVolume::get_min(void) const = 0;

1136 7 get_max 0 6 1406 29 FiniteBoundingVolume::get_max 0 1 449 0
62
virtual LPoint3 FiniteBoundingVolume::get_max(void) const = 0;

1137 10 get_volume 0 6 1406 32 FiniteBoundingVolume::get_volume 0 1 450 238
////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
65
virtual PN_stdfloat FiniteBoundingVolume::get_volume(void) const;

1138 14 get_class_type 0 4 1406 36 FiniteBoundingVolume::get_class_type 0 1 451 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1139 21 ~FiniteBoundingVolume 0 4 1406 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1140 10 LParabolaf 0 4 1407 22 LParabolaf::LParabolaf 0 3 452 453 454 887
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1141 10 operator = 0 4 1407 22 LParabolaf::operator = 0 1 455 0
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1142 11 ~LParabolaf 0 4 1407 23 LParabolaf::~LParabolaf 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolaf::~LParabolaf(void);

1143 5 xform 0 4 1407 17 LParabolaf::xform 0 1 456 264
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolaf::xform(LMatrix4f const &mat);

1144 5 get_a 0 4 1407 17 LParabolaf::get_a 0 1 457 313
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1145 5 get_b 0 4 1407 17 LParabolaf::get_b 0 1 458 318
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1146 5 get_c 0 4 1407 17 LParabolaf::get_c 0 1 459 312
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1147 10 calc_point 0 4 1407 22 LParabolaf::calc_point 0 1 460 266
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1148 6 output 0 4 1407 18 LParabolaf::output 0 1 461 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolaf::output(ostream &out) const;

1149 5 write 0 4 1407 17 LParabolaf::write 0 1 462 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write(ostream &out, int indent_level = (0)) const;

1150 20 write_datagram_fixed 0 4 1407 32 LParabolaf::write_datagram_fixed 0 1 463 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1151 19 read_datagram_fixed 0 4 1407 31 LParabolaf::read_datagram_fixed 0 1 464 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1152 14 write_datagram 0 4 1407 26 LParabolaf::write_datagram 0 1 465 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolaf::write_datagram(Datagram &destination) const;

1153 13 read_datagram 0 4 1407 25 LParabolaf::read_datagram 0 1 466 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolaf::read_datagram(DatagramIterator &source);

1154 10 LParabolad 0 4 1408 22 LParabolad::LParabolad 0 3 467 468 469 887
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1155 10 operator = 0 4 1408 22 LParabolad::operator = 0 1 470 0
59
inline void LParabolad::operator =(LParabolad const &copy);

1156 11 ~LParabolad 0 4 1408 23 LParabolad::~LParabolad 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: LParabola::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline LParabolad::~LParabolad(void);

1157 5 xform 0 4 1408 17 LParabolad::xform 0 1 471 264
////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
////////////////////////////////////////////////////////////////////
45
void LParabolad::xform(LMatrix4d const &mat);

1158 5 get_a 0 4 1408 17 LParabolad::get_a 0 1 472 313
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1159 5 get_b 0 4 1408 17 LParabolad::get_b 0 1 473 318
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1160 5 get_c 0 4 1408 17 LParabolad::get_c 0 1 474 312
////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
////////////////////////////////////////////////////////////////////
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1161 10 calc_point 0 4 1408 22 LParabolad::calc_point 0 1 475 266
////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
////////////////////////////////////////////////////////////////////
55
inline LPoint3d LParabolad::calc_point(double t) const;

1162 6 output 0 4 1408 18 LParabolad::output 0 1 476 216
////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
44
void LParabolad::output(ostream &out) const;

1163 5 write 0 4 1408 17 LParabolad::write 0 1 477 215
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
67
void LParabolad::write(ostream &out, int indent_level = (0)) const;

1164 20 write_datagram_fixed 0 4 1408 32 LParabolad::write_datagram_fixed 0 1 478 643
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
////////////////////////////////////////////////////////////////////
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1165 19 read_datagram_fixed 0 4 1408 31 LParabolad::read_datagram_fixed 0 1 479 347
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
////////////////////////////////////////////////////////////////////
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1166 14 write_datagram 0 4 1408 26 LParabolad::write_datagram 0 1 480 463
////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
////////////////////////////////////////////////////////////////////
61
void LParabolad::write_datagram(Datagram &destination) const;

1167 13 read_datagram 0 4 1408 25 LParabolad::read_datagram 0 1 481 279
////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
////////////////////////////////////////////////////////////////////
57
void LParabolad::read_datagram(DatagramIterator &source);

1168 7 LPlanef 0 4 1410 16 LPlanef::LPlanef 0 5 482 483 484 485 486 1669
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
295
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);

1169 10 operator * 0 4 1410 19 LPlanef::operator * 0 2 487 488 0
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1170 11 operator *= 0 4 1410 20 LPlanef::operator *= 0 1 489 0
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1171 5 xform 0 4 1410 14 LPlanef::xform 0 1 490 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlanef::xform(LMatrix4f const &mat);

1172 10 operator - 0 68 1410 19 LPlanef::operator - 0 1 491 0
47
inline LPlanef LPlanef::operator -(void) const;

1173 18 get_reflection_mat 0 4 1410 27 LPlanef::get_reflection_mat 0 1 492 367
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1174 10 get_normal 0 4 1410 19 LPlanef::get_normal 0 1 493 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3f LPlanef::get_normal(void) const;

1175 9 get_point 0 4 1410 18 LPlanef::get_point 0 1 494 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3f LPlanef::get_point(void) const;

1176 13 dist_to_plane 0 4 1410 22 LPlanef::dist_to_plane 0 1 495 612
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1177 7 project 0 4 1410 16 LPlanef::project 0 1 496 307
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1178 4 flip 0 4 1410 13 LPlanef::flip 0 1 497 329
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlanef::flip(void);

1179 15 intersects_line 0 4 1410 24 LPlanef::intersects_line 0 1 498 1628
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1180 16 intersects_plane 0 4 1410 25 LPlanef::intersects_plane 0 1 499 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1181 19 intersects_parabola 0 4 1410 28 LPlanef::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1182 6 output 0 4 1410 15 LPlanef::output 0 1 500 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlanef::output(ostream &out) const;

1183 5 write 0 4 1410 14 LPlanef::write 0 1 501 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlanef::write(ostream &out, int indent_level = (0)) const;

1184 8 ~LPlanef 0 4 1410 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1185 7 LPlaned 0 4 1412 16 LPlaned::LPlaned 0 5 502 503 504 505 506 1669
////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
////////////////////////////////////////////////////////////////////
299
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);

1186 10 operator * 0 4 1412 19 LPlaned::operator * 0 2 507 508 0
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1187 11 operator *= 0 4 1412 20 LPlaned::operator *= 0 1 509 0
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1188 5 xform 0 4 1412 14 LPlaned::xform 0 1 510 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
////////////////////////////////////////////////////////////////////
49
inline void LPlaned::xform(LMatrix4d const &mat);

1189 10 operator - 0 68 1412 19 LPlaned::operator - 0 1 511 0
47
inline LPlaned LPlaned::operator -(void) const;

1190 18 get_reflection_mat 0 4 1412 27 LPlaned::get_reflection_mat 0 1 512 367
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
////////////////////////////////////////////////////////////////////
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1191 10 get_normal 0 4 1412 19 LPlaned::get_normal 0 1 513 258
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
////////////////////////////////////////////////////////////////////
49
inline LVector3d LPlaned::get_normal(void) const;

1192 9 get_point 0 4 1412 18 LPlaned::get_point 0 1 514 382
////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
////////////////////////////////////////////////////////////////////
40
LPoint3d LPlaned::get_point(void) const;

1193 13 dist_to_plane 0 4 1412 22 LPlaned::dist_to_plane 0 1 515 612
////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
////////////////////////////////////////////////////////////////////
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1194 7 project 0 4 1412 16 LPlaned::project 0 1 516 307
////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
////////////////////////////////////////////////////////////////////
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1195 4 flip 0 4 1412 13 LPlaned::flip 0 1 517 329
////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
////////////////////////////////////////////////////////////////////
32
inline void LPlaned::flip(void);

1196 15 intersects_line 0 4 1412 24 LPlaned::intersects_line 0 1 518 1628
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: This flavor of intersects_line() returns a bit more
//               information about the nature of the intersecting
//               point.  The line is defined via the parametric
//               equation from + t * delta for all real values of t.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t undefined.  If
//               there is an intersection with the plane, the function
//               returns true and sets t to the parametric value that
//               defines the point of intersection.  That is, t == 0.0f
//               implies that the intersection occurred exactly at
//               point from, and t == 1.0f implies at point from +
//               delta, with other values of t accordingly.
////////////////////////////////////////////////////////////////////
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1197 16 intersects_plane 0 4 1412 25 LPlaned::intersects_plane 0 1 519 589
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
////////////////////////////////////////////////////////////////////
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1198 19 intersects_parabola 0 4 1412 28 LPlaned::intersects_parabola 0 0 771
////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_parabola
//       Access: Published
//  Description: Determines whether and where the indicated parabola
//               intersects with the plane.
//
//               If there is no intersection with the plane, the
//               function returns false and leaves t1 and t2
//               undefined.  If there is an intersection with the
//               plane, the function returns true and sets t1 and t2
//               to the parametric value that defines the two points
//               of intersection.  If the parabola is exactly tangent
//               to the plane, then t1 == t2.
////////////////////////////////////////////////////////////////////
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1199 6 output 0 4 1412 15 LPlaned::output 0 1 520 213
////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void LPlaned::output(ostream &out) const;

1200 5 write 0 4 1412 14 LPlaned::write 0 1 521 212
////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
64
void LPlaned::write(ostream &out, int indent_level = (0)) const;

1201 8 ~LPlaned 0 4 1412 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1202 11 BoundingBox 0 4 1418 24 BoundingBox::BoundingBox 0 2 522 523 514
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
////////////////////////////////////////////////////////////////////
111
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3 const &min, LPoint3 const &max);

1203 12 operator new 0 4 1418 25 BoundingBox::operator new 0 1 524 0
116
inline void *BoundingBox::operator new(size_t size);
inline void *BoundingBox::operator new(size_t size, void *ptr);

1204 15 operator delete 0 4 1418 28 BoundingBox::operator delete 0 0 0
110
inline void BoundingBox::operator delete(void *ptr);
inline void BoundingBox::operator delete(void *, void *);

1205 12 validate_ptr 0 4 1418 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1206 14 get_num_points 0 4 1418 27 BoundingBox::get_num_points 0 1 525 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_points(void) const;

1207 9 get_point 0 4 1418 22 BoundingBox::get_point 0 1 526 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline LPoint3 BoundingBox::get_point(int n) const;

1208 14 get_num_planes 0 4 1418 27 BoundingBox::get_num_planes 0 1 527 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
////////////////////////////////////////////////////////////////////
51
inline int BoundingBox::get_num_planes(void) const;

1209 9 get_plane 0 4 1418 22 BoundingBox::get_plane 0 1 528 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
////////////////////////////////////////////////////////////////////
50
inline LPlane BoundingBox::get_plane(int n) const;

1210 14 get_class_type 0 4 1418 27 BoundingBox::get_class_type 0 1 529 0
52
static TypeHandle BoundingBox::get_class_type(void);

1211 12 ~BoundingBox 0 4 1418 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1212 9 LFrustumf 0 4 1419 20 LFrustumf::LFrustumf 0 1 530 200
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumf::LFrustumf(void);

1213 13 make_ortho_2D 0 4 1419 24 LFrustumf::make_ortho_2D 0 2 531 532 500
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1214 10 make_ortho 0 4 1419 21 LFrustumf::make_ortho 0 2 533 534 450
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1215 21 make_perspective_hfov 0 4 1419 32 LFrustumf::make_perspective_hfov 0 1 535 578
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1216 21 make_perspective_vfov 0 4 1419 32 LFrustumf::make_perspective_vfov 0 1 536 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1217 16 make_perspective 0 4 1419 27 LFrustumf::make_perspective 0 1 537 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1218 22 get_perspective_params 0 4 1419 33 LFrustumf::get_perspective_params 0 0 424
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1219 10 ~LFrustumf 0 4 1419 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1220 9 LFrustumd 0 4 1420 20 LFrustumd::LFrustumd 0 1 538 200
////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
34
inline LFrustumd::LFrustumd(void);

1221 13 make_ortho_2D 0 4 1420 24 LFrustumd::make_ortho_2D 0 2 539 540 500
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
////////////////////////////////////////////////////////////////////
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1222 10 make_ortho 0 4 1420 21 LFrustumd::make_ortho 0 2 541 542 450
////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
////////////////////////////////////////////////////////////////////
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1223 21 make_perspective_hfov 0 4 1420 32 LFrustumd::make_perspective_hfov 0 1 543 578
////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
////////////////////////////////////////////////////////////////////
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1224 21 make_perspective_vfov 0 4 1420 32 LFrustumd::make_perspective_vfov 0 1 544 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1225 16 make_perspective 0 4 1420 27 LFrustumd::make_perspective 0 1 545 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1226 22 get_perspective_params 0 4 1420 33 LFrustumd::get_perspective_params 0 0 424
////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: get_perspective_params
//       Access:
//  Description:
////////////////////////////////////////////////////////////////////
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1227 10 ~LFrustumd 0 4 1420 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1228 18 BoundingHexahedron 0 4 1425 38 BoundingHexahedron::BoundingHexahedron 0 2 546 547 694
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
317
BoundingHexahedron::BoundingHexahedron(LFrustum const &frustum, bool is_ortho, CoordinateSystem cs = (::CS_default));
BoundingHexahedron::BoundingHexahedron(LPoint3 const &fll, LPoint3 const &flr, LPoint3 const &fur, LPoint3 const &ful, LPoint3 const &nll, LPoint3 const &nlr, LPoint3 const &nur, LPoint3 const &nul);

1229 14 get_num_points 0 4 1425 34 BoundingHexahedron::get_num_points 0 1 548 284
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_points(void) const;

1230 9 get_point 0 4 1425 29 BoundingHexahedron::get_point 0 1 549 270
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
////////////////////////////////////////////////////////////////////
58
inline LPoint3 BoundingHexahedron::get_point(int n) const;

1231 14 get_num_planes 0 4 1425 34 BoundingHexahedron::get_num_planes 0 1 550 281
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
////////////////////////////////////////////////////////////////////
58
inline int BoundingHexahedron::get_num_planes(void) const;

1232 9 get_plane 0 4 1425 29 BoundingHexahedron::get_plane 0 1 551 268
////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
////////////////////////////////////////////////////////////////////
57
inline LPlane BoundingHexahedron::get_plane(int n) const;

1233 14 get_class_type 0 4 1425 34 BoundingHexahedron::get_class_type 0 1 552 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1234 19 ~BoundingHexahedron 0 4 1425 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1235 12 BoundingLine 0 4 1426 26 BoundingLine::BoundingLine 0 1 553 449
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
70
inline BoundingLine::BoundingLine(LPoint3 const &a, LPoint3 const &b);

1236 12 operator new 0 4 1426 26 BoundingLine::operator new 0 1 554 0
118
inline void *BoundingLine::operator new(size_t size);
inline void *BoundingLine::operator new(size_t size, void *ptr);

1237 15 operator delete 0 4 1426 29 BoundingLine::operator delete 0 0 0
112
inline void BoundingLine::operator delete(void *ptr);
inline void BoundingLine::operator delete(void *, void *);

1238 12 validate_ptr 0 4 1426 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1239 11 get_point_a 0 4 1426 25 BoundingLine::get_point_a 0 1 555 271
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
////////////////////////////////////////////////////////////////////
60
inline LPoint3 const &BoundingLine::get_point_a(void) const;

1240 11 get_point_b 0 4 1426 25 BoundingLine::get_point_b 0 1 556 272
////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
////////////////////////////////////////////////////////////////////
53
inline LPoint3 BoundingLine::get_point_b(void) const;

1241 14 get_class_type 0 4 1426 28 BoundingLine::get_class_type 0 1 557 0
53
static TypeHandle BoundingLine::get_class_type(void);

1242 13 ~BoundingLine 0 4 1426 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1243 13 BoundingPlane 0 4 1427 28 BoundingPlane::BoundingPlane 0 2 558 559 533
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlane const &plane);

1244 12 operator new 0 4 1427 27 BoundingPlane::operator new 0 1 560 0
120
inline void *BoundingPlane::operator new(size_t size);
inline void *BoundingPlane::operator new(size_t size, void *ptr);

1245 15 operator delete 0 4 1427 30 BoundingPlane::operator delete 0 0 0
114
inline void BoundingPlane::operator delete(void *ptr);
inline void BoundingPlane::operator delete(void *, void *);

1246 12 validate_ptr 0 4 1427 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1247 9 get_plane 0 4 1427 24 BoundingPlane::get_plane 0 1 561 224
////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline LPlane const &BoundingPlane::get_plane(void) const;

1248 14 get_class_type 0 4 1427 29 BoundingPlane::get_class_type 0 1 562 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1249 14 ~BoundingPlane 0 4 1427 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1250 14 BoundingSphere 0 4 1428 30 BoundingSphere::BoundingSphere 0 2 563 564 512
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
////////////////////////////////////////////////////////////////////
126
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3 const &center, PN_stdfloat radius);

1251 12 operator new 0 4 1428 28 BoundingSphere::operator new 0 1 565 0
122
inline void *BoundingSphere::operator new(size_t size);
inline void *BoundingSphere::operator new(size_t size, void *ptr);

1252 15 operator delete 0 4 1428 31 BoundingSphere::operator delete 0 0 0
116
inline void BoundingSphere::operator delete(void *ptr);
inline void BoundingSphere::operator delete(void *, void *);

1253 12 validate_ptr 0 4 1428 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1254 10 get_center 0 4 1428 26 BoundingSphere::get_center 0 1 566 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline LPoint3 BoundingSphere::get_center(void) const;

1255 10 get_radius 0 4 1428 26 BoundingSphere::get_radius 0 1 567 226
////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline PN_stdfloat BoundingSphere::get_radius(void) const;

1256 14 get_class_type 0 4 1428 30 BoundingSphere::get_class_type 0 1 568 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1257 15 ~BoundingSphere 0 4 1428 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1258 26 IntersectionBoundingVolume 0 4 1429 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 569 515
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1259 12 operator new 0 4 1429 40 IntersectionBoundingVolume::operator new 0 1 570 0
146
inline void *IntersectionBoundingVolume::operator new(size_t size);
inline void *IntersectionBoundingVolume::operator new(size_t size, void *ptr);

1260 15 operator delete 0 4 1429 43 IntersectionBoundingVolume::operator delete 0 0 0
140
inline void IntersectionBoundingVolume::operator delete(void *ptr);
inline void IntersectionBoundingVolume::operator delete(void *, void *);

1261 12 validate_ptr 0 4 1429 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1262 18 get_num_components 0 4 1429 46 IntersectionBoundingVolume::get_num_components 0 1 571 299
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
////////////////////////////////////////////////////////////////////
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1263 13 get_component 0 4 1429 41 IntersectionBoundingVolume::get_component 0 1 572 287
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
////////////////////////////////////////////////////////////////////
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1264 16 clear_components 0 4 1429 44 IntersectionBoundingVolume::clear_components 0 1 573 283
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
56
void IntersectionBoundingVolume::clear_components(void);

1265 13 add_component 0 4 1429 41 IntersectionBoundingVolume::add_component 0 1 574 693
////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1266 14 get_class_type 0 4 1429 42 IntersectionBoundingVolume::get_class_type 0 1 575 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1267 27 ~IntersectionBoundingVolume 0 4 1429 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1268 8 heads_up 0 1 0 8 heads_up 0 12 673 674 675 676 677 678 679 680 681 682 683 684 0
1267
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1269 7 look_at 0 1 0 7 look_at 0 12 685 686 687 688 689 690 691 692 693 694 695 696 0
1255
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = ((up())), CoordinateSystem cs = (::CS_default));
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1270 8 Mersenne 0 4 1430 18 Mersenne::Mersenne 0 1 576 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

1271 10 get_uint31 0 4 1430 20 Mersenne::get_uint31 0 1 577 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1272 9 ~Mersenne 0 4 1430 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1273 18 OmniBoundingVolume 0 4 1432 38 OmniBoundingVolume::OmniBoundingVolume 0 1 578 227
////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1274 14 get_class_type 0 4 1432 34 OmniBoundingVolume::get_class_type 0 1 579 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1275 19 ~OmniBoundingVolume 0 4 1432 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1276 19 UnionBoundingVolume 0 4 1433 40 UnionBoundingVolume::UnionBoundingVolume 0 1 580 494
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1277 12 operator new 0 4 1433 33 UnionBoundingVolume::operator new 0 1 581 0
132
inline void *UnionBoundingVolume::operator new(size_t size);
inline void *UnionBoundingVolume::operator new(size_t size, void *ptr);

1278 15 operator delete 0 4 1433 36 UnionBoundingVolume::operator delete 0 0 0
126
inline void UnionBoundingVolume::operator delete(void *ptr);
inline void UnionBoundingVolume::operator delete(void *, void *);

1279 12 validate_ptr 0 4 1433 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1280 18 get_num_components 0 4 1433 39 UnionBoundingVolume::get_num_components 0 1 582 285
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
////////////////////////////////////////////////////////////////////
63
inline int UnionBoundingVolume::get_num_components(void) const;

1281 13 get_component 0 4 1433 34 UnionBoundingVolume::get_component 0 1 583 273
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
////////////////////////////////////////////////////////////////////
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1282 16 clear_components 0 4 1433 37 UnionBoundingVolume::clear_components 0 1 584 276
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
////////////////////////////////////////////////////////////////////
49
void UnionBoundingVolume::clear_components(void);

1283 13 add_component 0 4 1433 34 UnionBoundingVolume::add_component 0 1 585 686
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
////////////////////////////////////////////////////////////////////
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1284 19 filter_intersection 0 4 1433 40 UnionBoundingVolume::filter_intersection 0 1 586 347
////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
////////////////////////////////////////////////////////////////////
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1285 14 get_class_type 0 4 1433 35 UnionBoundingVolume::get_class_type 0 1 587 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1286 20 ~UnionBoundingVolume 0 4 1433 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1287 10 Randomizer 0 4 1434 22 Randomizer::Randomizer 0 2 588 589 558
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
115
inline Randomizer::Randomizer(unsigned long int seed = (0));
inline Randomizer::Randomizer(Randomizer const &copy);

1288 10 operator = 0 4 1434 22 Randomizer::operator = 0 1 590 0
59
inline void Randomizer::operator =(Randomizer const &copy);

1289 10 random_int 0 4 1434 22 Randomizer::random_int 0 1 591 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
////////////////////////////////////////////////////////////////////
45
inline int Randomizer::random_int(int range);

1290 11 random_real 0 4 1434 23 Randomizer::random_real 0 1 592 268
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
////////////////////////////////////////////////////////////////////
52
inline double Randomizer::random_real(double range);

1291 16 random_real_unit 0 4 1434 28 Randomizer::random_real_unit 0 1 593 274
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
////////////////////////////////////////////////////////////////////
49
inline double Randomizer::random_real_unit(void);

1292 13 get_next_seed 0 4 1434 25 Randomizer::get_next_seed 0 1 594 313
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
////////////////////////////////////////////////////////////////////
64
static inline unsigned long int Randomizer::get_next_seed(void);

1293 8 get_seed 0 4 1434 20 Randomizer::get_seed 0 1 595 363
////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
52
inline unsigned long int Randomizer::get_seed(void);

1294 11 ~Randomizer 0 4 1434 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1295 8 get_seed 0 4 1435 21 PerlinNoise::get_seed 0 1 596 368
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
////////////////////////////////////////////////////////////////////
53
inline unsigned long int PerlinNoise::get_seed(void);

1296 12 ~PerlinNoise 0 4 1435 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1297 12 PerlinNoise2 0 4 1436 26 PerlinNoise2::PerlinNoise2 0 3 597 598 599 1145
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
212
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1298 10 operator = 0 4 1436 24 PerlinNoise2::operator = 0 1 600 0
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1299 9 set_scale 0 4 1436 23 PerlinNoise2::set_scale 0 4 601 602 603 604 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1300 5 noise 0 4 1436 19 PerlinNoise2::noise 0 3 605 606 607 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1301 11 operator () 0 4 1436 25 PerlinNoise2::operator () 0 3 608 609 610 0
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1302 13 ~PerlinNoise2 0 4 1436 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1303 12 PerlinNoise3 0 4 1437 26 PerlinNoise3::PerlinNoise3 0 3 611 612 613 1145
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
////////////////////////////////////////////////////////////////////
223
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = (256), unsigned long int seed = (0));
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1304 10 operator = 0 4 1437 24 PerlinNoise3::operator = 0 1 614 0
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1305 9 set_scale 0 4 1437 23 PerlinNoise3::set_scale 0 4 615 616 617 618 1070
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
////////////////////////////////////////////////////////////////////
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1306 5 noise 0 4 1437 19 PerlinNoise3::noise 0 3 619 620 621 802
////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1307 11 operator () 0 4 1437 25 PerlinNoise3::operator () 0 3 622 623 624 0
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1308 13 ~PerlinNoise3 0 4 1437 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1309 9 rotate_to 0 1 0 9 rotate_to 0 4 697 698 699 700 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1310 19 StackedPerlinNoise2 0 4 1494 40 StackedPerlinNoise2::StackedPerlinNoise2 0 3 625 626 627 1370
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
322
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = (2), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1311 10 operator = 0 4 1494 31 StackedPerlinNoise2::operator = 0 1 628 0
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1312 9 add_level 0 4 1494 30 StackedPerlinNoise2::add_level 0 1 629 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = (1));

1313 5 clear 0 4 1494 26 StackedPerlinNoise2::clear 0 1 630 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise2::clear(void);

1314 5 noise 0 4 1494 26 StackedPerlinNoise2::noise 0 3 631 632 633 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1315 11 operator () 0 4 1494 32 StackedPerlinNoise2::operator () 0 3 634 635 636 0
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1316 20 ~StackedPerlinNoise2 0 4 1494 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1317 19 StackedPerlinNoise3 0 4 1495 40 StackedPerlinNoise3::StackedPerlinNoise3 0 3 637 638 639 1370
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
////////////////////////////////////////////////////////////////////
333
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = (3), double scale_factor = (4), double amp_scale = (0.5), int table_size = (256), unsigned long int seed = (0));
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1318 10 operator = 0 4 1495 31 StackedPerlinNoise3::operator = 0 1 640 0
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1319 9 add_level 0 4 1495 30 StackedPerlinNoise3::add_level 0 1 641 328
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
////////////////////////////////////////////////////////////////////
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = (1));

1320 5 clear 0 4 1495 26 StackedPerlinNoise3::clear 0 1 642 327
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
////////////////////////////////////////////////////////////////////
38
void StackedPerlinNoise3::clear(void);

1321 5 noise 0 4 1495 26 StackedPerlinNoise3::noise 0 3 643 644 645 823
////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
////////////////////////////////////////////////////////////////////
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1322 11 operator () 0 4 1495 32 StackedPerlinNoise3::operator () 0 3 646 647 648 0
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1323 20 ~StackedPerlinNoise3 0 4 1495 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1324 12 Triangulator 0 4 1496 26 Triangulator::Triangulator 0 1 649 225
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
33
Triangulator::Triangulator(void);

1325 5 clear 0 4 1496 19 Triangulator::clear 0 1 650 337
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
31
void Triangulator::clear(void);

1326 10 add_vertex 0 4 1496 24 Triangulator::add_vertex 0 2 651 652 626
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1327 16 get_num_vertices 0 4 1496 30 Triangulator::get_num_vertices 0 1 653 545
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
54
inline int Triangulator::get_num_vertices(void) const;

1328 10 get_vertex 0 4 1496 24 Triangulator::get_vertex 0 1 654 247
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1329 13 clear_polygon 0 4 1496 27 Triangulator::clear_polygon 0 1 655 342
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
////////////////////////////////////////////////////////////////////
39
void Triangulator::clear_polygon(void);

1330 18 add_polygon_vertex 0 4 1496 32 Triangulator::add_polygon_vertex 0 1 656 645
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
////////////////////////////////////////////////////////////////////
49
void Triangulator::add_polygon_vertex(int index);

1331 15 is_left_winding 0 4 1496 29 Triangulator::is_left_winding 0 1 657 394
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
////////////////////////////////////////////////////////////////////
54
inline bool Triangulator::is_left_winding(void) const;

1332 10 begin_hole 0 4 1496 24 Triangulator::begin_hole 0 1 658 308
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
////////////////////////////////////////////////////////////////////
36
void Triangulator::begin_hole(void);

1333 15 add_hole_vertex 0 4 1496 29 Triangulator::add_hole_vertex 0 1 659 571
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
////////////////////////////////////////////////////////////////////
46
void Triangulator::add_hole_vertex(int index);

1334 11 triangulate 0 4 1496 25 Triangulator::triangulate 0 1 660 439
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
37
void Triangulator::triangulate(void);

1335 17 get_num_triangles 0 4 1496 31 Triangulator::get_num_triangles 0 1 661 328
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
////////////////////////////////////////////////////////////////////
48
int Triangulator::get_num_triangles(void) const;

1336 15 get_triangle_v0 0 4 1496 29 Triangulator::get_triangle_v0 0 1 662 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v0(int n) const;

1337 15 get_triangle_v1 0 4 1496 29 Triangulator::get_triangle_v1 0 1 663 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v1(int n) const;

1338 15 get_triangle_v2 0 4 1496 29 Triangulator::get_triangle_v2 0 1 664 454
////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
////////////////////////////////////////////////////////////////////
47
int Triangulator::get_triangle_v2(int n) const;

1339 13 ~Triangulator 0 4 1496 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1340 13 Triangulator3 0 4 1497 28 Triangulator3::Triangulator3 0 1 665 226
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
35
Triangulator3::Triangulator3(void);

1341 5 clear 0 4 1497 20 Triangulator3::clear 0 1 666 338
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
////////////////////////////////////////////////////////////////////
32
void Triangulator3::clear(void);

1342 10 add_vertex 0 4 1497 25 Triangulator3::add_vertex 0 2 667 668 628
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
////////////////////////////////////////////////////////////////////
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1343 16 get_num_vertices 0 4 1497 31 Triangulator3::get_num_vertices 0 1 669 546
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
////////////////////////////////////////////////////////////////////
55
inline int Triangulator3::get_num_vertices(void) const;

1344 10 get_vertex 0 4 1497 25 Triangulator3::get_vertex 0 1 670 248
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
////////////////////////////////////////////////////////////////////
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1345 11 triangulate 0 4 1497 26 Triangulator3::triangulate 0 1 671 440
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
////////////////////////////////////////////////////////////////////
38
void Triangulator3::triangulate(void);

1346 9 get_plane 0 4 1497 24 Triangulator3::get_plane 0 1 672 327
////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_plane
//       Access: Published
//  Description: Returns the plane of the polygon.  This is only
//               available after calling triangulate().
////////////////////////////////////////////////////////////////////
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1347 14 ~Triangulator3 0 4 1497 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

700
1 0 0 7 8 1500 714 0 0 1 4 copy 1 1498  
2 0 0 7 8 1500 714 0 0 1 4 copy 1 1501  
3 0 0 7 8 1500 714 0 0 1 6 source 1 1503  
4 0 0 6 9 1505 0 0 0 1 4 this 3 1498  
5 0 0 6 10 1506 0 0 0 2 4 this 3 1498  1 n 1 1505  
6 0 0 6 11 1506 0 0 0 2 4 this 3 1498  1 n 1 1505  
7 0 0 6 12 1509 0 0 0 1 4 this 3 1498  
8 0 0 6 13 1509 0 0 0 3 4 this 3 1498  1 n 1 1505  5 count 1 1505  
9 0 0 6 14 1510 0 0 0 1 4 this 3 1498  
10 0 0 6 15 1510 0 0 0 1 4 this 3 1498  
11 0 0 6 16 1510 0 0 0 3 4 this 3 1498  4 view 1 1511  5 flags 1 1510  
12 0 0 4 17 1513 0 0 0 2 4 this 3 1498  4 view 1 1511  
13 0 0 4 5 1513 0 0 0 1 4 this 3 1514  
14 0 0 4 6 1513 0 0 0 2 4 this 3 1515  3 out 1 1517  
15 0 0 7 25 1521 728 0 0 1 4 copy 1 1519  
16 0 0 7 25 1521 728 0 0 1 4 copy 1 1522  
17 0 0 7 25 1521 728 0 0 1 6 source 1 1503  
18 0 0 6 26 1505 0 0 0 1 4 this 3 1519  
19 0 0 6 27 1524 0 0 0 2 4 this 3 1519  1 n 1 1505  
20 0 0 6 28 1524 0 0 0 2 4 this 3 1519  1 n 1 1505  
21 0 0 6 29 1509 0 0 0 1 4 this 3 1519  
22 0 0 6 30 1509 0 0 0 3 4 this 3 1519  1 n 1 1505  5 count 1 1505  
23 0 0 6 31 1510 0 0 0 1 4 this 3 1519  
24 0 0 6 32 1510 0 0 0 1 4 this 3 1519  
25 0 0 6 33 1510 0 0 0 3 4 this 3 1519  4 view 1 1511  5 flags 1 1510  
26 0 0 4 34 1513 0 0 0 2 4 this 3 1519  4 view 1 1511  
27 0 0 4 22 1513 0 0 0 1 4 this 3 1527  
28 0 0 4 23 1513 0 0 0 2 4 this 3 1528  3 out 1 1517  
29 0 0 7 42 1532 742 0 0 1 4 copy 1 1530  
30 0 0 7 42 1532 742 0 0 1 4 copy 1 1533  
31 0 0 7 42 1532 742 0 0 1 6 source 1 1503  
32 0 0 6 43 1505 0 0 0 1 4 this 3 1530  
33 0 0 6 44 1535 0 0 0 2 4 this 3 1530  1 n 1 1505  
34 0 0 6 45 1535 0 0 0 2 4 this 3 1530  1 n 1 1505  
35 0 0 6 46 1509 0 0 0 1 4 this 3 1530  
36 0 0 6 47 1509 0 0 0 3 4 this 3 1530  1 n 1 1505  5 count 1 1505  
37 0 0 6 48 1510 0 0 0 1 4 this 3 1530  
38 0 0 6 49 1510 0 0 0 1 4 this 3 1530  
39 0 0 6 50 1510 0 0 0 3 4 this 3 1530  4 view 1 1511  5 flags 1 1510  
40 0 0 4 51 1513 0 0 0 2 4 this 3 1530  4 view 1 1511  
41 0 0 4 39 1513 0 0 0 1 4 this 3 1538  
42 0 0 4 40 1513 0 0 0 2 4 this 3 1539  3 out 1 1517  
43 0 0 7 59 1543 756 0 0 1 4 copy 1 1541  
44 0 0 7 59 1543 756 0 0 1 4 copy 1 1544  
45 0 0 7 59 1543 756 0 0 1 6 source 1 1503  
46 0 0 6 60 1505 0 0 0 1 4 this 3 1541  
47 0 0 6 61 1546 0 0 0 2 4 this 3 1541  1 n 1 1505  
48 0 0 6 62 1546 0 0 0 2 4 this 3 1541  1 n 1 1505  
49 0 0 6 63 1509 0 0 0 1 4 this 3 1541  
50 0 0 6 64 1509 0 0 0 3 4 this 3 1541  1 n 1 1505  5 count 1 1505  
51 0 0 6 65 1510 0 0 0 1 4 this 3 1541  
52 0 0 6 66 1510 0 0 0 1 4 this 3 1541  
53 0 0 6 67 1510 0 0 0 3 4 this 3 1541  4 view 1 1511  5 flags 1 1510  
54 0 0 4 68 1513 0 0 0 2 4 this 3 1541  4 view 1 1511  
55 0 0 4 56 1513 0 0 0 1 4 this 3 1549  
56 0 0 4 57 1513 0 0 0 2 4 this 3 1550  3 out 1 1517  
57 0 0 7 76 1554 770 0 0 1 4 copy 1 1552  
58 0 0 7 76 1554 770 0 0 1 4 copy 1 1555  
59 0 0 7 76 1554 770 0 0 1 6 source 1 1503  
60 0 0 6 77 1505 0 0 0 1 4 this 3 1552  
61 0 0 6 78 1557 0 0 0 2 4 this 3 1552  1 n 1 1505  
62 0 0 6 79 1557 0 0 0 2 4 this 3 1552  1 n 1 1505  
63 0 0 6 80 1509 0 0 0 1 4 this 3 1552  
64 0 0 6 81 1509 0 0 0 3 4 this 3 1552  1 n 1 1505  5 count 1 1505  
65 0 0 6 82 1510 0 0 0 1 4 this 3 1552  
66 0 0 6 83 1510 0 0 0 1 4 this 3 1552  
67 0 0 6 84 1510 0 0 0 3 4 this 3 1552  4 view 1 1511  5 flags 1 1510  
68 0 0 4 85 1513 0 0 0 2 4 this 3 1552  4 view 1 1511  
69 0 0 4 73 1513 0 0 0 1 4 this 3 1560  
70 0 0 4 74 1513 0 0 0 2 4 this 3 1561  3 out 1 1517  
71 0 0 7 93 1565 784 0 0 1 4 copy 1 1563  
72 0 0 7 93 1565 784 0 0 1 4 copy 1 1566  
73 0 0 7 93 1565 784 0 0 1 6 source 1 1503  
74 0 0 6 94 1505 0 0 0 1 4 this 3 1563  
75 0 0 6 95 1568 0 0 0 2 4 this 3 1563  1 n 1 1505  
76 0 0 6 96 1568 0 0 0 2 4 this 3 1563  1 n 1 1505  
77 0 0 6 97 1509 0 0 0 1 4 this 3 1563  
78 0 0 6 98 1509 0 0 0 3 4 this 3 1563  1 n 1 1505  5 count 1 1505  
79 0 0 6 99 1510 0 0 0 1 4 this 3 1563  
80 0 0 6 100 1510 0 0 0 1 4 this 3 1563  
81 0 0 6 101 1510 0 0 0 3 4 this 3 1563  4 view 1 1511  5 flags 1 1510  
82 0 0 4 102 1513 0 0 0 2 4 this 3 1563  4 view 1 1511  
83 0 0 4 90 1513 0 0 0 1 4 this 3 1571  
84 0 0 4 91 1513 0 0 0 2 4 this 3 1572  3 out 1 1517  
85 0 0 7 110 1576 798 0 0 1 4 copy 1 1574  
86 0 0 7 110 1576 798 0 0 1 4 copy 1 1577  
87 0 0 7 110 1576 798 0 0 1 6 source 1 1503  
88 0 0 6 111 1505 0 0 0 1 4 this 3 1574  
89 0 0 6 112 1579 0 0 0 2 4 this 3 1574  1 n 1 1505  
90 0 0 6 113 1579 0 0 0 2 4 this 3 1574  1 n 1 1505  
91 0 0 6 114 1509 0 0 0 1 4 this 3 1574  
92 0 0 6 115 1509 0 0 0 3 4 this 3 1574  1 n 1 1505  5 count 1 1505  
93 0 0 6 116 1510 0 0 0 1 4 this 3 1574  
94 0 0 6 117 1510 0 0 0 1 4 this 3 1574  
95 0 0 6 118 1510 0 0 0 3 4 this 3 1574  4 view 1 1511  5 flags 1 1510  
96 0 0 4 119 1513 0 0 0 2 4 this 3 1574  4 view 1 1511  
97 0 0 4 107 1513 0 0 0 1 4 this 3 1582  
98 0 0 4 108 1513 0 0 0 2 4 this 3 1583  3 out 1 1517  
99 0 0 7 127 1587 812 0 0 1 4 copy 1 1585  
100 0 0 7 127 1587 812 0 0 1 4 copy 1 1588  
101 0 0 7 127 1587 812 0 0 1 6 source 1 1503  
102 0 0 6 128 1505 0 0 0 1 4 this 3 1585  
103 0 0 6 129 1590 0 0 0 2 4 this 3 1585  1 n 1 1505  
104 0 0 6 130 1590 0 0 0 2 4 this 3 1585  1 n 1 1505  
105 0 0 6 131 1509 0 0 0 1 4 this 3 1585  
106 0 0 6 132 1509 0 0 0 3 4 this 3 1585  1 n 1 1505  5 count 1 1505  
107 0 0 6 133 1510 0 0 0 1 4 this 3 1585  
108 0 0 6 134 1510 0 0 0 1 4 this 3 1585  
109 0 0 6 135 1510 0 0 0 3 4 this 3 1585  4 view 1 1511  5 flags 1 1510  
110 0 0 4 136 1513 0 0 0 2 4 this 3 1585  4 view 1 1511  
111 0 0 4 124 1513 0 0 0 1 4 this 3 1593  
112 0 0 4 125 1513 0 0 0 2 4 this 3 1594  3 out 1 1517  
113 0 0 7 144 1598 826 0 0 1 4 copy 1 1596  
114 0 0 7 144 1598 826 0 0 1 4 copy 1 1599  
115 0 0 7 144 1598 826 0 0 1 6 source 1 1503  
116 0 0 6 145 1505 0 0 0 1 4 this 3 1596  
117 0 0 6 146 1601 0 0 0 2 4 this 3 1596  1 n 1 1505  
118 0 0 6 147 1601 0 0 0 2 4 this 3 1596  1 n 1 1505  
119 0 0 6 148 1509 0 0 0 1 4 this 3 1596  
120 0 0 6 149 1509 0 0 0 3 4 this 3 1596  1 n 1 1505  5 count 1 1505  
121 0 0 6 150 1510 0 0 0 1 4 this 3 1596  
122 0 0 6 151 1510 0 0 0 1 4 this 3 1596  
123 0 0 6 152 1510 0 0 0 3 4 this 3 1596  4 view 1 1511  5 flags 1 1510  
124 0 0 4 153 1513 0 0 0 2 4 this 3 1596  4 view 1 1511  
125 0 0 4 141 1513 0 0 0 1 4 this 3 1604  
126 0 0 4 142 1513 0 0 0 2 4 this 3 1605  3 out 1 1517  
127 0 0 7 161 1609 840 0 0 1 4 copy 1 1607  
128 0 0 7 161 1609 840 0 0 1 4 copy 1 1610  
129 0 0 7 161 1609 840 0 0 1 6 source 1 1503  
130 0 0 6 162 1505 0 0 0 1 4 this 3 1607  
131 0 0 6 163 1612 0 0 0 2 4 this 3 1607  1 n 1 1505  
132 0 0 6 164 1612 0 0 0 2 4 this 3 1607  1 n 1 1505  
133 0 0 6 165 1509 0 0 0 1 4 this 3 1607  
134 0 0 6 166 1509 0 0 0 3 4 this 3 1607  1 n 1 1505  5 count 1 1505  
135 0 0 6 167 1510 0 0 0 1 4 this 3 1607  
136 0 0 6 168 1510 0 0 0 1 4 this 3 1607  
137 0 0 6 169 1510 0 0 0 3 4 this 3 1607  4 view 1 1511  5 flags 1 1510  
138 0 0 4 170 1513 0 0 0 2 4 this 3 1607  4 view 1 1511  
139 0 0 4 158 1513 0 0 0 1 4 this 3 1615  
140 0 0 4 159 1513 0 0 0 2 4 this 3 1616  3 out 1 1517  
141 0 0 7 178 1620 854 0 0 1 4 copy 1 1618  
142 0 0 7 178 1620 854 0 0 1 4 copy 1 1621  
143 0 0 7 178 1620 854 0 0 1 6 source 1 1503  
144 0 0 6 179 1505 0 0 0 1 4 this 3 1618  
145 0 0 6 180 1623 0 0 0 2 4 this 3 1618  1 n 1 1505  
146 0 0 6 181 1623 0 0 0 2 4 this 3 1618  1 n 1 1505  
147 0 0 6 182 1509 0 0 0 1 4 this 3 1618  
148 0 0 6 183 1509 0 0 0 3 4 this 3 1618  1 n 1 1505  5 count 1 1505  
149 0 0 6 184 1510 0 0 0 1 4 this 3 1618  
150 0 0 6 185 1510 0 0 0 1 4 this 3 1618  
151 0 0 6 186 1510 0 0 0 3 4 this 3 1618  4 view 1 1511  5 flags 1 1510  
152 0 0 4 187 1513 0 0 0 2 4 this 3 1618  4 view 1 1511  
153 0 0 4 175 1513 0 0 0 1 4 this 3 1626  
154 0 0 4 176 1513 0 0 0 2 4 this 3 1627  3 out 1 1517  
155 0 0 7 195 1631 868 0 0 1 4 copy 1 1629  
156 0 0 7 195 1631 868 0 0 1 4 copy 1 1632  
157 0 0 7 195 1631 868 0 0 1 6 source 1 1503  
158 0 0 6 196 1505 0 0 0 1 4 this 3 1629  
159 0 0 6 197 1634 0 0 0 2 4 this 3 1629  1 n 1 1505  
160 0 0 6 198 1634 0 0 0 2 4 this 3 1629  1 n 1 1505  
161 0 0 6 199 1509 0 0 0 1 4 this 3 1629  
162 0 0 6 200 1509 0 0 0 3 4 this 3 1629  1 n 1 1505  5 count 1 1505  
163 0 0 6 201 1510 0 0 0 1 4 this 3 1629  
164 0 0 6 202 1510 0 0 0 1 4 this 3 1629  
165 0 0 6 203 1510 0 0 0 3 4 this 3 1629  4 view 1 1511  5 flags 1 1510  
166 0 0 4 204 1513 0 0 0 2 4 this 3 1629  4 view 1 1511  
167 0 0 4 192 1513 0 0 0 1 4 this 3 1637  
168 0 0 4 193 1513 0 0 0 2 4 this 3 1638  3 out 1 1517  
169 0 0 7 212 1642 882 0 0 1 4 copy 1 1640  
170 0 0 7 212 1642 882 0 0 1 4 copy 1 1643  
171 0 0 7 212 1642 882 0 0 1 6 source 1 1503  
172 0 0 6 213 1505 0 0 0 1 4 this 3 1640  
173 0 0 6 214 1645 0 0 0 2 4 this 3 1640  1 n 1 1505  
174 0 0 6 215 1645 0 0 0 2 4 this 3 1640  1 n 1 1505  
175 0 0 6 216 1509 0 0 0 1 4 this 3 1640  
176 0 0 6 217 1509 0 0 0 3 4 this 3 1640  1 n 1 1505  5 count 1 1505  
177 0 0 6 218 1510 0 0 0 1 4 this 3 1640  
178 0 0 6 219 1510 0 0 0 1 4 this 3 1640  
179 0 0 6 220 1510 0 0 0 3 4 this 3 1640  4 view 1 1511  5 flags 1 1510  
180 0 0 4 221 1513 0 0 0 2 4 this 3 1640  4 view 1 1511  
181 0 0 4 209 1513 0 0 0 1 4 this 3 1648  
182 0 0 4 210 1513 0 0 0 2 4 this 3 1649  3 out 1 1517  
183 0 0 7 224 1651 900 0 0 1 4 copy 1 1501  
184 0 0 7 224 1651 900 0 0 1 11 type_handle 1 1652  
185 0 0 7 224 1651 900 0 0 1 6 source 1 1503  
186 0 0 7 225 1651 900 0 0 2 1 n 1 1505  11 type_handle 1 1652  
187 0 0 6 226 1505 0 0 0 1 4 this 3 1501  
188 0 0 4 227 1513 0 0 0 2 4 this 3 1651  1 x 1 1506  
189 0 0 4 228 1513 0 0 0 1 4 this 3 1651  
190 0 0 6 229 1506 0 0 0 2 4 this 3 1501  1 n 1 1505  
191 0 0 4 230 1513 0 0 0 3 4 this 3 1651  1 n 1 1505  5 value 1 1506  
192 0 0 6 231 1506 0 0 0 2 4 this 3 1501  1 n 1 1505  
193 0 0 4 232 1513 0 0 0 3 4 this 3 1651  1 n 1 1505  5 value 1 1506  
194 0 0 6 233 1509 0 0 0 1 4 this 3 1501  
195 0 0 4 234 1513 0 0 0 2 4 this 3 1651  4 data 1 1509  
196 0 0 6 235 1509 0 0 0 3 4 this 3 1501  1 n 1 1505  5 count 1 1505  
197 0 0 4 236 1513 0 0 0 4 4 this 3 1651  1 n 1 1505  5 count 1 1505  4 data 1 1509  
198 0 0 6 237 1510 0 0 0 1 4 this 3 1501  
199 0 0 6 238 1510 0 0 0 1 4 this 3 1501  
200 0 0 6 239 1510 0 0 0 3 4 this 3 1651  4 view 1 1511  5 flags 1 1510  
201 0 0 4 240 1513 0 0 0 2 4 this 3 1501  4 view 1 1511  
202 0 0 7 243 1654 918 0 0 1 4 copy 1 1522  
203 0 0 7 243 1654 918 0 0 1 11 type_handle 1 1652  
204 0 0 7 243 1654 918 0 0 1 6 source 1 1503  
205 0 0 7 244 1654 918 0 0 2 1 n 1 1505  11 type_handle 1 1652  
206 0 0 6 245 1505 0 0 0 1 4 this 3 1522  
207 0 0 4 246 1513 0 0 0 2 4 this 3 1654  1 x 1 1524  
208 0 0 4 247 1513 0 0 0 1 4 this 3 1654  
209 0 0 6 248 1524 0 0 0 2 4 this 3 1522  1 n 1 1505  
210 0 0 4 249 1513 0 0 0 3 4 this 3 1654  1 n 1 1505  5 value 1 1524  
211 0 0 6 250 1524 0 0 0 2 4 this 3 1522  1 n 1 1505  
212 0 0 4 251 1513 0 0 0 3 4 this 3 1654  1 n 1 1505  5 value 1 1524  
213 0 0 6 252 1509 0 0 0 1 4 this 3 1522  
214 0 0 4 253 1513 0 0 0 2 4 this 3 1654  4 data 1 1509  
215 0 0 6 254 1509 0 0 0 3 4 this 3 1522  1 n 1 1505  5 count 1 1505  
216 0 0 4 255 1513 0 0 0 4 4 this 3 1654  1 n 1 1505  5 count 1 1505  4 data 1 1509  
217 0 0 6 256 1510 0 0 0 1 4 this 3 1522  
218 0 0 6 257 1510 0 0 0 1 4 this 3 1522  
219 0 0 6 258 1510 0 0 0 3 4 this 3 1654  4 view 1 1511  5 flags 1 1510  
220 0 0 4 259 1513 0 0 0 2 4 this 3 1522  4 view 1 1511  
221 0 0 7 262 1655 936 0 0 1 4 copy 1 1533  
222 0 0 7 262 1655 936 0 0 1 11 type_handle 1 1652  
223 0 0 7 262 1655 936 0 0 1 6 source 1 1503  
224 0 0 7 263 1655 936 0 0 2 1 n 1 1505  11 type_handle 1 1652  
225 0 0 6 264 1505 0 0 0 1 4 this 3 1533  
226 0 0 4 265 1513 0 0 0 2 4 this 3 1655  1 x 1 1535  
227 0 0 4 266 1513 0 0 0 1 4 this 3 1655  
228 0 0 6 267 1535 0 0 0 2 4 this 3 1533  1 n 1 1505  
229 0 0 4 268 1513 0 0 0 3 4 this 3 1655  1 n 1 1505  5 value 1 1535  
230 0 0 6 269 1535 0 0 0 2 4 this 3 1533  1 n 1 1505  
231 0 0 4 270 1513 0 0 0 3 4 this 3 1655  1 n 1 1505  5 value 1 1535  
232 0 0 6 271 1509 0 0 0 1 4 this 3 1533  
233 0 0 4 272 1513 0 0 0 2 4 this 3 1655  4 data 1 1509  
234 0 0 6 273 1509 0 0 0 3 4 this 3 1533  1 n 1 1505  5 count 1 1505  
235 0 0 4 274 1513 0 0 0 4 4 this 3 1655  1 n 1 1505  5 count 1 1505  4 data 1 1509  
236 0 0 6 275 1510 0 0 0 1 4 this 3 1533  
237 0 0 6 276 1510 0 0 0 1 4 this 3 1533  
238 0 0 6 277 1510 0 0 0 3 4 this 3 1655  4 view 1 1511  5 flags 1 1510  
239 0 0 4 278 1513 0 0 0 2 4 this 3 1533  4 view 1 1511  
240 0 0 7 281 1656 954 0 0 1 4 copy 1 1544  
241 0 0 7 281 1656 954 0 0 1 11 type_handle 1 1652  
242 0 0 7 281 1656 954 0 0 1 6 source 1 1503  
243 0 0 7 282 1656 954 0 0 2 1 n 1 1505  11 type_handle 1 1652  
244 0 0 6 283 1505 0 0 0 1 4 this 3 1544  
245 0 0 4 284 1513 0 0 0 2 4 this 3 1656  1 x 1 1546  
246 0 0 4 285 1513 0 0 0 1 4 this 3 1656  
247 0 0 6 286 1546 0 0 0 2 4 this 3 1544  1 n 1 1505  
248 0 0 4 287 1513 0 0 0 3 4 this 3 1656  1 n 1 1505  5 value 1 1546  
249 0 0 6 288 1546 0 0 0 2 4 this 3 1544  1 n 1 1505  
250 0 0 4 289 1513 0 0 0 3 4 this 3 1656  1 n 1 1505  5 value 1 1546  
251 0 0 6 290 1509 0 0 0 1 4 this 3 1544  
252 0 0 4 291 1513 0 0 0 2 4 this 3 1656  4 data 1 1509  
253 0 0 6 292 1509 0 0 0 3 4 this 3 1544  1 n 1 1505  5 count 1 1505  
254 0 0 4 293 1513 0 0 0 4 4 this 3 1656  1 n 1 1505  5 count 1 1505  4 data 1 1509  
255 0 0 6 294 1510 0 0 0 1 4 this 3 1544  
256 0 0 6 295 1510 0 0 0 1 4 this 3 1544  
257 0 0 6 296 1510 0 0 0 3 4 this 3 1656  4 view 1 1511  5 flags 1 1510  
258 0 0 4 297 1513 0 0 0 2 4 this 3 1544  4 view 1 1511  
259 0 0 7 300 1657 972 0 0 1 4 copy 1 1555  
260 0 0 7 300 1657 972 0 0 1 11 type_handle 1 1652  
261 0 0 7 300 1657 972 0 0 1 6 source 1 1503  
262 0 0 7 301 1657 972 0 0 2 1 n 1 1505  11 type_handle 1 1652  
263 0 0 6 302 1505 0 0 0 1 4 this 3 1555  
264 0 0 4 303 1513 0 0 0 2 4 this 3 1657  1 x 1 1557  
265 0 0 4 304 1513 0 0 0 1 4 this 3 1657  
266 0 0 6 305 1557 0 0 0 2 4 this 3 1555  1 n 1 1505  
267 0 0 4 306 1513 0 0 0 3 4 this 3 1657  1 n 1 1505  5 value 1 1557  
268 0 0 6 307 1557 0 0 0 2 4 this 3 1555  1 n 1 1505  
269 0 0 4 308 1513 0 0 0 3 4 this 3 1657  1 n 1 1505  5 value 1 1557  
270 0 0 6 309 1509 0 0 0 1 4 this 3 1555  
271 0 0 4 310 1513 0 0 0 2 4 this 3 1657  4 data 1 1509  
272 0 0 6 311 1509 0 0 0 3 4 this 3 1555  1 n 1 1505  5 count 1 1505  
273 0 0 4 312 1513 0 0 0 4 4 this 3 1657  1 n 1 1505  5 count 1 1505  4 data 1 1509  
274 0 0 6 313 1510 0 0 0 1 4 this 3 1555  
275 0 0 6 314 1510 0 0 0 1 4 this 3 1555  
276 0 0 6 315 1510 0 0 0 3 4 this 3 1657  4 view 1 1511  5 flags 1 1510  
277 0 0 4 316 1513 0 0 0 2 4 this 3 1555  4 view 1 1511  
278 0 0 7 319 1658 990 0 0 1 4 copy 1 1566  
279 0 0 7 319 1658 990 0 0 1 11 type_handle 1 1652  
280 0 0 7 319 1658 990 0 0 1 6 source 1 1503  
281 0 0 7 320 1658 990 0 0 2 1 n 1 1505  11 type_handle 1 1652  
282 0 0 6 321 1505 0 0 0 1 4 this 3 1566  
283 0 0 4 322 1513 0 0 0 2 4 this 3 1658  1 x 1 1568  
284 0 0 4 323 1513 0 0 0 1 4 this 3 1658  
285 0 0 6 324 1568 0 0 0 2 4 this 3 1566  1 n 1 1505  
286 0 0 4 325 1513 0 0 0 3 4 this 3 1658  1 n 1 1505  5 value 1 1568  
287 0 0 6 326 1568 0 0 0 2 4 this 3 1566  1 n 1 1505  
288 0 0 4 327 1513 0 0 0 3 4 this 3 1658  1 n 1 1505  5 value 1 1568  
289 0 0 6 328 1509 0 0 0 1 4 this 3 1566  
290 0 0 4 329 1513 0 0 0 2 4 this 3 1658  4 data 1 1509  
291 0 0 6 330 1509 0 0 0 3 4 this 3 1566  1 n 1 1505  5 count 1 1505  
292 0 0 4 331 1513 0 0 0 4 4 this 3 1658  1 n 1 1505  5 count 1 1505  4 data 1 1509  
293 0 0 6 332 1510 0 0 0 1 4 this 3 1566  
294 0 0 6 333 1510 0 0 0 1 4 this 3 1566  
295 0 0 6 334 1510 0 0 0 3 4 this 3 1658  4 view 1 1511  5 flags 1 1510  
296 0 0 4 335 1513 0 0 0 2 4 this 3 1566  4 view 1 1511  
297 0 0 7 338 1659 1008 0 0 1 4 copy 1 1577  
298 0 0 7 338 1659 1008 0 0 1 11 type_handle 1 1652  
299 0 0 7 338 1659 1008 0 0 1 6 source 1 1503  
300 0 0 7 339 1659 1008 0 0 2 1 n 1 1505  11 type_handle 1 1652  
301 0 0 6 340 1505 0 0 0 1 4 this 3 1577  
302 0 0 4 341 1513 0 0 0 2 4 this 3 1659  1 x 1 1579  
303 0 0 4 342 1513 0 0 0 1 4 this 3 1659  
304 0 0 6 343 1579 0 0 0 2 4 this 3 1577  1 n 1 1505  
305 0 0 4 344 1513 0 0 0 3 4 this 3 1659  1 n 1 1505  5 value 1 1579  
306 0 0 6 345 1579 0 0 0 2 4 this 3 1577  1 n 1 1505  
307 0 0 4 346 1513 0 0 0 3 4 this 3 1659  1 n 1 1505  5 value 1 1579  
308 0 0 6 347 1509 0 0 0 1 4 this 3 1577  
309 0 0 4 348 1513 0 0 0 2 4 this 3 1659  4 data 1 1509  
310 0 0 6 349 1509 0 0 0 3 4 this 3 1577  1 n 1 1505  5 count 1 1505  
311 0 0 4 350 1513 0 0 0 4 4 this 3 1659  1 n 1 1505  5 count 1 1505  4 data 1 1509  
312 0 0 6 351 1510 0 0 0 1 4 this 3 1577  
313 0 0 6 352 1510 0 0 0 1 4 this 3 1577  
314 0 0 6 353 1510 0 0 0 3 4 this 3 1659  4 view 1 1511  5 flags 1 1510  
315 0 0 4 354 1513 0 0 0 2 4 this 3 1577  4 view 1 1511  
316 0 0 7 357 1660 1026 0 0 1 4 copy 1 1588  
317 0 0 7 357 1660 1026 0 0 1 11 type_handle 1 1652  
318 0 0 7 357 1660 1026 0 0 1 6 source 1 1503  
319 0 0 7 358 1660 1026 0 0 2 1 n 1 1505  11 type_handle 1 1652  
320 0 0 6 359 1505 0 0 0 1 4 this 3 1588  
321 0 0 4 360 1513 0 0 0 2 4 this 3 1660  1 x 1 1590  
322 0 0 4 361 1513 0 0 0 1 4 this 3 1660  
323 0 0 6 362 1590 0 0 0 2 4 this 3 1588  1 n 1 1505  
324 0 0 4 363 1513 0 0 0 3 4 this 3 1660  1 n 1 1505  5 value 1 1590  
325 0 0 6 364 1590 0 0 0 2 4 this 3 1588  1 n 1 1505  
326 0 0 4 365 1513 0 0 0 3 4 this 3 1660  1 n 1 1505  5 value 1 1590  
327 0 0 6 366 1509 0 0 0 1 4 this 3 1588  
328 0 0 4 367 1513 0 0 0 2 4 this 3 1660  4 data 1 1509  
329 0 0 6 368 1509 0 0 0 3 4 this 3 1588  1 n 1 1505  5 count 1 1505  
330 0 0 4 369 1513 0 0 0 4 4 this 3 1660  1 n 1 1505  5 count 1 1505  4 data 1 1509  
331 0 0 6 370 1510 0 0 0 1 4 this 3 1588  
332 0 0 6 371 1510 0 0 0 1 4 this 3 1588  
333 0 0 6 372 1510 0 0 0 3 4 this 3 1660  4 view 1 1511  5 flags 1 1510  
334 0 0 4 373 1513 0 0 0 2 4 this 3 1588  4 view 1 1511  
335 0 0 7 376 1661 1044 0 0 1 4 copy 1 1599  
336 0 0 7 376 1661 1044 0 0 1 11 type_handle 1 1652  
337 0 0 7 376 1661 1044 0 0 1 6 source 1 1503  
338 0 0 7 377 1661 1044 0 0 2 1 n 1 1505  11 type_handle 1 1652  
339 0 0 6 378 1505 0 0 0 1 4 this 3 1599  
340 0 0 4 379 1513 0 0 0 2 4 this 3 1661  1 x 1 1601  
341 0 0 4 380 1513 0 0 0 1 4 this 3 1661  
342 0 0 6 381 1601 0 0 0 2 4 this 3 1599  1 n 1 1505  
343 0 0 4 382 1513 0 0 0 3 4 this 3 1661  1 n 1 1505  5 value 1 1601  
344 0 0 6 383 1601 0 0 0 2 4 this 3 1599  1 n 1 1505  
345 0 0 4 384 1513 0 0 0 3 4 this 3 1661  1 n 1 1505  5 value 1 1601  
346 0 0 6 385 1509 0 0 0 1 4 this 3 1599  
347 0 0 4 386 1513 0 0 0 2 4 this 3 1661  4 data 1 1509  
348 0 0 6 387 1509 0 0 0 3 4 this 3 1599  1 n 1 1505  5 count 1 1505  
349 0 0 4 388 1513 0 0 0 4 4 this 3 1661  1 n 1 1505  5 count 1 1505  4 data 1 1509  
350 0 0 6 389 1510 0 0 0 1 4 this 3 1599  
351 0 0 6 390 1510 0 0 0 1 4 this 3 1599  
352 0 0 6 391 1510 0 0 0 3 4 this 3 1661  4 view 1 1511  5 flags 1 1510  
353 0 0 4 392 1513 0 0 0 2 4 this 3 1599  4 view 1 1511  
354 0 0 7 395 1662 1062 0 0 1 4 copy 1 1610  
355 0 0 7 395 1662 1062 0 0 1 11 type_handle 1 1652  
356 0 0 7 395 1662 1062 0 0 1 6 source 1 1503  
357 0 0 7 396 1662 1062 0 0 2 1 n 1 1505  11 type_handle 1 1652  
358 0 0 6 397 1505 0 0 0 1 4 this 3 1610  
359 0 0 4 398 1513 0 0 0 2 4 this 3 1662  1 x 1 1612  
360 0 0 4 399 1513 0 0 0 1 4 this 3 1662  
361 0 0 6 400 1612 0 0 0 2 4 this 3 1610  1 n 1 1505  
362 0 0 4 401 1513 0 0 0 3 4 this 3 1662  1 n 1 1505  5 value 1 1612  
363 0 0 6 402 1612 0 0 0 2 4 this 3 1610  1 n 1 1505  
364 0 0 4 403 1513 0 0 0 3 4 this 3 1662  1 n 1 1505  5 value 1 1612  
365 0 0 6 404 1509 0 0 0 1 4 this 3 1610  
366 0 0 4 405 1513 0 0 0 2 4 this 3 1662  4 data 1 1509  
367 0 0 6 406 1509 0 0 0 3 4 this 3 1610  1 n 1 1505  5 count 1 1505  
368 0 0 4 407 1513 0 0 0 4 4 this 3 1662  1 n 1 1505  5 count 1 1505  4 data 1 1509  
369 0 0 6 408 1510 0 0 0 1 4 this 3 1610  
370 0 0 6 409 1510 0 0 0 1 4 this 3 1610  
371 0 0 6 410 1510 0 0 0 3 4 this 3 1662  4 view 1 1511  5 flags 1 1510  
372 0 0 4 411 1513 0 0 0 2 4 this 3 1610  4 view 1 1511  
373 0 0 7 414 1663 1080 0 0 1 4 copy 1 1621  
374 0 0 7 414 1663 1080 0 0 1 11 type_handle 1 1652  
375 0 0 7 414 1663 1080 0 0 1 6 source 1 1503  
376 0 0 7 415 1663 1080 0 0 2 1 n 1 1505  11 type_handle 1 1652  
377 0 0 6 416 1505 0 0 0 1 4 this 3 1621  
378 0 0 4 417 1513 0 0 0 2 4 this 3 1663  1 x 1 1623  
379 0 0 4 418 1513 0 0 0 1 4 this 3 1663  
380 0 0 6 419 1623 0 0 0 2 4 this 3 1621  1 n 1 1505  
381 0 0 4 420 1513 0 0 0 3 4 this 3 1663  1 n 1 1505  5 value 1 1623  
382 0 0 6 421 1623 0 0 0 2 4 this 3 1621  1 n 1 1505  
383 0 0 4 422 1513 0 0 0 3 4 this 3 1663  1 n 1 1505  5 value 1 1623  
384 0 0 6 423 1509 0 0 0 1 4 this 3 1621  
385 0 0 4 424 1513 0 0 0 2 4 this 3 1663  4 data 1 1509  
386 0 0 6 425 1509 0 0 0 3 4 this 3 1621  1 n 1 1505  5 count 1 1505  
387 0 0 4 426 1513 0 0 0 4 4 this 3 1663  1 n 1 1505  5 count 1 1505  4 data 1 1509  
388 0 0 6 427 1510 0 0 0 1 4 this 3 1621  
389 0 0 6 428 1510 0 0 0 1 4 this 3 1621  
390 0 0 6 429 1510 0 0 0 3 4 this 3 1663  4 view 1 1511  5 flags 1 1510  
391 0 0 4 430 1513 0 0 0 2 4 this 3 1621  4 view 1 1511  
392 0 0 7 433 1664 1098 0 0 1 4 copy 1 1632  
393 0 0 7 433 1664 1098 0 0 1 11 type_handle 1 1652  
394 0 0 7 433 1664 1098 0 0 1 6 source 1 1503  
395 0 0 7 434 1664 1098 0 0 2 1 n 1 1505  11 type_handle 1 1652  
396 0 0 6 435 1505 0 0 0 1 4 this 3 1632  
397 0 0 4 436 1513 0 0 0 2 4 this 3 1664  1 x 1 1634  
398 0 0 4 437 1513 0 0 0 1 4 this 3 1664  
399 0 0 6 438 1634 0 0 0 2 4 this 3 1632  1 n 1 1505  
400 0 0 4 439 1513 0 0 0 3 4 this 3 1664  1 n 1 1505  5 value 1 1634  
401 0 0 6 440 1634 0 0 0 2 4 this 3 1632  1 n 1 1505  
402 0 0 4 441 1513 0 0 0 3 4 this 3 1664  1 n 1 1505  5 value 1 1634  
403 0 0 6 442 1509 0 0 0 1 4 this 3 1632  
404 0 0 4 443 1513 0 0 0 2 4 this 3 1664  4 data 1 1509  
405 0 0 6 444 1509 0 0 0 3 4 this 3 1632  1 n 1 1505  5 count 1 1505  
406 0 0 4 445 1513 0 0 0 4 4 this 3 1664  1 n 1 1505  5 count 1 1505  4 data 1 1509  
407 0 0 6 446 1510 0 0 0 1 4 this 3 1632  
408 0 0 6 447 1510 0 0 0 1 4 this 3 1632  
409 0 0 6 448 1510 0 0 0 3 4 this 3 1664  4 view 1 1511  5 flags 1 1510  
410 0 0 4 449 1513 0 0 0 2 4 this 3 1632  4 view 1 1511  
411 0 0 7 452 1665 1116 0 0 1 4 copy 1 1643  
412 0 0 7 452 1665 1116 0 0 1 11 type_handle 1 1652  
413 0 0 7 452 1665 1116 0 0 1 6 source 1 1503  
414 0 0 7 453 1665 1116 0 0 2 1 n 1 1505  11 type_handle 1 1652  
415 0 0 6 454 1505 0 0 0 1 4 this 3 1643  
416 0 0 4 455 1513 0 0 0 2 4 this 3 1665  1 x 1 1645  
417 0 0 4 456 1513 0 0 0 1 4 this 3 1665  
418 0 0 6 457 1645 0 0 0 2 4 this 3 1643  1 n 1 1505  
419 0 0 4 458 1513 0 0 0 3 4 this 3 1665  1 n 1 1505  5 value 1 1645  
420 0 0 6 459 1645 0 0 0 2 4 this 3 1643  1 n 1 1505  
421 0 0 4 460 1513 0 0 0 3 4 this 3 1665  1 n 1 1505  5 value 1 1645  
422 0 0 6 461 1509 0 0 0 1 4 this 3 1643  
423 0 0 4 462 1513 0 0 0 2 4 this 3 1665  4 data 1 1509  
424 0 0 6 463 1509 0 0 0 3 4 this 3 1643  1 n 1 1505  5 count 1 1505  
425 0 0 4 464 1513 0 0 0 4 4 this 3 1665  1 n 1 1505  5 count 1 1505  4 data 1 1509  
426 0 0 6 465 1510 0 0 0 1 4 this 3 1643  
427 0 0 6 466 1510 0 0 0 1 4 this 3 1643  
428 0 0 6 467 1510 0 0 0 3 4 this 3 1665  4 view 1 1511  5 flags 1 1510  
429 0 0 4 468 1513 0 0 0 2 4 this 3 1643  4 view 1 1511  
430 0 0 7 472 1668 1127 0 0 1 4 this 3 1666  
431 0 0 6 473 1669 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_empty
//       Access: Published
//  Description: Any kind of volume might be empty.  This is a
//               degenerate volume that contains no points; it's not
//               the same as, for instance, a sphere with radius zero,
//               since that contains one point (the center).  It
//               intersects with no other volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1666  
432 0 0 6 474 1669 0 0 905 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::is_infinite
//       Access: Published
//  Description: The other side of the empty coin is an infinite
//               volume.  This is a degenerate state of a normally
//               finite volume that contains all points.  (Note that
//               some kinds of infinite bounding volumes, like binary
//               separating planes, do not contain all points and thus
//               correctly return is_infinite() == false, even though
//               they are technically infinite.  This is a special
//               case of the word 'infinite' meaning the volume covers
//               all points in space.)
//
//               It completely intersects with all other volumes
//               except empty volumes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1666  
433 0 0 4 475 1513 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::set_infinite
//       Access: Published
//  Description: Marks the volume as infinite, even if it is normally
//               finite.  You can think of this as an infinite
//               extend_by() operation.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1668  
434 0 0 6 476 1669 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::extend_by
//       Access: Published
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1668  3 vol 1 1666  
435 0 0 6 479 1510 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::contains
//       Access: Published
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1666  3 vol 1 1666  
436 0 0 4 480 1513 0 0 0 2 4 this 3 1666  3 out 1 1517  
437 0 0 4 481 1513 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: BoundingVolume::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1666  3 out 1 1517  12 indent_level 1 1510  
438 0 0 7 483 1652 0 0 0 0 
439 0 0 6 486 1669 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1670  3 vol 1 1671  
440 0 0 6 486 1669 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::extend_by
//       Access: Public
//  Description: Increases the size of the volume to include the given
//               point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1670  5 point 1 1673  
441 0 0 6 487 1669 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::around
//       Access: Public
//  Description: Resets the volume to enclose only the points
//               indicated.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1670  5 first 1 1673  4 last 1 1673  
442 0 0 6 488 1510 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1671  3 vol 1 1671  
443 0 0 6 488 1510 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated point.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1671  5 point 1 1673  
444 0 0 6 488 1510 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: GeometricBoundingVolume::contains
//       Access: Public
//  Description: Returns the appropriate set of IntersectionFlags to
//               indicate the amount of intersection with the
//               indicated line segment.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1671  1 a 1 1673  1 b 1 1673  
445 0 0 7 489 1677 0 0 0 1 4 this 3 1671  
446 0 0 4 490 1513 0 0 0 2 4 this 3 1670  3 mat 1 1678  
447 0 0 7 491 1652 0 0 0 0 
448 0 0 7 494 1677 0 0 0 1 4 this 3 1682  
449 0 0 7 495 1677 0 0 0 1 4 this 3 1682  
450 0 0 6 496 1684 0 0 238 ////////////////////////////////////////////////////////////////////
//     Function: FiniteBoundingVolume::get_volume
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1682  
451 0 0 7 497 1652 0 0 0 0 
452 0 0 7 500 1686 1142 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
453 0 0 7 500 1686 1142 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1687  
454 0 0 7 500 1686 1142 0 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1579  1 b 1 1579  1 c 1 1579  
455 0 0 6 501 1686 0 0 0 2 4 this 3 1686  4 copy 1 1687  
456 0 0 4 503 1513 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1686  3 mat 1 1689  
457 0 0 6 504 1579 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1687  
458 0 0 6 505 1579 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1687  
459 0 0 6 506 1579 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1687  
460 0 0 7 507 1691 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1687  1 t 1 1685  
461 0 0 4 508 1513 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1687  3 out 1 1517  
462 0 0 4 509 1513 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1687  3 out 1 1517  12 indent_level 1 1510  
463 0 0 4 510 1513 0 0 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1687  11 destination 1 1692  
464 0 0 4 511 1513 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1686  6 source 1 1694  
465 0 0 4 512 1513 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1687  11 destination 1 1692  
466 0 0 4 513 1513 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1686  6 source 1 1694  
467 0 0 7 515 1696 1156 0 275 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Default Constructor
//       Access: Published
//  Description: Constructs a meaningless degenerate parabola.
//////////////////////////////////////////////////////////////////// 0 
468 0 0 7 515 1696 1156 0 227 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1697  
469 0 0 7 515 1696 1156 0 381 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::Constructor
//       Access: Published
//  Description: Constructs a parabola given the three points of the
//               parametric equation: the acceleration, initial
//               velocity, and start point.
//////////////////////////////////////////////////////////////////// 3 1 a 1 1568  1 b 1 1568  1 c 1 1568  
470 0 0 6 516 1696 0 0 0 2 4 this 3 1696  4 copy 1 1697  
471 0 0 4 518 1513 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::xform
//       Access: Published
//  Description: Transforms the parabola by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  3 mat 1 1699  
472 0 0 6 519 1568 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_a
//       Access: Published
//  Description: Returns the first point of the parabola's parametric
//               equation: the acceleration.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1697  
473 0 0 6 520 1568 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_b
//       Access: Published
//  Description: Returns the second point of the parabola's parametric
//               equation: the initial velocity.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1697  
474 0 0 6 521 1568 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::get_c
//       Access: Published
//  Description: Returns the third point of the parabola's parametric
//               equation: the start point.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1697  
475 0 0 7 522 1704 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::calc_point
//       Access: Published
//  Description: Computes the point on the parabola at time t.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  1 t 1 1703  
476 0 0 4 523 1513 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  3 out 1 1517  
477 0 0 4 524 1513 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1697  3 out 1 1517  12 indent_level 1 1510  
478 0 0 4 525 1513 0 0 643 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram_fixed
//       Access: Public
//  Description: Writes the parabola to the Datagram using add_float32()
//               or add_float64(), depending on the type of floats in
//               the parabola, regardless of the setting of
//               Datagram::set_stdfloat_double().  This is appropriate
//               when you want to write a fixed-width value to the
//               datagram, especially when you are not writing a bam
//               file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  11 destination 1 1692  
479 0 0 4 526 1513 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram_fixed
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_float32()
//               or get_float64().  See write_datagram_fixed().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  6 source 1 1694  
480 0 0 4 527 1513 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::write_datagram
//       Access: Public
//  Description: Writes the parabola to the Datagram using
//               add_stdfloat().  This is appropriate when you want to
//               write the vector using the standard width setting,
//               especially when you are writing a bam file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1697  11 destination 1 1692  
481 0 0 4 528 1513 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: LParabola::read_datagram
//       Access: Public
//  Description: Reads the parabola from the Datagram using get_stdfloat().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1696  6 source 1 1694  
482 0 0 7 532 1705 1184 0 397 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
483 0 0 7 532 1705 1184 0 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1706  1 b 1 1706  1 c 1 1706  
484 0 0 7 532 1705 1184 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1708  
485 0 0 7 532 1705 1184 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1710  5 point 1 1706  
486 0 0 7 532 1705 1184 0 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1685  1 b 1 1685  1 c 1 1685  1 d 1 1685  
487 0 0 7 533 1705 1184 0 0 2 4 this 3 1713  3 mat 1 1524  
488 0 0 7 533 1705 1184 0 0 2 4 this 3 1713  3 mat 1 1689  
489 0 0 6 534 1705 0 0 0 2 4 this 3 1705  3 mat 1 1689  
490 0 0 4 535 1513 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1705  3 mat 1 1689  
491 0 0 7 536 1705 1184 0 0 1 4 this 3 1713  
492 0 0 7 537 1715 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
493 0 0 7 538 1716 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
494 0 0 7 539 1691 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1713  
495 0 0 6 540 1685 0 0 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1713  5 point 1 1706  
496 0 0 7 541 1691 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1713  5 point 1 1706  
497 0 0 4 542 1513 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1705  
498 0 0 6 543 1669 0 0 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1713  18 intersection_point 1 1691  2 p1 1 1706  2 p2 1 1706  
499 0 0 6 544 1669 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1713  4 from 1 1691  5 delta 1 1716  5 other 1 1713  
500 0 0 4 546 1513 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1713  3 out 1 1517  
501 0 0 4 547 1513 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1713  3 out 1 1517  12 indent_level 1 1510  
502 0 0 7 551 1717 1201 0 397 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Creates a default plane.  This plane happens to
//               intersect the origin, perpendicular to the Z axis.
//               It's not clear how useful a default plane is.
//////////////////////////////////////////////////////////////////// 0 
503 0 0 7 551 1717 1201 0 429 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given three counter-clockwise
//               points, as seen from the front of the plane (that is,
//               viewed from the end of the normal vector, looking
//               down).
//////////////////////////////////////////////////////////////////// 3 1 a 1 1718  1 b 1 1718  1 c 1 1718  
504 0 0 7 551 1717 1201 0 223 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1720  
505 0 0 7 551 1717 1201 0 314 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given a surface normal vector and
//               a point within the plane.
//////////////////////////////////////////////////////////////////// 2 6 normal 1 1722  5 point 1 1718  
506 0 0 7 551 1717 1201 0 298 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::Constructor
//       Access: Published
//  Description: Constructs a plane given the four terms of the plane
//               equation.
//////////////////////////////////////////////////////////////////// 4 1 a 1 1703  1 b 1 1703  1 c 1 1703  1 d 1 1703  
507 0 0 7 552 1717 1201 0 0 2 4 this 3 1725  3 mat 1 1506  
508 0 0 7 552 1717 1201 0 0 2 4 this 3 1725  3 mat 1 1699  
509 0 0 6 553 1717 0 0 0 2 4 this 3 1717  3 mat 1 1699  
510 0 0 4 554 1513 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::xform
//       Access: Published
//  Description: Transforms the plane by the indicated matrix.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1717  3 mat 1 1699  
511 0 0 7 555 1717 1201 0 0 1 4 this 3 1725  
512 0 0 7 556 1727 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_reflection_mat
//       Access: Published
//  Description: This computes a transform matrix that reflects the
//               universe to the other side of the plane, as in a
//               mirror.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1725  
513 0 0 7 557 1728 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_normal
//       Access: Published
//  Description: Returns the surface normal of the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1725  
514 0 0 7 558 1704 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::get_point
//       Access: Published
//  Description: Returns an arbitrary point in the plane.  This can be
//               used along with the normal returned by get_normal()
//               to reconstruct the plane.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1725  
515 0 0 6 559 1703 0 0 612 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::dist_to_plane
//       Access: Published
//  Description: Returns the straight-line shortest distance from the
//               point to the plane.  The returned value is positive
//               if the point is in front of the plane (on the side
//               with the normal), or negative in the point is behind
//               the plane (on the opposite side from the normal).
//               It's zero if the point is exactly in the plane.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1725  5 point 1 1718  
516 0 0 7 560 1704 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::project
//       Access: Published
//  Description: Returns the point within the plane nearest to the
//               indicated point in space.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1725  5 point 1 1718  
517 0 0 4 561 1513 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::flip
//       Access: Published
//  Description: Convenience method that flips the plane in-place.
//               This is done by simply flipping the normal vector.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1717  
518 0 0 6 562 1669 0 0 610 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_line
//       Access: Published
//  Description: Returns true if the plane intersects the infinite
//               line passing through points p1 and p2, false if the
//               line is parallel.  The points p1 and p2 are used only
//               to define the Euclidean line; they have no other
//               bearing on the intersection test.  If true, sets
//               intersection_point to the point of intersection.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1725  18 intersection_point 1 1704  2 p1 1 1718  2 p2 1 1718  
519 0 0 6 563 1669 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::intersects_plane
//       Access: Published
//  Description: Returns true if the two planes intersect, false if
//               they do not.  If they do intersect, then from and
//               delta are filled in with the parametric
//               representation of the line of intersection: that is,
//               from is a point on that line, and delta is a vector
//               showing the direction of the line.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1725  4 from 1 1704  5 delta 1 1728  5 other 1 1725  
520 0 0 4 565 1513 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 1725  3 out 1 1517  
521 0 0 4 566 1513 0 0 212 ////////////////////////////////////////////////////////////////////
//     Function: LPlane::write
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 1725  3 out 1 1517  12 indent_level 1 1510  
522 0 0 7 573 1729 1211 0 255 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs an empty box object.
//////////////////////////////////////////////////////////////////// 0 
523 0 0 7 573 1729 1211 0 257 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::Constructor
//       Access: Published
//  Description: Constructs a specific box object.
//////////////////////////////////////////////////////////////////// 2 3 min 1 1673  3 max 1 1673  
524 0 0 4 574 1513 0 0 0 2 4 this 3 1729  4 size 1 1730  
525 0 0 6 577 1510 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1731  
526 0 0 7 578 1677 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_point
//       Access: Published
//  Description: Returns the nth vertex of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1731  1 n 1 1510  
527 0 0 6 579 1510 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a rectangular solid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1731  
528 0 0 7 580 1733 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingBox::get_plane
//       Access: Published
//  Description: Returns the nth face of the rectangular solid.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1731  1 n 1 1510  
529 0 0 7 581 1652 0 0 0 0 
530 0 0 7 584 1734 1219 0 200 ////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
531 0 0 4 585 1513 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1734  
532 0 0 4 585 1513 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1734  1 l 1 1685  1 r 1 1685  1 t 1 1685  1 b 1 1685  
533 0 0 4 586 1513 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1734  5 fnear 1 1685  4 ffar 1 1685  
534 0 0 4 586 1513 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1734  5 fnear 1 1685  4 ffar 1 1685  1 l 1 1685  1 r 1 1685  1 t 1 1685  1 b 1 1685  
535 0 0 4 587 1513 0 0 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1734  4 xfov 1 1685  6 aspect 1 1685  5 fnear 1 1685  4 ffar 1 1685  
536 0 0 4 588 1513 0 0 0 5 4 this 3 1734  4 yfov 1 1685  6 aspect 1 1685  5 fnear 1 1685  4 ffar 1 1685  
537 0 0 4 589 1513 0 0 0 5 4 this 3 1734  4 xfov 1 1685  4 yfov 1 1685  5 fnear 1 1685  4 ffar 1 1685  
538 0 0 7 593 1735 1227 0 200 ////////////////////////////////////////////////////////////////////
//     Function: Constructor
//       Access:
//  Description:
//////////////////////////////////////////////////////////////////// 0 
539 0 0 4 594 1513 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 1 4 this 3 1735  
540 0 0 4 594 1513 0 0 249 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Sets up a two-dimensional orthographic frustum
//////////////////////////////////////////////////////////////////// 5 4 this 3 1735  1 l 1 1703  1 r 1 1703  1 t 1 1703  1 b 1 1703  
541 0 0 4 595 1513 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 3 4 this 3 1735  5 fnear 1 1703  4 ffar 1 1703  
542 0 0 4 595 1513 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: make_ortho_2D
//       Access:
//  Description: Behaves like gluOrtho
//////////////////////////////////////////////////////////////////// 7 4 this 3 1735  5 fnear 1 1703  4 ffar 1 1703  1 l 1 1703  1 r 1 1703  1 t 1 1703  1 b 1 1703  
543 0 0 4 596 1513 0 0 578 ////////////////////////////////////////////////////////////////////
//     Function: make_perspective
//       Access:
//  Description: Behaves like gluPerspective (Aspect = width/height,
//               Yfov in degrees)
//       aspect
//   +------------+
//   |            |
// 1 |            | yfov
//   |            |
//   +------------+
//
//     -------+------
//      \     |     /
//       \    |    /
//        \   |   /
//         \  |  /
//          \ | /
//           \|/
//            W yfov
//
//////////////////////////////////////////////////////////////////// 5 4 this 3 1735  4 xfov 1 1703  6 aspect 1 1703  5 fnear 1 1703  4 ffar 1 1703  
544 0 0 4 597 1513 0 0 0 5 4 this 3 1735  4 yfov 1 1703  6 aspect 1 1703  5 fnear 1 1703  4 ffar 1 1703  
545 0 0 4 598 1513 0 0 0 5 4 this 3 1735  4 xfov 1 1703  4 yfov 1 1703  5 fnear 1 1703  4 ffar 1 1703  
546 0 0 7 606 1739 1234 0 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 7 frustum 1 1736  8 is_ortho 1 1669  2 cs 1 1738  
547 0 0 7 606 1739 1234 0 231 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 8 3 fll 1 1673  3 flr 1 1673  3 fur 1 1673  3 ful 1 1673  3 nll 1 1673  3 nlr 1 1673  3 nur 1 1673  3 nul 1 1673  
548 0 0 6 607 1510 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_points
//       Access: Published
//  Description: Returns 8: the number of vertices of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1740  
549 0 0 7 608 1677 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_point
//       Access: Published
//  Description: Returns the nth vertex of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1740  1 n 1 1510  
550 0 0 6 609 1510 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_num_planes
//       Access: Published
//  Description: Returns 6: the number of faces of a hexahedron.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1740  
551 0 0 7 610 1733 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: BoundingHexahedron::get_plane
//       Access: Published
//  Description: Returns the nth face of the hexahedron.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1740  1 n 1 1510  
552 0 0 7 611 1652 0 0 0 0 
553 0 0 7 614 1742 1242 0 225 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 1 a 1 1673  1 b 1 1673  
554 0 0 4 615 1513 0 0 0 2 4 this 3 1742  4 size 1 1730  
555 0 0 6 618 1673 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_a
//       Access: Published
//  Description: Returns the first point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1743  
556 0 0 7 619 1677 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: BoundingLine::get_point_b
//       Access: Published
//  Description: Returns the second point that defines the line.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1743  
557 0 0 7 620 1652 0 0 0 0 
558 0 0 7 623 1745 1249 0 305 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Default Constructor
//       Access: Published
//  Description: Constructs an empty "plane" that has no
//               intersections.
//////////////////////////////////////////////////////////////////// 0 
559 0 0 7 623 1745 1249 0 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 5 plane 1 1746  
560 0 0 4 624 1513 0 0 0 2 4 this 3 1745  4 size 1 1730  
561 0 0 6 627 1746 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: BoundingPlane::get_plane
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1748  
562 0 0 7 628 1652 0 0 0 0 
563 0 0 7 631 1750 1257 0 254 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs an empty sphere.
//////////////////////////////////////////////////////////////////// 0 
564 0 0 7 631 1750 1257 0 256 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::Constructor
//       Access: Published
//  Description: Constructs a specific sphere.
//////////////////////////////////////////////////////////////////// 2 6 center 1 1673  6 radius 1 1684  
565 0 0 4 632 1513 0 0 0 2 4 this 3 1750  4 size 1 1730  
566 0 0 7 635 1677 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_center
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1751  
567 0 0 6 636 1684 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: BoundingSphere::get_radius
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 1751  
568 0 0 7 637 1652 0 0 0 0 
569 0 0 7 640 1753 1267 0 272 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty intersection.
//////////////////////////////////////////////////////////////////// 0 
570 0 0 4 641 1513 0 0 0 2 4 this 3 1753  4 size 1 1730  
571 0 0 6 644 1510 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the intersection.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1754  
572 0 0 7 645 1671 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the intersection.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1754  1 n 1 1510  
573 0 0 4 646 1513 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1753  
574 0 0 4 647 1513 0 0 693 ////////////////////////////////////////////////////////////////////
//     Function: IntersectionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1753  9 component 1 1671  
575 0 0 7 648 1652 0 0 0 0 
576 0 0 7 653 1757 1272 0 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1756  
577 0 0 6 654 1756 0 0 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1757  
578 0 0 7 658 1758 1275 0 227 ////////////////////////////////////////////////////////////////////
//     Function: OmniBoundingVolume::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
579 0 0 7 659 1652 0 0 0 0 
580 0 0 7 662 1759 1286 0 258 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::Constructor
//       Access: Published
//  Description: Constructs an empty union.
//////////////////////////////////////////////////////////////////// 0 
581 0 0 4 663 1513 0 0 0 2 4 this 3 1759  4 size 1 1730  
582 0 0 6 666 1510 0 0 285 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_num_components
//       Access: Published
//  Description: Returns the number of components in the union.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1760  
583 0 0 7 667 1671 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::get_component
//       Access: Published
//  Description: Returns the nth component in the union.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1760  1 n 1 1510  
584 0 0 4 668 1513 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::clear_components
//       Access: Published
//  Description: Removes all components from the volume.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1759  
585 0 0 4 669 1513 0 0 686 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::add_component
//       Access: Published
//  Description: Adds a new component to the volume.  This does not
//               necessarily increase the total number of components
//               by one, and you may or may not be able to find this
//               component in the volume by a subsequent call to
//               get_component(); certain optimizations may prevent
//               the component from being added, or have other
//               unexpected effects on the total set of components.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1759  9 component 1 1671  
586 0 0 4 670 1513 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: UnionBoundingVolume::filter_intersection
//       Access: Published
//  Description: Removes from the union any components that have no
//               intersection with the indicated volume.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1759  6 volume 1 1666  
587 0 0 7 671 1652 0 0 0 0 
588 0 0 7 674 1764 1294 0 225 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Copy Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1762  
589 0 0 7 674 1764 1294 0 331 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::Constructor
//       Access: Public
//  Description: If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 1 4 seed 1 1756  
590 0 0 6 675 1764 0 0 0 2 4 this 3 1764  4 copy 1 1762  
591 0 0 6 676 1510 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_int
//       Access: Public
//  Description: Returns a random integer in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  5 range 1 1510  
592 0 0 6 677 1703 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real
//       Access: Public
//  Description: Returns a random double in the range [0, range).
//////////////////////////////////////////////////////////////////// 2 4 this 3 1764  5 range 1 1703  
593 0 0 6 678 1703 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::random_real_unit
//       Access: Public
//  Description: Returns a random double in the range [-0.5, 0.5).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1764  
594 0 0 6 679 1756 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_next_seed
//       Access: Public, Static
//  Description: Returns a random seed value for the next global
//               Randomizer object.
//////////////////////////////////////////////////////////////////// 0 
595 0 0 6 680 1756 0 0 363 ////////////////////////////////////////////////////////////////////
//     Function: Randomizer::get_seed
//       Access: Public
//  Description: Returns a unique seed value based on the seed value
//               passed to this Randomizer object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1764  
596 0 0 6 683 1756 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise::get_seed
//       Access: Published
//  Description: Returns a unique seed value based on the seed value
//               passed to this PerlinNoise object (and on its current
//               state).
//////////////////////////////////////////////////////////////////// 1 4 this 3 1765  
597 0 0 7 686 1766 1302 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
598 0 0 7 686 1766 1302 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1767  
599 0 0 7 686 1766 1302 0 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 4 2 sx 1 1703  2 sy 1 1703  10 table_size 1 1510  4 seed 1 1756  
600 0 0 6 687 1766 0 0 0 2 4 this 3 1766  4 copy 1 1767  
601 0 0 4 688 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1766  5 scale 1 1535  
602 0 0 4 688 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1766  5 scale 1 1546  
603 0 0 4 688 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1766  5 scale 1 1703  
604 0 0 4 688 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1766  2 sx 1 1703  2 sy 1 1703  
605 0 0 6 689 1703 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  5 value 1 1535  
606 0 0 6 689 1685 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1767  5 value 1 1546  
607 0 0 6 689 1703 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1767  1 x 1 1703  1 y 1 1703  
608 0 0 6 690 1703 0 0 0 2 4 this 3 1767  5 value 1 1535  
609 0 0 6 690 1685 0 0 0 2 4 this 3 1767  5 value 1 1546  
610 0 0 6 690 1703 0 0 0 3 4 this 3 1767  1 x 1 1703  1 y 1 1703  
611 0 0 7 693 1769 1308 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Default Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.  Uses a default scale (noise frequency),
//               table size, and seed.
//////////////////////////////////////////////////////////////////// 0 
612 0 0 7 693 1769 1308 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Makes an exact copy of the existing PerlinNoise
//               object, including its random seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1770  
613 0 0 7 693 1769 1308 0 428 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::Constructor
//       Access: Published
//  Description: Randomizes the tables to make a unique noise
//               function.
//
//               If seed is nonzero, it is used to define the tables;
//               if it is zero a random seed is generated.
//////////////////////////////////////////////////////////////////// 5 2 sx 1 1703  2 sy 1 1703  2 sz 1 1703  10 table_size 1 1510  4 seed 1 1756  
614 0 0 6 694 1769 0 0 0 2 4 this 3 1769  4 copy 1 1770  
615 0 0 4 695 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1769  5 scale 1 1568  
616 0 0 4 695 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1769  5 scale 1 1579  
617 0 0 4 695 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1769  5 scale 1 1703  
618 0 0 4 695 1513 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::set_scale
//       Access: Published
//  Description: Changes the scale (frequency) of the noise.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1769  2 sx 1 1703  2 sy 1 1703  2 sz 1 1703  
619 0 0 6 696 1703 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 value 1 1568  
620 0 0 6 696 1685 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1770  5 value 1 1579  
621 0 0 6 696 1703 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: PerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1770  1 x 1 1703  1 y 1 1703  1 z 1 1703  
622 0 0 6 697 1703 0 0 0 2 4 this 3 1770  5 value 1 1568  
623 0 0 6 697 1685 0 0 0 2 4 this 3 1770  5 value 1 1579  
624 0 0 6 697 1703 0 0 0 4 4 this 3 1770  1 x 1 1703  1 y 1 1703  1 z 1 1703  
625 0 0 7 757 1772 1316 0 381 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise2 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
626 0 0 7 757 1772 1316 0 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise2 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1773  
627 0 0 7 757 1772 1316 0 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise2 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 7 2 sx 1 1703  2 sy 1 1703  10 num_levels 1 1510  12 scale_factor 1 1703  9 amp_scale 1 1703  10 table_size 1 1510  4 seed 1 1756  
628 0 0 6 758 1772 0 0 0 2 4 this 3 1772  4 copy 1 1773  
629 0 0 4 759 1513 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise2 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1772  5 level 1 1767  3 amp 1 1703  
630 0 0 4 760 1513 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1772  
631 0 0 6 761 1703 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1772  5 value 1 1535  
632 0 0 6 761 1685 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1772  5 value 1 1546  
633 0 0 6 761 1703 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise2::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1772  1 x 1 1703  1 y 1 1703  
634 0 0 6 762 1703 0 0 0 2 4 this 3 1772  5 value 1 1535  
635 0 0 6 762 1685 0 0 0 2 4 this 3 1772  5 value 1 1546  
636 0 0 6 762 1703 0 0 0 3 4 this 3 1772  1 x 1 1703  1 y 1 1703  
637 0 0 7 765 1775 1323 0 381 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Default Constructor
//       Access: Published
//  Description: Creates a StackedPerlinNoise3 object with no levels.
//               You should call add_level() to add each level by
//               hand.
//////////////////////////////////////////////////////////////////// 0 
638 0 0 7 765 1775 1323 0 368 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Copy Constructor
//       Access: Published
//  Description: Creates an exact duplicate of the existing
//               StackedPerlinNoise3 object, including the random
//               seed.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 1776  
639 0 0 7 765 1775 1323 0 617 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::Constructor
//       Access: Published
//  Description: Creates num_levels nested PerlinNoise3 objects.  Each
//               stacked Perlin object will have a scale of 1 /
//               scale_factor times the previous object (so that it is
//               higher-frequency, if scale_factor > 1), and an
//               amplitude of amp_scale times the previous object (so
//               that it is less important, if amp_scale < 1).
//////////////////////////////////////////////////////////////////// 8 2 sx 1 1703  2 sy 1 1703  2 sz 1 1703  10 num_levels 1 1510  12 scale_factor 1 1703  9 amp_scale 1 1703  10 table_size 1 1510  4 seed 1 1756  
640 0 0 6 766 1775 0 0 0 2 4 this 3 1775  4 copy 1 1776  
641 0 0 4 767 1513 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::add_level
//       Access: Published
//  Description: Adds an arbitrary PerlinNoise3 object, and an
//               associated amplitude, to the stack.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1775  5 level 1 1770  3 amp 1 1703  
642 0 0 4 768 1513 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::clear
//       Access: Published
//  Description: Removes all levels from the stack.  You must call
//               add_level() again to restore them.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1775  
643 0 0 6 769 1703 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1775  5 value 1 1568  
644 0 0 6 769 1685 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1775  5 value 1 1579  
645 0 0 6 769 1703 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: StackedPerlinNoise3::noise
//       Access: Published
//  Description: Returns the noise function of the three inputs.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1775  1 x 1 1703  1 y 1 1703  1 z 1 1703  
646 0 0 6 770 1703 0 0 0 2 4 this 3 1775  5 value 1 1568  
647 0 0 6 770 1685 0 0 0 2 4 this 3 1775  5 value 1 1579  
648 0 0 6 770 1703 0 0 0 4 4 this 3 1775  1 x 1 1703  1 y 1 1703  1 z 1 1703  
649 0 0 7 773 1778 1339 0 225 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
650 0 0 4 774 1513 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
651 0 0 6 775 1510 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 point 1 1779  
652 0 0 6 775 1510 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 3 4 this 3 1778  1 x 1 1703  1 y 1 1703  
653 0 0 6 776 1510 0 0 545 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1782  
654 0 0 6 777 1779 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1782  1 n 1 1510  
655 0 0 4 778 1513 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::clear_polygon
//       Access: Published
//  Description: Removes the current polygon definition (and its set
//               of holes), but does not clear the vertex pool.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
656 0 0 4 779 1513 0 0 645 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_polygon_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the polygon.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.  In particular, do not repeat the first
//               vertex at the end.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 index 1 1510  
657 0 0 6 780 1669 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::is_left_winding
//       Access: Published
//  Description: Returns true if the polygon vertices are listed in
//               counterclockwise order, or false if they appear to be
//               listed in clockwise order.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1782  
658 0 0 4 781 1513 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::begin_hole
//       Access: Published
//  Description: Finishes the previous hole, if any, and prepares to
//               add a new hole.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
659 0 0 4 782 1513 0 0 571 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::add_hole_vertex
//       Access: Published
//  Description: Adds the next consecutive vertex of the current hole.
//               This vertex should index into the vertex pool
//               established by repeated calls to add_vertex().
//
//               The vertices may be listed in either clockwise or
//               counterclockwise order.  Vertices should not be
//               repeated.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1778  5 index 1 1510  
660 0 0 4 783 1513 0 0 439 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1778  
661 0 0 6 784 1510 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_num_triangles
//       Access: Published
//  Description: Returns the number of triangles generated by the
//               previous call to triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1782  
662 0 0 6 785 1510 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v0
//       Access: Published
//  Description: Returns vertex 0 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1782  1 n 1 1510  
663 0 0 6 786 1510 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v1
//       Access: Published
//  Description: Returns vertex 1 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1782  1 n 1 1510  
664 0 0 6 787 1510 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator::get_triangle_v2
//       Access: Published
//  Description: Returns vertex 2 of the nth triangle generated by the
//               previous call to triangulate().
//
//               This is a zero-based index into the vertices added by
//               repeated calls to add_vertex().
//////////////////////////////////////////////////////////////////// 2 4 this 3 1782  1 n 1 1510  
665 0 0 7 790 1784 1347 0 226 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
666 0 0 4 791 1513 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::clear
//       Access: Published
//  Description: Removes all vertices and polygon specifications from
//               the Triangulator, and prepares it to start over.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1784  
667 0 0 6 792 1510 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1784  5 point 1 1718  
668 0 0 6 792 1510 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::add_vertex
//       Access: Published
//  Description: Adds a new vertex to the vertex pool.  Returns the
//               vertex index number.
//////////////////////////////////////////////////////////////////// 4 4 this 3 1784  1 x 1 1703  1 y 1 1703  1 z 1 1703  
669 0 0 6 793 1510 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_num_vertices
//       Access: Published
//  Description: Returns the number of vertices in the pool.  Note
//               that the Triangulator might append new vertices, in
//               addition to those added by the user, if any of the
//               polygon is self-intersecting, or if any of the holes
//               intersect some part of the polygon edges.
//////////////////////////////////////////////////////////////////// 1 4 this 3 1785  
670 0 0 6 794 1718 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_vertex
//       Access: Published
//  Description: Returns the nth vertex.
//////////////////////////////////////////////////////////////////// 2 4 this 3 1785  1 n 1 1510  
671 0 0 4 795 1513 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::triangulate
//       Access: Published
//  Description: Does the work of triangulating the specified polygon.
//               After this call, you may retrieve the new triangles
//               one at a time by iterating through
//               get_triangle_v0/1/2().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1784  
672 0 0 6 796 1725 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: Triangulator3::get_plane
//       Access: Published
//  Description: Returns the plane of the polygon.  This is only
//               available after calling triangulate().
//////////////////////////////////////////////////////////////////// 1 4 this 3 1785  
673 0 0 4 650 1513 0 0 0 3 3 mat 1 1787  3 fwd 1 1722  2 cs 1 1738  
674 0 0 4 650 1513 0 0 0 4 3 mat 1 1787  3 fwd 1 1722  2 up 1 1722  2 cs 1 1738  
675 0 0 4 650 1513 0 0 0 3 3 mat 1 1788  3 fwd 1 1710  2 cs 1 1738  
676 0 0 4 650 1513 0 0 0 4 3 mat 1 1788  3 fwd 1 1710  2 up 1 1710  2 cs 1 1738  
677 0 0 4 650 1513 0 0 0 3 3 mat 1 1727  3 fwd 1 1722  2 cs 1 1738  
678 0 0 4 650 1513 0 0 0 4 3 mat 1 1727  3 fwd 1 1722  2 up 1 1722  2 cs 1 1738  
679 0 0 4 650 1513 0 0 0 3 3 mat 1 1715  3 fwd 1 1710  2 cs 1 1738  
680 0 0 4 650 1513 0 0 0 4 3 mat 1 1715  3 fwd 1 1710  2 up 1 1710  2 cs 1 1738  
681 0 0 4 650 1513 0 0 0 3 4 quat 1 1789  3 fwd 1 1722  2 cs 1 1738  
682 0 0 4 650 1513 0 0 0 4 4 quat 1 1789  3 fwd 1 1722  2 up 1 1722  2 cs 1 1738  
683 0 0 4 650 1513 0 0 0 3 4 quat 1 1791  3 fwd 1 1710  2 cs 1 1738  
684 0 0 4 650 1513 0 0 0 4 4 quat 1 1791  3 fwd 1 1710  2 up 1 1710  2 cs 1 1738  
685 0 0 4 651 1513 0 0 0 3 3 mat 1 1787  3 fwd 1 1722  2 cs 1 1738  
686 0 0 4 651 1513 0 0 0 4 3 mat 1 1787  3 fwd 1 1722  2 up 1 1722  2 cs 1 1738  
687 0 0 4 651 1513 0 0 0 3 3 mat 1 1788  3 fwd 1 1710  2 cs 1 1738  
688 0 0 4 651 1513 0 0 0 4 3 mat 1 1788  3 fwd 1 1710  2 up 1 1710  2 cs 1 1738  
689 0 0 4 651 1513 0 0 0 3 3 mat 1 1727  3 fwd 1 1722  2 cs 1 1738  
690 0 0 4 651 1513 0 0 0 4 3 mat 1 1727  3 fwd 1 1722  2 up 1 1722  2 cs 1 1738  
691 0 0 4 651 1513 0 0 0 3 3 mat 1 1715  3 fwd 1 1710  2 cs 1 1738  
692 0 0 4 651 1513 0 0 0 4 3 mat 1 1715  3 fwd 1 1710  2 up 1 1710  2 cs 1 1738  
693 0 0 4 651 1513 0 0 0 3 4 quat 1 1789  3 fwd 1 1722  2 cs 1 1738  
694 0 0 4 651 1513 0 0 0 4 4 quat 1 1789  3 fwd 1 1722  2 up 1 1722  2 cs 1 1738  
695 0 0 4 651 1513 0 0 0 3 4 quat 1 1791  3 fwd 1 1710  2 cs 1 1738  
696 0 0 4 651 1513 0 0 0 4 4 quat 1 1791  3 fwd 1 1710  2 up 1 1710  2 cs 1 1738  
697 0 0 4 755 1513 0 0 0 3 3 mat 1 1787  1 a 1 1722  1 b 1 1722  
698 0 0 4 755 1513 0 0 0 3 3 mat 1 1788  1 a 1 1710  1 b 1 1710  
699 0 0 4 755 1513 0 0 0 3 3 mat 1 1727  1 a 1 1722  1 b 1 1722  
700 0 0 4 755 1513 0 0 0 3 3 mat 1 1715  1 a 1 1710  1 b 1 1710  
445
1348 32 ConstPointerToArray< LMatrix3d > 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 704 714 0 9 705 706 707 708 709 710 711 712 713 0 0 1 0 1349 0 0 0 0 0

1349 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 703 0 0 0 0 1 0 1350 0 0 0 0 0

1350 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 701 702 0 0 1 0 1351 0 0 0 0 0

1351 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

1352 32 ConstPointerToArray< LMatrix3f > 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 718 728 0 9 719 720 721 722 723 724 725 726 727 0 0 1 0 1353 0 0 0 0 0

1353 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 717 0 0 0 0 1 0 1354 0 0 0 0 0

1354 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 715 716 0 0 1 0 1351 0 0 0 0 0

1355 33 ConstPointerToArray< LVecBase2d > 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 732 742 0 9 733 734 735 736 737 738 739 740 741 0 0 1 0 1356 0 0 0 0 0

1356 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 731 0 0 0 0 1 0 1357 0 0 0 0 0

1357 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 729 730 0 0 1 0 1351 0 0 0 0 0

1358 33 ConstPointerToArray< LVecBase2f > 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 746 756 0 9 747 748 749 750 751 752 753 754 755 0 0 1 0 1359 0 0 0 0 0

1359 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 745 0 0 0 0 1 0 1360 0 0 0 0 0

1360 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 743 744 0 0 1 0 1351 0 0 0 0 0

1361 33 ConstPointerToArray< LVecBase2i > 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 760 770 0 9 761 762 763 764 765 766 767 768 769 0 0 1 0 1362 0 0 0 0 0

1362 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 759 0 0 0 0 1 0 1363 0 0 0 0 0

1363 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 757 758 0 0 1 0 1351 0 0 0 0 0

1364 33 ConstPointerToArray< LVecBase3d > 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 774 784 0 9 775 776 777 778 779 780 781 782 783 0 0 1 0 1365 0 0 0 0 0

1365 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 773 0 0 0 0 1 0 1366 0 0 0 0 0

1366 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 771 772 0 0 1 0 1351 0 0 0 0 0

1367 33 ConstPointerToArray< LVecBase3f > 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 788 798 0 9 789 790 791 792 793 794 795 796 797 0 0 1 0 1368 0 0 0 0 0

1368 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 787 0 0 0 0 1 0 1369 0 0 0 0 0

1369 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 785 786 0 0 1 0 1351 0 0 0 0 0

1370 33 ConstPointerToArray< LVecBase3i > 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 802 812 0 9 803 804 805 806 807 808 809 810 811 0 0 1 0 1371 0 0 0 0 0

1371 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 801 0 0 0 0 1 0 1372 0 0 0 0 0

1372 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 799 800 0 0 1 0 1351 0 0 0 0 0

1373 41 ConstPointerToArray< UnalignedLMatrix4d > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 816 826 0 9 817 818 819 820 821 822 823 824 825 0 0 1 0 1374 0 0 0 0 0

1374 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 815 0 0 0 0 1 0 1375 0 0 0 0 0

1375 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 813 814 0 0 1 0 1351 0 0 0 0 0

1376 41 ConstPointerToArray< UnalignedLMatrix4f > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 830 840 0 9 831 832 833 834 835 836 837 838 839 0 0 1 0 1377 0 0 0 0 0

1377 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 829 0 0 0 0 1 0 1378 0 0 0 0 0

1378 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 827 828 0 0 1 0 1351 0 0 0 0 0

1379 42 ConstPointerToArray< UnalignedLVecBase4d > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 844 854 0 9 845 846 847 848 849 850 851 852 853 0 0 1 0 1380 0 0 0 0 0

1380 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 843 0 0 0 0 1 0 1381 0 0 0 0 0

1381 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 841 842 0 0 1 0 1351 0 0 0 0 0

1382 42 ConstPointerToArray< UnalignedLVecBase4f > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 858 868 0 9 859 860 861 862 863 864 865 866 867 0 0 1 0 1383 0 0 0 0 0

1383 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 857 0 0 0 0 1 0 1384 0 0 0 0 0

1384 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 855 856 0 0 1 0 1351 0 0 0 0 0

1385 42 ConstPointerToArray< UnalignedLVecBase4i > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 872 882 0 9 873 874 875 876 877 878 879 880 881 0 0 1 0 1386 0 0 0 0 0

1386 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 871 0 0 0 0 1 0 1387 0 0 0 0 0

1387 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 869 870 0 0 1 0 1351 0 0 0 0 0

1388 27 PointerToArray< LMatrix3d > 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 883 900 0 16 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 0 0 1 0 1349 0 0 0 0 0

1389 27 PointerToArray< LMatrix3f > 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 901 918 0 16 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 0 0 1 0 1353 0 0 0 0 0

1390 28 PointerToArray< LVecBase2d > 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 919 936 0 16 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 0 0 1 0 1356 0 0 0 0 0

1391 28 PointerToArray< LVecBase2f > 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 937 954 0 16 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 0 0 1 0 1359 0 0 0 0 0

1392 28 PointerToArray< LVecBase2i > 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 955 972 0 16 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 0 0 1 0 1362 0 0 0 0 0

1393 28 PointerToArray< LVecBase3d > 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 973 990 0 16 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 0 0 1 0 1365 0 0 0 0 0

1394 28 PointerToArray< LVecBase3f > 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 991 1008 0 16 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 0 0 1 0 1368 0 0 0 0 0

1395 28 PointerToArray< LVecBase3i > 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1009 1026 0 16 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 0 0 1 0 1371 0 0 0 0 0

1396 36 PointerToArray< UnalignedLMatrix4d > 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1027 1044 0 16 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 0 0 1 0 1374 0 0 0 0 0

1397 36 PointerToArray< UnalignedLMatrix4f > 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1045 1062 0 16 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 0 0 1 0 1377 0 0 0 0 0

1398 37 PointerToArray< UnalignedLVecBase4d > 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1063 1080 0 16 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 0 0 1 0 1380 0 0 0 0 0

1399 37 PointerToArray< UnalignedLVecBase4f > 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1081 1098 0 16 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 0 0 1 0 1383 0 0 0 0 0

1400 37 PointerToArray< UnalignedLVecBase4i > 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1099 1116 0 16 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 0 0 1 0 1386 0 0 0 0 0

1401 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1127 0 10 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 0 0 1 0 1402 0 0 0 2 1403 1404 596
////////////////////////////////////////////////////////////////////
//       Class : BoundingVolume
// Description : This is an abstract class for any volume in any sense
//               which can be said to define the locality of reference
//               of a node in a graph, along with all of its
//               descendants.  It is not necessarily a geometric
//               volume (although see GeometricBoundingVolume); this
//               is simply an abstract interface for bounds of any
//               sort.
////////////////////////////////////////////////////////////////////

1402 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

1403 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1401 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 65
// If no bits are set, it is known that there is no intersection.
0 11 IF_possible 27 BoundingVolume::IF_possible 56
// IF_possible is set if there might be an intersection.
1 7 IF_some 23 BoundingVolume::IF_some 105
// IF_some is set if there is definitely an intersection.  In this
// case, IF_possible will also be set.
2 6 IF_all 22 BoundingVolume::IF_all 72
// When IF_all is set, both IF_possible and IF_some will also be
// set.
4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 107
// IF_dont_understand is set if the particular volume/volume
// intersection test has not been implemented.
8 0 77
// The contains() functions return the union of one or more of these
// bits.

1404 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1401 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1405 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1134 0 6 1128 1129 1130 1131 1132 1133 0 0 1 0 1401 0 0 0 0 380
////////////////////////////////////////////////////////////////////
//       Class : GeometricBoundingVolume
// Description : This is another abstract class, for a general class
//               of bounding volumes that actually enclose points in
//               3-d space, such as BSP's and bounding spheres.
////////////////////////////////////////////////////////////////////

1406 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1139 0 4 1135 1136 1137 1138 0 0 1 0 1405 0 0 0 0 378
////////////////////////////////////////////////////////////////////
//       Class : FiniteBoundingVolume
// Description : A special kind of GeometricBoundingVolume that is
//               known to be finite.  It is possible to query this
//               kind of volume for its minimum and maximum extents.
////////////////////////////////////////////////////////////////////

1407 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1140 1142 0 12 1141 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 0 0 0 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1408 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1154 1156 0 12 1155 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 0 0 0 0 0 433
////////////////////////////////////////////////////////////////////
//       Class : LParabola
// Description : An abstract mathematical description of a parabola,
//               particularly useful for describing arcs of
//               projectiles.
//
//               The parabolic equation, given parametrically here, is
//               P = At^2 + Bt + C.
////////////////////////////////////////////////////////////////////

1409 9 LParabola 0 2105345 9 LParabola 9 LParabola 0 0 1407 0 0 0 0 0 0 0 0 0 0

1410 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1168 1184 0 15 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 0 0 1 0 1411 0 0 0 0 302
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1411 10 LVecBase4f 0 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1412 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1185 1201 0 15 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 0 0 1 0 1413 0 0 0 0 302
////////////////////////////////////////////////////////////////////
//       Class : LPlane
// Description : An abstract mathematical description of a plane.  A
//               plane is defined by the equation Ax + By + Cz + D = 0.
////////////////////////////////////////////////////////////////////

1413 10 LVecBase4d 0 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1414 6 LPlane 0 2105345 6 LPlane 6 LPlane 0 0 1410 0 0 0 0 0 0 0 0 0 0

1415 6 PlaneF 0 2105345 6 PlaneF 6 PlaneF 0 0 1410 0 0 0 0 0 0 0 0 0 0

1416 6 PlaneD 0 2105345 6 PlaneD 6 PlaneD 0 0 1412 0 0 0 0 0 0 0 0 0 0

1417 5 Plane 0 2105345 5 Plane 5 Plane 0 0 1410 0 0 0 0 0 0 0 0 0 0

1418 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1202 1211 0 8 1203 1204 1205 1206 1207 1208 1209 1210 2 1793 1794 0 1 0 1406 0 0 0 0 416
////////////////////////////////////////////////////////////////////
//       Class : BoundingBox
// Description : An axis-aligned bounding box; that is, a minimum and
//               maximum coordinate triple.
//
//               This box is always axis-aligned.  If you need a more
//               general bounding box, try BoundingHexahedron.
////////////////////////////////////////////////////////////////////

1419 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1212 1219 0 6 1213 1214 1215 1216 1217 1218 0 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1420 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1220 1227 0 6 1221 1222 1223 1224 1225 1226 0 0 0 0 0 180
////////////////////////////////////////////////////////////////////
//       Class : LFrustum
// Description :
////////////////////////////////////////////////////////////////////

1421 8 LFrustum 0 2105345 8 LFrustum 8 LFrustum 0 0 1419 0 0 0 0 0 0 0 0 0 0

1422 8 FrustumF 0 2105345 8 FrustumF 8 FrustumF 0 0 1419 0 0 0 0 0 0 0 0 0 0

1423 8 FrustumD 0 2105345 8 FrustumD 8 FrustumD 0 0 1420 0 0 0 0 0 0 0 0 0 0

1424 7 Frustum 0 2105345 7 Frustum 7 Frustum 0 0 1419 0 0 0 0 0 0 0 0 0 0

1425 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1228 1234 0 5 1229 1230 1231 1232 1233 2 1795 1796 0 1 0 1406 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

1426 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1235 1242 0 6 1236 1237 1238 1239 1240 1241 0 0 1 0 1405 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : BoundingLine
// Description : This funny bounding volume is an infinite line with
//               no thickness and extending to infinity in both
//               directions.
//
//               Note that it *always* extends in both directions,
//               despite the fact that you specify two points to the
//               constructor.  These are not endpoints, they are two
//               arbitrary points on the line.
////////////////////////////////////////////////////////////////////

1427 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1243 1249 0 5 1244 1245 1246 1247 1248 0 0 1 0 1405 0 0 0 0 482
////////////////////////////////////////////////////////////////////
//       Class : BoundingPlane
// Description : This funny bounding volume is an infinite plane that
//               divides space into two regions: the part behind the
//               normal, which is "inside" the bounding volume, and
//               the part in front of the normal, which is "outside"
//               the bounding volume.
////////////////////////////////////////////////////////////////////

1428 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1250 1257 0 6 1251 1252 1253 1254 1255 1256 0 0 1 0 1406 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : BoundingSphere
// Description : This defines a bounding sphere, consisting of a
//               center and a radius.  It is always a sphere, and
//               never an ellipsoid or other quadric.
////////////////////////////////////////////////////////////////////

1429 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1258 1267 0 8 1259 1260 1261 1262 1263 1264 1265 1266 1 1797 0 1 0 1405 0 0 0 0 479
////////////////////////////////////////////////////////////////////
//       Class : IntersectionBoundingVolume
// Description : This special bounding volume is the intersection of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within an
//               IntersectionBoundingVolume if it is within all of its
//               component bounding volumes.
////////////////////////////////////////////////////////////////////

1430 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1270 1272 0 1 1271 0 0 0 0 1 1431 0

1431 0 0 794624 10 Mersenne:: 0 1430 0 0 0 0 0 0 0 0 0 1 9 max_value 19 Mersenne::max_value 0
2147483647 0 0

1432 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1273 1275 0 1 1274 0 0 1 0 1405 0 0 0 0 282
////////////////////////////////////////////////////////////////////
//       Class : OmniBoundingVolume
// Description : This is a special kind of GeometricBoundingVolume
//               that fills all of space.
////////////////////////////////////////////////////////////////////

1433 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1276 1286 0 9 1277 1278 1279 1280 1281 1282 1283 1284 1285 1 1798 0 1 0 1405 0 0 0 0 469
////////////////////////////////////////////////////////////////////
//       Class : UnionBoundingVolume
// Description : This special bounding volume is the union of all of
//               its constituent bounding volumes.
//
//               A point is defined to be within a UnionBoundingVolume
//               if it is within any one or more of its component
//               bounding volumes.
////////////////////////////////////////////////////////////////////

1434 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1287 1294 0 6 1288 1289 1290 1291 1292 1293 0 0 0 0 0 222
////////////////////////////////////////////////////////////////////
//       Class : Randomizer
// Description : A handy class to return random numbers.
////////////////////////////////////////////////////////////////////

1435 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1296 0 1 1295 0 0 0 0 0 401
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise
// Description : This is the base class for PerlinNoise2 and
//               PerlinNoise3, different dimensions of Perlin noise
//               implementation.  The base class just collects the
//               common functionality.
////////////////////////////////////////////////////////////////////

1436 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1297 1302 0 4 1298 1299 1300 1301 0 0 1 0 1435 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise2
// Description : This class provides an implementation of Perlin noise
//               for 2 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1437 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1303 1308 0 4 1304 1305 1306 1307 0 0 1 0 1435 0 0 0 0 405
////////////////////////////////////////////////////////////////////
//       Class : PerlinNoise3
// Description : This class provides an implementation of Perlin noise
//               for 3 variables.  This code is loosely based on the
//               reference implementation at
//               http://mrl.nyu.edu/~perlin/noise/ .
////////////////////////////////////////////////////////////////////

1438 13 PTA_LMatrix4f 0 2105345 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 1397 0 0 0 0 0 0 0 0 0 0

1439 14 CPTA_LMatrix4f 0 2105345 14 CPTA_LMatrix4f 14 CPTA_LMatrix4f 0 0 1376 0 0 0 0 0 0 0 0 0 0

1440 13 PTA_LMatrix4d 0 2105345 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 1396 0 0 0 0 0 0 0 0 0 0

1441 14 CPTA_LMatrix4d 0 2105345 14 CPTA_LMatrix4d 14 CPTA_LMatrix4d 0 0 1373 0 0 0 0 0 0 0 0 0 0

1442 12 PTA_LMatrix4 0 2105345 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 1438 0 0 0 0 0 0 0 0 0 0

1443 13 CPTA_LMatrix4 0 2105345 13 CPTA_LMatrix4 13 CPTA_LMatrix4 0 0 1439 0 0 0 0 0 0 0 0 0 0

1444 7 PTAMat4 0 2105345 7 PTAMat4 7 PTAMat4 0 0 1442 0 0 0 0 0 0 0 0 0 0

1445 8 CPTAMat4 0 2105345 8 CPTAMat4 8 CPTAMat4 0 0 1443 0 0 0 0 0 0 0 0 0 0

1446 8 PTAMat4d 0 2105345 8 PTAMat4d 8 PTAMat4d 0 0 1440 0 0 0 0 0 0 0 0 0 0

1447 9 CPTAMat4d 0 2105345 9 CPTAMat4d 9 CPTAMat4d 0 0 1441 0 0 0 0 0 0 0 0 0 0

1448 13 PTA_LMatrix3f 0 2105345 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 1389 0 0 0 0 0 0 0 0 0 0

1449 14 CPTA_LMatrix3f 0 2105345 14 CPTA_LMatrix3f 14 CPTA_LMatrix3f 0 0 1352 0 0 0 0 0 0 0 0 0 0

1450 13 PTA_LMatrix3d 0 2105345 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 1388 0 0 0 0 0 0 0 0 0 0

1451 14 CPTA_LMatrix3d 0 2105345 14 CPTA_LMatrix3d 14 CPTA_LMatrix3d 0 0 1348 0 0 0 0 0 0 0 0 0 0

1452 12 PTA_LMatrix3 0 2105345 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 1448 0 0 0 0 0 0 0 0 0 0

1453 13 CPTA_LMatrix3 0 2105345 13 CPTA_LMatrix3 13 CPTA_LMatrix3 0 0 1449 0 0 0 0 0 0 0 0 0 0

1454 7 PTAMat3 0 2105345 7 PTAMat3 7 PTAMat3 0 0 1452 0 0 0 0 0 0 0 0 0 0

1455 8 CPTAMat3 0 2105345 8 CPTAMat3 8 CPTAMat3 0 0 1453 0 0 0 0 0 0 0 0 0 0

1456 8 PTAMat3d 0 2105345 8 PTAMat3d 8 PTAMat3d 0 0 1450 0 0 0 0 0 0 0 0 0 0

1457 9 CPTAMat3d 0 2105345 9 CPTAMat3d 9 CPTAMat3d 0 0 1451 0 0 0 0 0 0 0 0 0 0

1458 14 PTA_LVecBase4f 0 2105345 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1399 0 0 0 0 0 0 0 0 0 0

1459 15 CPTA_LVecBase4f 0 2105345 15 CPTA_LVecBase4f 15 CPTA_LVecBase4f 0 0 1382 0 0 0 0 0 0 0 0 0 0

1460 14 PTA_LVecBase4d 0 2105345 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 1398 0 0 0 0 0 0 0 0 0 0

1461 15 CPTA_LVecBase4d 0 2105345 15 CPTA_LVecBase4d 15 CPTA_LVecBase4d 0 0 1379 0 0 0 0 0 0 0 0 0 0

1462 14 PTA_LVecBase4i 0 2105345 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 1400 0 0 0 0 0 0 0 0 0 0

1463 15 CPTA_LVecBase4i 0 2105345 15 CPTA_LVecBase4i 15 CPTA_LVecBase4i 0 0 1385 0 0 0 0 0 0 0 0 0 0

1464 13 PTA_LVecBase4 0 2105345 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 1458 0 0 0 0 0 0 0 0 0 0

1465 14 CPTA_LVecBase4 0 2105345 14 CPTA_LVecBase4 14 CPTA_LVecBase4 0 0 1459 0 0 0 0 0 0 0 0 0 0

1466 12 PTAVecBase4f 0 2105345 12 PTAVecBase4f 12 PTAVecBase4f 0 0 1458 0 0 0 0 0 0 0 0 0 0

1467 13 CPTAVecBase4f 0 2105345 13 CPTAVecBase4f 13 CPTAVecBase4f 0 0 1459 0 0 0 0 0 0 0 0 0 0

1468 12 PTAVecBase4d 0 2105345 12 PTAVecBase4d 12 PTAVecBase4d 0 0 1460 0 0 0 0 0 0 0 0 0 0

1469 13 CPTAVecBase4d 0 2105345 13 CPTAVecBase4d 13 CPTAVecBase4d 0 0 1461 0 0 0 0 0 0 0 0 0 0

1470 14 PTA_LVecBase3f 0 2105345 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1394 0 0 0 0 0 0 0 0 0 0

1471 15 CPTA_LVecBase3f 0 2105345 15 CPTA_LVecBase3f 15 CPTA_LVecBase3f 0 0 1367 0 0 0 0 0 0 0 0 0 0

1472 14 PTA_LVecBase3d 0 2105345 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 1393 0 0 0 0 0 0 0 0 0 0

1473 15 CPTA_LVecBase3d 0 2105345 15 CPTA_LVecBase3d 15 CPTA_LVecBase3d 0 0 1364 0 0 0 0 0 0 0 0 0 0

1474 14 PTA_LVecBase3i 0 2105345 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 1395 0 0 0 0 0 0 0 0 0 0

1475 15 CPTA_LVecBase3i 0 2105345 15 CPTA_LVecBase3i 15 CPTA_LVecBase3i 0 0 1370 0 0 0 0 0 0 0 0 0 0

1476 13 PTA_LVecBase3 0 2105345 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1470 0 0 0 0 0 0 0 0 0 0

1477 14 CPTA_LVecBase3 0 2105345 14 CPTA_LVecBase3 14 CPTA_LVecBase3 0 0 1471 0 0 0 0 0 0 0 0 0 0

1478 12 PTAVecBase3f 0 2105345 12 PTAVecBase3f 12 PTAVecBase3f 0 0 1470 0 0 0 0 0 0 0 0 0 0

1479 13 CPTAVecBase3f 0 2105345 13 CPTAVecBase3f 13 CPTAVecBase3f 0 0 1471 0 0 0 0 0 0 0 0 0 0

1480 12 PTAVecBase3d 0 2105345 12 PTAVecBase3d 12 PTAVecBase3d 0 0 1472 0 0 0 0 0 0 0 0 0 0

1481 13 CPTAVecBase3d 0 2105345 13 CPTAVecBase3d 13 CPTAVecBase3d 0 0 1473 0 0 0 0 0 0 0 0 0 0

1482 14 PTA_LVecBase2f 0 2105345 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 1391 0 0 0 0 0 0 0 0 0 0

1483 15 CPTA_LVecBase2f 0 2105345 15 CPTA_LVecBase2f 15 CPTA_LVecBase2f 0 0 1358 0 0 0 0 0 0 0 0 0 0

1484 14 PTA_LVecBase2d 0 2105345 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 1390 0 0 0 0 0 0 0 0 0 0

1485 15 CPTA_LVecBase2d 0 2105345 15 CPTA_LVecBase2d 15 CPTA_LVecBase2d 0 0 1355 0 0 0 0 0 0 0 0 0 0

1486 14 PTA_LVecBase2i 0 2105345 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 1392 0 0 0 0 0 0 0 0 0 0

1487 15 CPTA_LVecBase2i 0 2105345 15 CPTA_LVecBase2i 15 CPTA_LVecBase2i 0 0 1361 0 0 0 0 0 0 0 0 0 0

1488 13 PTA_LVecBase2 0 2105345 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 1482 0 0 0 0 0 0 0 0 0 0

1489 14 CPTA_LVecBase2 0 2105345 14 CPTA_LVecBase2 14 CPTA_LVecBase2 0 0 1483 0 0 0 0 0 0 0 0 0 0

1490 12 PTAVecBase2f 0 2105345 12 PTAVecBase2f 12 PTAVecBase2f 0 0 1482 0 0 0 0 0 0 0 0 0 0

1491 13 CPTAVecBase2f 0 2105345 13 CPTAVecBase2f 13 CPTAVecBase2f 0 0 1483 0 0 0 0 0 0 0 0 0 0

1492 12 PTAVecBase2d 0 2105345 12 PTAVecBase2d 12 PTAVecBase2d 0 0 1484 0 0 0 0 0 0 0 0 0 0

1493 13 CPTAVecBase2d 0 2105345 13 CPTAVecBase2d 13 CPTAVecBase2d 0 0 1485 0 0 0 0 0 0 0 0 0 0

1494 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1310 1316 0 5 1311 1312 1313 1314 1315 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1495 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1317 1323 0 5 1318 1319 1320 1321 1322 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise3
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

1496 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1324 1339 0 14 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1 1799 0 0 0 0 677
////////////////////////////////////////////////////////////////////
//       Class : Triangulator
// Description : This class can triangulate a convex or concave
//               polygon, even one with holes.  It is adapted from an
//               algorithm published as:
//
//               Narkhede A. and Manocha D., Fast polygon
//               triangulation algorithm based on Seidel's Algorithm,
//               UNC-CH, 1994.
//
//               http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
//
//               It works strictly on 2-d points.  See Triangulator3
//               for 3-d points.
////////////////////////////////////////////////////////////////////

1497 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1340 1347 0 6 1341 1342 1343 1344 1345 1346 1 1800 0 1 0 1496 0 0 0 0 497
////////////////////////////////////////////////////////////////////
//       Class : Triangulator3
// Description : This is an extension of Triangulator to handle
//               polygons with three-dimensional points.  It assumes
//               all of the points lie in a single plane, and
//               internally projects the supplied points into 2-D for
//               passing to the underlying Triangulator object.
////////////////////////////////////////////////////////////////////

1498 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1499 0 0 0 0 0 0 0 0 0 0

1499 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1348 0 0 0 0 0 0 0 0 0 0

1500 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1348 0 0 0 0 0 0 0 0 0 0

1501 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1502 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1388 0 0 0 0 0 0 0 0 0 0

1503 9 _object * 0 8576 9 _object * 9 _object * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1504 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1505 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1506 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1507 0 0 0 0 0 0 0 0 0 0

1507 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1508 0 0 0 0 0 0 0 0 0 0

1508 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 4 1801 1802 1803 1804 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1509 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1510 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1511 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1512 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

1513 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1514 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1350 0 0 0 0 0 0 0 0 0 0

1515 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1516 0 0 0 0 0 0 0 0 0 0

1516 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1350 0 0 0 0 0 0 0 0 0 0

1517 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1519 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1352 0 0 0 0 0 0 0 0 0 0

1521 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1522 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1389 0 0 0 0 0 0 0 0 0 0

1524 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1525 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1526 0 0 0 0 0 0 0 0 0 0

1526 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 4 1805 1806 1807 1808 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : LMatrix3
// Description : This is a 3-by-3 transform matrix.  It typically will
//               represent either a rotation-and-scale (no
//               translation) matrix in 3-d, or a full affine matrix
//               (rotation, scale, translation) in 2-d, e.g. for a
//               texture matrix.
////////////////////////////////////////////////////////////////////

1527 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1354 0 0 0 0 0 0 0 0 0 0

1528 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1529 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1354 0 0 0 0 0 0 0 0 0 0

1530 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1531 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1355 0 0 0 0 0 0 0 0 0 0

1532 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1533 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1534 0 0 0 0 0 0 0 0 0 0

1534 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1390 0 0 0 0 0 0 0 0 0 0

1535 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1537 0 0 0 0 0 0 0 0 0 0

1537 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1538 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1357 0 0 0 0 0 0 0 0 0 0

1539 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1540 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1357 0 0 0 0 0 0 0 0 0 0

1541 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1542 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1358 0 0 0 0 0 0 0 0 0 0

1543 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1544 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1545 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1391 0 0 0 0 0 0 0 0 0 0

1546 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1547 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1548 0 0 0 0 0 0 0 0 0 0

1548 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1549 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1550 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1551 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1360 0 0 0 0 0 0 0 0 0 0

1552 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1553 0 0 0 0 0 0 0 0 0 0

1553 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1361 0 0 0 0 0 0 0 0 0 0

1554 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1361 0 0 0 0 0 0 0 0 0 0

1555 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1556 0 0 0 0 0 0 0 0 0 0

1556 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1392 0 0 0 0 0 0 0 0 0 0

1557 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1558 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1559 0 0 0 0 0 0 0 0 0 0

1559 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1560 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1561 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1562 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1363 0 0 0 0 0 0 0 0 0 0

1563 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1564 0 0 0 0 0 0 0 0 0 0

1564 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1364 0 0 0 0 0 0 0 0 0 0

1565 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1566 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1567 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1393 0 0 0 0 0 0 0 0 0 0

1568 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1569 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1570 0 0 0 0 0 0 0 0 0 0

1570 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1571 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1366 0 0 0 0 0 0 0 0 0 0

1572 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1573 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1366 0 0 0 0 0 0 0 0 0 0

1574 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1575 0 0 0 0 0 0 0 0 0 0

1575 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1367 0 0 0 0 0 0 0 0 0 0

1576 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1577 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1578 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1394 0 0 0 0 0 0 0 0 0 0

1579 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1580 0 0 0 0 0 0 0 0 0 0

1580 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1581 0 0 0 0 0 0 0 0 0 0

1581 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1582 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1583 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1584 0 0 0 0 0 0 0 0 0 0

1584 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1369 0 0 0 0 0 0 0 0 0 0

1585 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1586 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1370 0 0 0 0 0 0 0 0 0 0

1587 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1588 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1589 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1395 0 0 0 0 0 0 0 0 0 0

1590 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1591 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1592 0 0 0 0 0 0 0 0 0 0

1592 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

1593 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1594 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1595 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1372 0 0 0 0 0 0 0 0 0 0

1596 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1597 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1598 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1373 0 0 0 0 0 0 0 0 0 0

1599 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1600 0 0 0 0 0 0 0 0 0 0

1600 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1396 0 0 0 0 0 0 0 0 0 0

1601 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1602 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1603 0 0 0 0 0 0 0 0 0 0

1603 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1604 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1605 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1606 0 0 0 0 0 0 0 0 0 0

1606 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1375 0 0 0 0 0 0 0 0 0 0

1607 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1608 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1609 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1610 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1611 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1397 0 0 0 0 0 0 0 0 0 0

1612 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1613 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1614 0 0 0 0 0 0 0 0 0 0

1614 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 671
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLMatrix4
// Description : This is an "unaligned" LMatrix4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LMatrix4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LMatrix4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1615 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1616 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1617 0 0 0 0 0 0 0 0 0 0

1617 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1378 0 0 0 0 0 0 0 0 0 0

1618 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1619 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1379 0 0 0 0 0 0 0 0 0 0

1620 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1379 0 0 0 0 0 0 0 0 0 0

1621 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1622 0 0 0 0 0 0 0 0 0 0

1622 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1398 0 0 0 0 0 0 0 0 0 0

1623 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1624 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1626 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1381 0 0 0 0 0 0 0 0 0 0

1627 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1628 0 0 0 0 0 0 0 0 0 0

1628 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1381 0 0 0 0 0 0 0 0 0 0

1629 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1630 0 0 0 0 0 0 0 0 0 0

1630 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1382 0 0 0 0 0 0 0 0 0 0

1631 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1632 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1633 0 0 0 0 0 0 0 0 0 0

1633 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1399 0 0 0 0 0 0 0 0 0 0

1634 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1635 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1636 0 0 0 0 0 0 0 0 0 0

1636 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1637 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1638 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1639 0 0 0 0 0 0 0 0 0 0

1639 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1384 0 0 0 0 0 0 0 0 0 0

1640 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1641 0 0 0 0 0 0 0 0 0 0

1641 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1385 0 0 0 0 0 0 0 0 0 0

1642 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1643 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1400 0 0 0 0 0 0 0 0 0 0

1645 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1646 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1647 0 0 0 0 0 0 0 0 0 0

1647 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 675
////////////////////////////////////////////////////////////////////
//       Class : UnalignedLVecBase4
// Description : This is an "unaligned" LVecBase4.  It has no
//               functionality other than to store numbers, and it
//               will pack them in as tightly as possible, avoiding
//               any SSE2 alignment requirements shared by the primary
//               LVecBase4 class.
//
//               Use it only when you need to pack numbers tightly
//               without respect to alignment, and then copy it to a
//               proper LVecBase4 to get actual use from it.
////////////////////////////////////////////////////////////////////

1648 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1387 0 0 0 0 0 0 0 0 0 0

1649 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1387 0 0 0 0 0 0 0 0 0 0

1651 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1652 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

1654 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1655 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1390 0 0 0 0 0 0 0 0 0 0

1656 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1657 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1392 0 0 0 0 0 0 0 0 0 0

1658 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1393 0 0 0 0 0 0 0 0 0 0

1659 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1394 0 0 0 0 0 0 0 0 0 0

1660 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1395 0 0 0 0 0 0 0 0 0 0

1661 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1662 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1397 0 0 0 0 0 0 0 0 0 0

1663 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1664 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1399 0 0 0 0 0 0 0 0 0 0

1665 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1400 0 0 0 0 0 0 0 0 0 0

1666 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1667 0 0 0 0 0 0 0 0 0 0

1667 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1401 0 0 0 0 0 0 0 0 0 0

1668 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1401 0 0 0 0 0 0 0 0 0 0

1669 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1670 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1671 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1405 0 0 0 0 0 0 0 0 0 0

1673 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1674 0 0 0 0 0 0 0 0 0 0

1674 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1675 0 0 0 0 0 0 0 0 0 0

1675 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1676 0 0 0 0 0 0 0 0 0 0

1676 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1677 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1675 0 0 0 0 0 0 0 0 0 0

1678 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1679 0 0 0 0 0 0 0 0 0 0

1679 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1680 0 0 0 0 0 0 0 0 0 0

1680 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1681 0 0 0 0 0 0 0 0 0 0

1681 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 1809 1810 1811 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1682 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1683 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1406 0 0 0 0 0 0 0 0 0 0

1684 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1685 0 0 0 0 0 0 0 0 0 0

1685 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1686 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1407 0 0 0 0 0 0 0 0 0 0

1687 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1688 0 0 0 0 0 0 0 0 0 0

1688 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1407 0 0 0 0 0 0 0 0 0 0

1689 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1690 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1681 0 0 0 0 0 0 0 0 0 0

1691 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1676 0 0 0 0 0 0 0 0 0 0

1692 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1693 0 0 0 0 0 0 0 0 0 0

1693 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

1694 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1695 0 0 0 0 0 0 0 0 0 0

1695 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

1696 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1408 0 0 0 0 0 0 0 0 0 0

1697 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1698 0 0 0 0 0 0 0 0 0 0

1698 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1408 0 0 0 0 0 0 0 0 0 0

1699 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1700 0 0 0 0 0 0 0 0 0 0

1700 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1701 0 0 0 0 0 0 0 0 0 0

1701 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 1812 1813 1814 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

1702 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1703 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1704 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1702 0 0 0 0 0 0 0 0 0 0

1705 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1706 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1707 0 0 0 0 0 0 0 0 0 0

1707 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1676 0 0 0 0 0 0 0 0 0 0

1708 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1709 0 0 0 0 0 0 0 0 0 0

1709 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1411 0 0 0 0 0 0 0 0 0 0

1710 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1712 0 0 0 0 0 0 0 0 0 0

1712 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1713 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1714 0 0 0 0 0 0 0 0 0 0

1714 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1410 0 0 0 0 0 0 0 0 0 0

1715 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1681 0 0 0 0 0 0 0 0 0 0

1716 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1712 0 0 0 0 0 0 0 0 0 0

1717 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1718 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1719 0 0 0 0 0 0 0 0 0 0

1719 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1702 0 0 0 0 0 0 0 0 0 0

1720 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1413 0 0 0 0 0 0 0 0 0 0

1722 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1723 0 0 0 0 0 0 0 0 0 0

1723 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 598
////////////////////////////////////////////////////////////////////
//       Class : LVector3
// Description : This is a three-component vector distance (as opposed
//               to a three-component point, which represents a
//               particular point in space).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

1725 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1412 0 0 0 0 0 0 0 0 0 0

1727 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1701 0 0 0 0 0 0 0 0 0 0

1728 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1729 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1730 6 size_t 0 2105344 6 size_t 6 size_t 0 0 1505 0 0 0 0 0 0 0 0 0 0

1731 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1732 0 0 0 0 0 0 0 0 0 0

1732 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1418 0 0 0 0 0 0 0 0 0 0

1733 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1734 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1419 0 0 0 0 0 0 0 0 0 0

1735 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1420 0 0 0 0 0 0 0 0 0 0

1736 16 LFrustum const * 0 8576 16 LFrustum const * 16 LFrustum const * 0 0 1737 0 0 0 0 0 0 0 0 0 0

1737 14 LFrustum const 0 8832 14 LFrustum const 14 LFrustum const 0 0 1421 0 0 0 0 0 0 0 0 0 0

1738 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 213
// The CS_default entry does not refer to a particular coordinate
// system, but rather to the value stored in
// default_coordinate_system, which in turn is loaded from the
// config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 155
// CS_invalid is not a coordinate system at all.  It can be used in
// user-input processing code to indicate a contradictory coordinate
// system request.
5 0 0

1739 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1740 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1741 0 0 0 0 0 0 0 0 0 0

1741 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1425 0 0 0 0 0 0 0 0 0 0

1742 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1426 0 0 0 0 0 0 0 0 0 0

1743 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1426 0 0 0 0 0 0 0 0 0 0

1745 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1746 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 1414 0 0 0 0 0 0 0 0 0 0

1748 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1427 0 0 0 0 0 0 0 0 0 0

1750 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1428 0 0 0 0 0 0 0 0 0 0

1751 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1428 0 0 0 0 0 0 0 0 0 0

1753 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1754 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1429 0 0 0 0 0 0 0 0 0 0

1756 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1757 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1758 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1759 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1433 0 0 0 0 0 0 0 0 0 0

1760 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1761 0 0 0 0 0 0 0 0 0 0

1761 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1433 0 0 0 0 0 0 0 0 0 0

1762 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1763 0 0 0 0 0 0 0 0 0 0

1763 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1434 0 0 0 0 0 0 0 0 0 0

1764 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1765 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1435 0 0 0 0 0 0 0 0 0 0

1766 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1767 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1768 0 0 0 0 0 0 0 0 0 0

1768 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1436 0 0 0 0 0 0 0 0 0 0

1769 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1770 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1771 0 0 0 0 0 0 0 0 0 0

1771 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1437 0 0 0 0 0 0 0 0 0 0

1772 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1494 0 0 0 0 0 0 0 0 0 0

1773 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1774 0 0 0 0 0 0 0 0 0 0

1774 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1494 0 0 0 0 0 0 0 0 0 0

1775 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1495 0 0 0 0 0 0 0 0 0 0

1776 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1495 0 0 0 0 0 0 0 0 0 0

1778 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1779 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1780 0 0 0 0 0 0 0 0 0 0

1780 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1781 0 0 0 0 0 0 0 0 0 0

1781 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

1782 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1783 0 0 0 0 0 0 0 0 0 0

1783 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1496 0 0 0 0 0 0 0 0 0 0

1784 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1497 0 0 0 0 0 0 0 0 0 0

1785 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 1786 0 0 0 0 0 0 0 0 0 0

1786 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1497 0 0 0 0 0 0 0 0 0 0

1787 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1788 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1789 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1790 0 0 0 0 0 0 0 0 0 0

1790 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

1791 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 228
////////////////////////////////////////////////////////////////////
//       Class : FLOATNAME(LQuaternion)
// Description : This is the base quaternion class
////////////////////////////////////////////////////////////////////

0
0
22
1793 0 0 572 10 get_points 14 get_num_points 9 get_point 
1794 0 0 572 10 get_planes 14 get_num_planes 9 get_plane 
1795 0 0 605 10 get_points 14 get_num_points 9 get_point 
1796 0 0 605 10 get_planes 14 get_num_planes 9 get_plane 
1797 0 0 639 14 get_components 18 get_num_components 13 get_component 
1798 0 0 661 14 get_components 18 get_num_components 13 get_component 
1799 0 0 772 12 get_vertices 16 get_num_vertices 10 get_vertex 
1800 0 0 789 12 get_vertices 16 get_num_vertices 10 get_vertex 
1801 0 0 813 8 get_rows 4 size 7 get_row 
1802 0 0 813 8 get_cols 4 size 7 get_col 
1803 0 0 813 9 get_col2s 4 size 8 get_col2 
1804 0 0 813 9 get_row2s 4 size 8 get_row2 
1805 0 0 845 8 get_rows 4 size 7 get_row 
1806 0 0 845 8 get_cols 4 size 7 get_col 
1807 0 0 845 9 get_col2s 4 size 8 get_col2 
1808 0 0 845 9 get_row2s 4 size 8 get_row2 
1809 0 0 1427 8 get_rows 4 size 7 get_row 
1810 0 0 1427 8 get_cols 4 size 7 get_col 
1811 0 0 1427 9 get_row3s 4 size 8 get_row3 
1812 0 0 1472 8 get_rows 4 size 7 get_row 
1813 0 0 1472 8 get_cols 4 size 7 get_col 
1814 0 0 1472 9 get_row3s 4 size 8 get_row3 
