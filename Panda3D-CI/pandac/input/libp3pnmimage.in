1428717639
2 3
13 libp3pnmimage 4 BCNh 12 panda3d.core 
285
342 5 pixel 0 4 627 12 pixel::pixel 0 2 1 2 0
57
pixel::pixel(void);
pixel::pixel(gray r, gray g, gray b);

343 4 size 0 4 627 11 pixel::size 0 1 3 0
29
static int pixel::size(void);

344 11 operator [] 0 4 627 18 pixel::operator [] 0 2 4 5 0
70
gray pixel::operator [](int i) const;
gray &pixel::operator [](int i);

345 10 operator + 0 4 627 17 pixel::operator + 0 1 6 0
50
pixel pixel::operator +(pixel const &other) const;

346 10 operator - 0 4 627 17 pixel::operator - 0 1 7 0
50
pixel pixel::operator -(pixel const &other) const;

347 10 operator * 0 4 627 17 pixel::operator * 0 1 8 0
49
pixel pixel::operator *(double const mult) const;

348 11 operator += 0 4 627 18 pixel::operator += 0 1 9 0
44
void pixel::operator +=(pixel const &other);

349 11 operator -= 0 4 627 18 pixel::operator -= 0 1 10 0
44
void pixel::operator -=(pixel const &other);

350 11 operator *= 0 4 627 18 pixel::operator *= 0 1 11 0
43
void pixel::operator *=(double const mult);

351 6 output 0 4 627 13 pixel::output 0 1 12 0
33
void pixel::output(ostream &out);

352 5 get_b 0 20 627 12 pixel::get_b 0 1 14 25
getter for gray pixel::b;
30
gray pixel::get_b(void) const;

353 5 set_b 0 36 627 12 pixel::set_b 0 1 13 25
setter for gray pixel::b;
30
void pixel::set_b(gray value);

354 5 get_g 0 20 627 12 pixel::get_g 0 1 16 25
getter for gray pixel::g;
30
gray pixel::get_g(void) const;

355 5 set_g 0 36 627 12 pixel::set_g 0 1 15 25
setter for gray pixel::g;
30
void pixel::set_g(gray value);

356 5 get_r 0 20 627 12 pixel::get_r 0 1 18 25
getter for gray pixel::r;
30
gray pixel::get_r(void) const;

357 5 set_r 0 36 627 12 pixel::set_r 0 1 17 25
setter for gray pixel::r;
30
void pixel::set_r(gray value);

358 6 ~pixel 0 4 627 13 pixel::~pixel 0 0 0
20
pixel::~pixel(void);

359 8 get_name 0 6 631 21 PNMFileType::get_name 0 1 19 0
53
virtual string PNMFileType::get_name(void) const = 0;

360 18 get_num_extensions 0 6 631 31 PNMFileType::get_num_extensions 0 1 20 360
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
////////////////////////////////////////////////////////////////////
56
virtual int PNMFileType::get_num_extensions(void) const;

361 13 get_extension 0 6 631 26 PNMFileType::get_extension 0 1 21 378
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
////////////////////////////////////////////////////////////////////
55
virtual string PNMFileType::get_extension(int n) const;

362 23 get_suggested_extension 0 6 631 36 PNMFileType::get_suggested_extension 0 1 22 424
////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
////////////////////////////////////////////////////////////////////
64
virtual string PNMFileType::get_suggested_extension(void) const;

363 14 get_class_type 0 4 631 27 PNMFileType::get_class_type 0 1 23 0
52
static TypeHandle PNMFileType::get_class_type(void);

364 20 ~PNMFileTypeRegistry 0 4 633 41 PNMFileTypeRegistry::~PNMFileTypeRegistry 0 0 227
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
48
PNMFileTypeRegistry::~PNMFileTypeRegistry(void);

365 13 get_num_types 0 4 633 34 PNMFileTypeRegistry::get_num_types 0 1 24 279
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
////////////////////////////////////////////////////////////////////
51
int PNMFileTypeRegistry::get_num_types(void) const;

366 8 get_type 0 4 633 29 PNMFileTypeRegistry::get_type 0 1 25 261
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
////////////////////////////////////////////////////////////////////
56
PNMFileType *PNMFileTypeRegistry::get_type(int n) const;

367 23 get_type_from_extension 0 4 633 44 PNMFileTypeRegistry::get_type_from_extension 0 1 26 481
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
88
PNMFileType *PNMFileTypeRegistry::get_type_from_extension(string const &filename) const;

368 26 get_type_from_magic_number 0 4 633 47 PNMFileTypeRegistry::get_type_from_magic_number 0 1 27 544
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
////////////////////////////////////////////////////////////////////
95
PNMFileType *PNMFileTypeRegistry::get_type_from_magic_number(string const &magic_number) const;

369 18 get_type_by_handle 0 4 633 39 PNMFileTypeRegistry::get_type_by_handle 0 1 28 444
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
////////////////////////////////////////////////////////////////////
78
PNMFileType *PNMFileTypeRegistry::get_type_by_handle(TypeHandle handle) const;

370 5 write 0 4 633 26 PNMFileTypeRegistry::write 0 1 29 332
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
////////////////////////////////////////////////////////////////////
76
void PNMFileTypeRegistry::write(ostream &out, int indent_level = (0)) const;

371 14 get_global_ptr 0 4 633 35 PNMFileTypeRegistry::get_global_ptr 0 1 30 319
////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
////////////////////////////////////////////////////////////////////
70
static PNMFileTypeRegistry *PNMFileTypeRegistry::get_global_ptr(void);

372 14 PNMImageHeader 0 4 634 30 PNMImageHeader::PNMImageHeader 0 2 31 32 459
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
111
inline PNMImageHeader::PNMImageHeader(void);
inline PNMImageHeader::PNMImageHeader(PNMImageHeader const &copy);

373 10 operator = 0 4 634 26 PNMImageHeader::operator = 0 1 33 0
67
inline void PNMImageHeader::operator =(PNMImageHeader const &copy);

374 15 ~PNMImageHeader 0 4 634 31 PNMImageHeader::~PNMImageHeader 0 0 225
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
45
inline PNMImageHeader::~PNMImageHeader(void);

375 14 get_color_type 0 4 634 30 PNMImageHeader::get_color_type 0 1 34 397
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
////////////////////////////////////////////////////////////////////
76
inline PNMImageHeader::ColorType PNMImageHeader::get_color_type(void) const;

376 16 get_num_channels 0 4 634 32 PNMImageHeader::get_num_channels 0 1 35 276
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
////////////////////////////////////////////////////////////////////
56
inline int PNMImageHeader::get_num_channels(void) const;

377 12 is_grayscale 0 4 634 28 PNMImageHeader::is_grayscale 0 2 36 37 948
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
////////////////////////////////////////////////////////////////////
140
static inline bool PNMImageHeader::is_grayscale(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::is_grayscale(void) const;

378 9 has_alpha 0 4 634 25 PNMImageHeader::has_alpha 0 2 38 39 852
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
////////////////////////////////////////////////////////////////////
134
static inline bool PNMImageHeader::has_alpha(PNMImageHeader::ColorType color_type);
inline bool PNMImageHeader::has_alpha(void) const;

379 10 get_maxval 0 4 634 26 PNMImageHeader::get_maxval 0 1 40 443
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
////////////////////////////////////////////////////////////////////
53
inline xelval PNMImageHeader::get_maxval(void) const;

380 15 get_color_space 0 4 634 31 PNMImageHeader::get_color_space 0 1 41 331
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_space
//       Access: Published
//  Description: Returns the color space that the image is encoded
//               in, or CS_unspecified if unknown.
////////////////////////////////////////////////////////////////////
62
inline ColorSpace PNMImageHeader::get_color_space(void) const;

381 10 get_x_size 0 4 634 26 PNMImageHeader::get_x_size 0 1 42 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_x_size(void) const;

382 10 get_y_size 0 4 634 26 PNMImageHeader::get_y_size 0 1 43 366
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
////////////////////////////////////////////////////////////////////
50
inline int PNMImageHeader::get_y_size(void) const;

383 11 get_comment 0 4 634 27 PNMImageHeader::get_comment 0 1 44 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
////////////////////////////////////////////////////////////////////
54
inline string PNMImageHeader::get_comment(void) const;

384 11 set_comment 0 4 634 27 PNMImageHeader::set_comment 0 1 45 278
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::set_comment(string const &comment);

385 8 has_type 0 4 634 24 PNMImageHeader::has_type 0 1 46 315
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
////////////////////////////////////////////////////////////////////
49
inline bool PNMImageHeader::has_type(void) const;

386 8 get_type 0 4 634 24 PNMImageHeader::get_type 0 1 47 373
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
////////////////////////////////////////////////////////////////////
57
inline PNMFileType *PNMImageHeader::get_type(void) const;

387 8 set_type 0 4 634 24 PNMImageHeader::set_type 0 1 48 583
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
////////////////////////////////////////////////////////////////////
56
inline void PNMImageHeader::set_type(PNMFileType *type);

388 11 read_header 0 4 634 27 PNMImageHeader::read_header 0 2 49 50 1214
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////
255
bool PNMImageHeader::read_header(Filename const &filename, PNMFileType *type = (0), bool report_unknown_type = (1));
bool PNMImageHeader::read_header(istream &data, string const &filename = ((())), PNMFileType *type = (0), bool report_unknown_type = (1));

389 11 make_reader 0 4 634 27 PNMImageHeader::make_reader 0 2 51 52 2105
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
333
PNMReader *PNMImageHeader::make_reader(Filename const &filename, PNMFileType *type = (0), bool report_unknown_type = (1)) const;
PNMReader *PNMImageHeader::make_reader(istream *file, bool owns_file = (1), Filename const &filename = ((())), string magic_number = ((())), PNMFileType *type = (0), bool report_unknown_type = (1)) const;

390 11 make_writer 0 4 634 27 PNMImageHeader::make_writer 0 2 53 54 1861
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
////////////////////////////////////////////////////////////////////
239
PNMWriter *PNMImageHeader::make_writer(Filename const &filename, PNMFileType *type = (0)) const;
PNMWriter *PNMImageHeader::make_writer(ostream *file, bool owns_file = (1), Filename const &filename = ((())), PNMFileType *type = (0)) const;

391 17 read_magic_number 0 4 634 33 PNMImageHeader::read_magic_number 0 1 55 602
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
////////////////////////////////////////////////////////////////////
98
static bool PNMImageHeader::read_magic_number(istream *file, string &magic_number, int num_bytes);

392 6 output 0 4 634 22 PNMImageHeader::output 0 1 56 221
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
void PNMImageHeader::output(ostream &out) const;

393 9 PixelSpec 0 4 636 36 PNMImageHeader::PixelSpec::PixelSpec 0 7 57 58 59 60 61 62 63 1683
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
543
inline PNMImageHeader::PixelSpec::PixelSpec(xelval gray_value);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval gray_value, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval red, xelval green, xelval blue);
inline PNMImageHeader::PixelSpec::PixelSpec(xelval red, xelval green, xelval blue, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(xel const &rgb);
inline PNMImageHeader::PixelSpec::PixelSpec(xel const &rgb, xelval alpha);
inline PNMImageHeader::PixelSpec::PixelSpec(PNMImageHeader::PixelSpec const &copy);

394 10 operator = 0 4 636 37 PNMImageHeader::PixelSpec::operator = 0 1 64 0
89
inline void PNMImageHeader::PixelSpec::operator =(PNMImageHeader::PixelSpec const &copy);

395 10 operator < 0 4 636 37 PNMImageHeader::PixelSpec::operator < 0 1 65 0
96
inline bool PNMImageHeader::PixelSpec::operator <(PNMImageHeader::PixelSpec const &other) const;

396 11 operator == 0 4 636 38 PNMImageHeader::PixelSpec::operator == 0 1 66 0
97
inline bool PNMImageHeader::PixelSpec::operator ==(PNMImageHeader::PixelSpec const &other) const;

397 11 operator != 0 4 636 38 PNMImageHeader::PixelSpec::operator != 0 1 67 0
97
inline bool PNMImageHeader::PixelSpec::operator !=(PNMImageHeader::PixelSpec const &other) const;

398 10 compare_to 0 4 636 37 PNMImageHeader::PixelSpec::compare_to 0 1 68 237
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
95
inline int PNMImageHeader::PixelSpec::compare_to(PNMImageHeader::PixelSpec const &other) const;

399 7 get_red 0 4 636 34 PNMImageHeader::PixelSpec::get_red 0 1 69 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline xelval PNMImageHeader::PixelSpec::get_red(void) const;

400 9 get_green 0 4 636 36 PNMImageHeader::PixelSpec::get_green 0 1 70 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline xelval PNMImageHeader::PixelSpec::get_green(void) const;

401 8 get_blue 0 4 636 35 PNMImageHeader::PixelSpec::get_blue 0 1 71 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
62
inline xelval PNMImageHeader::PixelSpec::get_blue(void) const;

402 9 get_alpha 0 4 636 36 PNMImageHeader::PixelSpec::get_alpha 0 1 72 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline xelval PNMImageHeader::PixelSpec::get_alpha(void) const;

403 7 set_red 0 4 636 34 PNMImageHeader::PixelSpec::set_red 0 1 73 234
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void PNMImageHeader::PixelSpec::set_red(xelval red);

404 9 set_green 0 4 636 36 PNMImageHeader::PixelSpec::set_green 0 1 74 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::PixelSpec::set_green(xelval green);

405 8 set_blue 0 4 636 35 PNMImageHeader::PixelSpec::set_blue 0 1 75 235
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void PNMImageHeader::PixelSpec::set_blue(xelval blue);

406 9 set_alpha 0 4 636 36 PNMImageHeader::PixelSpec::set_alpha 0 1 76 236
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
63
inline void PNMImageHeader::PixelSpec::set_alpha(xelval alpha);

407 11 operator [] 0 4 636 38 PNMImageHeader::PixelSpec::operator [] 0 1 77 0
66
inline xelval PNMImageHeader::PixelSpec::operator [](int n) const;

408 4 size 0 4 636 31 PNMImageHeader::PixelSpec::size 0 1 78 394
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
////////////////////////////////////////////////////////////////////
56
static inline int PNMImageHeader::PixelSpec::size(void);

409 6 output 0 4 636 33 PNMImageHeader::PixelSpec::output 0 1 79 230
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
59
void PNMImageHeader::PixelSpec::output(ostream &out) const;

410 10 ~PixelSpec 0 4 636 37 PNMImageHeader::PixelSpec::~PixelSpec 0 0 0
44
PNMImageHeader::PixelSpec::~PixelSpec(void);

411 15 ~PixelSpecCount 0 4 637 47 PNMImageHeader::PixelSpecCount::~PixelSpecCount 0 0 0
54
PNMImageHeader::PixelSpecCount::~PixelSpecCount(void);

412 9 Histogram 0 4 644 36 PNMImageHeader::Histogram::Histogram 0 1 80 238
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
50
inline PNMImageHeader::Histogram::Histogram(void);

413 14 get_num_pixels 0 4 644 41 PNMImageHeader::Histogram::get_num_pixels 0 1 81 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
////////////////////////////////////////////////////////////////////
65
inline int PNMImageHeader::Histogram::get_num_pixels(void) const;

414 9 get_pixel 0 4 644 36 PNMImageHeader::Histogram::get_pixel 0 1 82 385
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
////////////////////////////////////////////////////////////////////
90
inline PNMImageHeader::PixelSpec const &PNMImageHeader::Histogram::get_pixel(int n) const;

415 9 get_count 0 4 644 36 PNMImageHeader::Histogram::get_count 0 2 83 84 678
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
////////////////////////////////////////////////////////////////////
156
inline int PNMImageHeader::Histogram::get_count(int n) const;
inline int PNMImageHeader::Histogram::get_count(PNMImageHeader::PixelSpec const &pixel) const;

416 5 write 0 4 644 32 PNMImageHeader::Histogram::write 0 1 85 229
////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
58
void PNMImageHeader::Histogram::write(ostream &out) const;

417 10 ~Histogram 0 4 644 37 PNMImageHeader::Histogram::~Histogram 0 0 0
44
PNMImageHeader::Histogram::~Histogram(void);

418 7 PfmFile 0 4 645 16 PfmFile::PfmFile 0 2 86 87 445
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
PfmFile::PfmFile(void);
PfmFile::PfmFile(PfmFile const &copy);

419 10 operator = 0 4 645 19 PfmFile::operator = 0 1 88 0
46
void PfmFile::operator =(PfmFile const &copy);

420 5 clear 0 4 645 14 PfmFile::clear 0 2 89 90 703
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Eliminates all data in the file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Resets to an empty table with a specific size.  The
//               case of num_channels == 0 is allowed only in the case
//               that x_size and y_size are also == 0; and this makes
//               an empty (and invalid) PfmFile.
////////////////////////////////////////////////////////////////////
89
void PfmFile::clear(void);
void PfmFile::clear(int x_size, int y_size, int num_channels);

421 4 read 0 4 645 13 PfmFile::read 0 3 91 92 93 1383
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated file, returning
//               true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated stream,
//               returning true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data using the indicated PNMReader.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
152
bool PfmFile::read(Filename const &fullpath);
bool PfmFile::read(istream &in, Filename const &fullpath = ((())));
bool PfmFile::read(PNMReader *reader);

422 5 write 0 4 645 14 PfmFile::write 0 3 94 95 96 1290
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated file, returning
//               true on success, false on failure.
//
//               If the type implied by the filename extension
//               supports floating-point, the data will be written
//               directly; otherwise, the floating-point data will be
//               quietly converted to the appropriate integer type.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated stream,
//               returning true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data using the indicated PNMWriter.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
156
bool PfmFile::write(Filename const &fullpath);
bool PfmFile::write(ostream &out, Filename const &fullpath = ((())));
bool PfmFile::write(PNMWriter *writer);

423 4 load 0 4 645 13 PfmFile::load 0 1 97 326
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::load
//       Access: Published
//  Description: Fills the PfmFile with the data from the indicated
//               PNMImage, converted to floating-point values.
////////////////////////////////////////////////////////////////////
45
bool PfmFile::load(PNMImage const &pnmimage);

424 5 store 0 4 645 14 PfmFile::store 0 1 98 299
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store
//       Access: Published
//  Description: Copies the data to the indicated PNMImage, converting
//               to RGB values.
////////////////////////////////////////////////////////////////////
46
bool PfmFile::store(PNMImage &pnmimage) const;

425 10 store_mask 0 4 645 19 PfmFile::store_mask 0 1 99 433
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store_mask
//       Access: Published
//  Description: Stores 1 or 0 values into the indicated PNMImage,
//               according to has_point() for each pixel.  Each valid
//               point gets a 1 value; each nonexistent point gets a 0
//               value.
////////////////////////////////////////////////////////////////////
51
bool PfmFile::store_mask(PNMImage &pnmimage) const;

426 8 is_valid 0 4 645 17 PfmFile::is_valid 0 1 100 217
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_valid
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
42
inline bool PfmFile::is_valid(void) const;

427 9 get_scale 0 4 645 18 PfmFile::get_scale 0 1 101 305
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
////////////////////////////////////////////////////////////////////
49
inline PN_float32 PfmFile::get_scale(void) const;

428 9 set_scale 0 4 645 18 PfmFile::set_scale 0 1 102 305
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
////////////////////////////////////////////////////////////////////
49
inline void PfmFile::set_scale(PN_float32 scale);

429 9 has_point 0 4 645 18 PfmFile::has_point 0 1 103 457
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_point
//       Access: Published
//  Description: Returns true if there is a valid point at x, y.  This
//               always returns true unless a "no data" value has been
//               set, in which case it returns false if the point at
//               x, y is the "no data" value.
////////////////////////////////////////////////////////////////////
51
inline bool PfmFile::has_point(int x, int y) const;

430 11 get_channel 0 4 645 20 PfmFile::get_channel 0 1 104 303
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_channel
//       Access: Published
//  Description: Returns the cth channel of the point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
66
inline PN_float32 PfmFile::get_channel(int x, int y, int c) const;

431 11 set_channel 0 4 645 20 PfmFile::set_channel 0 1 105 304
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_channel
//       Access: Published
//  Description: Replaces the cth channel of the point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
72
inline void PfmFile::set_channel(int x, int y, int c, PN_float32 value);

432 10 get_point1 0 4 645 19 PfmFile::get_point1 0 1 106 295
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point1
//       Access: Published
//  Description: Returns the 1-component point value at the indicated
//               point.
////////////////////////////////////////////////////////////////////
58
inline PN_float32 PfmFile::get_point1(int x, int y) const;

433 10 set_point1 0 4 645 19 PfmFile::set_point1 0 1 107 296
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point1
//       Access: Published
//  Description: Replaces the 1-component point value at the indicated
//               point.
////////////////////////////////////////////////////////////////////
64
inline void PfmFile::set_point1(int x, int y, PN_float32 point);

434 10 get_point2 0 4 645 19 PfmFile::get_point2 0 1 108 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point2
//       Access: Published
//  Description: Returns the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint2f const &PfmFile::get_point2(int x, int y) const;

435 10 set_point2 0 4 645 19 PfmFile::set_point2 0 2 109 110 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point2(int x, int y, LVecBase2f const &point);
inline void PfmFile::set_point2(int x, int y, LVecBase2d const &point);

436 13 modify_point2 0 4 645 22 PfmFile::modify_point2 0 1 111 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point2
//       Access: Published
//  Description: Returns a modifiable 2-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint2f &PfmFile::modify_point2(int x, int y);

437 9 get_point 0 4 645 18 PfmFile::get_point 0 1 112 375
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
62
inline LPoint3f const &PfmFile::get_point(int x, int y) const;

438 9 set_point 0 4 645 18 PfmFile::set_point 0 2 113 114 754
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
141
inline void PfmFile::set_point(int x, int y, LVecBase3f const &point);
inline void PfmFile::set_point(int x, int y, LVecBase3d const &point);

439 12 modify_point 0 4 645 21 PfmFile::modify_point 0 1 115 306
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
53
inline LPoint3f &PfmFile::modify_point(int x, int y);

440 10 get_point3 0 4 645 19 PfmFile::get_point3 0 1 116 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point3
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint3f const &PfmFile::get_point3(int x, int y) const;

441 10 set_point3 0 4 645 19 PfmFile::set_point3 0 2 117 118 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point3(int x, int y, LVecBase3f const &point);
inline void PfmFile::set_point3(int x, int y, LVecBase3d const &point);

442 13 modify_point3 0 4 645 22 PfmFile::modify_point3 0 1 119 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point3
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint3f &PfmFile::modify_point3(int x, int y);

443 10 get_point4 0 4 645 19 PfmFile::get_point4 0 1 120 376
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point4
//       Access: Published
//  Description: Returns the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
63
inline LPoint4f const &PfmFile::get_point4(int x, int y) const;

444 10 set_point4 0 4 645 19 PfmFile::set_point4 0 2 121 122 756
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
////////////////////////////////////////////////////////////////////
143
inline void PfmFile::set_point4(int x, int y, LVecBase4f const &point);
inline void PfmFile::set_point4(int x, int y, LVecBase4d const &point);

445 13 modify_point4 0 4 645 22 PfmFile::modify_point4 0 1 123 307
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point4
//       Access: Published
//  Description: Returns a modifiable 4-component point value at the
//               indicated point.
////////////////////////////////////////////////////////////////////
54
inline LPoint4f &PfmFile::modify_point4(int x, int y);

446 4 fill 0 4 645 13 PfmFile::fill 0 4 124 125 126 127 1030
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
////////////////////////////////////////////////////////////////////
187
inline void PfmFile::fill(PN_float32 value);
inline void PfmFile::fill(LPoint2f const &value);
inline void PfmFile::fill(LPoint3f const &value);
void PfmFile::fill(LPoint4f const &value);

447 8 fill_nan 0 4 645 17 PfmFile::fill_nan 0 1 128 246
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_nan
//       Access: Published
//  Description: Fills the table with all NaN.
////////////////////////////////////////////////////////////////////
29
void PfmFile::fill_nan(void);

448 18 fill_no_data_value 0 4 645 27 PfmFile::fill_no_data_value 0 1 129 319
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_no_data_value
//       Access: Published
//  Description: Fills the table with the current no_data value, so
//               that the table is empty.
////////////////////////////////////////////////////////////////////
39
void PfmFile::fill_no_data_value(void);

449 12 fill_channel 0 4 645 21 PfmFile::fill_channel 0 1 130 331
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, leaving the other channels unchanged.
////////////////////////////////////////////////////////////////////
58
void PfmFile::fill_channel(int channel, PN_float32 value);

450 16 fill_channel_nan 0 4 645 25 PfmFile::fill_channel_nan 0 1 131 317
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, leaving the
//               other channels unchanged.
////////////////////////////////////////////////////////////////////
44
void PfmFile::fill_channel_nan(int channel);

451 19 fill_channel_masked 0 4 645 28 PfmFile::fill_channel_masked 0 1 132 400
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, but only where the table already has a data
//               point.  Leaves empty points unchanged.
////////////////////////////////////////////////////////////////////
65
void PfmFile::fill_channel_masked(int channel, PN_float32 value);

452 23 fill_channel_masked_nan 0 4 645 32 PfmFile::fill_channel_masked_nan 0 1 133 386
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, but only where
//               the table already has a data point.  Leaves empty
//               points unchanged.
////////////////////////////////////////////////////////////////////
51
void PfmFile::fill_channel_masked_nan(int channel);

453 18 calc_average_point 0 4 645 27 PfmFile::calc_average_point 0 1 134 587
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_average_point
//       Access: Published
//  Description: Computes the unweighted average point of all points
//               within the box centered at (x, y) with the indicated
//               Manhattan-distance radius.  Missing points are
//               assigned the value of their nearest neighbor.
//               Returns true if successful, or false if the point
//               value cannot be determined.
////////////////////////////////////////////////////////////////////
104
bool PfmFile::calc_average_point(LPoint3f &result, PN_float32 x, PN_float32 y, PN_float32 radius) const;

454 19 calc_bilinear_point 0 4 645 28 PfmFile::calc_bilinear_point 0 1 135 451
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_bilinear_point
//       Access: Published
//  Description: Computes the weighted average of the four nearest
//               points to the floating-point index (x, y).  Returns
//               true if the point has any contributors, false if the
//               point is unknown.
////////////////////////////////////////////////////////////////////
86
bool PfmFile::calc_bilinear_point(LPoint3f &result, PN_float32 x, PN_float32 y) const;

455 12 calc_min_max 0 4 645 21 PfmFile::calc_min_max 0 1 136 515
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_min_max
//       Access: Published
//  Description: Calculates the minimum and maximum x, y, and z depth
//               component values, representing the bounding box of
//               depth values, and places them in the indicated
//               vectors.  Returns true if successful, false if the
//               mesh contains no points.
////////////////////////////////////////////////////////////////////
81
bool PfmFile::calc_min_max(LVecBase3f &min_points, LVecBase3f &max_points) const;

456 13 calc_autocrop 0 4 645 22 PfmFile::calc_autocrop 0 2 137 138 1564
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
////////////////////////////////////////////////////////////////////
208
bool PfmFile::calc_autocrop(int &x_begin, int &x_end, int &y_begin, int &y_end) const;
inline bool PfmFile::calc_autocrop(LVecBase4f &range) const;
inline bool PfmFile::calc_autocrop(LVecBase4d &range) const;

457 12 is_row_empty 0 4 645 21 PfmFile::is_row_empty 0 1 139 401
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_row_empty
//       Access: Published
//  Description: Returns true if all of the points on row y, in the range
//               [x_begin, x_end), are the no_data value, or false if
//               any one of these points has a value.
////////////////////////////////////////////////////////////////////
64
bool PfmFile::is_row_empty(int y, int x_begin, int x_end) const;

458 15 is_column_empty 0 4 645 24 PfmFile::is_column_empty 0 1 140 399
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_column_empty
//       Access: Published
//  Description: Returns true if all of the points on column x, from
//               [y_begin, y_end), are the no_data value, or false if
//               any one of these points has a value.
////////////////////////////////////////////////////////////////////
67
bool PfmFile::is_column_empty(int x, int y_begin, int y_end) const;

459 16 set_zero_special 0 4 645 25 PfmFile::set_zero_special 0 1 141 468
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_zero_special
//       Access: Published
//  Description: Sets the zero_special flag.  When this flag is true,
//               values of (0, 0, 0) in the pfm file are treated as a
//               special case, and are not processed.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
57
inline void PfmFile::set_zero_special(bool zero_special);

460 17 set_no_data_chan4 0 4 645 26 PfmFile::set_no_data_chan4 0 1 142 534
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_chan4
//       Access: Published
//  Description: Sets the no_data_chan4 flag.  When this flag is true,
//               and the pfm file has 4 channels, then a negative
//               value in the fourth channel indicates no data.  When
//               it is false, all points are valid.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
51
inline void PfmFile::set_no_data_chan4(bool chan4);

461 15 set_no_data_nan 0 4 645 24 PfmFile::set_no_data_nan 0 1 143 562
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_nan
//       Access: Published
//  Description: Sets the no_data_nan flag.  When num_channels is
//               nonzero, then a NaN value in any of the first
//               num_channels channels indicates no data for that
//               point.  If num_channels is zero, then all points are
//               valid.
//
//               This is a special case of set_no_data_value().
////////////////////////////////////////////////////////////////////
48
void PfmFile::set_no_data_nan(int num_channels);

462 17 set_no_data_value 0 4 645 26 PfmFile::set_no_data_value 0 2 144 145 640
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
////////////////////////////////////////////////////////////////////
134
void PfmFile::set_no_data_value(LPoint4f const &no_data_value);
inline void PfmFile::set_no_data_value(LPoint4d const &no_data_value);

463 21 set_no_data_threshold 0 4 645 30 PfmFile::set_no_data_threshold 0 2 146 147 754
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
////////////////////////////////////////////////////////////////////
142
void PfmFile::set_no_data_threshold(LPoint4f const &no_data_value);
inline void PfmFile::set_no_data_threshold(LPoint4d const &no_data_value);

464 19 clear_no_data_value 0 4 645 28 PfmFile::clear_no_data_value 0 1 148 382
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Removes the special value that means "no data" when it
//               appears in the pfm file.  All points will thus be
//               considered valid.
////////////////////////////////////////////////////////////////////
47
inline void PfmFile::clear_no_data_value(void);

465 17 has_no_data_value 0 4 645 26 PfmFile::has_no_data_value 0 1 149 321
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_value
//       Access: Published
//  Description: Returns whether a "no data" value has been
//               established by set_no_data_value().
////////////////////////////////////////////////////////////////////
51
inline bool PfmFile::has_no_data_value(void) const;

466 21 has_no_data_threshold 0 4 645 30 PfmFile::has_no_data_threshold 0 1 150 339
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_threshold
//       Access: Published
//  Description: Returns whether a "no data" threshold value has been
//               established by set_no_data_threshold().
////////////////////////////////////////////////////////////////////
55
inline bool PfmFile::has_no_data_threshold(void) const;

467 17 get_no_data_value 0 4 645 26 PfmFile::get_no_data_value 0 1 151 324
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_no_data_value
//       Access: Published
//  Description: If has_no_data_value() returns true, this returns the
//               particular "no data" value.
////////////////////////////////////////////////////////////////////
62
inline LPoint4f const &PfmFile::get_no_data_value(void) const;

468 6 resize 0 4 645 15 PfmFile::resize 0 1 152 422
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::resize
//       Access: Published
//  Description: Applies a simple filter to resample the pfm file
//               in-place to the indicated size.  Don't confuse this
//               with applying a scale to all of the points via
//               xform().
////////////////////////////////////////////////////////////////////
53
void PfmFile::resize(int new_x_size, int new_y_size);

469 15 box_filter_from 0 4 645 24 PfmFile::box_filter_from 0 1 153 529
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
65
void PfmFile::box_filter_from(float radius, PfmFile const &copy);

470 20 gaussian_filter_from 0 4 645 29 PfmFile::gaussian_filter_from 0 1 154 534
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
70
void PfmFile::gaussian_filter_from(float radius, PfmFile const &copy);

471 17 quick_filter_from 0 4 645 26 PfmFile::quick_filter_from 0 1 155 528
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.
////////////////////////////////////////////////////////////////////
53
void PfmFile::quick_filter_from(PfmFile const &copy);

472 12 reverse_rows 0 4 645 21 PfmFile::reverse_rows 0 1 156 271
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
////////////////////////////////////////////////////////////////////
33
void PfmFile::reverse_rows(void);

473 4 flip 0 4 645 13 PfmFile::flip 0 1 157 661
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the table
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
////////////////////////////////////////////////////////////////////
61
void PfmFile::flip(bool flip_x, bool flip_y, bool transpose);

474 5 xform 0 4 645 14 PfmFile::xform 0 2 158 159 588
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
////////////////////////////////////////////////////////////////////
104
void PfmFile::xform(LMatrix4f const &transform);
inline void PfmFile::xform(LMatrix4d const &transform);

475 15 forward_distort 0 4 645 24 PfmFile::forward_distort 0 1 160 1065
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::forward_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.  
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = this(dist(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis is inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
////////////////////////////////////////////////////////////////////
82
void PfmFile::forward_distort(PfmFile const &dist, PN_float32 scale_factor = (1));

476 15 reverse_distort 0 4 645 24 PfmFile::reverse_distort 0 1 161 1063
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = dist(this(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis in inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
////////////////////////////////////////////////////////////////////
82
void PfmFile::reverse_distort(PfmFile const &dist, PN_float32 scale_factor = (1));

477 5 merge 0 4 645 14 PfmFile::merge 0 1 162 447
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::merge
//       Access: Published
//  Description: Wherever there is missing data in this PfmFile (that
//               is, wherever has_point() returns false), copy data
//               from the other PfmFile, which must be exactly the
//               same dimensions as this one.
////////////////////////////////////////////////////////////////////
42
void PfmFile::merge(PfmFile const &other);

478 12 copy_channel 0 4 645 21 PfmFile::copy_channel 0 1 163 400
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile (which could be same as this
//               PfmFile) into the specified channel of this one.
////////////////////////////////////////////////////////////////////
83
void PfmFile::copy_channel(int to_channel, PfmFile const &other, int from_channel);

479 19 copy_channel_masked 0 4 645 28 PfmFile::copy_channel_masked 0 1 164 378
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel_masked
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile, but only where the other file has
//               a data point.
////////////////////////////////////////////////////////////////////
90
void PfmFile::copy_channel_masked(int to_channel, PfmFile const &other, int from_channel);

480 10 apply_crop 0 4 645 19 PfmFile::apply_crop 0 1 165 387
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_crop
//       Access: Published
//  Description: Reduces the PFM file to the cells in the rectangle
//               bounded by (x_begin, x_end, y_begin, y_end), where
//               the _end cells are not included.
////////////////////////////////////////////////////////////////////
73
void PfmFile::apply_crop(int x_begin, int x_end, int y_begin, int y_end);

481 18 clear_to_texcoords 0 4 645 27 PfmFile::clear_to_texcoords 0 1 166 406
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear_to_texcoords
//       Access: Published
//  Description: Replaces this PfmFile with a new PfmFile of size
//               x_size x y_size x 3, containing the x y 0 values in
//               the range 0 .. 1 according to the x y index.
////////////////////////////////////////////////////////////////////
57
void PfmFile::clear_to_texcoords(int x_size, int y_size);

482 9 pull_spot 0 4 645 18 PfmFile::pull_spot 0 1 167 528
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::pull_spot
//       Access: Published
//  Description: Applies delta * t to the point values within radius
//               (xr, yr) distance of (xc, yc).  The t value is scaled
//               from 1.0 at the center to 0.0 at radius (xr, yr), and
//               this scale follows the specified exponent.  Returns
//               the number of points affected.
////////////////////////////////////////////////////////////////////
102
int PfmFile::pull_spot(LPoint4f const &delta, float xc, float yc, float xr, float yr, float exponent);

483 17 calc_tight_bounds 0 4 645 26 PfmFile::calc_tight_bounds 0 1 168 487
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               points within the table.  Assumes the table contains
//               3-D points.
//
//               The return value is true if any points in the table,
//               or false if none are.
////////////////////////////////////////////////////////////////////
80
bool PfmFile::calc_tight_bounds(LPoint3f &min_point, LPoint3f &max_point) const;

484 21 compute_planar_bounds 0 4 645 30 PfmFile::compute_planar_bounds 0 2 169 170 2080
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
////////////////////////////////////////////////////////////////////
328
PointerTo< BoundingHexahedron > PfmFile::compute_planar_bounds(LPoint2f const &center, PN_float32 point_dist, PN_float32 sample_radius, bool points_only) const;
inline PointerTo< BoundingHexahedron > PfmFile::compute_planar_bounds(LPoint2d const &center, PN_float32 point_dist, PN_float32 sample_radius, bool points_only) const;

485 20 compute_sample_point 0 4 645 29 PfmFile::compute_sample_point 0 1 171 468
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_sample_point
//       Access: Published
//  Description: Computes the average of all the point within
//               sample_radius (manhattan distance) and the indicated
//               point.
//
//               The point coordinates are given in UV space, in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
113
void PfmFile::compute_sample_point(LPoint3f &result, PN_float32 x, PN_float32 y, PN_float32 sample_radius) const;

486 14 copy_sub_image 0 4 645 23 PfmFile::copy_sub_image 0 1 172 646
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
////////////////////////////////////////////////////////////////////
140
void PfmFile::copy_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1));

487 13 add_sub_image 0 4 645 22 PfmFile::add_sub_image 0 1 173 397
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.
////////////////////////////////////////////////////////////////////
164
void PfmFile::add_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

488 14 mult_sub_image 0 4 645 23 PfmFile::mult_sub_image 0 1 174 403
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.
////////////////////////////////////////////////////////////////////
165
void PfmFile::mult_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

489 16 divide_sub_image 0 4 645 25 PfmFile::divide_sub_image 0 1 175 475
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::divide_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are divided into the pixels of the destination, after
//               scaling by the specified pixel_scale.
//               dest(x, y) = dest(x, y) / (copy(x, y) * pixel_scale).
////////////////////////////////////////////////////////////////////
167
void PfmFile::divide_sub_image(PfmFile const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

490 11 operator *= 0 4 645 20 PfmFile::operator *= 0 1 176 0
44
void PfmFile::operator *=(float multiplier);

491 6 output 0 4 645 15 PfmFile::output 0 1 177 214
////////////////////////////////////////////////////////////////////
//     Function: PfmFile::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
void PfmFile::output(ostream &out) const;

492 10 get_points 0 4 645 19 PfmFile::get_points 0 1 178 0
42
PyObject *PfmFile::get_points(void) const;

493 13 __getbuffer__ 0 4 645 22 PfmFile::__getbuffer__ 0 1 179 0
77
int PfmFile::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

494 8 ~PfmFile 0 4 645 17 PfmFile::~PfmFile 0 0 0
24
PfmFile::~PfmFile(void);

495 16 make_transparent 0 4 646 26 PNMBrush::make_transparent 0 1 180 414
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
////////////////////////////////////////////////////////////////////
62
static PointerTo< PNMBrush > PNMBrush::make_transparent(void);

496 10 make_pixel 0 4 646 20 PNMBrush::make_pixel 0 1 181 384
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
////////////////////////////////////////////////////////////////////
127
static PointerTo< PNMBrush > PNMBrush::make_pixel(LColorf const &color, PNMBrush::BrushEffect effect = (::PNMBrush::BE_blend));

497 9 make_spot 0 4 646 19 PNMBrush::make_spot 0 1 182 401
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
////////////////////////////////////////////////////////////////////
152
static PointerTo< PNMBrush > PNMBrush::make_spot(LColorf const &color, float radius, bool fuzzy, PNMBrush::BrushEffect effect = (::PNMBrush::BE_blend));

498 10 make_image 0 4 646 20 PNMBrush::make_image 0 1 183 537
////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
////////////////////////////////////////////////////////////////////
148
static PointerTo< PNMBrush > PNMBrush::make_image(PNMImage const &image, float xc, float yc, PNMBrush::BrushEffect effect = (::PNMBrush::BE_blend));

499 8 PNMImage 0 4 649 18 PNMImage::PNMImage 0 4 184 185 186 187 891
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
315
inline PNMImage::PNMImage(void);
PNMImage::PNMImage(Filename const &filename, PNMFileType *type = (0));
inline PNMImage::PNMImage(int x_size, int y_size, int num_channels = (3), xelval maxval = (255), PNMFileType *type = (0), ColorSpace color_space = (::CS_linear));
inline PNMImage::PNMImage(PNMImage const &copy);

500 10 operator = 0 4 649 20 PNMImage::operator = 0 1 188 0
55
inline void PNMImage::operator =(PNMImage const &copy);

501 9 ~PNMImage 0 4 649 19 PNMImage::~PNMImage 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline PNMImage::~PNMImage(void);

502 9 clamp_val 0 4 649 19 PNMImage::clamp_val 0 1 189 290
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::clamp_val(int input_value) const;

503 6 to_val 0 4 649 16 PNMImage::to_val 0 1 190 379
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..1] to [0..get_maxval()].  Do not use this for
//               alpha values, see to_alpha_val.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::to_val(float input_value) const;

504 12 to_alpha_val 0 4 649 22 PNMImage::to_alpha_val 0 1 191 311
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from [0..1]
//               to [0..get_maxval()].
////////////////////////////////////////////////////////////////////
62
inline xelval PNMImage::to_alpha_val(float input_value) const;

505 8 from_val 0 4 649 18 PNMImage::from_val 0 1 192 383
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..get_maxval()] to [0..1].  Do not use this for
//               alpha values, see from_alpha_val.
////////////////////////////////////////////////////////////////////
58
inline float PNMImage::from_val(xelval input_value) const;

506 14 from_alpha_val 0 4 649 24 PNMImage::from_alpha_val 0 1 193 313
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from
//               [0..get_maxval()] to [0..1].
////////////////////////////////////////////////////////////////////
64
inline float PNMImage::from_alpha_val(xelval input_value) const;

507 5 clear 0 4 649 15 PNMImage::clear 0 2 194 195 662
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
////////////////////////////////////////////////////////////////////
185
void PNMImage::clear(void);
void PNMImage::clear(int x_size, int y_size, int num_channels = (3), xelval maxval = (255), PNMFileType *type = (0), ColorSpace color_space = (::CS_linear));

508 9 copy_from 0 4 649 19 PNMImage::copy_from 0 1 196 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
////////////////////////////////////////////////////////////////////
47
void PNMImage::copy_from(PNMImage const &copy);

509 12 copy_channel 0 4 649 22 PNMImage::copy_channel 0 2 197 198 696
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
////////////////////////////////////////////////////////////////////
252
void PNMImage::copy_channel(PNMImage const &copy, int src_channel, int dest_channel);
void PNMImage::copy_channel(PNMImage const &copy, int xto, int yto, int cto, int xfrom = (0), int yfrom = (0), int cfrom = (0), int x_size = (-1), int y_size = (-1));

510 16 copy_header_from 0 4 649 26 PNMImage::copy_header_from 0 1 199 445
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
////////////////////////////////////////////////////////////////////
62
void PNMImage::copy_header_from(PNMImageHeader const &header);

511 9 take_from 0 4 649 19 PNMImage::take_from 0 1 200 314
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
////////////////////////////////////////////////////////////////////
41
void PNMImage::take_from(PNMImage &orig);

512 4 fill 0 4 649 14 PNMImage::fill 0 2 201 202 610
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////
109
inline void PNMImage::fill(float red, float green, float blue);
inline void PNMImage::fill(float gray = (0));

513 8 fill_val 0 4 649 18 PNMImage::fill_val 0 2 203 204 618
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
////////////////////////////////////////////////////////////////////
114
void PNMImage::fill_val(xelval red, xelval green, xelval blue);
inline void PNMImage::fill_val(xelval gray = (0));

514 10 alpha_fill 0 4 649 20 PNMImage::alpha_fill 0 1 205 269
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
52
inline void PNMImage::alpha_fill(float alpha = (0));

515 14 alpha_fill_val 0 4 649 24 PNMImage::alpha_fill_val 0 1 206 273
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
////////////////////////////////////////////////////////////////////
50
void PNMImage::alpha_fill_val(xelval alpha = (0));

516 13 set_read_size 0 4 649 23 PNMImage::set_read_size 0 1 207 855
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_read_size(int x_size, int y_size);

517 15 clear_read_size 0 4 649 25 PNMImage::clear_read_size 0 1 208 298
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
////////////////////////////////////////////////////////////////////
44
inline void PNMImage::clear_read_size(void);

518 13 has_read_size 0 4 649 23 PNMImage::has_read_size 0 1 209 271
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
////////////////////////////////////////////////////////////////////
48
inline bool PNMImage::has_read_size(void) const;

519 15 get_read_x_size 0 4 649 25 PNMImage::get_read_x_size 0 1 210 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_x_size(void) const;

520 15 get_read_y_size 0 4 649 25 PNMImage::get_read_y_size 0 1 211 384
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
////////////////////////////////////////////////////////////////////
49
inline int PNMImage::get_read_y_size(void) const;

521 15 get_color_space 0 4 649 25 PNMImage::get_color_space 0 1 212 296
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_color_space
//       Access: Published
//  Description: Returns the color space in which the image is
//               encoded.
////////////////////////////////////////////////////////////////////
56
inline ColorSpace PNMImage::get_color_space(void) const;

522 4 read 0 4 649 14 PNMImage::read 0 3 213 214 215 1758
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
269
bool PNMImage::read(Filename const &filename, PNMFileType *type = (0), bool report_unknown_type = (1));
bool PNMImage::read(istream &data, string const &filename = ((())), PNMFileType *type = (0), bool report_unknown_type = (1));
bool PNMImage::read(PNMReader *reader);

523 5 write 0 4 649 15 PNMImage::write 0 3 216 217 218 1386
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
////////////////////////////////////////////////////////////////////
226
bool PNMImage::write(Filename const &filename, PNMFileType *type = (0)) const;
bool PNMImage::write(ostream &data, string const &filename = ((())), PNMFileType *type = (0)) const;
bool PNMImage::write(PNMWriter *writer) const;

524 8 is_valid 0 4 649 18 PNMImage::is_valid 0 1 219 470
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
////////////////////////////////////////////////////////////////////
43
inline bool PNMImage::is_valid(void) const;

525 16 set_num_channels 0 4 649 26 PNMImage::set_num_channels 0 1 220 531
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
////////////////////////////////////////////////////////////////////
57
inline void PNMImage::set_num_channels(int num_channels);

526 14 set_color_type 0 4 649 24 PNMImage::set_color_type 0 1 221 606
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
////////////////////////////////////////////////////////////////////
68
void PNMImage::set_color_type(PNMImageHeader::ColorType color_type);

527 15 set_color_space 0 4 649 25 PNMImage::set_color_space 0 1 222 1024
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_space
//       Access: Published
//  Description: Converts the colors in the image to the indicated
//               color space.  This may be a lossy operation, in
//               particular when going from sRGB to linear.
//               The alpha channel remains untouched.
//
//               Note that, because functions like get_xel() and
//               set_xel() work on linearized floating-point values,
//               this conversion won't affect those values (aside
//               from some minor discrepancies due to storage
//               precision).  It does affect the values used by
//               get_xel_val() and set_xel_val(), though, since
//               those operate on encoded colors.
//
//               Some color spaces, particularly scRGB, may enforce
//               the use of a particular maxval setting.
////////////////////////////////////////////////////////////////////
55
void PNMImage::set_color_space(ColorSpace color_space);

528 9 add_alpha 0 4 649 19 PNMImage::add_alpha 0 1 223 365
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
////////////////////////////////////////////////////////////////////
38
inline void PNMImage::add_alpha(void);

529 12 remove_alpha 0 4 649 22 PNMImage::remove_alpha 0 1 224 270
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
////////////////////////////////////////////////////////////////////
41
inline void PNMImage::remove_alpha(void);

530 14 make_grayscale 0 4 649 24 PNMImage::make_grayscale 0 2 225 226 839
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
////////////////////////////////////////////////////////////////////
104
inline void PNMImage::make_grayscale(void);
void PNMImage::make_grayscale(float rc, float gc, float bc);

531 8 make_rgb 0 4 649 18 PNMImage::make_rgb 0 1 227 329
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
////////////////////////////////////////////////////////////////////
37
inline void PNMImage::make_rgb(void);

532 12 reverse_rows 0 4 649 22 PNMImage::reverse_rows 0 1 228 272
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
////////////////////////////////////////////////////////////////////
34
void PNMImage::reverse_rows(void);

533 4 flip 0 4 649 14 PNMImage::flip 0 1 229 662
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the image
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
////////////////////////////////////////////////////////////////////
62
void PNMImage::flip(bool flip_x, bool flip_y, bool transpose);

534 10 set_maxval 0 4 649 20 PNMImage::set_maxval 0 1 230 263
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
////////////////////////////////////////////////////////////////////
41
void PNMImage::set_maxval(xelval maxval);

535 11 get_xel_val 0 4 649 21 PNMImage::get_xel_val 0 2 231 232 654
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
////////////////////////////////////////////////////////////////////
102
inline xel &PNMImage::get_xel_val(int x, int y);
inline xel PNMImage::get_xel_val(int x, int y) const;

536 11 set_xel_val 0 4 649 21 PNMImage::set_xel_val 0 3 233 234 235 1570
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
////////////////////////////////////////////////////////////////////
207
inline void PNMImage::set_xel_val(int x, int y, xel const &value);
inline void PNMImage::set_xel_val(int x, int y, xelval r, xelval g, xelval b);
inline void PNMImage::set_xel_val(int x, int y, xelval gray);

537 11 get_red_val 0 4 649 21 PNMImage::get_red_val 0 1 236 399
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::get_red_val(int x, int y) const;

538 13 get_green_val 0 4 649 23 PNMImage::get_green_val 0 1 237 403
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
58
inline xelval PNMImage::get_green_val(int x, int y) const;

539 12 get_blue_val 0 4 649 22 PNMImage::get_blue_val 0 1 238 401
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::get_blue_val(int x, int y) const;

540 12 get_gray_val 0 4 649 22 PNMImage::get_gray_val 0 1 239 642
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.
//               The value returned is in the range 0..maxval and
//               encoded in the configured color space.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::get_gray_val(int x, int y) const;

541 13 get_alpha_val 0 4 649 23 PNMImage::get_alpha_val 0 1 240 453
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval and always linear.
////////////////////////////////////////////////////////////////////
58
inline xelval PNMImage::get_alpha_val(int x, int y) const;

542 11 set_red_val 0 4 649 21 PNMImage::set_red_val 0 1 241 518
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_red if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::set_red_val(int x, int y, xelval r);

543 13 set_green_val 0 4 649 23 PNMImage::set_green_val 0 1 242 524
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_green if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_green_val(int x, int y, xelval g);

544 12 set_blue_val 0 4 649 22 PNMImage::set_blue_val 0 1 243 521
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_blue if you instead have a linearized and
//               normalized floating-point value.
////////////////////////////////////////////////////////////////////
59
inline void PNMImage::set_blue_val(int x, int y, xelval b);

545 12 set_gray_val 0 4 649 22 PNMImage::set_gray_val 0 1 244 876
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval, encoded in the configured
//               color space.  See set_gray if you instead have a
//               linearized normalized floating-point value.
////////////////////////////////////////////////////////////////////
62
inline void PNMImage::set_gray_val(int x, int y, xelval gray);

546 13 set_alpha_val 0 4 649 23 PNMImage::set_alpha_val 0 1 245 567
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
//
//               This value is always linearly encoded, even if the
//               image is set to the sRGB color space.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::set_alpha_val(int x, int y, xelval a);

547 15 get_channel_val 0 4 649 25 PNMImage::get_channel_val 0 1 246 630
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
66
xelval PNMImage::get_channel_val(int x, int y, int channel) const;

548 15 set_channel_val 0 4 649 25 PNMImage::set_channel_val 0 1 247 629
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
////////////////////////////////////////////////////////////////////
72
void PNMImage::set_channel_val(int x, int y, int channel, xelval value);

549 11 get_channel 0 4 649 21 PNMImage::get_channel 0 1 248 629
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a float in the range
//               0..1.
////////////////////////////////////////////////////////////////////
61
float PNMImage::get_channel(int x, int y, int channel) const;

550 11 set_channel 0 4 649 21 PNMImage::set_channel 0 1 249 628
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a float in the
//               range 0..1.
////////////////////////////////////////////////////////////////////
67
void PNMImage::set_channel(int x, int y, int channel, float value);

551 9 get_pixel 0 4 649 19 PNMImage::get_pixel 0 1 250 322
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
66
PNMImageHeader::PixelSpec PNMImage::get_pixel(int x, int y) const;

552 9 set_pixel 0 4 649 19 PNMImage::set_pixel 0 1 251 319
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
////////////////////////////////////////////////////////////////////
79
void PNMImage::set_pixel(int x, int y, PNMImageHeader::PixelSpec const &pixel);

553 7 get_xel 0 4 649 17 PNMImage::get_xel 0 1 252 336
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
56
inline LRGBColorf PNMImage::get_xel(int x, int y) const;

554 7 set_xel 0 4 649 17 PNMImage::set_xel 0 3 253 254 255 1055
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
198
inline void PNMImage::set_xel(int x, int y, LRGBColorf const &value);
inline void PNMImage::set_xel(int x, int y, float r, float g, float b);
inline void PNMImage::set_xel(int x, int y, float gray);

555 9 get_xel_a 0 4 649 19 PNMImage::get_xel_a 0 1 256 339
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline LColorf PNMImage::get_xel_a(int x, int y) const;

556 9 set_xel_a 0 4 649 19 PNMImage::set_xel_a 0 2 257 258 680
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
151
inline void PNMImage::set_xel_a(int x, int y, LColorf const &value);
inline void PNMImage::set_xel_a(int x, int y, float r, float g, float b, float a);

557 7 get_red 0 4 649 17 PNMImage::get_red 0 1 259 367
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
51
inline float PNMImage::get_red(int x, int y) const;

558 9 get_green 0 4 649 19 PNMImage::get_green 0 1 260 371
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline float PNMImage::get_green(int x, int y) const;

559 8 get_blue 0 4 649 18 PNMImage::get_blue 0 1 261 369
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
52
inline float PNMImage::get_blue(int x, int y) const;

560 8 get_gray 0 4 649 18 PNMImage::get_gray 0 1 262 594
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned
//               is a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
52
inline float PNMImage::get_gray(int x, int y) const;

561 9 get_alpha 0 4 649 19 PNMImage::get_alpha 0 1 263 434
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a float
//               in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline float PNMImage::get_alpha(int x, int y) const;

562 7 set_red 0 4 649 17 PNMImage::set_red 0 1 264 373
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
53
inline void PNMImage::set_red(int x, int y, float r);

563 9 set_green 0 4 649 19 PNMImage::set_green 0 1 265 377
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::set_green(int x, int y, float g);

564 8 set_blue 0 4 649 18 PNMImage::set_blue 0 1 266 375
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
////////////////////////////////////////////////////////////////////
54
inline void PNMImage::set_blue(int x, int y, float b);

565 8 set_gray 0 4 649 18 PNMImage::set_gray 0 1 267 729
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a linearized float in the range 0..1.
////////////////////////////////////////////////////////////////////
57
inline void PNMImage::set_gray(int x, int y, float gray);

566 9 set_alpha 0 4 649 19 PNMImage::set_alpha 0 1 268 432
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
////////////////////////////////////////////////////////////////////
55
inline void PNMImage::set_alpha(int x, int y, float a);

567 10 get_bright 0 4 649 20 PNMImage::get_bright 0 3 269 270 271 1423
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               linearized float in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
////////////////////////////////////////////////////////////////////
234
inline float PNMImage::get_bright(int x, int y) const;
inline float PNMImage::get_bright(int x, int y, float rc, float gc, float bc) const;
inline float PNMImage::get_bright(int x, int y, float rc, float gc, float bc, float ac) const;

568 5 blend 0 4 649 15 PNMImage::blend 0 2 272 273 1080
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
////////////////////////////////////////////////////////////////////
154
inline void PNMImage::blend(int x, int y, LRGBColorf const &val, float alpha);
void PNMImage::blend(int x, int y, float r, float g, float b, float alpha);

569 14 copy_sub_image 0 4 649 24 PNMImage::copy_sub_image 0 1 274 647
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
////////////////////////////////////////////////////////////////////
142
void PNMImage::copy_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1));

570 15 blend_sub_image 0 4 649 25 PNMImage::blend_sub_image 0 1 275 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
////////////////////////////////////////////////////////////////////
168
void PNMImage::blend_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

571 13 add_sub_image 0 4 649 23 PNMImage::add_sub_image 0 1 276 503
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
////////////////////////////////////////////////////////////////////
166
void PNMImage::add_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

572 14 mult_sub_image 0 4 649 24 PNMImage::mult_sub_image 0 1 277 509
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
////////////////////////////////////////////////////////////////////
167
void PNMImage::mult_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

573 16 darken_sub_image 0 4 649 26 PNMImage::darken_sub_image 0 1 278 770
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
////////////////////////////////////////////////////////////////////
169
void PNMImage::darken_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

574 17 lighten_sub_image 0 4 649 27 PNMImage::lighten_sub_image 0 1 279 635
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
////////////////////////////////////////////////////////////////////
170
void PNMImage::lighten_sub_image(PNMImage const &copy, int xto, int yto, int xfrom = (0), int yfrom = (0), int x_size = (-1), int y_size = (-1), float pixel_scale = (1));

575 9 threshold 0 4 649 19 PNMImage::threshold 0 1 280 1004
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y, channel). Set this
//               image's (x, y) to:
//
//               lt.get_xel(x, y) if s < threshold, or
//
//               ge.get_xel(x, y) if s >= threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.  As a special case, lt and ge may
//               both be 1x1 images instead of the source image size.
////////////////////////////////////////////////////////////////////
125
void PNMImage::threshold(PNMImage const &select_image, int channel, float threshold, PNMImage const &lt, PNMImage const &ge);

576 20 fill_distance_inside 0 4 649 30 PNMImage::fill_distance_inside 0 1 281 1231
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_inside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest dark pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A dark pixel is
//               defined as one whose pixel value is < threshold.
//
//               If shrink_from_border is true, then the mask image is
//               considered to be surrounded by a border of dark
//               pixels; otherwise, the border isn't considered.
//
//               This can be used, in conjunction with threshold, to
//               shrink a mask image inwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
////////////////////////////////////////////////////////////////////
112
void PNMImage::fill_distance_inside(PNMImage const &mask, float threshold, int radius, bool shrink_from_border);

577 21 fill_distance_outside 0 4 649 31 PNMImage::fill_distance_outside 0 1 282 1030
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_outside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest white pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A white pixel is
//               defined as one whose pixel value is >= threshold.
//
//               This can be used, in conjunction with threshold, to
//               grow a mask image outwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
////////////////////////////////////////////////////////////////////
88
void PNMImage::fill_distance_outside(PNMImage const &mask, float threshold, int radius);

578 7 rescale 0 4 649 17 PNMImage::rescale 0 1 283 537
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::rescale
//       Access: Published
//  Description: Rescales the RGB channel values so that any values in
//               the original image between min_val and max_val are
//               expanded to the range 0 .. 1.  Values below min_val
//               are set to 0, and values above max_val are set to 1.
//               Does not affect the alpha channel, if any.
////////////////////////////////////////////////////////////////////
53
void PNMImage::rescale(float min_val, float max_val);

579 11 render_spot 0 4 649 21 PNMImage::render_spot 0 1 284 781
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
////////////////////////////////////////////////////////////////////
101
void PNMImage::render_spot(LColorf const &fg, LColorf const &bg, float min_radius, float max_radius);

580 13 expand_border 0 4 649 23 PNMImage::expand_border 0 1 285 472
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
////////////////////////////////////////////////////////////////////
93
void PNMImage::expand_border(int left, int right, int bottom, int top, LColorf const &color);

581 10 box_filter 0 4 649 20 PNMImage::box_filter 0 1 286 394
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
53
inline void PNMImage::box_filter(float radius = (1));

582 15 gaussian_filter 0 4 649 25 PNMImage::gaussian_filter 0 1 287 404
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::gaussian_filter(float radius = (1));

583 23 unfiltered_stretch_from 0 4 649 33 PNMImage::unfiltered_stretch_from 0 1 288 334
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unfiltered_stretch_from
//       Access: Published
//  Description: Resizes from the indicated image into this one by
//               performing a nearest-point sample.
////////////////////////////////////////////////////////////////////
61
void PNMImage::unfiltered_stretch_from(PNMImage const &copy);

584 15 box_filter_from 0 4 649 25 PNMImage::box_filter_from 0 1 289 530
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
67
void PNMImage::box_filter_from(float radius, PNMImage const &copy);

585 20 gaussian_filter_from 0 4 649 30 PNMImage::gaussian_filter_from 0 1 290 535
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
////////////////////////////////////////////////////////////////////
72
void PNMImage::gaussian_filter_from(float radius, PNMImage const &copy);

586 17 quick_filter_from 0 4 649 27 PNMImage::quick_filter_from 0 1 291 731
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
////////////////////////////////////////////////////////////////////
93
void PNMImage::quick_filter_from(PNMImage const &copy, int xborder = (0), int yborder = (0));

587 14 make_histogram 0 4 649 24 PNMImage::make_histogram 0 1 292 294
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
////////////////////////////////////////////////////////////////////
63
void PNMImage::make_histogram(PNMImageHeader::Histogram &hist);

588 17 perlin_noise_fill 0 4 649 27 PNMImage::perlin_noise_fill 0 2 293 294 880
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
////////////////////////////////////////////////////////////////////
170
void PNMImage::perlin_noise_fill(float sx, float sy, int table_size = (256), unsigned long int seed = (0));
void PNMImage::perlin_noise_fill(StackedPerlinNoise2 &perlin);

589 14 remix_channels 0 4 649 24 PNMImage::remix_channels 0 1 295 370
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
////////////////////////////////////////////////////////////////////
52
void PNMImage::remix_channels(LMatrix4 const &conv);

590 13 gamma_correct 0 4 649 23 PNMImage::gamma_correct 0 1 296 474
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
////////////////////////////////////////////////////////////////////
70
inline void PNMImage::gamma_correct(float from_gamma, float to_gamma);

591 19 gamma_correct_alpha 0 4 649 29 PNMImage::gamma_correct_alpha 0 1 297 481
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
////////////////////////////////////////////////////////////////////
76
inline void PNMImage::gamma_correct_alpha(float from_gamma, float to_gamma);

592 14 apply_exponent 0 4 649 24 PNMImage::apply_exponent 0 4 298 299 300 301 1934
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
////////////////////////////////////////////////////////////////////
356
inline void PNMImage::apply_exponent(float gray_exponent);
inline void PNMImage::apply_exponent(float gray_exponent, float alpha_exponent);
inline void PNMImage::apply_exponent(float red_exponent, float green_exponent, float blue_exponent);
void PNMImage::apply_exponent(float red_exponent, float green_exponent, float blue_exponent, float alpha_exponent);

593 15 get_average_xel 0 4 649 25 PNMImage::get_average_xel 0 1 302 302
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
////////////////////////////////////////////////////////////////////
49
LRGBColorf PNMImage::get_average_xel(void) const;

594 17 get_average_xel_a 0 4 649 27 PNMImage::get_average_xel_a 0 1 303 333
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
////////////////////////////////////////////////////////////////////
48
LColorf PNMImage::get_average_xel_a(void) const;

595 16 get_average_gray 0 4 649 26 PNMImage::get_average_gray 0 1 304 317
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
////////////////////////////////////////////////////////////////////
45
float PNMImage::get_average_gray(void) const;

596 16 do_fill_distance 0 4 649 26 PNMImage::do_fill_distance 0 1 305 343
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::do_fill_distance
//       Access: Private
//  Description: Recursively fills in the minimum distance measured
//               from a certain set of points into the gray channel.
////////////////////////////////////////////////////////////////////
55
void PNMImage::do_fill_distance(int xi, int yi, int d);

597 4 size 0 4 650 19 PNMImage::Row::size 0 1 323 255
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::size
//       Access: Published
//  Description: Get the number of pixels in the row.
////////////////////////////////////////////////////////////////////
46
inline size_t PNMImage::Row::size(void) const;

598 11 operator [] 0 4 650 26 PNMImage::Row::operator [] 0 1 324 0
55
inline LColorf PNMImage::Row::operator [](int x) const;

599 11 __setitem__ 0 4 650 26 PNMImage::Row::__setitem__ 0 1 325 376
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.  If
//               the image has no alpha channel, the alpha component
//               is ignored.
////////////////////////////////////////////////////////////////////
64
inline void PNMImage::Row::__setitem__(int x, LColorf const &v);

600 11 get_xel_val 0 4 650 26 PNMImage::Row::get_xel_val 0 1 326 276
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
46
inline xel &PNMImage::Row::get_xel_val(int x);

601 11 set_xel_val 0 4 650 26 PNMImage::Row::set_xel_val 0 1 327 274
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
60
inline void PNMImage::Row::set_xel_val(int x, xel const &v);

602 13 get_alpha_val 0 4 650 28 PNMImage::Row::get_alpha_val 0 1 328 282
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
56
inline xelval PNMImage::Row::get_alpha_val(int x) const;

603 13 set_alpha_val 0 4 650 28 PNMImage::Row::set_alpha_val 0 1 329 280
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
58
inline void PNMImage::Row::set_alpha_val(int x, xelval v);

604 4 ~Row 0 4 650 19 PNMImage::Row::~Row 0 0 0
26
PNMImage::Row::~Row(void);

605 4 size 0 4 651 20 PNMImage::CRow::size 0 1 330 256
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::size
//       Access: Published
//  Description: Get the number of pixels in the row.
////////////////////////////////////////////////////////////////////
47
inline size_t PNMImage::CRow::size(void) const;

606 11 operator [] 0 4 651 27 PNMImage::CRow::operator [] 0 1 331 0
56
inline LColorf PNMImage::CRow::operator [](int x) const;

607 11 get_xel_val 0 4 651 27 PNMImage::CRow::get_xel_val 0 1 332 277
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
////////////////////////////////////////////////////////////////////
52
inline xel PNMImage::CRow::get_xel_val(int x) const;

608 13 get_alpha_val 0 4 651 29 PNMImage::CRow::get_alpha_val 0 1 333 283
////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
////////////////////////////////////////////////////////////////////
57
inline xelval PNMImage::CRow::get_alpha_val(int x) const;

609 5 ~CRow 0 4 651 21 PNMImage::CRow::~CRow 0 0 0
28
PNMImage::CRow::~CRow(void);

610 11 operator [] 0 4 649 21 PNMImage::operator [] 0 2 306 307 0
108
inline PNMImage::Row PNMImage::operator [](int y);
inline PNMImage::CRow PNMImage::operator [](int y) const;

611 10 operator ~ 0 68 649 20 PNMImage::operator ~ 0 1 308 0
42
PNMImage PNMImage::operator ~(void) const;

612 10 operator + 0 4 649 20 PNMImage::operator + 0 2 309 310 0
132
inline PNMImage PNMImage::operator +(PNMImage const &other) const;
inline PNMImage PNMImage::operator +(LColorf const &other) const;

613 10 operator - 0 4 649 20 PNMImage::operator - 0 2 311 312 0
132
inline PNMImage PNMImage::operator -(PNMImage const &other) const;
inline PNMImage PNMImage::operator -(LColorf const &other) const;

614 10 operator * 0 4 649 20 PNMImage::operator * 0 3 313 314 315 0
194
inline PNMImage PNMImage::operator *(PNMImage const &other) const;
inline PNMImage PNMImage::operator *(float multiplier) const;
inline PNMImage PNMImage::operator *(LColorf const &other) const;

615 11 operator += 0 4 649 21 PNMImage::operator += 0 2 316 317 0
100
void PNMImage::operator +=(PNMImage const &other);
void PNMImage::operator +=(LColorf const &other);

616 11 operator -= 0 4 649 21 PNMImage::operator -= 0 2 318 319 0
100
void PNMImage::operator -=(PNMImage const &other);
void PNMImage::operator -=(LColorf const &other);

617 11 operator *= 0 4 649 21 PNMImage::operator *= 0 3 320 321 322 0
146
void PNMImage::operator *=(PNMImage const &other);
void PNMImage::operator *=(float multiplier);
void PNMImage::operator *=(LColorf const &other);

618 10 PNMPainter 0 4 652 22 PNMPainter::PNMPainter 0 1 334 896
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
////////////////////////////////////////////////////////////////////
68
PNMPainter::PNMPainter(PNMImage &image, int xo = (0), int yo = (0));

619 11 ~PNMPainter 0 4 652 23 PNMPainter::~PNMPainter 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline PNMPainter::~PNMPainter(void);

620 7 set_pen 0 4 652 19 PNMPainter::set_pen 0 1 335 608
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
47
inline void PNMPainter::set_pen(PNMBrush *pen);

621 7 get_pen 0 4 652 19 PNMPainter::get_pen 0 1 336 259
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
////////////////////////////////////////////////////////////////////
49
inline PNMBrush *PNMPainter::get_pen(void) const;

622 8 set_fill 0 4 652 20 PNMPainter::set_fill 0 1 337 639
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
////////////////////////////////////////////////////////////////////
49
inline void PNMPainter::set_fill(PNMBrush *fill);

623 8 get_fill 0 4 652 20 PNMPainter::get_fill 0 1 338 268
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
////////////////////////////////////////////////////////////////////
50
inline PNMBrush *PNMPainter::get_fill(void) const;

624 10 draw_point 0 4 652 22 PNMPainter::draw_point 0 1 339 305
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
53
inline void PNMPainter::draw_point(float x, float y);

625 9 draw_line 0 4 652 21 PNMPainter::draw_line 0 1 340 303
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
////////////////////////////////////////////////////////////////////
67
void PNMPainter::draw_line(float xa, float ya, float xb, float yb);

626 14 draw_rectangle 0 4 652 26 PNMPainter::draw_rectangle 0 1 341 488
////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
////////////////////////////////////////////////////////////////////
72
void PNMPainter::draw_rectangle(float xa, float ya, float xb, float yb);

341
1 0 0 7 2 653 358 0 0 0 
2 0 0 7 2 653 358 0 0 3 1 r 1 628  1 g 1 628  1 b 1 628  
3 0 0 6 3 654 0 0 0 0 
4 0 0 4 4 655 0 0 0 3 4 this 3 653  1 i 1 654  10 assign_val 1 628  
5 0 0 6 4 628 0 0 0 2 4 this 3 656  1 i 1 654  
6 0 0 7 5 653 358 0 0 2 4 this 3 656  5 other 1 656  
7 0 0 7 6 653 358 0 0 2 4 this 3 656  5 other 1 656  
8 0 0 7 7 653 358 0 0 2 4 this 3 656  4 mult 1 658  
9 0 0 6 8 653 0 0 0 2 4 this 3 653  5 other 1 656  
10 0 0 6 9 653 0 0 0 2 4 this 3 653  5 other 1 656  
11 0 0 6 10 653 0 0 0 2 4 this 3 653  4 mult 1 658  
12 0 0 4 11 655 0 0 0 2 4 this 3 653  3 out 1 659  
13 0 0 4 15 655 0 0 0 2 4 this 3 653  5 value 1 628  
14 0 0 6 14 628 0 0 0 1 4 this 3 656  
15 0 0 4 18 655 0 0 0 2 4 this 3 653  5 value 1 628  
16 0 0 6 17 628 0 0 0 1 4 this 3 656  
17 0 0 4 21 655 0 0 0 2 4 this 3 653  5 value 1 628  
18 0 0 6 20 628 0 0 0 1 4 this 3 656  
19 0 0 6 27 663 0 0 0 1 4 this 3 661  
20 0 0 6 28 654 0 0 360 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_num_extensions
//       Access: Published, Virtual
//  Description: Returns the number of different possible filename
//               extensions associated with this particular file type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 661  
21 0 0 6 29 663 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_extension
//       Access: Published, Virtual
//  Description: Returns the nth possible filename extension
//               associated with this particular file type, without a
//               leading dot.
//////////////////////////////////////////////////////////////////// 2 4 this 3 661  1 n 1 654  
22 0 0 6 30 663 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileType::get_suggested_extension
//       Access: Published, Virtual
//  Description: Returns a suitable filename extension (without a
//               leading dot) to suggest for files of this type, or
//               empty string if no suggestions are available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 661  
23 0 0 7 31 665 0 0 0 0 
24 0 0 6 34 654 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_num_types
//       Access: Published
//  Description: Returns the total number of types registered.
//////////////////////////////////////////////////////////////////// 1 4 this 3 666  
25 0 0 6 35 668 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type
//       Access: Published
//  Description: Returns the nth type registered.
//////////////////////////////////////////////////////////////////// 2 4 this 3 666  1 n 1 654  
26 0 0 6 36 668 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_extension
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               extension.  Returns a suitable PNMFileType pointer,
//               or NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 666  8 filename 1 663  
27 0 0 6 37 668 0 0 544 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_from_magic_number
//       Access: Published
//  Description: Tries to determine what the PNMFileType is likely to
//               be for a particular image file based on its
//               magic number, the first two bytes read from the
//               file.  Returns a suitable PNMFileType pointer, or
//               NULL if no type can be determined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 666  12 magic_number 1 663  
28 0 0 6 38 668 0 0 444 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_type_by_handle
//       Access: Published
//  Description: Returns the PNMFileType instance stored in the
//               registry for the given TypeHandle, e.g. as retrieved
//               by a previous call to get_type() on the type
//               instance.
//////////////////////////////////////////////////////////////////// 2 4 this 3 666  6 handle 1 665  
29 0 0 4 39 655 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::write
//       Access: Published
//  Description: Writes a list of supported image file types to the
//               indicated output stream, one per line.
//////////////////////////////////////////////////////////////////// 3 4 this 3 666  3 out 1 659  12 indent_level 1 654  
30 0 0 6 40 669 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMFileTypeRegistry::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the global PNMFileTypeRegistry
//               object.
//////////////////////////////////////////////////////////////////// 0 
31 0 0 7 42 670 374 0 226 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
32 0 0 7 42 670 374 0 231 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 671  
33 0 0 6 43 670 0 0 0 2 4 this 3 670  4 copy 1 671  
34 0 0 6 46 635 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_type
//       Access: Published
//  Description: Returns the image type of the image, as an enumerated
//               value.  This is really just the number of channels
//               cast to the enumerated type.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
35 0 0 6 47 654 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_num_channels
//       Access: Published
//  Description: Returns the number of channels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
36 0 0 6 48 673 0 0 551 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published
//  Description: Returns false if the image is a full-color image, and
//               has red, green, and blue components; true if it is a
//               grayscale image and has only a gray component.  (The
//               gray color is actually stored in the blue channel,
//               and the red and green channels are ignored.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
37 0 0 6 48 673 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::is_grayscale
//       Access: Published, Static
//  Description: This static variant of is_grayscale() returns true if
//               the indicated image type represents a grayscale
//               image, false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 635  
38 0 0 6 49 673 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published
//  Description: Returns true if the image includes an alpha channel,
//               false otherwise.  Unlike is_grayscale(), if this
//               returns false it is an error to call any of the
//               functions accessing the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
39 0 0 6 49 673 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_alpha
//       Access: Published, Static
//  Description: This static variant of has_alpha() returns true if
//               the indicated image type includes an alpha channel,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 10 color_type 1 635  
40 0 0 6 50 674 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_maxval
//       Access: Published
//  Description: Returns the maximum channel value allowable for any
//               pixel in this image; for instance, 255 for a typical
//               8-bit-per-channel image.  A pixel with this value is
//               full on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
41 0 0 6 51 675 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_color_space
//       Access: Published
//  Description: Returns the color space that the image is encoded
//               in, or CS_unspecified if unknown.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
42 0 0 6 52 654 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_x_size
//       Access: Published
//  Description: Returns the number of pixels in the X direction.
//               This is one more than the largest allowable X
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
43 0 0 6 53 654 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_y_size
//       Access: Published
//  Description: Returns the number of pixels in the Y direction.
//               This is one more than the largest allowable Y
//               coordinate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
44 0 0 6 54 663 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_comment
//       Access: Published
//  Description: Gets the user comment from the file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
45 0 0 4 55 655 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_comment
//       Access: Published
//  Description: Writes a user comment string to the image (header).
//////////////////////////////////////////////////////////////////// 2 4 this 3 670  7 comment 1 663  
46 0 0 6 56 673 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::has_type
//       Access: Published
//  Description: Returns true if the PNMImageHeader knows what type it
//               is, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
47 0 0 6 57 668 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::get_type
//       Access: Published
//  Description: If the file type is known (e.g. has_type() returns
//               true), returns its PNMFileType pointer; otherwise,
//               returns NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 671  
48 0 0 4 58 655 0 0 583 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::set_type
//       Access: Published
//  Description: Sets the file type of this PNMImage.  This will be
//               the default type used when an image is read, if the
//               type cannot be determined by magic number or inferred
//               by extension, or the type used when the image is
//               written, if the type cannot be inferred from the
//               filename extension.
//////////////////////////////////////////////////////////////////// 2 4 this 3 670  4 type 1 668  
49 0 0 6 59 673 0 0 498 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Opens up the image file and tries to read its header
//               information to determine its size, number of
//               channels, etc.  If successful, updates the header
//               information and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 670  8 filename 1 676  4 type 1 668  19 report_unknown_type 1 673  
50 0 0 6 59 673 0 0 714 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_header
//       Access: Published
//  Description: Reads the image header information only from the
//               indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 670  4 data 1 679  8 filename 1 663  4 type 1 668  19 report_unknown_type 1 673  
51 0 0 6 60 681 0 0 689 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the indicated image filename,
//               or NULL if the filename cannot be read for some
//               reason.  The filename "-" always stands for standard
//               input.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 671  8 filename 1 676  4 type 1 668  19 report_unknown_type 1 673  
52 0 0 6 60 681 0 0 1414 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_reader
//       Access: Published
//  Description: Returns a newly-allocated PNMReader of the suitable
//               type for reading from the already-opened image file,
//               or NULL if the file cannot be read for some reason.
//
//               owns_file should be set true if the PNMReader is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the file
//               type.
//
//               If magic_number is nonempty, it is assumed to
//               represent the first few bytes that have already been
//               read from the file.  Some file types may have
//               difficulty if this is more than two bytes.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMReader should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 7 4 this 3 671  4 file 1 679  9 owns_file 1 673  8 filename 1 676  12 magic_number 1 663  4 type 1 668  19 report_unknown_type 1 673  
53 0 0 6 61 683 0 0 694 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing an image to the indicated filename,
//               or NULL if the filename cannot be written for some
//               reason.  The filename "-" always stands for standard
//               output.  If type is specified, it is a suggestion for
//               the file type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 3 4 this 3 671  8 filename 1 676  4 type 1 668  
54 0 0 6 61 683 0 0 1165 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::make_writer
//       Access: Published
//  Description: Returns a newly-allocated PNMWriter of the suitable
//               type for writing to the already-opened image file, or
//               NULL if the file cannot be written for some reason.
//
//               owns_file should be set true if the PNMWriter is to
//               be considered the owner of the stream pointer (in
//               which case the stream will be deleted on completion,
//               whether successful or not), or false if it should not
//               delete it.
//
//               The filename parameter is optional here, since the
//               file has already been opened; it is only used to
//               examine the extension and attempt to guess the
//               intended file type.
//
//               If type is non-NULL, it is a suggestion for the file
//               type to use.
//
//               The PNMWriter should be deleted when it is no longer
//               needed.
//////////////////////////////////////////////////////////////////// 5 4 this 3 671  4 file 1 659  9 owns_file 1 673  8 filename 1 676  4 type 1 668  
55 0 0 6 62 673 0 0 602 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::read_magic_number
//       Access: Published, Static
//  Description: Ensures that the first n bytes of the file are read
//               into magic_number.  If magic_number is initially
//               nonempty, assumes these represent the first few bytes
//               already extracted.  Returns true if successful, false
//               if an end of file or error occurred before num_bytes
//               could be read.
//////////////////////////////////////////////////////////////////// 3 4 file 1 679  12 magic_number 1 685  9 num_bytes 1 654  
56 0 0 4 63 655 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 671  3 out 1 659  
57 0 0 7 65 690 410 0 243 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 688  
58 0 0 7 65 690 410 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 3 rgb 1 691  
59 0 0 7 65 690 410 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 3 rgb 1 691  5 alpha 1 674  
60 0 0 7 65 690 410 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 10 gray_value 1 674  
61 0 0 7 65 690 410 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 10 gray_value 1 674  5 alpha 1 674  
62 0 0 7 65 690 410 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 3 red 1 674  5 green 1 674  4 blue 1 674  
63 0 0 7 65 690 410 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 3 red 1 674  5 green 1 674  4 blue 1 674  5 alpha 1 674  
64 0 0 6 66 690 0 0 0 2 4 this 3 690  4 copy 1 688  
65 0 0 6 67 673 0 0 0 2 4 this 3 688  5 other 1 688  
66 0 0 6 68 673 0 0 0 2 4 this 3 688  5 other 1 688  
67 0 0 6 69 673 0 0 0 2 4 this 3 688  5 other 1 688  
68 0 0 6 70 654 0 0 237 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::compare_to
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 688  5 other 1 688  
69 0 0 6 71 674 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_red
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 688  
70 0 0 6 72 674 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_green
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 688  
71 0 0 6 73 674 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_blue
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 688  
72 0 0 6 74 674 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::get_alpha
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 688  
73 0 0 4 75 655 0 0 234 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_red
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 690  3 red 1 674  
74 0 0 4 76 655 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_green
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 690  5 green 1 674  
75 0 0 4 77 655 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_blue
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 690  4 blue 1 674  
76 0 0 4 78 655 0 0 236 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::set_alpha
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 690  5 alpha 1 674  
77 0 0 6 79 674 0 0 0 2 4 this 3 688  1 n 1 654  
78 0 0 6 80 654 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::size
//       Access: Published, Static
//  Description: Specifies the number of components in the PixelSpec;
//               this is always 4, regardless of the type of image it
//               was taken from.
//////////////////////////////////////////////////////////////////// 0 
79 0 0 4 81 655 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::PixelSpec::output
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 688  3 out 1 659  
80 0 0 7 92 693 417 0 238 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
81 0 0 6 93 654 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_num_pixels
//       Access: Published
//  Description: Returns the number of unique pixel colors in the
//               histogram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 694  
82 0 0 6 94 688 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_pixel
//       Access: Published
//  Description: Returns the nth unique pixel color in the histogram.
//               These are ordered by default from most common to
//               least common.
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  1 n 1 654  
83 0 0 6 95 654 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               indicated pixel color.
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  5 pixel 1 688  
84 0 0 6 95 654 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::get_count
//       Access: Published
//  Description: Returns the number of occurrences in the image of the
//               nth unique pixel color in the histogram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  1 n 1 654  
85 0 0 4 96 655 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: PNMImageHeader::Histogram::write
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 694  3 out 1 659  
86 0 0 7 99 696 494 0 219 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
87 0 0 7 99 696 494 0 224 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 697  
88 0 0 6 100 696 0 0 0 2 4 this 3 696  4 copy 1 697  
89 0 0 4 101 655 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Eliminates all data in the file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 696  
90 0 0 4 101 655 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear
//       Access: Published
//  Description: Resets to an empty table with a specific size.  The
//               case of num_channels == 0 is allowed only in the case
//               that x_size and y_size are also == 0; and this makes
//               an empty (and invalid) PfmFile.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  6 x_size 1 654  6 y_size 1 654  12 num_channels 1 654  
91 0 0 6 102 673 0 0 501 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated file, returning
//               true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  8 fullpath 1 676  
92 0 0 6 102 673 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data using the indicated PNMReader.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  6 reader 1 681  
93 0 0 6 102 673 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::read
//       Access: Published
//  Description: Reads the PFM data from the indicated stream,
//               returning true on success, false on failure.
//
//               This can also handle reading a standard image file
//               supported by PNMImage; it will be quietly converted
//               to a floating-point type.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  2 in 1 679  8 fullpath 1 676  
94 0 0 6 103 673 0 0 589 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated file, returning
//               true on success, false on failure.
//
//               If the type implied by the filename extension
//               supports floating-point, the data will be written
//               directly; otherwise, the floating-point data will be
//               quietly converted to the appropriate integer type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  8 fullpath 1 676  
95 0 0 6 103 673 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data using the indicated PNMWriter.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  6 writer 1 683  
96 0 0 6 103 673 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::write
//       Access: Published
//  Description: Writes the PFM data to the indicated stream,
//               returning true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  3 out 1 659  8 fullpath 1 676  
97 0 0 6 104 673 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::load
//       Access: Published
//  Description: Fills the PfmFile with the data from the indicated
//               PNMImage, converted to floating-point values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  8 pnmimage 1 699  
98 0 0 6 105 673 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store
//       Access: Published
//  Description: Copies the data to the indicated PNMImage, converting
//               to RGB values.
//////////////////////////////////////////////////////////////////// 2 4 this 3 697  8 pnmimage 1 701  
99 0 0 6 106 673 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::store_mask
//       Access: Published
//  Description: Stores 1 or 0 values into the indicated PNMImage,
//               according to has_point() for each pixel.  Each valid
//               point gets a 1 value; each nonexistent point gets a 0
//               value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 697  8 pnmimage 1 701  
100 0 0 6 107 673 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_valid
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 697  
101 0 0 6 108 702 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
//////////////////////////////////////////////////////////////////// 1 4 this 3 697  
102 0 0 4 109 655 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_scale
//       Access: Published
//  Description: The "scale" is reported in the pfm header and is
//               probably meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  5 scale 1 702  
103 0 0 6 110 673 0 0 457 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_point
//       Access: Published
//  Description: Returns true if there is a valid point at x, y.  This
//               always returns true unless a "no data" value has been
//               set, in which case it returns false if the point at
//               x, y is the "no data" value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  1 x 1 654  1 y 1 654  
104 0 0 6 111 702 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_channel
//       Access: Published
//  Description: Returns the cth channel of the point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 697  1 x 1 654  1 y 1 654  1 c 1 654  
105 0 0 4 112 655 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_channel
//       Access: Published
//  Description: Replaces the cth channel of the point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 5 4 this 3 696  1 x 1 654  1 y 1 654  1 c 1 654  5 value 1 702  
106 0 0 6 113 702 0 0 295 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point1
//       Access: Published
//  Description: Returns the 1-component point value at the indicated
//               point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  1 x 1 654  1 y 1 654  
107 0 0 4 114 655 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point1
//       Access: Published
//  Description: Replaces the 1-component point value at the indicated
//               point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 702  
108 0 0 6 115 704 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point2
//       Access: Published
//  Description: Returns the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  1 x 1 654  1 y 1 654  
109 0 0 4 116 655 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 707  
110 0 0 4 116 655 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point2
//       Access: Published
//  Description: Replaces the 2-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 710  
111 0 0 6 117 713 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point2
//       Access: Published
//  Description: Returns a modifiable 2-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  1 x 1 654  1 y 1 654  
112 0 0 6 118 714 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  1 x 1 654  1 y 1 654  
113 0 0 4 119 655 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 717  
114 0 0 4 119 655 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 720  
115 0 0 6 120 723 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  1 x 1 654  1 y 1 654  
116 0 0 6 121 714 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point3
//       Access: Published
//  Description: Returns the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  1 x 1 654  1 y 1 654  
117 0 0 4 122 655 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 717  
118 0 0 4 122 655 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point3
//       Access: Published
//  Description: Replaces the 3-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 720  
119 0 0 6 123 723 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point3
//       Access: Published
//  Description: Returns a modifiable 3-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  1 x 1 654  1 y 1 654  
120 0 0 6 124 724 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_point4
//       Access: Published
//  Description: Returns the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  1 x 1 654  1 y 1 654  
121 0 0 4 125 655 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 727  
122 0 0 4 125 655 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_point4
//       Access: Published
//  Description: Replaces the 4-component point value at the indicated
//               point.  In a 1-channel image, the channel value is in
//               the x component.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  1 x 1 654  1 y 1 654  5 point 1 730  
123 0 0 6 126 733 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::modify_point4
//       Access: Published
//  Description: Returns a modifiable 4-component point value at the
//               indicated point.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  1 x 1 654  1 y 1 654  
124 0 0 4 127 655 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  5 value 1 704  
125 0 0 4 127 655 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  5 value 1 714  
126 0 0 4 127 655 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  5 value 1 724  
127 0 0 4 127 655 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill
//       Access: Published
//  Description: Fills the table with all of the same value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  5 value 1 702  
128 0 0 4 128 655 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_nan
//       Access: Published
//  Description: Fills the table with all NaN.
//////////////////////////////////////////////////////////////////// 1 4 this 3 696  
129 0 0 4 129 655 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_no_data_value
//       Access: Published
//  Description: Fills the table with the current no_data value, so
//               that the table is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 696  
130 0 0 4 130 655 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, leaving the other channels unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  7 channel 1 654  5 value 1 702  
131 0 0 4 131 655 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, leaving the
//               other channels unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  7 channel 1 654  
132 0 0 4 132 655 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked
//       Access: Published
//  Description: Fills the indicated channel with all of the same
//               value, but only where the table already has a data
//               point.  Leaves empty points unchanged.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  7 channel 1 654  5 value 1 702  
133 0 0 4 133 655 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::fill_channel_masked_nan
//       Access: Published
//  Description: Fills the indicated channel with NaN, but only where
//               the table already has a data point.  Leaves empty
//               points unchanged.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  7 channel 1 654  
134 0 0 6 134 673 0 0 587 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_average_point
//       Access: Published
//  Description: Computes the unweighted average point of all points
//               within the box centered at (x, y) with the indicated
//               Manhattan-distance radius.  Missing points are
//               assigned the value of their nearest neighbor.
//               Returns true if successful, or false if the point
//               value cannot be determined.
//////////////////////////////////////////////////////////////////// 5 4 this 3 697  6 result 1 723  1 x 1 702  1 y 1 702  6 radius 1 702  
135 0 0 6 135 673 0 0 451 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_bilinear_point
//       Access: Published
//  Description: Computes the weighted average of the four nearest
//               points to the floating-point index (x, y).  Returns
//               true if the point has any contributors, false if the
//               point is unknown.
//////////////////////////////////////////////////////////////////// 4 4 this 3 697  6 result 1 723  1 x 1 702  1 y 1 702  
136 0 0 6 136 673 0 0 515 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_min_max
//       Access: Published
//  Description: Calculates the minimum and maximum x, y, and z depth
//               component values, representing the bounding box of
//               depth values, and places them in the indicated
//               vectors.  Returns true if successful, false if the
//               mesh contains no points.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  10 min_points 1 734  10 max_points 1 734  
137 0 0 6 137 673 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 697  5 range 1 735  
138 0 0 6 137 673 0 0 520 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_autocrop
//       Access: Published
//  Description: Computes the minimum range of x and y across the PFM
//               file that include all points.  If there are no points
//               with no_data_value in the grid--that is, all points
//               are included--then this will return (0, get_x_size(),
//               0, get_y_size()).
//////////////////////////////////////////////////////////////////// 2 4 this 3 697  5 range 1 736  
139 0 0 6 138 673 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_row_empty
//       Access: Published
//  Description: Returns true if all of the points on row y, in the range
//               [x_begin, x_end), are the no_data value, or false if
//               any one of these points has a value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 697  1 y 1 654  7 x_begin 1 654  5 x_end 1 654  
140 0 0 6 139 673 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::is_column_empty
//       Access: Published
//  Description: Returns true if all of the points on column x, from
//               [y_begin, y_end), are the no_data value, or false if
//               any one of these points has a value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 697  1 x 1 654  7 y_begin 1 654  5 y_end 1 654  
141 0 0 4 140 655 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_zero_special
//       Access: Published
//  Description: Sets the zero_special flag.  When this flag is true,
//               values of (0, 0, 0) in the pfm file are treated as a
//               special case, and are not processed.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  12 zero_special 1 673  
142 0 0 4 141 655 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_chan4
//       Access: Published
//  Description: Sets the no_data_chan4 flag.  When this flag is true,
//               and the pfm file has 4 channels, then a negative
//               value in the fourth channel indicates no data.  When
//               it is false, all points are valid.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  5 chan4 1 673  
143 0 0 4 142 655 0 0 562 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_nan
//       Access: Published
//  Description: Sets the no_data_nan flag.  When num_channels is
//               nonzero, then a NaN value in any of the first
//               num_channels channels indicates no data for that
//               point.  If num_channels is zero, then all points are
//               valid.
//
//               This is a special case of set_no_data_value().
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  12 num_channels 1 654  
144 0 0 4 143 655 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  13 no_data_value 1 737  
145 0 0 4 143 655 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Sets the special value that means "no data" when it
//               appears in the pfm file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  13 no_data_value 1 724  
146 0 0 4 144 655 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  13 no_data_value 1 737  
147 0 0 4 144 655 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_threshold
//       Access: Published
//  Description: Sets the special threshold value.  Points that are
//               below this value in all components are considered "no
//               value".
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  13 no_data_value 1 724  
148 0 0 4 145 655 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::set_no_data_value
//       Access: Published
//  Description: Removes the special value that means "no data" when it
//               appears in the pfm file.  All points will thus be
//               considered valid.
//////////////////////////////////////////////////////////////////// 1 4 this 3 696  
149 0 0 6 146 673 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_value
//       Access: Published
//  Description: Returns whether a "no data" value has been
//               established by set_no_data_value().
//////////////////////////////////////////////////////////////////// 1 4 this 3 697  
150 0 0 6 147 673 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::has_no_data_threshold
//       Access: Published
//  Description: Returns whether a "no data" threshold value has been
//               established by set_no_data_threshold().
//////////////////////////////////////////////////////////////////// 1 4 this 3 697  
151 0 0 6 148 724 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::get_no_data_value
//       Access: Published
//  Description: If has_no_data_value() returns true, this returns the
//               particular "no data" value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 697  
152 0 0 4 149 655 0 0 422 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::resize
//       Access: Published
//  Description: Applies a simple filter to resample the pfm file
//               in-place to the indicated size.  Don't confuse this
//               with applying a scale to all of the points via
//               xform().
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  10 new_x_size 1 654  10 new_y_size 1 654  
153 0 0 4 150 655 0 0 529 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  6 radius 1 703  4 copy 1 697  
154 0 0 4 151 655 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  6 radius 1 703  4 copy 1 697  
155 0 0 4 152 655 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  4 copy 1 697  
156 0 0 4 153 655 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 696  
157 0 0 4 154 655 0 0 661 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the table
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  6 flip_x 1 673  6 flip_y 1 673  9 transpose 1 673  
158 0 0 4 155 655 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  9 transform 1 740  
159 0 0 4 155 655 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::xform
//       Access: Published
//  Description: Applies the indicated transform matrix to all points
//               in-place.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  9 transform 1 743  
160 0 0 4 156 655 0 0 1065 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::forward_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.  
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = this(dist(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis is inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  4 dist 1 697  12 scale_factor 1 702  
161 0 0 4 157 655 0 0 1063 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::reverse_distort
//       Access: Published
//  Description: Applies the distortion indicated in the supplied dist
//               map to the current map.  The dist map is understood
//               to be a mapping of points in the range 0..1 in the
//               first two dimensions.
//
//               The operation can be expressed symbolically as:
//
//               this(u, v) = dist(this(u, v))
//
//               If scale_factor is not 1, it should be a value > 1,
//               and it specifies the factor to upscale the working
//               table while processing, to reduce artifacts from
//               integer truncation.
//
//               By convention, the y axis in inverted in the
//               distortion map relative to the coordinates here.  A y
//               value of 0 in the distortion map corresponds with a v
//               value of 1 in this file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  4 dist 1 697  12 scale_factor 1 702  
162 0 0 4 158 655 0 0 447 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::merge
//       Access: Published
//  Description: Wherever there is missing data in this PfmFile (that
//               is, wherever has_point() returns false), copy data
//               from the other PfmFile, which must be exactly the
//               same dimensions as this one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 696  5 other 1 697  
163 0 0 4 159 655 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile (which could be same as this
//               PfmFile) into the specified channel of this one.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  10 to_channel 1 654  5 other 1 697  12 from_channel 1 654  
164 0 0 4 160 655 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_channel_masked
//       Access: Published
//  Description: Copies just the specified channel values from the
//               indicated PfmFile, but only where the other file has
//               a data point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 696  10 to_channel 1 654  5 other 1 697  12 from_channel 1 654  
165 0 0 4 161 655 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::apply_crop
//       Access: Published
//  Description: Reduces the PFM file to the cells in the rectangle
//               bounded by (x_begin, x_end, y_begin, y_end), where
//               the _end cells are not included.
//////////////////////////////////////////////////////////////////// 5 4 this 3 696  7 x_begin 1 654  5 x_end 1 654  7 y_begin 1 654  5 y_end 1 654  
166 0 0 4 162 655 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::clear_to_texcoords
//       Access: Published
//  Description: Replaces this PfmFile with a new PfmFile of size
//               x_size x y_size x 3, containing the x y 0 values in
//               the range 0 .. 1 according to the x y index.
//////////////////////////////////////////////////////////////////// 3 4 this 3 696  6 x_size 1 654  6 y_size 1 654  
167 0 0 6 163 654 0 0 528 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::pull_spot
//       Access: Published
//  Description: Applies delta * t to the point values within radius
//               (xr, yr) distance of (xc, yc).  The t value is scaled
//               from 1.0 at the center to 0.0 at radius (xr, yr), and
//               this scale follows the specified exponent.  Returns
//               the number of points affected.
//////////////////////////////////////////////////////////////////// 7 4 this 3 696  5 delta 1 724  2 xc 1 703  2 yc 1 703  2 xr 1 703  2 yr 1 703  8 exponent 1 703  
168 0 0 6 164 673 0 0 487 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::calc_tight_bounds
//       Access: Published
//  Description: Calculates the minimum and maximum vertices of all
//               points within the table.  Assumes the table contains
//               3-D points.
//
//               The return value is true if any points in the table,
//               or false if none are.
//////////////////////////////////////////////////////////////////// 3 4 this 3 697  9 min_point 1 723  9 max_point 1 723  
169 0 0 7 165 750 0 0 1039 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 697  6 center 1 747  10 point_dist 1 702  13 sample_radius 1 702  11 points_only 1 673  
170 0 0 7 165 750 0 0 1039 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_planar_bounds
//       Access: Published
//  Description: Computes the minmax bounding volume of the points in
//               3-D space, assuming the points represent a
//               mostly-planar surface.
//
//               This algorithm works by sampling the (square)
//               sample_radius pixels at the four point_dist corners
//               around the center (cx - pd, cx + pd) and so on, to
//               approximate the plane of the surface.  Then all of
//               the points are projected into that plane and the
//               bounding volume of the entire mesh within that plane
//               is determined.  If points_only is true, the bounding
//               volume of only those four points is determined.
//
//               center, point_dist and sample_radius are in UV space,
//               i.e. in the range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 697  6 center 1 704  10 point_dist 1 702  13 sample_radius 1 702  11 points_only 1 673  
171 0 0 4 166 655 0 0 468 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::compute_sample_point
//       Access: Published
//  Description: Computes the average of all the point within
//               sample_radius (manhattan distance) and the indicated
//               point.
//
//               The point coordinates are given in UV space, in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 697  6 result 1 723  1 x 1 702  1 y 1 702  13 sample_radius 1 702  
172 0 0 4 167 655 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 8 4 this 3 696  4 copy 1 697  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  
173 0 0 4 168 655 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.
//////////////////////////////////////////////////////////////////// 9 4 this 3 696  4 copy 1 697  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
174 0 0 4 169 655 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.
//////////////////////////////////////////////////////////////////// 9 4 this 3 696  4 copy 1 697  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
175 0 0 4 170 655 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::divide_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are divided into the pixels of the destination, after
//               scaling by the specified pixel_scale.
//               dest(x, y) = dest(x, y) / (copy(x, y) * pixel_scale).
//////////////////////////////////////////////////////////////////// 9 4 this 3 696  4 copy 1 697  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
176 0 0 6 171 696 0 0 0 2 4 this 3 696  10 multiplier 1 703  
177 0 0 4 172 655 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: PfmFile::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 697  3 out 1 659  
178 0 0 6 173 751 0 0 0 1 4 this 3 697  
179 0 0 6 174 654 0 0 0 3 4 this 3 697  4 view 1 754  5 flags 1 654  
180 0 0 7 179 756 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_transparent
//       Access: Published, Static
//  Description: Returns a new brush that does not paint anything.
//               Can be used as either a pen or a fill brush to make
//               borderless or unfilled shapes, respectively.
//////////////////////////////////////////////////////////////////// 0 
181 0 0 7 180 756 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_pixel
//       Access: Published, Static
//  Description: Returns a new brush that paints a single pixel of the
//               indicated color on a border, or paints a solid color
//               in an interior.
//////////////////////////////////////////////////////////////////// 2 5 color 1 757  6 effect 1 648  
182 0 0 7 181 756 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_spot
//       Access: Published, Static
//  Description: Returns a new brush that paints a spot of the
//               indicated color and radius.  If fuzzy is true, the
//               spot is fuzzy; otherwise, it is hard-edged.
//////////////////////////////////////////////////////////////////// 4 5 color 1 757  6 radius 1 703  5 fuzzy 1 673  6 effect 1 648  
183 0 0 7 182 756 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMBrush::make_image
//       Access: Published, Static
//  Description: Returns a new brush that paints with the indicated
//               image.  xc and yc indicate the pixel in the center of
//               the brush.
//
//               The brush makes a copy of the image; it is safe to
//               deallocate or modify the image after making this
//               call.
//////////////////////////////////////////////////////////////////// 4 5 image 1 699  2 xc 1 703  2 yc 1 703  6 effect 1 648  
184 0 0 7 184 701 501 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
185 0 0 7 184 701 501 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 676  4 type 1 668  
186 0 0 7 184 701 501 0 225 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 699  
187 0 0 7 184 701 501 0 220 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 6 6 x_size 1 654  6 y_size 1 654  12 num_channels 1 654  6 maxval 1 674  4 type 1 668  11 color_space 1 675  
188 0 0 6 185 701 0 0 0 2 4 this 3 701  4 copy 1 699  
189 0 0 6 187 674 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clamp_val
//       Access: Published
//  Description: A handy function to clamp values to
//               [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 699  11 input_value 1 654  
190 0 0 6 188 674 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..1] to [0..get_maxval()].  Do not use this for
//               alpha values, see to_alpha_val.
//////////////////////////////////////////////////////////////////// 2 4 this 3 699  11 input_value 1 703  
191 0 0 6 189 674 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::to_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from [0..1]
//               to [0..get_maxval()].
//////////////////////////////////////////////////////////////////// 2 4 this 3 699  11 input_value 1 703  
192 0 0 6 190 703 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_val
//       Access: Published
//  Description: A handy function to scale non-alpha values from
//               [0..get_maxval()] to [0..1].  Do not use this for
//               alpha values, see from_alpha_val.
//////////////////////////////////////////////////////////////////// 2 4 this 3 699  11 input_value 1 674  
193 0 0 6 191 703 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::from_alpha_val
//       Access: Published
//  Description: A handy function to scale alpha values from
//               [0..get_maxval()] to [0..1].
//////////////////////////////////////////////////////////////////// 2 4 this 3 699  11 input_value 1 674  
194 0 0 4 192 655 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: Frees all memory allocated for the image, and clears
//               all its parameters (size, color, type, etc).
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
195 0 0 4 192 655 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear
//       Access: Published
//  Description: This flavor of clear() reinitializes the image to an
//               empty (black) image with the given dimensions.
//////////////////////////////////////////////////////////////////// 7 4 this 3 701  6 x_size 1 654  6 y_size 1 654  12 num_channels 1 654  6 maxval 1 674  4 type 1 668  11 color_space 1 675  
196 0 0 4 193 655 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_from
//       Access: Published
//  Description: Makes this image become a copy of the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  4 copy 1 699  
197 0 0 4 194 655 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies a channel from one image into another.
//               Images must be the same size
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  4 copy 1 699  11 src_channel 1 654  12 dest_channel 1 654  
198 0 0 4 194 655 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_channel
//       Access: Published
//  Description: Copies just a single channel from the source image
//               into a single channel of this image, leaving the
//               remaining channels alone.
//////////////////////////////////////////////////////////////////// 10 4 this 3 701  4 copy 1 699  3 xto 1 654  3 yto 1 654  3 cto 1 654  5 xfrom 1 654  5 yfrom 1 654  5 cfrom 1 654  6 x_size 1 654  6 y_size 1 654  
199 0 0 4 195 655 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_header_from
//       Access: Published
//  Description: Copies just the header information into this image.
//               This will blow away any image data stored in the
//               image.  The new image data will be allocated, but
//               left unitialized.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  6 header 1 671  
200 0 0 4 196 655 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::take_from
//       Access: Published
//  Description: Move the contents of the other image into this one,
//               and empty the other image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  4 orig 1 701  
201 0 0 4 197 655 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  4 gray 1 703  
202 0 0 4 197 655 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  3 red 1 703  5 green 1 703  4 blue 1 703  
203 0 0 4 198 655 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given grayscale level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  4 gray 1 674  
204 0 0 4 198 655 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_val
//       Access: Published
//  Description: Sets the entire image (except the alpha channel) to
//               the given color.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  3 red 1 674  5 green 1 674  4 blue 1 674  
205 0 0 4 199 655 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  5 alpha 1 703  
206 0 0 4 200 655 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::alpha_fill_val
//       Access: Published
//  Description: Sets the entire alpha channel to the given level.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  5 alpha 1 674  
207 0 0 4 201 655 0 0 855 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_read_size
//       Access: Published
//  Description: Specifies the size to we'd like to scale the image
//               upon reading it.  This will affect the next call to
//               read().  This is usually used to reduce the image
//               size, e.g. for a thumbnail.
//
//               If the file type reader supports it (e.g. JPEG), then
//               this will scale the image during the read operation,
//               consequently reducing memory and CPU utilization.  If
//               the file type reader does not support it, this will
//               load the image normally, and them perform a linear
//               scale after it has been loaded.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  6 x_size 1 654  6 y_size 1 654  
208 0 0 4 202 655 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::clear_read_size
//       Access: Published
//  Description: Undoes the effect of a previous call to
//               set_read_size().
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
209 0 0 6 203 673 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::has_read_size
//       Access: Published
//  Description: Returns true if set_read_size() has been called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
210 0 0 6 204 654 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_x_size
//       Access: Published
//  Description: Returns the requested x_size of the image if
//               set_read_size() has been called, or the image x_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
211 0 0 6 205 654 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_read_y_size
//       Access: Published
//  Description: Returns the requested y_size of the image if
//               set_read_size() has been called, or the image y_size
//               otherwise (if it is known).
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
212 0 0 6 206 675 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_color_space
//       Access: Published
//  Description: Returns the color space in which the image is
//               encoded.
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
213 0 0 6 207 673 0 0 397 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the indicated image filename.  If type is
//               non-NULL, it is a suggestion for the type of file it
//               is.  Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  8 filename 1 676  4 type 1 668  19 report_unknown_type 1 673  
214 0 0 6 207 673 0 0 692 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: This flavor of read() uses an already-existing
//               PNMReader to read the image file.  You can get a
//               reader via the PNMImageHeader::make_reader() methods.
//               This is a good way to examine the header of a file
//               (for instance, to determine its size) before actually
//               reading the entire image.
//
//               The PNMReader is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  6 reader 1 681  
215 0 0 6 207 673 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::read
//       Access: Published
//  Description: Reads the image data from the indicated stream.
//
//               The filename is advisory only, and may be used
//               to suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of file it is (and a non-NULL type will override any
//               magic number test or filename extension lookup).
//
//               Returns true if successful, false on error.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  4 data 1 679  8 filename 1 663  4 type 1 668  19 report_unknown_type 1 673  
216 0 0 6 208 673 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated filename.  If type
//               is non-NULL, it is a suggestion for the type of image
//               file to write.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  8 filename 1 676  4 type 1 668  
217 0 0 6 208 673 0 0 513 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: This flavor of write() uses an already-existing
//               PNMWriter to write the image file.  You can get a
//               writer via the PNMImageHeader::make_writer() methods.
//
//               The PNMWriter is always deleted upon completion,
//               whether successful or not.
//////////////////////////////////////////////////////////////////// 2 4 this 3 699  6 writer 1 683  
218 0 0 6 208 673 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::write
//       Access: Published
//  Description: Writes the image to the indicated ostream.
//
//               The filename is advisory only, and may be used
//               suggest a type if it has a known extension.
//
//               If type is non-NULL, it is a suggestion for the type
//               of image file to write.
//////////////////////////////////////////////////////////////////// 4 4 this 3 699  4 data 1 659  8 filename 1 663  4 type 1 668  
219 0 0 6 209 673 0 0 470 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::is_valid
//       Access: Published
//  Description: Returns true if the image has been read in or
//               correctly initialized with a height and width.  If
//               this returns false, virtually all member functions
//               except clear() and read() are invalid function calls.
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
220 0 0 4 210 655 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_num_channels
//       Access: Published
//  Description: Changes the number of channels associated with the
//               image.  The new number of channels must be an integer
//               in the range 1 through 4, inclusive.  This will
//               allocate and/or deallocate memory as necessary to
//               accommodate; see set_color_type().
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  12 num_channels 1 654  
221 0 0 4 211 655 0 0 606 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_type
//       Access: Published
//  Description: Translates the image to or from grayscale, color, or
//               four-color mode.  Grayscale images are converted to
//               full-color images with R, G, B set to the original
//               gray level; color images are converted to grayscale
//               according to the value of Bright().  The alpha
//               channel, if added, is initialized to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  10 color_type 1 635  
222 0 0 4 212 655 0 0 1024 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_color_space
//       Access: Published
//  Description: Converts the colors in the image to the indicated
//               color space.  This may be a lossy operation, in
//               particular when going from sRGB to linear.
//               The alpha channel remains untouched.
//
//               Note that, because functions like get_xel() and
//               set_xel() work on linearized floating-point values,
//               this conversion won't affect those values (aside
//               from some minor discrepancies due to storage
//               precision).  It does affect the values used by
//               get_xel_val() and set_xel_val(), though, since
//               those operate on encoded colors.
//
//               Some color spaces, particularly scRGB, may enforce
//               the use of a particular maxval setting.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  11 color_space 1 675  
223 0 0 4 213 655 0 0 365 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_alpha
//       Access: Published
//  Description: Adds an alpha channel to the image, if it does not
//               already have one.  The alpha channel is initialized
//               to zeros.
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
224 0 0 4 214 655 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remove_alpha
//       Access: Published
//  Description: Removes the image's alpha channel, if it exists.
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
225 0 0 4 215 655 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
226 0 0 4 215 655 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_grayscale
//       Access: Published
//  Description: Converts the image from RGB to grayscale.  Any alpha
//               channel, if present, is left undisturbed.  The
//               optional rc, gc, bc values represent the relative
//               weights to apply to each channel to convert it to
//               grayscale.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  2 rc 1 703  2 gc 1 703  2 bc 1 703  
227 0 0 4 216 655 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_rgb
//       Access: Published
//  Description: Converts the image from grayscale to RGB.  Any alpha
//               channel, if present, is left undisturbed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
228 0 0 4 217 655 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::reverse_rows
//       Access: Published
//  Description: Performs an in-place reversal of the row (y) data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 701  
229 0 0 4 218 655 0 0 662 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::flip
//       Access: Published
//  Description: Reverses, transposes, and/or rotates the image
//               in-place according to the specified parameters.  If
//               flip_x is true, the x axis is reversed; if flip_y is
//               true, the y axis is reversed.  Then, if transpose is
//               true, the x and y axes are exchanged.  These
//               parameters can be used to select any combination of
//               90-degree or 180-degree rotations and flips.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  6 flip_x 1 673  6 flip_y 1 673  9 transpose 1 673  
230 0 0 4 219 655 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_maxval
//       Access: Published
//  Description: Rescales the image to the indicated maxval.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  6 maxval 1 674  
231 0 0 6 220 760 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  1 x 1 654  1 y 1 654  
232 0 0 7 220 760 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_val
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
233 0 0 4 221 655 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  5 value 1 691  
234 0 0 4 221 655 0 0 568 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is in the range
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  4 gray 1 674  
235 0 0 4 221 655 0 0 499 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_val
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is in the range 0..maxval, encoded in
//               the configured color space.  See set_xel if you
//               instead have a linearized and normalized
//               floating-point value.
//////////////////////////////////////////////////////////////////// 6 4 this 3 701  1 x 1 654  1 y 1 654  1 r 1 674  1 g 1 674  1 b 1 674  
236 0 0 6 222 674 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red_val
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
237 0 0 6 223 674 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green_val
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
238 0 0 6 224 674 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue_val
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is in the range 0..maxval
//               and encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
239 0 0 6 225 674 0 0 642 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray_val
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.
//               The value returned is in the range 0..maxval and
//               encoded in the configured color space.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
240 0 0 6 226 674 0 0 453 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha_val
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is in the
//               range 0..maxval and always linear.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
241 0 0 4 227 655 0 0 518 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red_val
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_red if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 r 1 674  
242 0 0 4 228 655 0 0 524 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green_val
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_green if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 g 1 674  
243 0 0 4 229 655 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue_val
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be in the range
//               0..maxval, encoded in the configured color space.
//               See set_blue if you instead have a linearized and
//               normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 b 1 674  
244 0 0 4 230 655 0 0 876 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray_val
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel_val(),
//               which can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be in the range 0..maxval, encoded in the configured
//               color space.  See set_gray if you instead have a
//               linearized normalized floating-point value.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  4 gray 1 674  
245 0 0 4 231 655 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha_val
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..maxval.
//
//               This value is always linearly encoded, even if the
//               image is set to the sRGB color space.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 a 1 674  
246 0 0 6 232 674 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel_val
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 4 4 this 3 699  1 x 1 654  1 y 1 654  7 channel 1 654  
247 0 0 4 233 655 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel_val
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be in the range
//               0..maxval.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  1 x 1 654  1 y 1 654  7 channel 1 654  5 value 1 674  
248 0 0 6 234 703 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_channel
//       Access: Published
//  Description: Returns the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               accessing the component values directly by named
//               methods.  The value returned is a float in the range
//               0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 699  1 x 1 654  1 y 1 654  7 channel 1 654  
249 0 0 4 235 655 0 0 628 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_channel
//       Access: Published
//  Description: Sets the nth component color at the indicated
//               pixel.  The channel index should be in the range
//               0..(get_num_channels()-1).  The channels are ordered B,
//               G, R, A.  This is slightly less optimal than
//               setting the component values directly by named
//               methods.  The value given should be a float in the
//               range 0..1.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  1 x 1 654  1 y 1 654  7 channel 1 654  5 value 1 703  
250 0 0 7 236 690 410 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_pixel
//       Access: Published
//  Description: Returns the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
251 0 0 4 237 655 0 0 319 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_pixel
//       Access: Published
//  Description: Sets the (r, g, b, a) pixel value at the indicated
//               pixel, using a PixelSpec object.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  5 pixel 1 688  
252 0 0 7 238 762 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel
//       Access: Published
//  Description: Returns the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
253 0 0 4 239 655 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  5 value 1 763  
254 0 0 4 239 655 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes all three color components at the indicated
//               pixel to the same value.  The value is a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  4 gray 1 703  
255 0 0 4 239 655 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel
//       Access: Published
//  Description: Changes the RGB color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 6 4 this 3 701  1 x 1 654  1 y 1 654  1 r 1 703  1 g 1 703  1 b 1 703  
256 0 0 7 240 765 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_xel_a
//       Access: Published
//  Description: Returns the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
257 0 0 4 241 655 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  5 value 1 757  
258 0 0 4 241 655 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_xel_a
//       Access: Published
//  Description: Changes the RGBA color at the indicated pixel.  Each
//               component is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 7 4 this 3 701  1 x 1 654  1 y 1 654  1 r 1 703  1 g 1 703  1 b 1 703  1 a 1 703  
259 0 0 6 242 703 0 0 367 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_red
//       Access: Published
//  Description: Returns the red component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
260 0 0 6 243 703 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_green
//       Access: Published
//  Description: Returns the green component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
261 0 0 6 244 703 0 0 369 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_blue
//       Access: Published
//  Description: Returns the blue component color at the indicated
//               pixel.  The value returned is a linearized float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
262 0 0 6 245 703 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_gray
//       Access: Published
//  Description: Returns the gray component color at the indicated
//               pixel.  This only has a meaningful value for
//               grayscale images; for other image types, this returns
//               the value of the blue channel only.  However, also
//               see the get_bright() function.  The value returned
//               is a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
263 0 0 6 246 703 0 0 434 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_alpha
//       Access: Published
//  Description: Returns the alpha component color at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value returned is a float
//               in the range 0..1.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
264 0 0 4 247 655 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_red
//       Access: Published
//  Description: Sets the red component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 r 1 703  
265 0 0 4 248 655 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_green
//       Access: Published
//  Description: Sets the green component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 g 1 703  
266 0 0 4 249 655 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_blue
//       Access: Published
//  Description: Sets the blue component color only at the indicated
//               pixel.  The value given should be a linearized
//               float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 b 1 703  
267 0 0 4 250 655 0 0 729 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_gray
//       Access: Published
//  Description: Sets the gray component color at the indicated
//               pixel.  This is only meaningful for grayscale images;
//               for other image types, this simply sets the blue
//               component color.  However, also see set_xel(), which
//               can set all the component colors to the same
//               grayscale level, and hence works correctly both for
//               grayscale and color images.  The value given should
//               be a linearized float in the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  4 gray 1 703  
268 0 0 4 251 655 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::set_alpha
//       Access: Published
//  Description: Sets the alpha component color only at the indicated
//               pixel.  It is an error to call this unless
//               has_alpha() is true.  The value given should be in
//               the range 0..1.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  1 x 1 654  1 y 1 654  1 a 1 703  
269 0 0 6 252 703 0 0 477 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: Returns the linear brightness of the given xel, as a
//               linearized float in the range 0..1.  This flavor of
//               get_bright() returns the correct grayscale brightness
//               level for both full-color and grayscale images.
//////////////////////////////////////////////////////////////////// 3 4 this 3 699  1 x 1 654  1 y 1 654  
270 0 0 6 252 703 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               color images.  It returns a single brightness value
//               for the RGB color at the indicated pixel, based on
//               the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 6 4 this 3 699  1 x 1 654  1 y 1 654  2 rc 1 703  2 gc 1 703  2 bc 1 703  
271 0 0 6 252 703 0 0 475 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_bright
//       Access: Published
//  Description: This flavor of get_bright() works correctly only for
//               four-channel images.  It returns a single brightness
//               value for the RGBA color at the indicated pixel,
//               based on the supplied weights for each component.
//////////////////////////////////////////////////////////////////// 7 4 this 3 699  1 x 1 654  1 y 1 654  2 rc 1 703  2 gc 1 703  2 bc 1 703  2 ac 1 703  
272 0 0 4 253 655 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  1 x 1 654  1 y 1 654  3 val 1 763  5 alpha 1 703  
273 0 0 4 253 655 0 0 539 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend
//       Access: Published
//  Description: Smoothly blends the indicated pixel value in with
//               whatever was already in the image, based on the given
//               alpha value.  An alpha of 1.0 is fully opaque and
//               completely replaces whatever was there previously;
//               alpha of 0.0 is fully transparent and does nothing.
//////////////////////////////////////////////////////////////////// 7 4 this 3 701  1 x 1 654  1 y 1 654  1 r 1 703  1 g 1 703  1 b 1 703  5 alpha 1 703  
274 0 0 4 254 655 0 0 647 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::copy_sub_image
//       Access: Published
//  Description: Copies a rectangular area of another image into a
//               rectangular area of this image.  Both images must
//               already have been initialized.  The upper-left corner
//               of the region in both images is specified, and the
//               size of the area; if the size is omitted, it defaults
//               to the entire other image, or the largest piece that
//               will fit.
//////////////////////////////////////////////////////////////////// 8 4 this 3 701  4 copy 1 699  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  
275 0 0 4 255 655 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::blend_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the alpha
//               channel of the copy is used to blend the copy into
//               the destination image, instead of overwriting pixels
//               unconditionally.
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each *alpha* value of the source image before
//               applying it to the target image.
//
//               If pixel_scale is 1.0 and the copy has no alpha
//               channel, this degenerates into copy_sub_image().
//////////////////////////////////////////////////////////////////// 9 4 this 3 701  4 copy 1 699  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
276 0 0 4 256 655 0 0 503 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::add_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are added to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
//////////////////////////////////////////////////////////////////// 9 4 this 3 701  4 copy 1 699  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
277 0 0 4 257 655 0 0 509 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::mult_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), except the copy pixels
//               are multiplied to the pixels of the destination, after
//               scaling by the specified pixel_scale.  Unlike
//               blend_sub_image(), the alpha channel is not treated
//               specially.
//////////////////////////////////////////////////////////////////// 9 4 this 3 701  4 copy 1 699  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
278 0 0 4 258 655 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::darken_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the darker of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.  The scale is
//               applied with the center at 1.0: scaling the pixel
//               value smaller brings it closer to 1.0.
//////////////////////////////////////////////////////////////////// 9 4 this 3 701  4 copy 1 699  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
279 0 0 4 259 655 0 0 635 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::lighten_sub_image
//       Access: Published
//  Description: Behaves like copy_sub_image(), but the resulting
//               color will be the lighter of the source and
//               destination colors at each pixel (and at each R, G,
//               B, A component value).
//
//               If pixel_scale is not 1.0, it specifies an amount to
//               scale each pixel value of the source image before
//               applying it to the target image.
//////////////////////////////////////////////////////////////////// 9 4 this 3 701  4 copy 1 699  3 xto 1 654  3 yto 1 654  5 xfrom 1 654  5 yfrom 1 654  6 x_size 1 654  6 y_size 1 654  11 pixel_scale 1 703  
280 0 0 4 260 655 0 0 1004 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::threshold
//       Access: Published
//  Description: Selectively copies each pixel from either one source
//               or another source, depending on the pixel value of
//               the indicated channel of select_image.
//
//               For each pixel (x, y):
//
//               s = select_image.get_channel(x, y, channel). Set this
//               image's (x, y) to:
//
//               lt.get_xel(x, y) if s < threshold, or
//
//               ge.get_xel(x, y) if s >= threshold
//
//               Any of select_image, lt, or ge may be the same
//               PNMImge object as this image, or the same as each
//               other; or they may all be different. All images must
//               be the same size.  As a special case, lt and ge may
//               both be 1x1 images instead of the source image size.
//////////////////////////////////////////////////////////////////// 6 4 this 3 701  12 select_image 1 699  7 channel 1 654  9 threshold 1 703  2 lt 1 699  2 ge 1 699  
281 0 0 4 261 655 0 0 1231 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_inside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest dark pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A dark pixel is
//               defined as one whose pixel value is < threshold.
//
//               If shrink_from_border is true, then the mask image is
//               considered to be surrounded by a border of dark
//               pixels; otherwise, the border isn't considered.
//
//               This can be used, in conjunction with threshold, to
//               shrink a mask image inwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  4 mask 1 699  9 threshold 1 703  6 radius 1 654  18 shrink_from_border 1 673  
282 0 0 4 262 655 0 0 1030 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::fill_distance_outside
//       Access: Published
//  Description: Replaces this image with a grayscale image whose gray
//               channel represents the linear Manhattan distance from
//               the nearest white pixel in the given mask image, up to
//               the specified radius value (which also becomes the
//               new maxval).  radius may range from 0 to maxmaxval;
//               smaller values will compute faster.  A white pixel is
//               defined as one whose pixel value is >= threshold.
//
//               This can be used, in conjunction with threshold, to
//               grow a mask image outwards by a certain number of
//               pixels.
//
//               The mask image may be the same image as this one, in
//               which case it is destructively modified by this
//               process.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  4 mask 1 699  9 threshold 1 703  6 radius 1 654  
283 0 0 4 263 655 0 0 537 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::rescale
//       Access: Published
//  Description: Rescales the RGB channel values so that any values in
//               the original image between min_val and max_val are
//               expanded to the range 0 .. 1.  Values below min_val
//               are set to 0, and values above max_val are set to 1.
//               Does not affect the alpha channel, if any.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  7 min_val 1 703  7 max_val 1 703  
284 0 0 4 264 655 0 0 781 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::render_spot
//       Access: Published
//  Description: Renders a solid-color circle, with a fuzzy edge, into
//               the center of the PNMImage.  If the PNMImage is
//               non-square, this actually renders an ellipse.
//
//               The min_radius and max_radius are in the scale 0..1,
//               where 1.0 means the full width of the image.  If
//               min_radius == max_radius, the edge is sharp (but
//               still antialiased); otherwise, the pixels between
//               min_radius and max_radius are smoothly blended
//               between fg and bg colors.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  2 fg 1 757  2 bg 1 757  10 min_radius 1 703  10 max_radius 1 703  
285 0 0 4 265 655 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::expand_border
//       Access: Published
//  Description: Expands the image by the indicated number of pixels
//               on each edge.  The new pixels are set to the
//               indicated color.
//
//               If any of the values is negative, this actually crops
//               the image.
//////////////////////////////////////////////////////////////////// 6 4 this 3 701  4 left 1 654  5 right 1 654  6 bottom 1 654  3 top 1 654  5 color 1 757  
286 0 0 4 266 655 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter
//       Access: Published
//  Description: This flavor of box_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  6 radius 1 703  
287 0 0 4 267 655 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter
//       Access: Published
//  Description: This flavor of gaussian_filter() will apply the filter
//               over the entire image without resizing or copying;
//               the effect is that of a blur operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  6 radius 1 703  
288 0 0 4 268 655 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::unfiltered_stretch_from
//       Access: Published
//  Description: Resizes from the indicated image into this one by
//               performing a nearest-point sample.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  4 copy 1 699  
289 0 0 4 269 655 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::box_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  6 radius 1 703  4 copy 1 699  
290 0 0 4 270 655 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gaussian_filter_from
//       Access: Public
//  Description: Makes a resized copy of the indicated image into this
//               one using the indicated filter.  The image to be
//               copied is squashed and stretched to match the
//               dimensions of the current image, applying the
//               appropriate filter to perform the stretching.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  6 radius 1 703  4 copy 1 699  
291 0 0 4 271 655 0 0 731 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::quick_filter_from
//       Access: Public
//  Description: Resizes from the given image, with a fixed radius of
//               0.5. This is a very specialized and simple algorithm
//               that doesn't handle dropping below the Nyquist rate
//               very well, but is quite a bit faster than the more
//               general box_filter(), above.  If borders are
//               specified, they will further restrict the size of the
//               resulting image. There's no point in using
//               quick_box_filter() on a single image.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  4 copy 1 699  7 xborder 1 654  7 yborder 1 654  
292 0 0 4 272 655 0 0 294 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::make_histogram
//       Access: Published
//  Description: Computes a histogram of the colors used in the
//               image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  4 hist 1 693  
293 0 0 4 273 655 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Variant of perlin_noise_fill that uses an
//               existing StackedPerlinNoise2 object.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  6 perlin 1 766  
294 0 0 4 273 655 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::perlin_noise_fill
//       Access: Published
//  Description: Fills the image with a grayscale perlin noise
//               pattern based on the indicated parameters.
//               Uses set_xel to set the grayscale values.
//               The sx and sy parameters are in multiples
//               of the size of this image.
//               See also the PerlinNoise2 class in mathutil.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  2 sx 1 703  2 sy 1 703  10 table_size 1 654  4 seed 1 768  
295 0 0 4 274 655 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::remix_channels
//       Access: Published
//  Description: Transforms every pixel using the operation
//               (Ro,Go,Bo) = conv.xform_point(Ri,Gi,Bi);
//               Input must be a color image.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  4 conv 1 769  
296 0 0 4 275 655 0 0 474 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the RGB channels, converts it to an
//               image with a gamma curve of to_gamma in the RGB
//               channels.  Does not affect the alpha channel.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  10 from_gamma 1 703  8 to_gamma 1 703  
297 0 0 4 276 655 0 0 481 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::gamma_correct_alpha
//       Access: Published
//  Description: Assuming the image was constructed with a gamma curve
//               of from_gamma in the alpha channel, converts it to an
//               image with a gamma curve of to_gamma in the alpha
//               channel.  Does not affect the RGB channels.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  10 from_gamma 1 703  8 to_gamma 1 703  
298 0 0 4 277 655 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 701  13 gray_exponent 1 703  
299 0 0 4 277 655 0 0 392 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.
//////////////////////////////////////////////////////////////////// 3 4 this 3 701  13 gray_exponent 1 703  14 alpha_exponent 1 703  
300 0 0 4 277 655 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  12 red_exponent 1 703  14 green_exponent 1 703  13 blue_exponent 1 703  
301 0 0 4 277 655 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::apply_exponent
//       Access: Published
//  Description: Adjusts each channel of the image by raising the
//               corresponding component value to the indicated
//               exponent, such that L' = L ^ exponent.  For a
//               grayscale image, the blue_exponent value is used for
//               the grayscale value, and red_exponent and
//               green_exponent are unused.
//////////////////////////////////////////////////////////////////// 5 4 this 3 701  12 red_exponent 1 703  14 green_exponent 1 703  13 blue_exponent 1 703  14 alpha_exponent 1 703  
302 0 0 7 278 762 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
303 0 0 7 279 765 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_xel_a
//       Access: Published
//  Description: Returns the average color of all of the pixels
//               in the image, including the alpha channel.
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
304 0 0 6 280 703 0 0 317 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::get_average_gray
//       Access: Published
//  Description: Returns the average grayscale component of all of
//               the pixels in the image.
//////////////////////////////////////////////////////////////////// 1 4 this 3 699  
305 0 0 4 281 655 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::do_fill_distance
//       Access: Private
//  Description: Recursively fills in the minimum distance measured
//               from a certain set of points into the gray channel.
//////////////////////////////////////////////////////////////////// 4 4 this 3 701  2 xi 1 654  2 yi 1 654  1 d 1 654  
306 0 0 7 297 772 604 0 0 2 4 this 3 701  1 y 1 654  
307 0 0 7 297 773 609 0 0 2 4 this 3 699  1 y 1 654  
308 0 0 7 298 701 501 0 0 1 4 this 3 699  
309 0 0 7 299 701 501 0 0 2 4 this 3 699  5 other 1 757  
310 0 0 7 299 701 501 0 0 2 4 this 3 699  5 other 1 699  
311 0 0 7 300 701 501 0 0 2 4 this 3 699  5 other 1 757  
312 0 0 7 300 701 501 0 0 2 4 this 3 699  5 other 1 699  
313 0 0 7 301 701 501 0 0 2 4 this 3 699  5 other 1 757  
314 0 0 7 301 701 501 0 0 2 4 this 3 699  5 other 1 699  
315 0 0 7 301 701 501 0 0 2 4 this 3 699  10 multiplier 1 703  
316 0 0 6 302 701 0 0 0 2 4 this 3 701  5 other 1 757  
317 0 0 6 302 701 0 0 0 2 4 this 3 701  5 other 1 699  
318 0 0 6 303 701 0 0 0 2 4 this 3 701  5 other 1 757  
319 0 0 6 303 701 0 0 0 2 4 this 3 701  5 other 1 699  
320 0 0 6 304 701 0 0 0 2 4 this 3 701  5 other 1 757  
321 0 0 6 304 701 0 0 0 2 4 this 3 701  5 other 1 699  
322 0 0 6 304 701 0 0 0 2 4 this 3 701  10 multiplier 1 703  
323 0 0 6 283 776 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::size
//       Access: Published
//  Description: Get the number of pixels in the row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 774  
324 0 0 7 284 765 0 0 0 2 4 this 3 774  1 x 1 654  
325 0 0 4 285 655 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.  If
//               the image has no alpha channel, the alpha component
//               is ignored.
//////////////////////////////////////////////////////////////////// 3 4 this 3 772  1 x 1 654  1 v 1 757  
326 0 0 6 286 760 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 772  1 x 1 654  
327 0 0 4 287 655 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 772  1 x 1 654  1 v 1 691  
328 0 0 6 288 674 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 774  1 x 1 654  
329 0 0 4 289 655 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::Row::Array Operator
//       Access: Published
//  Description: Set the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 3 4 this 3 772  1 x 1 654  1 v 1 674  
330 0 0 6 292 776 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::size
//       Access: Published
//  Description: Get the number of pixels in the row.
//////////////////////////////////////////////////////////////////// 1 4 this 3 778  
331 0 0 7 293 765 0 0 0 2 4 this 3 778  1 x 1 654  
332 0 0 7 294 760 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the pixel at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 778  1 x 1 654  
333 0 0 6 295 674 0 0 283 ////////////////////////////////////////////////////////////////////
//     Function: PNMImage::CRow::Array Operator
//       Access: Published
//  Description: Fetch the alpha value at the given column in the row.
//////////////////////////////////////////////////////////////////// 2 4 this 3 778  1 x 1 654  
334 0 0 7 306 780 619 0 896 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::Constructor
//       Access: Published
//  Description: The constructor stores a pointer to the PNMImage you
//               pass it, but it does not take ownership of the
//               object; you are responsible for ensuring that the
//               PNMImage does not destruct during the lifetime of the
//               PNMPainter object.
//
//               The xo, yo coordinates specify an optional offset for
//               fill coordinates.  If you are painting with a pattern
//               fill, these specify the virtual coordinates of the
//               upper-left corner of the image, which can allow you
//               to adjust the pattern to line up with nested images,
//               if necessary.
//////////////////////////////////////////////////////////////////// 3 5 image 1 701  2 xo 1 654  2 yo 1 654  
335 0 0 4 308 655 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_pen
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for drawing
//               lines and edges.  If the brush is a bitmap brush, its
//               image will be smeared pixelwise along the line.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the pen.  It is not
//               necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 780  3 pen 1 756  
336 0 0 7 309 756 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_pen
//       Access: Published
//  Description: Returns the current pen.  See set_pen().
//////////////////////////////////////////////////////////////////// 1 4 this 3 781  
337 0 0 4 310 655 0 0 639 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::set_fill
//       Access: Published
//  Description: Specifies a PNMBrush that will be used for filling
//               in the interiors of objects.  If the brush is a
//               bitmap brush, its image will be tiled throughout the
//               space.
//
//               Unlike the PNMImage passed to the constructor, the
//               PNMPainter will take ownership of the fill brush.  It
//               is not necessary to keep a separate pointer to it.
//////////////////////////////////////////////////////////////////// 2 4 this 3 780  4 fill 1 756  
338 0 0 7 311 756 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::get_fill
//       Access: Published
//  Description: Returns the current fill brush.  See set_fill().
//////////////////////////////////////////////////////////////////// 1 4 this 3 781  
339 0 0 4 312 655 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_point
//       Access: Published
//  Description: Draws an antialiased point on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 3 4 this 3 780  1 x 1 703  1 y 1 703  
340 0 0 4 313 655 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_line
//       Access: Published
//  Description: Draws an antialiased line on the PNMImage, using the
//               current pen.
//////////////////////////////////////////////////////////////////// 5 4 this 3 780  2 xa 1 703  2 ya 1 703  2 xb 1 703  2 yb 1 703  
341 0 0 4 314 655 0 0 488 ////////////////////////////////////////////////////////////////////
//     Function: PNMPainter::draw_rectangle
//       Access: Published
//  Description: Draws a filled rectangule on the PNMImage, using the
//               current pen for the outline, and the current fill
//               brush for the interior.
//
//               The two coordinates specify any two diagonally
//               opposite corners.
//////////////////////////////////////////////////////////////////// 5 4 this 3 780  2 xa 1 703  2 ya 1 703  2 xb 1 703  2 yb 1 703  
156
627 5 pixel 0 140289 5 pixel 5 pixel 0 0 0 1 342 358 3 783 784 785 9 343 344 345 346 347 348 349 350 351 0 0 0 0 0 0

628 4 gray 0 2105344 4 gray 4 gray 0 0 629 0 0 0 0 0 0 0 0 0 0

629 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

630 3 xel 0 2105345 3 xel 3 xel 0 0 627 0 0 0 0 0 0 0 0 0 0

631 11 PNMFileType 0 75777 11 PNMFileType 11 PNMFileType 0 0 0 0 0 0 5 359 360 361 362 363 1 786 0 1 0 632 0 0 0 0 330
////////////////////////////////////////////////////////////////////
//       Class : PNMFileType
// Description : This is the base class of a family of classes that
//               represent particular image file types that PNMImage
//               supports.
////////////////////////////////////////////////////////////////////

632 13 TypedWritable 0 2049 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 0 0 0 0 0 0 341
////////////////////////////////////////////////////////////////////
//       Class : TypedWritable
// Description : Base class for objects that can be written to and
//               read from Bam files.
//
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

633 19 PNMFileTypeRegistry 0 26625 19 PNMFileTypeRegistry 19 PNMFileTypeRegistry 0 0 0 0 364 0 7 365 366 367 368 369 370 371 1 787 0 0 0 0 280
////////////////////////////////////////////////////////////////////
//       Class : PNMFileTypeRegistry
// Description : This class maintains the set of all known
//               PNMFileTypes in the universe.
////////////////////////////////////////////////////////////////////

634 14 PNMImageHeader 0 26625 14 PNMImageHeader 14 PNMImageHeader 0 0 0 1 372 374 0 19 373 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 0 0 0 0 7 635 636 637 638 640 642 644 616
////////////////////////////////////////////////////////////////////
//       Class : PNMImageHeader
// Description : This is the base class of PNMImage, PNMReader, and
//               PNMWriter.  It encapsulates all the information
//               associated with an image that describes its size,
//               number of channels, etc; that is, all the information
//               about the image except the image data itself.  It's
//               the sort of information you typically read from the
//               image file's header.
////////////////////////////////////////////////////////////////////

635 9 ColorType 0 794624 25 PNMImageHeader::ColorType 25 PNMImageHeader::ColorType 634 0 0 0 0 0 0 0 0 0 5 10 CT_invalid 26 PNMImageHeader::CT_invalid 0
0 12 CT_grayscale 28 PNMImageHeader::CT_grayscale 0
1 14 CT_two_channel 30 PNMImageHeader::CT_two_channel 0
2 8 CT_color 24 PNMImageHeader::CT_color 0
3 15 CT_four_channel 31 PNMImageHeader::CT_four_channel 0
4 0 198
// This enumerated type indicates the number of channels in the
// image, and also implies an image type.  You can treat it either
// as an integer number of channels or as an enumerated image type.

636 9 PixelSpec 0 403457 25 PNMImageHeader::PixelSpec 25 PNMImageHeader::PixelSpec 634 0 0 1 393 410 0 16 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 0 0 0 0 0 179
// Contains a single pixel specification used in compute_histogram()
// and make_histogram().  Note that pixels are stored by integer
// value, not by floating-point scaled value.

637 14 PixelSpecCount 0 403457 30 PNMImageHeader::PixelSpecCount 30 PNMImageHeader::PixelSpecCount 634 0 0 0 411 0 0 0 0 0 0 0 93
// Associates a pixel specification with an appearance count, for
// use in Histogram, below.

638 7 HistMap 0 2367488 23 PNMImageHeader::HistMap 23 PNMImageHeader::HistMap 634 0 639 0 0 0 0 0 0 0 0 0 0

639 21 map< PixelSpec, int > 0 2048 37 map< PNMImageHeader::PixelSpec, int > 37 map< PNMImageHeader::PixelSpec, int > 0 0 0 0 0 0 0 0 0 0 0 0 0

640 10 PixelCount 0 2367488 26 PNMImageHeader::PixelCount 26 PNMImageHeader::PixelCount 634 0 641 0 0 0 0 0 0 0 0 0 0

641 24 vector< PixelSpecCount > 0 2048 40 vector< PNMImageHeader::PixelSpecCount > 40 vector< PNMImageHeader::PixelSpecCount > 0 0 0 0 0 0 0 0 0 0 0 0 0

642 7 Palette 0 2367488 23 PNMImageHeader::Palette 23 PNMImageHeader::Palette 634 0 643 0 0 0 0 0 0 0 0 0 0

643 19 vector< PixelSpec > 0 2048 35 vector< PNMImageHeader::PixelSpec > 35 vector< PNMImageHeader::PixelSpec > 0 0 0 0 0 0 0 0 0 0 0 0 0

644 9 Histogram 0 403457 25 PNMImageHeader::Histogram 25 PNMImageHeader::Histogram 634 0 0 1 412 417 0 4 413 414 415 416 1 788 0 0 0 0 65
// Used to return a pixel histogram in PNMImage::get_histogram().

645 7 PfmFile 0 141313 7 PfmFile 7 PfmFile 0 0 0 1 418 494 0 75 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 0 0 1 0 634 0 0 0 0 355
////////////////////////////////////////////////////////////////////
//       Class : PfmFile
// Description : Defines a pfm file, a 2-d table of floating-point
//               numbers, either 3-component or 1-component, or with a
//               special extension, 2- or 4-component.
////////////////////////////////////////////////////////////////////

646 8 PNMBrush 0 75777 8 PNMBrush 8 PNMBrush 0 0 0 0 0 0 4 495 496 497 498 0 0 1 0 647 0 0 0 1 648 836
////////////////////////////////////////////////////////////////////
//       Class : PNMBrush
// Description : This class is used to control the shape and color of
//               the drawing operations performed by a PNMPainter
//               object.
//
//               Normally, you don't create a PNMBrush directly;
//               instead, use one of the static PNMBrush::make_*()
//               methods provided here.
//
//               A PNMBrush is used to draw the border of a polygon or
//               rectangle, as well as for filling its interior.  When
//               it is used to draw a border, the brush is "smeared"
//               over the border; when it is used to fill the
//               interior, it is tiled through the interior.
////////////////////////////////////////////////////////////////////

647 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

648 11 BrushEffect 0 794624 21 PNMBrush::BrushEffect 21 PNMBrush::BrushEffect 646 0 0 0 0 0 0 0 0 0 4 6 BE_set 16 PNMBrush::BE_set 0
0 8 BE_blend 18 PNMBrush::BE_blend 0
1 9 BE_darken 19 PNMBrush::BE_darken 0
2 10 BE_lighten 20 PNMBrush::BE_lighten 0
3 0 0

649 8 PNMImage 0 26625 8 PNMImage 8 PNMImage 0 0 0 1 499 501 0 104 500 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 610 611 612 613 614 615 616 617 0 0 1 0 634 0 0 0 2 650 651 2116
////////////////////////////////////////////////////////////////////
//       Class : PNMImage
// Description : The name of this class derives from the fact that we
//               originally implemented it as a layer on top of the
//               "pnm library", based on netpbm, which was built to
//               implement pbm, pgm, and pbm files, and is the
//               underlying support of a number of public-domain image
//               file converters.  Nowadays we are no longer derived
//               directly from the pnm library, mainly to allow
//               support of C++ iostreams instead of the C stdio FILE
//               interface.
//
//               Conceptually, a PNMImage is a two-dimensional array
//               of xels, which are the PNM-defined generic pixel
//               type.  Each xel may have a red, green, and blue
//               component, or (if the image is grayscale) a gray
//               component.  The image may be read in, the individual
//               xels manipulated, and written out again, or a black
//               image may be constructed from scratch.
//
//               A PNMImage has a color space and a maxval, the
//               combination of which defines how a floating-point
//               linear color value is encoded as an integer value in
//               memory.  The functions ending in _val operate on
//               encoded colors, whereas the regular ones work with
//               linear floating-point values.  All operations are
//               color space correct unless otherwise specified.
//
//               The image is of size XSize() by YSize() xels,
//               numbered from top to bottom, left to right, beginning
//               at zero.
//
//               Files can be specified by filename, or by an iostream
//               pointer.  The filename "-" refers to stdin or stdout.
//
//               This class is not inherently thread-safe; use it
//               from a single thread or protect access using a mutex.
////////////////////////////////////////////////////////////////////

650 3 Row 0 403457 13 PNMImage::Row 13 PNMImage::Row 649 0 0 0 604 0 7 597 598 599 600 601 602 603 0 0 0 0 0 96
// Provides an accessor for reading or writing the contents of one row
// of the image in-place.

651 4 CRow 0 403457 14 PNMImage::CRow 14 PNMImage::CRow 649 0 0 0 609 0 4 605 606 607 608 0 0 0 0 0 85
// Provides an accessor for reading the contents of one row of the
// image in-place.

652 10 PNMPainter 0 26625 10 PNMPainter 10 PNMPainter 0 0 0 1 618 619 0 7 620 621 622 623 624 625 626 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : PNMPainter
// Description : This class provides a number of convenient methods
//               for painting drawings directly into a PNMImage.
//
//               It stores a pointer to the PNMImage you pass it, but
//               it does not take ownership of the object; you are
//               responsible for ensuring that the PNMImage does not
//               destruct during the lifetime of the PNMPainter
//               object.
////////////////////////////////////////////////////////////////////

653 7 pixel * 0 8576 7 pixel * 7 pixel * 0 0 627 0 0 0 0 0 0 0 0 0 0

654 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

655 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

656 13 pixel const * 0 8576 13 pixel const * 13 pixel const * 0 0 657 0 0 0 0 0 0 0 0 0 0

657 11 pixel const 0 8832 11 pixel const 11 pixel const 0 0 627 0 0 0 0 0 0 0 0 0 0

658 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

659 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 660 0 0 0 0 0 0 0 0 0 0

660 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

661 19 PNMFileType const * 0 8576 19 PNMFileType const * 19 PNMFileType const * 0 0 662 0 0 0 0 0 0 0 0 0 0

662 17 PNMFileType const 0 8832 17 PNMFileType const 17 PNMFileType const 0 0 631 0 0 0 0 0 0 0 0 0 0

663 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

664 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

665 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 664 0 0 0 0 0 0 0 0 0 0

666 27 PNMFileTypeRegistry const * 0 8576 27 PNMFileTypeRegistry const * 27 PNMFileTypeRegistry const * 0 0 667 0 0 0 0 0 0 0 0 0 0

667 25 PNMFileTypeRegistry const 0 8832 25 PNMFileTypeRegistry const 25 PNMFileTypeRegistry const 0 0 633 0 0 0 0 0 0 0 0 0 0

668 13 PNMFileType * 0 8576 13 PNMFileType * 13 PNMFileType * 0 0 631 0 0 0 0 0 0 0 0 0 0

669 21 PNMFileTypeRegistry * 0 8576 21 PNMFileTypeRegistry * 21 PNMFileTypeRegistry * 0 0 633 0 0 0 0 0 0 0 0 0 0

670 16 PNMImageHeader * 0 8576 16 PNMImageHeader * 16 PNMImageHeader * 0 0 634 0 0 0 0 0 0 0 0 0 0

671 22 PNMImageHeader const * 0 8576 22 PNMImageHeader const * 22 PNMImageHeader const * 0 0 672 0 0 0 0 0 0 0 0 0 0

672 20 PNMImageHeader const 0 8832 20 PNMImageHeader const 20 PNMImageHeader const 0 0 634 0 0 0 0 0 0 0 0 0 0

673 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

674 6 xelval 0 2105344 6 xelval 6 xelval 0 0 628 0 0 0 0 0 0 0 0 0 0

675 10 ColorSpace 0 532480 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that
// a color space has not been specified.
0 9 CS_linear 9 CS_linear 388
// CS_linear is not a color space per se, but represents the
// working color space of graphics APIs, which is linearized.  Since
// the conversion from sRGB to linear is defined, one could posit
// that it has the ITU-R BT.709 primaries, but this isn't meaningful
// as modern graphics APIs do not perform color management.
// All colors in Panda3D are linear unless otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as
// used by the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding
// color values in the -0.5...7.4999 range.
3 0 0

676 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 677 0 0 0 0 0 0 0 0 0 0

677 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 678 0 0 0 0 0 0 0 0 0 0

678 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

679 9 istream * 0 8576 9 istream * 9 istream * 0 0 680 0 0 0 0 0 0 0 0 0 0

680 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

681 11 PNMReader * 0 8576 11 PNMReader * 11 PNMReader * 0 0 682 0 0 0 0 0 0 0 0 0 0

682 9 PNMReader 0 1050624 9 PNMReader 9 PNMReader 0 0 0 0 0 0 0 0 0 0 0 0 458
////////////////////////////////////////////////////////////////////
//       Class : PNMReader
// Description : This is an abstract base class that defines the
//               interface for reading image files of various types.
//               Any particular image file type that can be read must
//               define a class that inherits from PNMReader to read
//               it.
////////////////////////////////////////////////////////////////////

683 11 PNMWriter * 0 8576 11 PNMWriter * 11 PNMWriter * 0 0 684 0 0 0 0 0 0 0 0 0 0

684 9 PNMWriter 0 1050624 9 PNMWriter 9 PNMWriter 0 0 0 0 0 0 0 0 0 0 0 0 462
////////////////////////////////////////////////////////////////////
//       Class : PNMWriter
// Description : This is an abstract base class that defines the
//               interface for writing image files of various types.
//               Any particular image file type that can be written
//               must define a class that inherits from PNMWriter to
//               write it.
////////////////////////////////////////////////////////////////////

685 8 string * 0 8576 8 string * 8 string * 0 0 686 0 0 0 0 0 0 0 0 0 0

686 6 string 0 2105344 6 string 6 string 0 0 687 0 0 0 0 0 0 0 0 0 0

687 20 basic_string< char > 0 2048 20 basic_string< char > 20 basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

688 17 PixelSpec const * 0 8576 33 PNMImageHeader::PixelSpec const * 33 PNMImageHeader::PixelSpec const * 0 0 689 0 0 0 0 0 0 0 0 0 0

689 15 PixelSpec const 0 8832 31 PNMImageHeader::PixelSpec const 31 PNMImageHeader::PixelSpec const 0 0 636 0 0 0 0 0 0 0 0 0 0

690 11 PixelSpec * 0 8576 27 PNMImageHeader::PixelSpec * 27 PNMImageHeader::PixelSpec * 0 0 636 0 0 0 0 0 0 0 0 0 0

691 11 xel const * 0 8576 11 xel const * 11 xel const * 0 0 692 0 0 0 0 0 0 0 0 0 0

692 9 xel const 0 8832 9 xel const 9 xel const 0 0 630 0 0 0 0 0 0 0 0 0 0

693 11 Histogram * 0 8576 27 PNMImageHeader::Histogram * 27 PNMImageHeader::Histogram * 0 0 644 0 0 0 0 0 0 0 0 0 0

694 17 Histogram const * 0 8576 33 PNMImageHeader::Histogram const * 33 PNMImageHeader::Histogram const * 0 0 695 0 0 0 0 0 0 0 0 0 0

695 15 Histogram const 0 8832 31 PNMImageHeader::Histogram const 31 PNMImageHeader::Histogram const 0 0 644 0 0 0 0 0 0 0 0 0 0

696 9 PfmFile * 0 8576 9 PfmFile * 9 PfmFile * 0 0 645 0 0 0 0 0 0 0 0 0 0

697 15 PfmFile const * 0 8576 15 PfmFile const * 15 PfmFile const * 0 0 698 0 0 0 0 0 0 0 0 0 0

698 13 PfmFile const 0 8832 13 PfmFile const 13 PfmFile const 0 0 645 0 0 0 0 0 0 0 0 0 0

699 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 700 0 0 0 0 0 0 0 0 0 0

700 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 649 0 0 0 0 0 0 0 0 0 0

701 10 PNMImage * 0 8576 10 PNMImage * 10 PNMImage * 0 0 649 0 0 0 0 0 0 0 0 0 0

702 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 703 0 0 0 0 0 0 0 0 0 0

703 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

704 16 LPoint2f const * 0 8576 16 LPoint2f const * 16 LPoint2f const * 0 0 705 0 0 0 0 0 0 0 0 0 0

705 14 LPoint2f const 0 8832 14 LPoint2f const 14 LPoint2f const 0 0 706 0 0 0 0 0 0 0 0 0 0

706 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

707 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 708 0 0 0 0 0 0 0 0 0 0

708 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 709 0 0 0 0 0 0 0 0 0 0

709 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

710 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 711 0 0 0 0 0 0 0 0 0 0

711 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 712 0 0 0 0 0 0 0 0 0 0

712 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 263
////////////////////////////////////////////////////////////////////
//       Class : LVecBase2
// Description : This is the base class for all two-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

713 10 LPoint2f * 0 8576 10 LPoint2f * 10 LPoint2f * 0 0 706 0 0 0 0 0 0 0 0 0 0

714 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 715 0 0 0 0 0 0 0 0 0 0

715 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 716 0 0 0 0 0 0 0 0 0 0

716 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 596
////////////////////////////////////////////////////////////////////
//       Class : LPoint3
// Description : This is a three-component point in space (as opposed
//               to a three-component vector, which represents a
//               direction and a distance).  Some of the methods are
//               slightly different between LPoint3 and LVector3; in
//               particular, subtraction of two points yields a
//               vector, while addition of a vector and a point yields
//               a point.
////////////////////////////////////////////////////////////////////

717 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 718 0 0 0 0 0 0 0 0 0 0

718 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 719 0 0 0 0 0 0 0 0 0 0

719 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

720 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 721 0 0 0 0 0 0 0 0 0 0

721 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 722 0 0 0 0 0 0 0 0 0 0

722 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase3
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

723 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 716 0 0 0 0 0 0 0 0 0 0

724 16 LPoint4f const * 0 8576 16 LPoint4f const * 16 LPoint4f const * 0 0 725 0 0 0 0 0 0 0 0 0 0

725 14 LPoint4f const 0 8832 14 LPoint4f const 14 LPoint4f const 0 0 726 0 0 0 0 0 0 0 0 0 0

726 8 LPoint4f 0 2048 8 LPoint4f 8 LPoint4f 0 0 0 0 0 0 0 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

727 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 728 0 0 0 0 0 0 0 0 0 0

728 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 729 0 0 0 0 0 0 0 0 0 0

729 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

730 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 731 0 0 0 0 0 0 0 0 0 0

731 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 732 0 0 0 0 0 0 0 0 0 0

732 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 265
////////////////////////////////////////////////////////////////////
//       Class : LVecBase4
// Description : This is the base class for all three-component
//               vectors and points.
////////////////////////////////////////////////////////////////////

733 10 LPoint4f * 0 8576 10 LPoint4f * 10 LPoint4f * 0 0 726 0 0 0 0 0 0 0 0 0 0

734 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 722 0 0 0 0 0 0 0 0 0 0

735 12 LVecBase4d * 0 8576 12 LVecBase4d * 12 LVecBase4d * 0 0 729 0 0 0 0 0 0 0 0 0 0

736 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 732 0 0 0 0 0 0 0 0 0 0

737 16 LPoint4d const * 0 8576 16 LPoint4d const * 16 LPoint4d const * 0 0 738 0 0 0 0 0 0 0 0 0 0

738 14 LPoint4d const 0 8832 14 LPoint4d const 14 LPoint4d const 0 0 739 0 0 0 0 0 0 0 0 0 0

739 8 LPoint4d 0 2048 8 LPoint4d 8 LPoint4d 0 0 0 0 0 0 0 0 0 0 0 0 220
////////////////////////////////////////////////////////////////////
//       Class : LPoint4
// Description : This is a four-component point in space.
////////////////////////////////////////////////////////////////////

740 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 741 0 0 0 0 0 0 0 0 0 0

741 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 742 0 0 0 0 0 0 0 0 0 0

742 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 3 789 790 791 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

743 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 744 0 0 0 0 0 0 0 0 0 0

744 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 745 0 0 0 0 0 0 0 0 0 0

745 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 3 792 793 794 0 0 0 0 215
////////////////////////////////////////////////////////////////////
//       Class : LMatrix4
// Description : This is a 4-by-4 transform matrix.
////////////////////////////////////////////////////////////////////

746 18 BoundingHexahedron 0 2048 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 0 0 0 0 2 795 796 0 0 0 0 556
////////////////////////////////////////////////////////////////////
//       Class : BoundingHexahedron
// Description : This defines a bounding convex hexahedron.  It is
//               typically used to represent a frustum, but may
//               represent any enclosing convex hexahedron, including
//               simple boxes.  However, if all you want is an
//               axis-aligned bounding box, you may be better off with
//               the simpler BoundingBox class.
////////////////////////////////////////////////////////////////////

747 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 748 0 0 0 0 0 0 0 0 0 0

748 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 749 0 0 0 0 0 0 0 0 0 0

749 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 219
////////////////////////////////////////////////////////////////////
//       Class : LPoint2
// Description : This is a two-component point in space.
////////////////////////////////////////////////////////////////////

750 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 746 0 0 0 0 0 0 0 0 0 0

751 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 752 0 0 0 0 0 0 0 0 0 0

752 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 753 0 0 0 0 0 0 0 0 0 0

753 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

754 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 755 0 0 0 0 0 0 0 0 0 0

755 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

756 10 PNMBrush * 0 8576 10 PNMBrush * 10 PNMBrush * 0 0 646 0 0 0 0 0 0 0 0 0 0

757 15 LColorf const * 0 8576 15 LColorf const * 15 LColorf const * 0 0 758 0 0 0 0 0 0 0 0 0 0

758 13 LColorf const 0 8832 13 LColorf const 13 LColorf const 0 0 759 0 0 0 0 0 0 0 0 0 0

759 7 LColorf 0 2105344 7 LColorf 7 LColorf 0 0 732 0 0 0 0 0 0 0 0 0 0

760 5 xel * 0 8576 5 xel * 5 xel * 0 0 630 0 0 0 0 0 0 0 0 0 0

761 10 LRGBColorf 0 2105344 10 LRGBColorf 10 LRGBColorf 0 0 722 0 0 0 0 0 0 0 0 0 0

762 12 LRGBColorf * 0 8576 12 LRGBColorf * 12 LRGBColorf * 0 0 761 0 0 0 0 0 0 0 0 0 0

763 18 LRGBColorf const * 0 8576 18 LRGBColorf const * 18 LRGBColorf const * 0 0 764 0 0 0 0 0 0 0 0 0 0

764 16 LRGBColorf const 0 8832 16 LRGBColorf const 16 LRGBColorf const 0 0 761 0 0 0 0 0 0 0 0 0 0

765 9 LColorf * 0 8576 9 LColorf * 9 LColorf * 0 0 759 0 0 0 0 0 0 0 0 0 0

766 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 767 0 0 0 0 0 0 0 0 0 0

767 19 StackedPerlinNoise2 0 2048 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 0 0 0 0 0 0 0 0 0 359
////////////////////////////////////////////////////////////////////
//       Class : StackedPerlinNoise2
// Description : Implements a multi-layer PerlinNoise, with one or
//               more high-frequency noise functions added to a
//               lower-frequency base noise function.
////////////////////////////////////////////////////////////////////

768 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

769 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 770 0 0 0 0 0 0 0 0 0 0

770 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 771 0 0 0 0 0 0 0 0 0 0

771 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 745 0 0 0 0 0 0 0 0 0 0

772 5 Row * 0 8576 15 PNMImage::Row * 15 PNMImage::Row * 0 0 650 0 0 0 0 0 0 0 0 0 0

773 6 CRow * 0 8576 16 PNMImage::CRow * 16 PNMImage::CRow * 0 0 651 0 0 0 0 0 0 0 0 0 0

774 11 Row const * 0 8576 21 PNMImage::Row const * 21 PNMImage::Row const * 0 0 775 0 0 0 0 0 0 0 0 0 0

775 9 Row const 0 8832 19 PNMImage::Row const 19 PNMImage::Row const 0 0 650 0 0 0 0 0 0 0 0 0 0

776 6 size_t 0 2105344 6 size_t 6 size_t 0 0 777 0 0 0 0 0 0 0 0 0 0

777 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

778 12 CRow const * 0 8576 22 PNMImage::CRow const * 22 PNMImage::CRow const * 0 0 779 0 0 0 0 0 0 0 0 0 0

779 10 CRow const 0 8832 20 PNMImage::CRow const 20 PNMImage::CRow const 0 0 651 0 0 0 0 0 0 0 0 0 0

780 12 PNMPainter * 0 8576 12 PNMPainter * 12 PNMPainter * 0 0 652 0 0 0 0 0 0 0 0 0 0

781 18 PNMPainter const * 0 8576 18 PNMPainter const * 18 PNMPainter const * 0 0 782 0 0 0 0 0 0 0 0 0 0

782 16 PNMPainter const 0 8832 16 PNMPainter const 16 PNMPainter const 0 0 652 0 0 0 0 0 0 0 0 0 0

0
3
783 1 b 0 6 628 352 353 8 pixel::b 0

784 1 g 0 6 628 354 355 8 pixel::g 0

785 1 r 0 6 628 356 357 8 pixel::r 0

11
786 0 0 25 14 get_extensions 18 get_num_extensions 13 get_extension 
787 0 0 32 9 get_types 13 get_num_types 8 get_type 
788 0 0 91 10 get_pixels 14 get_num_pixels 9 get_pixel 
789 0 0 565 8 get_rows 4 size 7 get_row 
790 0 0 565 8 get_cols 4 size 7 get_col 
791 0 0 565 9 get_row3s 4 size 8 get_row3 
792 0 0 569 8 get_rows 4 size 7 get_row 
793 0 0 569 8 get_cols 4 size 7 get_col 
794 0 0 569 9 get_row3s 4 size 8 get_row3 
795 0 0 579 10 get_points 14 get_num_points 9 get_point 
796 0 0 579 10 get_planes 14 get_num_planes 9 get_plane 
