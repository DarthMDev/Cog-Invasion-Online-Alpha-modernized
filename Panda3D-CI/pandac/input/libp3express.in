1428711257
2 3
12 libp3express 4 vDgf 12 panda3d.core 
1313
1340 7 is_null 0 4 2657 22 PointerToVoid::is_null 0 1 15 372
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::is_null
//       Access: Published
//  Description: Returns true if the PointerTo is a NULL pointer,
//               false otherwise.  (Direct comparison to a NULL
//               pointer also works.)
////////////////////////////////////////////////////////////////////
47
inline bool PointerToVoid::is_null(void) const;

1341 8 get_hash 0 4 2657 23 PointerToVoid::get_hash 0 1 16 219
////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::get_hash
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline size_t PointerToVoid::get_hash(void) const;

1342 5 clear 0 4 2656 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 13 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

1343 6 output 0 4 2656 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 14 0
83
void PointerToBase< ReferenceCountedVector< double > >::output(ostream &out) const;

1344 19 ~PointerToArrayBase 0 4 2655 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

1345 19 ConstPointerToArray 0 4 2654 50 ConstPointerToArray< double >::ConstPointerToArray 0 3 1 2 3 0
282
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);
ConstPointerToArray< double >::ConstPointerToArray(_object *self, _object *source);

1346 4 size 0 4 2654 35 ConstPointerToArray< double >::size 0 1 4 0
68
inline unsigned int ConstPointerToArray< double >::size(void) const;

1347 11 get_element 0 4 2654 42 ConstPointerToArray< double >::get_element 0 1 5 0
86
inline double const &ConstPointerToArray< double >::get_element(unsigned int n) const;

1348 11 __getitem__ 0 4 2654 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
79
double const &ConstPointerToArray< double >::__getitem__(unsigned int n) const;

1349 8 get_data 0 4 2654 39 ConstPointerToArray< double >::get_data 0 1 7 0
80
inline basic_string< char > ConstPointerToArray< double >::get_data(void) const;

1350 11 get_subdata 0 4 2654 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
113
inline basic_string< char > ConstPointerToArray< double >::get_subdata(unsigned int n, unsigned int count) const;

1351 13 get_ref_count 0 4 2654 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

1352 18 get_node_ref_count 0 4 2654 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

1353 13 __getbuffer__ 0 4 2654 44 ConstPointerToArray< double >::__getbuffer__ 0 1 11 0
98
int ConstPointerToArray< double >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

1354 17 __releasebuffer__ 0 4 2654 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 12 0
92
void ConstPointerToArray< double >::__releasebuffer__(_object *self, Py_buffer *view) const;

1355 20 ~ConstPointerToArray 0 4 2654 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

1356 5 clear 0 4 2662 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 29 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

1357 6 output 0 4 2662 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 30 0
82
void PointerToBase< ReferenceCountedVector< float > >::output(ostream &out) const;

1358 19 ~PointerToArrayBase 0 4 2661 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

1359 19 ConstPointerToArray 0 4 2660 49 ConstPointerToArray< float >::ConstPointerToArray 0 3 17 18 19 0
277
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);
ConstPointerToArray< float >::ConstPointerToArray(_object *self, _object *source);

1360 4 size 0 4 2660 34 ConstPointerToArray< float >::size 0 1 20 0
67
inline unsigned int ConstPointerToArray< float >::size(void) const;

1361 11 get_element 0 4 2660 41 ConstPointerToArray< float >::get_element 0 1 21 0
84
inline float const &ConstPointerToArray< float >::get_element(unsigned int n) const;

1362 11 __getitem__ 0 4 2660 41 ConstPointerToArray< float >::__getitem__ 0 1 22 0
77
float const &ConstPointerToArray< float >::__getitem__(unsigned int n) const;

1363 8 get_data 0 4 2660 38 ConstPointerToArray< float >::get_data 0 1 23 0
79
inline basic_string< char > ConstPointerToArray< float >::get_data(void) const;

1364 11 get_subdata 0 4 2660 41 ConstPointerToArray< float >::get_subdata 0 1 24 0
112
inline basic_string< char > ConstPointerToArray< float >::get_subdata(unsigned int n, unsigned int count) const;

1365 13 get_ref_count 0 4 2660 43 ConstPointerToArray< float >::get_ref_count 0 1 25 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

1366 18 get_node_ref_count 0 4 2660 48 ConstPointerToArray< float >::get_node_ref_count 0 1 26 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

1367 13 __getbuffer__ 0 4 2660 43 ConstPointerToArray< float >::__getbuffer__ 0 1 27 0
97
int ConstPointerToArray< float >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

1368 17 __releasebuffer__ 0 4 2660 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 28 0
91
void ConstPointerToArray< float >::__releasebuffer__(_object *self, Py_buffer *view) const;

1369 20 ~ConstPointerToArray 0 4 2660 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

1370 5 clear 0 4 2666 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 43 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

1371 6 output 0 4 2666 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 44 0
80
void PointerToBase< ReferenceCountedVector< int > >::output(ostream &out) const;

1372 19 ~PointerToArrayBase 0 4 2665 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

1373 19 ConstPointerToArray 0 4 2664 47 ConstPointerToArray< int >::ConstPointerToArray 0 3 31 32 33 0
267
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);
ConstPointerToArray< int >::ConstPointerToArray(_object *self, _object *source);

1374 4 size 0 4 2664 32 ConstPointerToArray< int >::size 0 1 34 0
65
inline unsigned int ConstPointerToArray< int >::size(void) const;

1375 11 get_element 0 4 2664 39 ConstPointerToArray< int >::get_element 0 1 35 0
80
inline int const &ConstPointerToArray< int >::get_element(unsigned int n) const;

1376 11 __getitem__ 0 4 2664 39 ConstPointerToArray< int >::__getitem__ 0 1 36 0
73
int const &ConstPointerToArray< int >::__getitem__(unsigned int n) const;

1377 8 get_data 0 4 2664 36 ConstPointerToArray< int >::get_data 0 1 37 0
77
inline basic_string< char > ConstPointerToArray< int >::get_data(void) const;

1378 11 get_subdata 0 4 2664 39 ConstPointerToArray< int >::get_subdata 0 1 38 0
110
inline basic_string< char > ConstPointerToArray< int >::get_subdata(unsigned int n, unsigned int count) const;

1379 13 get_ref_count 0 4 2664 41 ConstPointerToArray< int >::get_ref_count 0 1 39 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

1380 18 get_node_ref_count 0 4 2664 46 ConstPointerToArray< int >::get_node_ref_count 0 1 40 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

1381 13 __getbuffer__ 0 4 2664 41 ConstPointerToArray< int >::__getbuffer__ 0 1 41 0
95
int ConstPointerToArray< int >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

1382 17 __releasebuffer__ 0 4 2664 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 42 0
89
void ConstPointerToArray< int >::__releasebuffer__(_object *self, Py_buffer *view) const;

1383 20 ~ConstPointerToArray 0 4 2664 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

1384 5 clear 0 4 2670 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 57 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

1385 6 output 0 4 2670 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 58 0
90
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(ostream &out) const;

1386 19 ~PointerToArrayBase 0 4 2669 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

1387 19 ConstPointerToArray 0 4 2668 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 3 45 46 47 0
317
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);
ConstPointerToArray< unsigned char >::ConstPointerToArray(_object *self, _object *source);

1388 4 size 0 4 2668 42 ConstPointerToArray< unsigned char >::size 0 1 48 0
75
inline unsigned int ConstPointerToArray< unsigned char >::size(void) const;

1389 11 get_element 0 4 2668 49 ConstPointerToArray< unsigned char >::get_element 0 1 49 0
100
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(unsigned int n) const;

1390 11 __getitem__ 0 4 2668 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 50 0
93
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(unsigned int n) const;

1391 8 get_data 0 4 2668 46 ConstPointerToArray< unsigned char >::get_data 0 1 51 0
87
inline basic_string< char > ConstPointerToArray< unsigned char >::get_data(void) const;

1392 11 get_subdata 0 4 2668 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 52 0
120
inline basic_string< char > ConstPointerToArray< unsigned char >::get_subdata(unsigned int n, unsigned int count) const;

1393 13 get_ref_count 0 4 2668 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 53 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

1394 18 get_node_ref_count 0 4 2668 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 54 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

1395 13 __getbuffer__ 0 4 2668 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 55 0
105
int ConstPointerToArray< unsigned char >::__getbuffer__(_object *self, Py_buffer *view, int flags) const;

1396 17 __releasebuffer__ 0 4 2668 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 56 0
99
void ConstPointerToArray< unsigned char >::__releasebuffer__(_object *self, Py_buffer *view) const;

1397 20 ~ConstPointerToArray 0 4 2668 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

1398 12 ~ConfigFlags 0 4 2672 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

1399 8 get_page 0 4 2671 27 ConfigDeclaration::get_page 0 1 59 297
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_page
//       Access: Public
//  Description: Returns the page on which this declaration can be
//               found.
////////////////////////////////////////////////////////////////////
59
inline ConfigPage *ConfigDeclaration::get_page(void) const;

1400 12 get_variable 0 4 2671 31 ConfigDeclaration::get_variable 0 1 60 395
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_variable
//       Access: Public
//  Description: Returns the variable that this declaration names.
//               This variable may or may not have been defined by the
//               time the declaration is read.
////////////////////////////////////////////////////////////////////
71
inline ConfigVariableCore *ConfigDeclaration::get_variable(void) const;

1401 16 get_string_value 0 4 2671 35 ConfigDeclaration::get_string_value 0 1 61 452
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_value
//       Access: Public
//  Description: Returns the value assigned to this variable.  This is
//               the original one-line text defined for the variable
//               in the .prc file (or passed to
//               ConfigPage::make_declaration()).
////////////////////////////////////////////////////////////////////
69
inline string const &ConfigDeclaration::get_string_value(void) const;

1402 16 set_string_value 0 4 2671 35 ConfigDeclaration::set_string_value 0 1 62 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::set_string_value
//       Access: Public
//  Description: Changes the value assigned to this variable.
////////////////////////////////////////////////////////////////////
69
inline void ConfigDeclaration::set_string_value(string const &value);

1403 13 get_num_words 0 4 2671 32 ConfigDeclaration::get_num_words 0 1 63 405
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_num_words
//       Access: Public
//  Description: Returns the number of words in the declaration's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
////////////////////////////////////////////////////////////////////
56
inline int ConfigDeclaration::get_num_words(void) const;

1404 15 has_string_word 0 4 2671 34 ConfigDeclaration::has_string_word 0 1 64 449
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_string_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigDeclaration::has_string_word(int n) const;

1405 13 has_bool_word 0 4 2671 32 ConfigDeclaration::has_bool_word 0 1 65 329
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_bool_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               boolean value for the nth word.
////////////////////////////////////////////////////////////////////
58
inline bool ConfigDeclaration::has_bool_word(int n) const;

1406 12 has_int_word 0 4 2671 31 ConfigDeclaration::has_int_word 0 1 66 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigDeclaration::has_int_word(int n) const;

1407 14 has_int64_word 0 4 2671 33 ConfigDeclaration::has_int64_word 0 1 67 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int64_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               int64 value for the nth word.
////////////////////////////////////////////////////////////////////
59
inline bool ConfigDeclaration::has_int64_word(int n) const;

1408 15 has_double_word 0 4 2671 34 ConfigDeclaration::has_double_word 0 1 68 331
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_double_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigDeclaration::has_double_word(int n) const;

1409 15 get_string_word 0 4 2671 34 ConfigDeclaration::get_string_word 0 1 69 404
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_word
//       Access: Public
//  Description: Returns the string value of the nth word of the
//               declaration's value, or empty string if there is no
//               nth value.  See also has_string_word().
////////////////////////////////////////////////////////////////////
62
inline string ConfigDeclaration::get_string_word(int n) const;

1410 13 get_bool_word 0 4 2671 32 ConfigDeclaration::get_bool_word 0 1 70 394
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_bool_word
//       Access: Public
//  Description: Returns the boolean value of the nth word of the
//               declaration's value, or false if there is no nth
//               value.  See also has_bool_word().
////////////////////////////////////////////////////////////////////
58
inline bool ConfigDeclaration::get_bool_word(int n) const;

1411 12 get_int_word 0 4 2671 31 ConfigDeclaration::get_int_word 0 1 71 387
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
56
inline int ConfigDeclaration::get_int_word(int n) const;

1412 14 get_int64_word 0 4 2671 33 ConfigDeclaration::get_int64_word 0 1 72 389
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int64_word
//       Access: Public
//  Description: Returns the int64 value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int64_word().
////////////////////////////////////////////////////////////////////
63
inline PN_int64 ConfigDeclaration::get_int64_word(int n) const;

1413 15 get_double_word 0 4 2671 34 ConfigDeclaration::get_double_word 0 1 73 393
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_double_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_double_word().
////////////////////////////////////////////////////////////////////
62
inline double ConfigDeclaration::get_double_word(int n) const;

1414 15 set_string_word 0 4 2671 34 ConfigDeclaration::set_string_word 0 1 74 0
68
void ConfigDeclaration::set_string_word(int n, string const &value);

1415 13 set_bool_word 0 4 2671 32 ConfigDeclaration::set_bool_word 0 1 75 0
57
void ConfigDeclaration::set_bool_word(int n, bool value);

1416 12 set_int_word 0 4 2671 31 ConfigDeclaration::set_int_word 0 1 76 0
55
void ConfigDeclaration::set_int_word(int n, int value);

1417 14 set_int64_word 0 4 2671 33 ConfigDeclaration::set_int64_word 0 1 77 0
62
void ConfigDeclaration::set_int64_word(int n, PN_int64 value);

1418 15 set_double_word 0 4 2671 34 ConfigDeclaration::set_double_word 0 1 78 0
61
void ConfigDeclaration::set_double_word(int n, double value);

1419 12 get_decl_seq 0 4 2671 31 ConfigDeclaration::get_decl_seq 0 1 79 530
////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_decl_seq
//       Access: Public
//  Description: Returns the sequence number of the declaration within
//               the page.  Sequence numbers are assigned as each
//               declaration is created; each declaration is given a
//               higher sequence number than all the declarations
//               created in the page before it.
////////////////////////////////////////////////////////////////////
55
inline int ConfigDeclaration::get_decl_seq(void) const;

1420 6 output 0 4 2671 25 ConfigDeclaration::output 0 1 80 0
51
void ConfigDeclaration::output(ostream &out) const;

1421 5 write 0 4 2671 24 ConfigDeclaration::write 0 1 81 0
50
void ConfigDeclaration::write(ostream &out) const;

1422 16 get_default_page 0 4 2675 28 ConfigPage::get_default_page 0 1 82 0
54
static ConfigPage *ConfigPage::get_default_page(void);

1423 14 get_local_page 0 4 2675 26 ConfigPage::get_local_page 0 1 83 0
52
static ConfigPage *ConfigPage::get_local_page(void);

1424 8 get_name 0 4 2675 20 ConfigPage::get_name 0 1 84 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_name
//       Access: Published
//  Description: Returns the name of the page.  If the page was loaded
//               from a .prc file, this is usually the filename.
////////////////////////////////////////////////////////////////////
54
inline string const &ConfigPage::get_name(void) const;

1425 10 is_special 0 4 2675 22 ConfigPage::is_special 0 1 85 517
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_special
//       Access: Published
//  Description: Returns true if this is the special "default" or
//               "local" page, or false if it is an ordinary page,
//               e.g. an implicit page loaded from a prc file at
//               startup, or an explicit page created by
//               ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
47
inline bool ConfigPage::is_special(void) const;

1426 11 is_implicit 0 4 2675 23 ConfigPage::is_implicit 0 1 86 437
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_implicit
//       Access: Published
//  Description: Returns true if the page was loaded by implicitly
//               searching the config path on startup, or false if it
//               was explicitly loaded by dynamic code after initial
//               startup.
////////////////////////////////////////////////////////////////////
48
inline bool ConfigPage::is_implicit(void) const;

1427 8 set_sort 0 4 2675 20 ConfigPage::set_sort 0 1 87 0
36
void ConfigPage::set_sort(int sort);

1428 8 get_sort 0 4 2675 20 ConfigPage::get_sort 0 1 88 316
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_sort
//       Access: Published
//  Description: Returns the explicit sort order of this particular
//               ConfigPage.  See set_sort().
////////////////////////////////////////////////////////////////////
44
inline int ConfigPage::get_sort(void) const;

1429 12 get_page_seq 0 4 2675 24 ConfigPage::get_page_seq 0 1 89 728
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_page_seq
//       Access: Published
//  Description: Returns the sequence number of the page.  
//
//               Sequence numbers for a particular class (implicit
//               vs. explicit) of pages are assigned as each page is
//               loaded; each page is given a higher sequence number
//               than all the pages loaded before it.
//
//               The implicit_load pages, which are discovered in the
//               file system automatically, have a different set of
//               sequence numbers than the explicit pages.
////////////////////////////////////////////////////////////////////
48
inline int ConfigPage::get_page_seq(void) const;

1430 15 get_trust_level 0 4 2675 27 ConfigPage::get_trust_level 0 1 90 592
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_trust_level
//       Access: Published
//  Description: Returns the trust level associated with this page.
//               An untrusted page is trust level 0; if the page was
//               loaded from a signed .prc file, its trust level is
//               the index number of the certificate that signed it.
//               Generally, a higher trust level value represents
//               a greater level of trust.
////////////////////////////////////////////////////////////////////
51
inline int ConfigPage::get_trust_level(void) const;

1431 15 set_trust_level 0 4 2675 27 ConfigPage::set_trust_level 0 1 91 456
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::set_trust_level
//       Access: Published
//  Description: Explicitly sets the trust level on this particular
//               page.  Note that any subsequent changes to the page,
//               or to any variable declarations on it, will reset the
//               trust level to zero.
////////////////////////////////////////////////////////////////////
57
inline void ConfigPage::set_trust_level(int trust_level);

1432 13 get_signature 0 4 2675 25 ConfigPage::get_signature 0 1 92 399
////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_signature
//       Access: Published
//  Description: Returns the raw binary signature that was found in
//               the prc file, if any.  This method is probably not
//               terribly useful for most applications.
////////////////////////////////////////////////////////////////////
59
inline string const &ConfigPage::get_signature(void) const;

1433 5 clear 0 4 2675 17 ConfigPage::clear 0 1 93 0
29
void ConfigPage::clear(void);

1434 8 read_prc 0 4 2675 20 ConfigPage::read_prc 0 1 94 0
39
bool ConfigPage::read_prc(istream &in);

1435 18 read_encrypted_prc 0 4 2675 30 ConfigPage::read_encrypted_prc 0 1 95 0
73
bool ConfigPage::read_encrypted_prc(istream &in, string const &password);

1436 16 make_declaration 0 4 2675 28 ConfigPage::make_declaration 0 2 96 97 0
193
ConfigDeclaration *ConfigPage::make_declaration(string const &variable, string const &value);
ConfigDeclaration *ConfigPage::make_declaration(ConfigVariableCore *variable, string const &value);

1437 18 delete_declaration 0 4 2675 30 ConfigPage::delete_declaration 0 1 98 0
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

1438 20 get_num_declarations 0 4 2675 32 ConfigPage::get_num_declarations 0 1 99 0
49
int ConfigPage::get_num_declarations(void) const;

1439 15 get_declaration 0 4 2675 27 ConfigPage::get_declaration 0 1 100 0
66
ConfigDeclaration const *ConfigPage::get_declaration(int n) const;

1440 18 modify_declaration 0 4 2675 30 ConfigPage::modify_declaration 0 1 101 0
57
ConfigDeclaration *ConfigPage::modify_declaration(int n);

1441 17 get_variable_name 0 4 2675 29 ConfigPage::get_variable_name 0 1 102 0
50
string ConfigPage::get_variable_name(int n) const;

1442 16 get_string_value 0 4 2675 28 ConfigPage::get_string_value 0 1 103 0
49
string ConfigPage::get_string_value(int n) const;

1443 16 is_variable_used 0 4 2675 28 ConfigPage::is_variable_used 0 1 104 0
47
bool ConfigPage::is_variable_used(int n) const;

1444 6 output 0 4 2675 18 ConfigPage::output 0 1 105 0
44
void ConfigPage::output(ostream &out) const;

1445 22 output_brief_signature 0 4 2675 34 ConfigPage::output_brief_signature 0 1 106 0
60
void ConfigPage::output_brief_signature(ostream &out) const;

1446 5 write 0 4 2675 17 ConfigPage::write 0 1 107 0
43
void ConfigPage::write(ostream &out) const;

1447 21 loaded_implicit_pages 0 4 2676 40 ConfigPageManager::loaded_implicit_pages 0 1 108 415
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::loaded_implicit_pages
//       Access: Published
//  Description: Returns true if the implicit *.prc files have already
//               been loaded, false otherwise.  Normally this will
//               only be false briefly before startup.
////////////////////////////////////////////////////////////////////
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

1448 19 load_implicit_pages 0 4 2676 38 ConfigPageManager::load_implicit_pages 0 1 109 536
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::load_implicit_pages
//       Access: Published
//  Description: Searches the PRC_DIR and/or PRC_PATH directories for
//               *.prc files and loads them in as pages.  This is
//               normally called automatically at startup time, when
//               the first variable's value is referenced.  See also
//               reload_implicit_pages().
////////////////////////////////////////////////////////////////////
57
inline void ConfigPageManager::load_implicit_pages(void);

1449 21 reload_implicit_pages 0 4 2676 40 ConfigPageManager::reload_implicit_pages 0 1 110 0
52
void ConfigPageManager::reload_implicit_pages(void);

1450 15 get_search_path 0 4 2676 34 ConfigPageManager::get_search_path 0 1 111 556
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_search_path
//       Access: Published
//  Description: Returns the search path used to locate implicit .prc
//               files.  This is determined by the PRC_DIR and
//               PRC_PATH environment variables.  The object returned
//               by this method may be modified to change the path at
//               runtime, and then reload_implicit_pages() called.
////////////////////////////////////////////////////////////////////
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

1451 20 get_num_prc_patterns 0 4 2676 39 ConfigPageManager::get_num_prc_patterns 0 1 112 574
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.prc", that
//               are compiled in that will be searched for as default
//               config filenames.  Normally there is only one
//               pattern, and it is "*.prc", but others may be
//               specified with the PRC_FILENAME variable in
//               Config.pp.
////////////////////////////////////////////////////////////////////
63
inline int ConfigPageManager::get_num_prc_patterns(void) const;

1452 15 get_prc_pattern 0 4 2676 34 ConfigPageManager::get_prc_pattern 0 1 113 385
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid config file.  See
//               get_num_prc_patterns().
////////////////////////////////////////////////////////////////////
62
inline string ConfigPageManager::get_prc_pattern(int n) const;

1453 30 get_num_prc_encrypted_patterns 0 4 2676 49 ConfigPageManager::get_num_prc_encrypted_patterns 0 1 114 436
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_encrypted_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.pre", that
//               are compiled in that will be searched for as special
//               config files that are understood to be encrypted.
////////////////////////////////////////////////////////////////////
73
inline int ConfigPageManager::get_num_prc_encrypted_patterns(void) const;

1454 25 get_prc_encrypted_pattern 0 4 2676 44 ConfigPageManager::get_prc_encrypted_pattern 0 1 115 415
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_encrypted_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid encrypted config
//               file.  See get_num_prc_encrypted_patterns().
////////////////////////////////////////////////////////////////////
72
inline string ConfigPageManager::get_prc_encrypted_pattern(int n) const;

1455 31 get_num_prc_executable_patterns 0 4 2676 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 116 533
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_executable_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.exe", that
//               are compiled in that will be searched for as special
//               config files that are to be executed as a program,
//               and their output taken to be input.  This is normally
//               empty.
////////////////////////////////////////////////////////////////////
74
inline int ConfigPageManager::get_num_prc_executable_patterns(void) const;

1456 26 get_prc_executable_pattern 0 4 2676 45 ConfigPageManager::get_prc_executable_pattern 0 1 117 424
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_executable_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid executable-style config
//               file.  See get_num_prc_executable_patterns().
////////////////////////////////////////////////////////////////////
73
inline string ConfigPageManager::get_prc_executable_pattern(int n) const;

1457 18 make_explicit_page 0 4 2676 37 ConfigPageManager::make_explicit_page 0 1 118 0
70
ConfigPage *ConfigPageManager::make_explicit_page(string const &name);

1458 20 delete_explicit_page 0 4 2676 39 ConfigPageManager::delete_explicit_page 0 1 119 0
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

1459 22 get_num_implicit_pages 0 4 2676 41 ConfigPageManager::get_num_implicit_pages 0 1 120 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_implicit_pages
//       Access: Published
//  Description: Returns the current number of implicitly-loaded
//               ConfigPages in the world.  These represent files that
//               were automatically discovered on the disk as .prc
//               files.
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_implicit_pages(void) const;

1460 17 get_implicit_page 0 4 2676 36 ConfigPageManager::get_implicit_page 0 1 121 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_implicit_page
//       Access: Published
//  Description: Returns the nth implicit ConfigPage in the world.
//               See get_num_implicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_implicit_page(int n) const;

1461 22 get_num_explicit_pages 0 4 2676 41 ConfigPageManager::get_num_explicit_pages 0 1 122 490
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_explicit_pages
//       Access: Published
//  Description: Returns the current number of explicitly-loaded
//               ConfigPages in the world.  These represent pages that
//               were loaded dynamically at runtime by explicit calls
//               to ConfigPageManager::make_explicit_page().
////////////////////////////////////////////////////////////////////
65
inline int ConfigPageManager::get_num_explicit_pages(void) const;

1462 17 get_explicit_page 0 4 2676 36 ConfigPageManager::get_explicit_page 0 1 123 332
////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_explicit_page
//       Access: Published
//  Description: Returns the nth explicit ConfigPage in the world.
//               See get_num_explicit_pages().
////////////////////////////////////////////////////////////////////
69
inline ConfigPage *ConfigPageManager::get_explicit_page(int n) const;

1463 6 output 0 4 2676 25 ConfigPageManager::output 0 1 124 0
51
void ConfigPageManager::output(ostream &out) const;

1464 5 write 0 4 2676 24 ConfigPageManager::write 0 1 125 0
50
void ConfigPageManager::write(ostream &out) const;

1465 14 get_global_ptr 0 4 2676 33 ConfigPageManager::get_global_ptr 0 1 126 0
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

1466 8 get_name 0 4 2678 28 ConfigVariableBase::get_name 0 1 148 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_name
//       Access: Published
//  Description: Returns the name of the variable.
////////////////////////////////////////////////////////////////////
62
inline string const &ConfigVariableBase::get_name(void) const;

1467 14 get_value_type 0 4 2678 34 ConfigVariableBase::get_value_type 0 1 149 386
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_value_type
//       Access: Published
//  Description: Returns the stated type of this variable.  This
//               should be VT_list, unless a later variable
//               declaration has changed it.
////////////////////////////////////////////////////////////////////
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

1468 15 get_description 0 4 2678 35 ConfigVariableBase::get_description 0 1 150 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_description
//       Access: Published
//  Description: Returns the brief description of this variable, if
//               it has been defined.
////////////////////////////////////////////////////////////////////
69
inline string const &ConfigVariableBase::get_description(void) const;

1469 9 get_flags 0 4 2678 29 ConfigVariableBase::get_flags 0 1 151 522
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariableBase::get_flags(void) const;

1470 9 is_closed 0 4 2678 29 ConfigVariableBase::is_closed 0 1 152 749
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::is_closed(void) const;

1471 15 get_trust_level 0 4 2678 35 ConfigVariableBase::get_trust_level 0 1 153 835
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
59
inline int ConfigVariableBase::get_trust_level(void) const;

1472 10 is_dynamic 0 4 2678 30 ConfigVariableBase::is_dynamic 0 1 154 510
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariableBase::is_dynamic(void) const;

1473 17 clear_local_value 0 4 2678 37 ConfigVariableBase::clear_local_value 0 1 155 525
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::clear_local_value
//       Access: Published
//  Description: Removes the local value defined for this variable,
//               and allows its value to be once again retrieved from
//               the .prc files.
//
//               Returns true if the value was successfully removed,
//               false if it did not exist in the first place.
////////////////////////////////////////////////////////////////////
56
inline bool ConfigVariableBase::clear_local_value(void);

1474 15 has_local_value 0 4 2678 35 ConfigVariableBase::has_local_value 0 1 156 403
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_local_value
//       Access: Published
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigVariableBase::has_local_value(void) const;

1475 9 has_value 0 4 2678 29 ConfigVariableBase::has_value 0 1 157 395
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_value
//       Access: Public
//  Description: Returns true if this variable has an explicit value,
//               either from a prc file or locally set, or false if
//               variable has its default value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBase::has_value(void) const;

1476 6 output 0 4 2678 26 ConfigVariableBase::output 0 1 158 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableBase::output(ostream &out) const;

1477 5 write 0 4 2678 25 ConfigVariableBase::write 0 1 159 225
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableBase::write(ostream &out) const;

1478 14 ConfigVariable 0 4 2677 30 ConfigVariable::ConfigVariable 0 1 127 1180
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Protected
//  Description: This constructor is only intended to be called from a
//               specialized ConfigVariableFoo derived class.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Published
//  Description: Use this constructor to make a ConfigVariable of an
//               unspecified type.  Usually you'd want to do this just
//               to reference a previously-defined ConfigVariable of a
//               specific type, without having to know what type it is.
////////////////////////////////////////////////////////////////////
58
inline ConfigVariable::ConfigVariable(string const &name);

1479 15 ~ConfigVariable 0 4 2677 31 ConfigVariable::~ConfigVariable 0 0 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
inline ConfigVariable::~ConfigVariable(void);

1480 17 get_default_value 0 4 2677 33 ConfigVariable::get_default_value 0 1 128 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_default_value
//       Access: Published
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
////////////////////////////////////////////////////////////////////
78
inline ConfigDeclaration const *ConfigVariable::get_default_value(void) const;

1481 16 get_string_value 0 4 2677 32 ConfigVariable::get_string_value 0 1 129 315
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_value
//       Access: Published
//  Description: Returns the toplevel value of the variable, formatted
//               as a string.
////////////////////////////////////////////////////////////////////
66
inline string const &ConfigVariable::get_string_value(void) const;

1482 16 set_string_value 0 4 2677 32 ConfigVariable::set_string_value 0 1 130 443
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_value
//       Access: Published
//  Description: Changes the value assigned to this variable.  This
//               creates a local value that shadows any values defined
//               in the .prc files, until clear_local_value() is
//               called.
////////////////////////////////////////////////////////////////////
66
inline void ConfigVariable::set_string_value(string const &value);

1483 11 clear_value 0 4 2677 27 ConfigVariable::clear_value 0 1 131 376
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::clear_value
//       Access: Published
//  Description: Removes the value assigned to this variable, and lets
//               its original value (as read from the prc files) show
//               through.
////////////////////////////////////////////////////////////////////
46
inline void ConfigVariable::clear_value(void);

1484 13 get_num_words 0 4 2677 29 ConfigVariable::get_num_words 0 1 132 402
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_num_words
//       Access: Published
//  Description: Returns the number of words in the variable's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_num_words(void) const;

1485 15 has_string_word 0 4 2677 31 ConfigVariable::has_string_word 0 1 133 446
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_string_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_string_word(int n) const;

1486 13 has_bool_word 0 4 2677 29 ConfigVariable::has_bool_word 0 1 134 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_bool_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               boolean value for the nth word.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::has_bool_word(int n) const;

1487 12 has_int_word 0 4 2677 28 ConfigVariable::has_int_word 0 1 135 325
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariable::has_int_word(int n) const;

1488 14 has_int64_word 0 4 2677 30 ConfigVariable::has_int64_word 0 1 136 334
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int64_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               64-bit integer value for the nth word.
////////////////////////////////////////////////////////////////////
56
inline bool ConfigVariable::has_int64_word(int n) const;

1489 15 has_double_word 0 4 2677 31 ConfigVariable::has_double_word 0 1 137 328
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_double_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
////////////////////////////////////////////////////////////////////
57
inline bool ConfigVariable::has_double_word(int n) const;

1490 15 get_string_word 0 4 2677 31 ConfigVariable::get_string_word 0 1 138 401
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_word
//       Access: Published
//  Description: Returns the string value of the nth word of the
//               variable's value, or empty string if there is no
//               nth value.  See also has_string_word().
////////////////////////////////////////////////////////////////////
59
inline string ConfigVariable::get_string_word(int n) const;

1491 13 get_bool_word 0 4 2677 29 ConfigVariable::get_bool_word 0 1 139 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_bool_word
//       Access: Published
//  Description: Returns the boolean value of the nth word of the
//               variable's value, or false if there is no nth
//               value.  See also has_bool_word().
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariable::get_bool_word(int n) const;

1492 12 get_int_word 0 4 2677 28 ConfigVariable::get_int_word 0 1 140 384
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariable::get_int_word(int n) const;

1493 14 get_int64_word 0 4 2677 30 ConfigVariable::get_int64_word 0 1 141 384
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int64_word
//       Access: Published
//  Description: Returns the int64 value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
////////////////////////////////////////////////////////////////////
60
inline PN_int64 ConfigVariable::get_int64_word(int n) const;

1494 15 get_double_word 0 4 2677 31 ConfigVariable::get_double_word 0 1 142 390
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_double_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_double_word().
////////////////////////////////////////////////////////////////////
59
inline double ConfigVariable::get_double_word(int n) const;

1495 15 set_string_word 0 4 2677 31 ConfigVariable::set_string_word 0 1 143 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
72
inline void ConfigVariable::set_string_word(int n, string const &value);

1496 13 set_bool_word 0 4 2677 29 ConfigVariable::set_bool_word 0 1 144 324
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_bool_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
61
inline void ConfigVariable::set_bool_word(int n, bool value);

1497 12 set_int_word 0 4 2677 28 ConfigVariable::set_int_word 0 1 145 323
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariable::set_int_word(int n, int value);

1498 14 set_int64_word 0 4 2677 30 ConfigVariable::set_int64_word 0 1 146 325
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int64_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
66
inline void ConfigVariable::set_int64_word(int n, PN_int64 value);

1499 15 set_double_word 0 4 2677 31 ConfigVariable::set_double_word 0 1 147 326
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_double_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariable::set_double_word(int n, double value);

1500 18 ConfigVariableBool 0 4 2679 38 ConfigVariableBool::ConfigVariableBool 0 3 160 161 162 697
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
355
inline ConfigVariableBool::ConfigVariableBool(string const &name);
inline ConfigVariableBool::ConfigVariableBool(string const &name, bool default_value, string const &description = ((())), int flags = (0));
inline ConfigVariableBool::ConfigVariableBool(string const &name, string const &default_value, string const &description = ((())), int flags = (0));

1501 10 operator = 0 4 2679 30 ConfigVariableBool::operator = 0 1 163 0
55
inline void ConfigVariableBool::operator =(bool value);

1502 22 operator typecast bool 0 132 2679 42 ConfigVariableBool::operator typecast bool 0 1 171 0
67
inline bool ConfigVariableBool::operator typecast bool(void) const;

1503 4 size 0 4 2679 24 ConfigVariableBool::size 0 1 164 277
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableBool::size(void) const;

1504 11 operator [] 0 4 2679 31 ConfigVariableBool::operator [] 0 1 165 0
57
inline bool ConfigVariableBool::operator [](int n) const;

1505 9 set_value 0 4 2679 29 ConfigVariableBool::set_value 0 1 166 266
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
54
inline void ConfigVariableBool::set_value(bool value);

1506 9 get_value 0 4 2679 29 ConfigVariableBool::get_value 0 1 167 258
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_value(void) const;

1507 17 get_default_value 0 4 2679 37 ConfigVariableBool::get_default_value 0 1 168 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableBool::get_default_value(void) const;

1508 8 get_word 0 4 2679 28 ConfigVariableBool::get_word 0 1 169 261
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableBool::get_word(int n) const;

1509 8 set_word 0 4 2679 28 ConfigVariableBool::set_word 0 1 170 338
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
60
inline void ConfigVariableBool::set_word(int n, bool value);

1510 19 ~ConfigVariableBool 0 4 2679 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

1511 8 get_name 0 4 2680 28 ConfigVariableCore::get_name 0 1 172 258
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_name
//       Access: Public
//  Description: Returns the name of the variable.
////////////////////////////////////////////////////////////////////
62
inline string const &ConfigVariableCore::get_name(void) const;

1512 7 is_used 0 4 2680 27 ConfigVariableCore::is_used 0 1 173 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_used
//       Access: Public
//  Description: Returns true if the variable has been referenced by a
//               ConfigVariable somewhere in code, false otherwise.
////////////////////////////////////////////////////////////////////
52
inline bool ConfigVariableCore::is_used(void) const;

1513 14 get_value_type 0 4 2680 34 ConfigVariableCore::get_value_type 0 1 174 376
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_value_type
//       Access: Public
//  Description: Returns the stated type of this variable.  If the
//               variable has not yet been defined, this will be
//               VT_undefined.
////////////////////////////////////////////////////////////////////
77
inline ConfigFlags::ValueType ConfigVariableCore::get_value_type(void) const;

1514 15 get_description 0 4 2680 35 ConfigVariableCore::get_description 0 1 175 320
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_description
//       Access: Public
//  Description: Returns the brief description of this variable, if
//               it has been defined.
////////////////////////////////////////////////////////////////////
69
inline string const &ConfigVariableCore::get_description(void) const;

1515 9 get_flags 0 4 2680 29 ConfigVariableCore::get_flags 0 1 176 522
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
////////////////////////////////////////////////////////////////////
53
inline int ConfigVariableCore::get_flags(void) const;

1516 9 is_closed 0 4 2680 29 ConfigVariableCore::is_closed 0 1 177 749
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableCore::is_closed(void) const;

1517 15 get_trust_level 0 4 2680 35 ConfigVariableCore::get_trust_level 0 1 178 835
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
////////////////////////////////////////////////////////////////////
59
inline int ConfigVariableCore::get_trust_level(void) const;

1518 10 is_dynamic 0 4 2680 30 ConfigVariableCore::is_dynamic 0 1 179 510
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
////////////////////////////////////////////////////////////////////
55
inline bool ConfigVariableCore::is_dynamic(void) const;

1519 17 get_default_value 0 4 2680 37 ConfigVariableCore::get_default_value 0 1 180 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_default_value
//       Access: Public
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
////////////////////////////////////////////////////////////////////
82
inline ConfigDeclaration const *ConfigVariableCore::get_default_value(void) const;

1520 14 set_value_type 0 4 2680 34 ConfigVariableCore::set_value_type 0 1 181 0
75
void ConfigVariableCore::set_value_type(ConfigFlags::ValueType value_type);

1521 9 set_flags 0 4 2680 29 ConfigVariableCore::set_flags 0 1 182 0
46
void ConfigVariableCore::set_flags(int flags);

1522 15 set_description 0 4 2680 35 ConfigVariableCore::set_description 0 1 183 0
68
void ConfigVariableCore::set_description(string const &description);

1523 17 set_default_value 0 4 2680 37 ConfigVariableCore::set_default_value 0 1 184 0
72
void ConfigVariableCore::set_default_value(string const &default_value);

1524 8 set_used 0 4 2680 28 ConfigVariableCore::set_used 0 1 185 306
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::set_used
//       Access: Public
//  Description: Marks that the variable has been "declared" by a
//               ConfigVariable.
////////////////////////////////////////////////////////////////////
47
inline void ConfigVariableCore::set_used(void);

1525 16 make_local_value 0 4 2680 36 ConfigVariableCore::make_local_value 0 1 186 0
62
ConfigDeclaration *ConfigVariableCore::make_local_value(void);

1526 17 clear_local_value 0 4 2680 37 ConfigVariableCore::clear_local_value 0 1 187 0
49
bool ConfigVariableCore::clear_local_value(void);

1527 15 has_local_value 0 4 2680 35 ConfigVariableCore::has_local_value 0 1 188 400
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::has_local_value
//       Access: Public
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
////////////////////////////////////////////////////////////////////
60
inline bool ConfigVariableCore::has_local_value(void) const;

1528 9 has_value 0 4 2680 29 ConfigVariableCore::has_value 0 1 189 0
47
bool ConfigVariableCore::has_value(void) const;

1529 20 get_num_declarations 0 4 2680 40 ConfigVariableCore::get_num_declarations 0 1 190 0
57
int ConfigVariableCore::get_num_declarations(void) const;

1530 15 get_declaration 0 4 2680 35 ConfigVariableCore::get_declaration 0 1 191 0
74
ConfigDeclaration const *ConfigVariableCore::get_declaration(int n) const;

1531 18 get_num_references 0 4 2680 38 ConfigVariableCore::get_num_references 0 1 192 412
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_references
//       Access: Public
//  Description: Returns the number of prc files that reference this
//               variable.  This is not exactly the same as the number
//               of declarations; see get_reference().
////////////////////////////////////////////////////////////////////
62
inline int ConfigVariableCore::get_num_references(void) const;

1532 13 get_reference 0 4 2680 33 ConfigVariableCore::get_reference 0 1 193 645
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_reference
//       Access: Public
//  Description: Returns the nth declaration in a prc file that
//               references this variable.  This is similar, but not
//               identical to, get_declaration().  The difference is
//               that this will list *only* true references in a prc
//               file, and will not list default values or
//               locally-assigned values; it also will list even the
//               untrusted files.
////////////////////////////////////////////////////////////////////
79
inline ConfigDeclaration const *ConfigVariableCore::get_reference(int n) const;

1533 26 get_num_trusted_references 0 4 2680 46 ConfigVariableCore::get_num_trusted_references 0 1 194 378
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_trusted_references
//       Access: Public
//  Description: Returns the number of trusted prc files that
//               reference this variable.  See also
//               get_num_references().
////////////////////////////////////////////////////////////////////
70
inline int ConfigVariableCore::get_num_trusted_references(void) const;

1534 21 get_trusted_reference 0 4 2680 41 ConfigVariableCore::get_trusted_reference 0 1 195 776
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trusted_reference
//       Access: Public
//  Description: Returns the nth declaration in a trusted prc file
//               that references this variable.  This is similar, but
//               not identical to, get_declaration().  The difference
//               is that this will list *only* true references in a
//               prc file, and will not list default values or
//               locally-assigned values.
//
//               This is also similar to get_reference(), except that
//               it only lists the trusted declarations, omitting the
//               untrusted ones.
////////////////////////////////////////////////////////////////////
87
inline ConfigDeclaration const *ConfigVariableCore::get_trusted_reference(int n) const;

1535 25 get_num_unique_references 0 4 2680 45 ConfigVariableCore::get_num_unique_references 0 1 196 352
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_unique_references
//       Access: Public
//  Description: Returns the number of trusted, unique (by string
//               value) values there exist for this variable.
////////////////////////////////////////////////////////////////////
69
inline int ConfigVariableCore::get_num_unique_references(void) const;

1536 20 get_unique_reference 0 4 2680 40 ConfigVariableCore::get_unique_reference 0 1 197 431
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_unique_reference
//       Access: Public
//  Description: Returns the nth trusted, unique value for this
//               variable.  This is similar to
//               get_trusted_reference(), except that duplicate values
//               are removed.
////////////////////////////////////////////////////////////////////
86
inline ConfigDeclaration const *ConfigVariableCore::get_unique_reference(int n) const;

1537 6 output 0 4 2680 26 ConfigVariableCore::output 0 1 198 0
52
void ConfigVariableCore::output(ostream &out) const;

1538 5 write 0 4 2680 25 ConfigVariableCore::write 0 1 199 0
51
void ConfigVariableCore::write(ostream &out) const;

1539 20 ConfigVariableDouble 0 4 2681 42 ConfigVariableDouble::ConfigVariableDouble 0 3 200 201 202 703
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
369
inline ConfigVariableDouble::ConfigVariableDouble(string const &name);
inline ConfigVariableDouble::ConfigVariableDouble(string const &name, double default_value, string const &description = ((())), int flags = (0));
inline ConfigVariableDouble::ConfigVariableDouble(string const &name, string const &default_value, string const &description = ((())), int flags = (0));

1540 10 operator = 0 4 2681 32 ConfigVariableDouble::operator = 0 1 203 0
59
inline void ConfigVariableDouble::operator =(double value);

1541 24 operator typecast double 0 132 2681 46 ConfigVariableDouble::operator typecast double 0 1 211 0
73
inline double ConfigVariableDouble::operator typecast double(void) const;

1542 4 size 0 4 2681 26 ConfigVariableDouble::size 0 1 204 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
50
inline int ConfigVariableDouble::size(void) const;

1543 11 operator [] 0 4 2681 33 ConfigVariableDouble::operator [] 0 1 205 0
61
inline double ConfigVariableDouble::operator [](int n) const;

1544 9 set_value 0 4 2681 31 ConfigVariableDouble::set_value 0 1 206 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableDouble::set_value(double value);

1545 9 get_value 0 4 2681 31 ConfigVariableDouble::get_value 0 1 207 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_value(void) const;

1546 17 get_default_value 0 4 2681 39 ConfigVariableDouble::get_default_value 0 1 208 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
66
inline double ConfigVariableDouble::get_default_value(void) const;

1547 8 get_word 0 4 2681 30 ConfigVariableDouble::get_word 0 1 209 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
58
inline double ConfigVariableDouble::get_word(int n) const;

1548 8 set_word 0 4 2681 30 ConfigVariableDouble::set_word 0 1 210 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableDouble::set_word(int n, double value);

1549 21 ~ConfigVariableDouble 0 4 2681 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

1550 22 ConfigVariableFilename 0 4 2682 46 ConfigVariableFilename::ConfigVariableFilename 0 2 212 213 472
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
233
inline ConfigVariableFilename::ConfigVariableFilename(string const &name);
inline ConfigVariableFilename::ConfigVariableFilename(string const &name, Filename const &default_value, string const &description = ((())), int flags = (0));

1551 10 operator = 0 4 2682 34 ConfigVariableFilename::operator = 0 1 214 0
70
inline void ConfigVariableFilename::operator =(Filename const &value);

1552 17 operator typecast 0 132 2682 41 ConfigVariableFilename::operator typecast 0 1 233 0
77
inline Filename const &ConfigVariableFilename::operator typecast(void) const;

1553 5 c_str 0 4 2682 29 ConfigVariableFilename::c_str 0 1 215 306
// These methods help the ConfigVariableFilename act like a Filename
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
61
inline char const *ConfigVariableFilename::c_str(void) const;

1554 5 empty 0 4 2682 29 ConfigVariableFilename::empty 0 1 216 225
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
54
inline bool ConfigVariableFilename::empty(void) const;

1555 6 length 0 4 2682 30 ConfigVariableFilename::length 0 1 217 226
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
57
inline size_t ConfigVariableFilename::length(void) const;

1556 11 operator [] 0 4 2682 35 ConfigVariableFilename::operator [] 0 1 218 0
61
inline char ConfigVariableFilename::operator [](int n) const;

1557 12 get_fullpath 0 4 2682 36 ConfigVariableFilename::get_fullpath 0 1 219 450
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath
//       Access: Public
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
////////////////////////////////////////////////////////////////////
63
inline string ConfigVariableFilename::get_fullpath(void) const;

1558 11 get_dirname 0 4 2682 35 ConfigVariableFilename::get_dirname 0 1 220 391
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_dirname
//       Access: Public
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
62
inline string ConfigVariableFilename::get_dirname(void) const;

1559 12 get_basename 0 4 2682 36 ConfigVariableFilename::get_basename 0 1 221 398
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename
//       Access: Public
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
63
inline string ConfigVariableFilename::get_basename(void) const;

1560 25 get_fullpath_wo_extension 0 4 2682 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 222 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath_wo_extension
//       Access: Public
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
76
inline string ConfigVariableFilename::get_fullpath_wo_extension(void) const;

1561 25 get_basename_wo_extension 0 4 2682 49 ConfigVariableFilename::get_basename_wo_extension 0 1 223 333
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename_wo_extension
//       Access: Public
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
76
inline string ConfigVariableFilename::get_basename_wo_extension(void) const;

1562 13 get_extension 0 4 2682 37 ConfigVariableFilename::get_extension 0 1 224 394
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_extension
//       Access: Public
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
64
inline string ConfigVariableFilename::get_extension(void) const;

1563 11 operator == 0 4 2682 35 ConfigVariableFilename::operator == 0 1 225 34
// Comparison operators are handy.
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

1564 11 operator != 0 4 2682 35 ConfigVariableFilename::operator != 0 1 226 0
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

1565 10 operator < 0 4 2682 34 ConfigVariableFilename::operator < 0 1 227 0
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

1566 9 set_value 0 4 2682 33 ConfigVariableFilename::set_value 0 1 228 270
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
69
inline void ConfigVariableFilename::set_value(Filename const &value);

1567 9 get_value 0 4 2682 33 ConfigVariableFilename::get_value 0 1 229 262
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
62
inline Filename ConfigVariableFilename::get_value(void) const;

1568 17 get_default_value 0 4 2682 41 ConfigVariableFilename::get_default_value 0 1 230 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

1569 8 get_word 0 4 2682 32 ConfigVariableFilename::get_word 0 1 231 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
62
inline Filename ConfigVariableFilename::get_word(int n) const;

1570 8 set_word 0 4 2682 32 ConfigVariableFilename::set_word 0 1 232 342
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
75
inline void ConfigVariableFilename::set_word(int n, Filename const &value);

1571 23 ~ConfigVariableFilename 0 4 2682 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

1572 17 ConfigVariableInt 0 4 2683 36 ConfigVariableInt::ConfigVariableInt 0 3 234 235 236 694
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
348
inline ConfigVariableInt::ConfigVariableInt(string const &name);
inline ConfigVariableInt::ConfigVariableInt(string const &name, int default_value, string const &description = ((())), int flags = (0));
inline ConfigVariableInt::ConfigVariableInt(string const &name, string const &default_value, string const &description = ((())), int flags = (0));

1573 10 operator = 0 4 2683 29 ConfigVariableInt::operator = 0 1 237 0
53
inline void ConfigVariableInt::operator =(int value);

1574 21 operator typecast int 0 132 2683 40 ConfigVariableInt::operator typecast int 0 1 245 0
64
inline int ConfigVariableInt::operator typecast int(void) const;

1575 4 size 0 4 2683 23 ConfigVariableInt::size 0 1 238 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
47
inline int ConfigVariableInt::size(void) const;

1576 11 operator [] 0 4 2683 30 ConfigVariableInt::operator [] 0 1 239 0
55
inline int ConfigVariableInt::operator [](int n) const;

1577 9 set_value 0 4 2683 28 ConfigVariableInt::set_value 0 1 240 265
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
52
inline void ConfigVariableInt::set_value(int value);

1578 9 get_value 0 4 2683 28 ConfigVariableInt::get_value 0 1 241 257
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_value(void) const;

1579 17 get_default_value 0 4 2683 36 ConfigVariableInt::get_default_value 0 1 242 273
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
60
inline int ConfigVariableInt::get_default_value(void) const;

1580 8 get_word 0 4 2683 27 ConfigVariableInt::get_word 0 1 243 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
52
inline int ConfigVariableInt::get_word(int n) const;

1581 8 set_word 0 4 2683 27 ConfigVariableInt::set_word 0 1 244 337
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
58
inline void ConfigVariableInt::set_word(int n, int value);

1582 18 ~ConfigVariableInt 0 4 2683 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

1583 19 ConfigVariableInt64 0 4 2684 40 ConfigVariableInt64::ConfigVariableInt64 0 3 246 247 248 700
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
375
inline ConfigVariableInt64::ConfigVariableInt64(string const &name);
inline ConfigVariableInt64::ConfigVariableInt64(string const &name, PN_int64 default_value, string const &description = ((())), PN_int64 flags = (0));
inline ConfigVariableInt64::ConfigVariableInt64(string const &name, string const &default_value, string const &description = ((())), PN_int64 flags = (0));

1584 10 operator = 0 4 2684 31 ConfigVariableInt64::operator = 0 1 249 0
60
inline void ConfigVariableInt64::operator =(PN_int64 value);

1585 26 operator typecast PN_int64 0 132 2684 47 ConfigVariableInt64::operator typecast PN_int64 0 1 257 0
76
inline PN_int64 ConfigVariableInt64::operator typecast PN_int64(void) const;

1586 4 size 0 4 2684 25 ConfigVariableInt64::size 0 1 250 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
////////////////////////////////////////////////////////////////////
54
inline PN_int64 ConfigVariableInt64::size(void) const;

1587 11 operator [] 0 4 2684 32 ConfigVariableInt64::operator [] 0 1 251 0
62
inline PN_int64 ConfigVariableInt64::operator [](int n) const;

1588 9 set_value 0 4 2684 30 ConfigVariableInt64::set_value 0 1 252 267
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
59
inline void ConfigVariableInt64::set_value(PN_int64 value);

1589 9 get_value 0 4 2684 30 ConfigVariableInt64::get_value 0 1 253 259
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
59
inline PN_int64 ConfigVariableInt64::get_value(void) const;

1590 17 get_default_value 0 4 2684 38 ConfigVariableInt64::get_default_value 0 1 254 275
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
67
inline PN_int64 ConfigVariableInt64::get_default_value(void) const;

1591 8 get_word 0 4 2684 29 ConfigVariableInt64::get_word 0 1 255 262
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
59
inline PN_int64 ConfigVariableInt64::get_word(int n) const;

1592 8 set_word 0 4 2684 29 ConfigVariableInt64::set_word 0 1 256 339
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableInt64::set_word(int n, PN_int64 value);

1593 20 ~ConfigVariableInt64 0 4 2684 41 ConfigVariableInt64::~ConfigVariableInt64 0 0 0
48
ConfigVariableInt64::~ConfigVariableInt64(void);

1594 18 ConfigVariableList 0 4 2685 38 ConfigVariableList::ConfigVariableList 0 1 258 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
119
inline ConfigVariableList::ConfigVariableList(string const &name, string const &description = ((())), int flags = (0));

1595 19 ~ConfigVariableList 0 4 2685 39 ConfigVariableList::~ConfigVariableList 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
inline ConfigVariableList::~ConfigVariableList(void);

1596 14 get_num_values 0 4 2685 34 ConfigVariableList::get_num_values 0 1 259 279
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_values
//       Access: Published
//  Description: Returns the number of values in the variable.
////////////////////////////////////////////////////////////////////
58
inline int ConfigVariableList::get_num_values(void) const;

1597 16 get_string_value 0 4 2685 36 ConfigVariableList::get_string_value 0 1 260 274
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_string_value
//       Access: Published
//  Description: Returns the nth value of the variable.
////////////////////////////////////////////////////////////////////
64
inline string ConfigVariableList::get_string_value(int n) const;

1598 21 get_num_unique_values 0 4 2685 41 ConfigVariableList::get_num_unique_values 0 1 261 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_unique_values
//       Access: Published
//  Description: Returns the number of unique values in the variable.
////////////////////////////////////////////////////////////////////
65
inline int ConfigVariableList::get_num_unique_values(void) const;

1599 16 get_unique_value 0 4 2685 36 ConfigVariableList::get_unique_value 0 1 262 281
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_unique_value
//       Access: Published
//  Description: Returns the nth unique value of the variable.
////////////////////////////////////////////////////////////////////
64
inline string ConfigVariableList::get_unique_value(int n) const;

1600 4 size 0 4 2685 24 ConfigVariableList::size 0 1 263 278
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::size()
//       Access: Published
//  Description: Returns the number of unique values of the variable.
////////////////////////////////////////////////////////////////////
48
inline int ConfigVariableList::size(void) const;

1601 11 operator [] 0 4 2685 31 ConfigVariableList::operator [] 0 1 264 0
59
inline string ConfigVariableList::operator [](int n) const;

1602 6 output 0 4 2685 26 ConfigVariableList::output 0 1 265 0
52
void ConfigVariableList::output(ostream &out) const;

1603 5 write 0 4 2685 25 ConfigVariableList::write 0 1 266 0
51
void ConfigVariableList::write(ostream &out) const;

1604 13 make_variable 0 4 2686 36 ConfigVariableManager::make_variable 0 1 267 0
77
ConfigVariableCore *ConfigVariableManager::make_variable(string const &name);

1605 22 make_variable_template 0 4 2686 45 ConfigVariableManager::make_variable_template 0 1 268 0
200
ConfigVariableCore *ConfigVariableManager::make_variable_template(string const &pattern, ConfigFlags::ValueType type, string const &default_value, string const &description = ((())), int flags = (0));

1606 17 get_num_variables 0 4 2686 40 ConfigVariableManager::get_num_variables 0 1 269 327
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_num_variables
//       Access: Published
//  Description: Returns the current number of active ConfigVariableCores in
//               the world.
////////////////////////////////////////////////////////////////////
64
inline int ConfigVariableManager::get_num_variables(void) const;

1607 12 get_variable 0 4 2686 35 ConfigVariableManager::get_variable 0 1 270 290
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_variable
//       Access: Published
//  Description: Returns the nth active ConfigVariableCore in the world.
////////////////////////////////////////////////////////////////////
76
inline ConfigVariableCore *ConfigVariableManager::get_variable(int n) const;

1608 17 get_variable_name 0 4 2686 40 ConfigVariableManager::get_variable_name 0 1 271 0
61
string ConfigVariableManager::get_variable_name(int n) const;

1609 16 is_variable_used 0 4 2686 39 ConfigVariableManager::is_variable_used 0 1 272 0
58
bool ConfigVariableManager::is_variable_used(int n) const;

1610 6 output 0 4 2686 29 ConfigVariableManager::output 0 1 273 0
55
void ConfigVariableManager::output(ostream &out) const;

1611 5 write 0 4 2686 28 ConfigVariableManager::write 0 1 274 0
54
void ConfigVariableManager::write(ostream &out) const;

1612 19 write_prc_variables 0 4 2686 42 ConfigVariableManager::write_prc_variables 0 1 275 0
68
void ConfigVariableManager::write_prc_variables(ostream &out) const;

1613 21 list_unused_variables 0 4 2686 44 ConfigVariableManager::list_unused_variables 0 1 276 0
62
void ConfigVariableManager::list_unused_variables(void) const;

1614 14 list_variables 0 4 2686 37 ConfigVariableManager::list_variables 0 1 277 0
55
void ConfigVariableManager::list_variables(void) const;

1615 22 list_dynamic_variables 0 4 2686 45 ConfigVariableManager::list_dynamic_variables 0 1 278 0
63
void ConfigVariableManager::list_dynamic_variables(void) const;

1616 14 get_global_ptr 0 4 2686 37 ConfigVariableManager::get_global_ptr 0 1 279 0
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

1617 24 ConfigVariableSearchPath 0 4 2687 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 3 280 281 282 715
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
440
inline ConfigVariableSearchPath::ConfigVariableSearchPath(string const &name, string const &description = ((())), int flags = (0));
inline ConfigVariableSearchPath::ConfigVariableSearchPath(string const &name, DSearchPath const &default_value, string const &description, int flags = (0));
inline ConfigVariableSearchPath::ConfigVariableSearchPath(string const &name, string const &default_value, string const &description, int flags = (0));

1618 25 ~ConfigVariableSearchPath 0 4 2687 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 236
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

1619 17 operator typecast 0 132 2687 43 ConfigVariableSearchPath::operator typecast 0 1 300 0
82
inline DSearchPath const &ConfigVariableSearchPath::operator typecast(void) const;

1620 9 get_value 0 4 2687 35 ConfigVariableSearchPath::get_value 0 1 283 235
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
74
inline DSearchPath const &ConfigVariableSearchPath::get_value(void) const;

1621 17 get_default_value 0 4 2687 43 ConfigVariableSearchPath::get_default_value 0 1 284 243
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_default_value
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
82
inline DSearchPath const &ConfigVariableSearchPath::get_default_value(void) const;

1622 17 clear_local_value 0 4 2687 43 ConfigVariableSearchPath::clear_local_value 0 1 285 359
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear_local_value
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

1623 5 clear 0 4 2687 31 ConfigVariableSearchPath::clear 0 1 286 347
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
////////////////////////////////////////////////////////////////////
50
inline void ConfigVariableSearchPath::clear(void);

1624 16 append_directory 0 4 2687 42 ConfigVariableSearchPath::append_directory 0 1 287 293
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_directory
//       Access: Published
//  Description: Adds a new directory to the end of the search list.
////////////////////////////////////////////////////////////////////
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

1625 17 prepend_directory 0 4 2687 43 ConfigVariableSearchPath::prepend_directory 0 1 288 296
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_directory
//       Access: Published
//  Description: Adds a new directory to the front of the search list.
////////////////////////////////////////////////////////////////////
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

1626 11 append_path 0 4 2687 37 ConfigVariableSearchPath::append_path 0 2 289 290 678
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
////////////////////////////////////////////////////////////////////
180
inline void ConfigVariableSearchPath::append_path(string const &path, string const &separator = ((())));
inline void ConfigVariableSearchPath::append_path(DSearchPath const &path);

1627 12 prepend_path 0 4 2687 38 ConfigVariableSearchPath::prepend_path 0 1 291 345
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the beginning of the search list.
////////////////////////////////////////////////////////////////////
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

1628 8 is_empty 0 4 2687 34 ConfigVariableSearchPath::is_empty 0 1 292 309
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::is_empty
//       Access: Published
//  Description: Returns true if the search list is empty, false
//               otherwise.
////////////////////////////////////////////////////////////////////
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

1629 19 get_num_directories 0 4 2687 45 ConfigVariableSearchPath::get_num_directories 0 1 293 298
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_num_directories
//       Access: Published
//  Description: Returns the number of directories on the search list.
////////////////////////////////////////////////////////////////////
69
inline int ConfigVariableSearchPath::get_num_directories(void) const;

1630 13 get_directory 0 4 2687 39 ConfigVariableSearchPath::get_directory 0 1 294 284
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_directory
//       Access: Published
//  Description: Returns the nth directory on the search list.
////////////////////////////////////////////////////////////////////
76
inline Filename const &ConfigVariableSearchPath::get_directory(int n) const;

1631 9 find_file 0 4 2687 35 ConfigVariableSearchPath::find_file 0 1 295 466
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_file
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Returns the full
//               matching pathname of the first match if found, or the
//               empty string if not found.
////////////////////////////////////////////////////////////////////
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

1632 14 find_all_files 0 4 2687 40 ConfigVariableSearchPath::find_all_files 0 2 296 297 1142
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
////////////////////////////////////////////////////////////////////
217
inline int ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results ConfigVariableSearchPath::find_all_files(Filename const &filename) const;

1633 6 output 0 4 2687 32 ConfigVariableSearchPath::output 0 1 298 232
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableSearchPath::output(ostream &out) const;

1634 5 write 0 4 2687 31 ConfigVariableSearchPath::write 0 1 299 231
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::write
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
64
inline void ConfigVariableSearchPath::write(ostream &out) const;

1635 20 ConfigVariableString 0 4 2688 42 ConfigVariableString::ConfigVariableString 0 2 301 302 468
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
223
inline ConfigVariableString::ConfigVariableString(string const &name);
inline ConfigVariableString::ConfigVariableString(string const &name, string const &default_value, string const &description = ((())), int flags = (0));

1636 10 operator = 0 4 2688 32 ConfigVariableString::operator = 0 1 303 0
66
inline void ConfigVariableString::operator =(string const &value);

1637 17 operator typecast 0 132 2688 39 ConfigVariableString::operator typecast 0 1 316 0
73
inline string const &ConfigVariableString::operator typecast(void) const;

1638 5 c_str 0 4 2688 27 ConfigVariableString::c_str 0 1 304 304
// These methods help the ConfigVariableString act like a C++ string
// object.

////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::c_str
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
59
inline char const *ConfigVariableString::c_str(void) const;

1639 5 empty 0 4 2688 27 ConfigVariableString::empty 0 1 305 223
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::empty
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline bool ConfigVariableString::empty(void) const;

1640 6 length 0 4 2688 28 ConfigVariableString::length 0 1 306 224
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline size_t ConfigVariableString::length(void) const;

1641 11 operator [] 0 4 2688 33 ConfigVariableString::operator [] 0 1 307 0
59
inline char ConfigVariableString::operator [](int n) const;

1642 11 operator == 0 4 2688 33 ConfigVariableString::operator == 0 1 308 34
// Comparison operators are handy.
73
inline bool ConfigVariableString::operator ==(string const &other) const;

1643 11 operator != 0 4 2688 33 ConfigVariableString::operator != 0 1 309 0
73
inline bool ConfigVariableString::operator !=(string const &other) const;

1644 10 operator < 0 4 2688 32 ConfigVariableString::operator < 0 1 310 0
72
inline bool ConfigVariableString::operator <(string const &other) const;

1645 9 set_value 0 4 2688 31 ConfigVariableString::set_value 0 1 311 268
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
////////////////////////////////////////////////////////////////////
65
inline void ConfigVariableString::set_value(string const &value);

1646 9 get_value 0 4 2688 31 ConfigVariableString::get_value 0 1 312 260
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_value
//       Access: Published
//  Description: Returns the variable's value.
////////////////////////////////////////////////////////////////////
65
inline string const &ConfigVariableString::get_value(void) const;

1647 17 get_default_value 0 4 2688 39 ConfigVariableString::get_default_value 0 1 313 276
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
////////////////////////////////////////////////////////////////////
66
inline string ConfigVariableString::get_default_value(void) const;

1648 8 get_word 0 4 2688 30 ConfigVariableString::get_word 0 1 314 263
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
////////////////////////////////////////////////////////////////////
58
inline string ConfigVariableString::get_word(int n) const;

1649 8 set_word 0 4 2688 30 ConfigVariableString::set_word 0 1 315 340
////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
////////////////////////////////////////////////////////////////////
71
inline void ConfigVariableString::set_word(int n, string const &value);

1650 21 ~ConfigVariableString 0 4 2688 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

1651 7 GetBool 0 4 2689 16 DConfig::GetBool 0 1 317 0
71
static inline bool DConfig::GetBool(string const &sym, bool def = (0));

1652 6 GetInt 0 4 2689 15 DConfig::GetInt 0 1 318 0
68
static inline int DConfig::GetInt(string const &sym, int def = (0));

1653 8 GetFloat 0 4 2689 17 DConfig::GetFloat 0 1 319 0
74
static inline float DConfig::GetFloat(string const &sym, float def = (0));

1654 9 GetDouble 0 4 2689 18 DConfig::GetDouble 0 1 320 0
77
static inline double DConfig::GetDouble(string const &sym, double def = (0));

1655 9 GetString 0 4 2689 18 DConfig::GetString 0 1 321 0
85
static inline string DConfig::GetString(string const &sym, string const &def = (""));

1656 8 ~DConfig 0 4 2689 17 DConfig::~DConfig 0 0 0
24
DConfig::~DConfig(void);

1657 7 Results 0 4 2691 29 DSearchPath::Results::Results 0 2 342 343 0
101
DSearchPath::Results::Results(void);
DSearchPath::Results::Results(DSearchPath::Results const &copy);

1658 10 operator = 0 4 2691 32 DSearchPath::Results::operator = 0 1 344 0
72
void DSearchPath::Results::operator =(DSearchPath::Results const &copy);

1659 8 ~Results 0 4 2691 30 DSearchPath::Results::~Results 0 0 0
37
DSearchPath::Results::~Results(void);

1660 5 clear 0 4 2691 27 DSearchPath::Results::clear 0 1 345 0
39
void DSearchPath::Results::clear(void);

1661 13 get_num_files 0 4 2691 35 DSearchPath::Results::get_num_files 0 1 346 0
52
int DSearchPath::Results::get_num_files(void) const;

1662 8 get_file 0 4 2691 30 DSearchPath::Results::get_file 0 1 347 0
60
Filename const &DSearchPath::Results::get_file(int n) const;

1663 11 operator [] 0 4 2691 33 DSearchPath::Results::operator [] 0 1 348 0
63
inline Filename DSearchPath::Results::operator [](int n) const;

1664 4 size 0 4 2691 26 DSearchPath::Results::size 0 1 349 382
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::size
//       Access: Published
//  Description: Returns the num of filenames in the set.  This method
//               is defined to make the Results object appear to be a
//               list in Python.
////////////////////////////////////////////////////////////////////
50
inline int DSearchPath::Results::size(void) const;

1665 6 output 0 4 2691 28 DSearchPath::Results::output 0 1 350 0
54
void DSearchPath::Results::output(ostream &out) const;

1666 5 write 0 4 2691 27 DSearchPath::Results::write 0 1 351 0
77
void DSearchPath::Results::write(ostream &out, int indent_level = (0)) const;

1667 11 DSearchPath 0 4 2690 24 DSearchPath::DSearchPath 0 4 322 323 324 325 0
215
DSearchPath::DSearchPath(void);
DSearchPath::DSearchPath(string const &path, string const &separator = ((())));
DSearchPath::DSearchPath(Filename const &directory);
DSearchPath::DSearchPath(DSearchPath const &copy);

1668 10 operator = 0 4 2690 23 DSearchPath::operator = 0 1 326 0
54
void DSearchPath::operator =(DSearchPath const &copy);

1669 12 ~DSearchPath 0 4 2690 25 DSearchPath::~DSearchPath 0 0 0
32
DSearchPath::~DSearchPath(void);

1670 5 clear 0 4 2690 18 DSearchPath::clear 0 1 327 0
30
void DSearchPath::clear(void);

1671 16 append_directory 0 4 2690 29 DSearchPath::append_directory 0 1 328 0
62
void DSearchPath::append_directory(Filename const &directory);

1672 17 prepend_directory 0 4 2690 30 DSearchPath::prepend_directory 0 1 329 0
63
void DSearchPath::prepend_directory(Filename const &directory);

1673 11 append_path 0 4 2690 24 DSearchPath::append_path 0 2 330 331 0
140
void DSearchPath::append_path(string const &path, string const &separator = ((())));
void DSearchPath::append_path(DSearchPath const &path);

1674 12 prepend_path 0 4 2690 25 DSearchPath::prepend_path 0 1 332 0
56
void DSearchPath::prepend_path(DSearchPath const &path);

1675 8 is_empty 0 4 2690 21 DSearchPath::is_empty 0 1 333 0
39
bool DSearchPath::is_empty(void) const;

1676 19 get_num_directories 0 4 2690 32 DSearchPath::get_num_directories 0 1 334 0
49
int DSearchPath::get_num_directories(void) const;

1677 13 get_directory 0 4 2690 26 DSearchPath::get_directory 0 1 335 0
56
Filename const &DSearchPath::get_directory(int n) const;

1678 9 find_file 0 4 2690 22 DSearchPath::find_file 0 1 336 0
64
Filename DSearchPath::find_file(Filename const &filename) const;

1679 14 find_all_files 0 4 2690 27 DSearchPath::find_all_files 0 2 337 338 445
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
////////////////////////////////////////////////////////////////////
184
int DSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results DSearchPath::find_all_files(Filename const &filename) const;

1680 11 search_path 0 4 2690 24 DSearchPath::search_path 0 1 339 531
////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Published, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
////////////////////////////////////////////////////////////////////
128
static inline Filename DSearchPath::search_path(Filename const &filename, string const &path, string const &separator = ((())));

1681 6 output 0 4 2690 19 DSearchPath::output 0 1 340 0
79
void DSearchPath::output(ostream &out, string const &separator = ((()))) const;

1682 5 write 0 4 2690 18 DSearchPath::write 0 1 341 0
68
void DSearchPath::write(ostream &out, int indent_level = (0)) const;

1683 24 has_environment_variable 0 4 2692 46 ExecutionEnvironment::has_environment_variable 0 1 352 330
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::has_environment_variable
//       Access: Public, Static
//  Description: Returns true if the indicated environment variable
//               is defined.
////////////////////////////////////////////////////////////////////
85
static inline bool ExecutionEnvironment::has_environment_variable(string const &var);

1684 24 get_environment_variable 0 4 2692 46 ExecutionEnvironment::get_environment_variable 0 1 353 396
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_environment_variable
//       Access: Public, Static
//  Description: Returns the definition of the indicated environment
//               variable, or the empty string if the variable is
//               undefined.
////////////////////////////////////////////////////////////////////
87
static inline string ExecutionEnvironment::get_environment_variable(string const &var);

1685 24 set_environment_variable 0 4 2692 46 ExecutionEnvironment::set_environment_variable 0 1 354 329
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_environment_variable
//       Access: Public, Static
//  Description: Changes the definition of the indicated environment
//               variable.
////////////////////////////////////////////////////////////////////
106
static inline void ExecutionEnvironment::set_environment_variable(string const &var, string const &value);

1686 27 shadow_environment_variable 0 4 2692 49 ExecutionEnvironment::shadow_environment_variable 0 1 355 588
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::shadow_environment_variable
//       Access: Public, Static
//  Description: Changes the apparent definition of the indicated
//               environment variable by masking it within this class
//               with a new value.  This does not change the actual
//               environment variable, but future calls to
//               get_environment_variable() will return this new
//               value.
////////////////////////////////////////////////////////////////////
109
static inline void ExecutionEnvironment::shadow_environment_variable(string const &var, string const &value);

1687 12 clear_shadow 0 4 2692 34 ExecutionEnvironment::clear_shadow 0 1 356 399
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::clear_shadow
//       Access: Public, Static
//  Description: Removes a value set by a previous call to
//               shadow_environment_variable(), and lets the actual
//               value of the variable show again.
////////////////////////////////////////////////////////////////////
73
static inline void ExecutionEnvironment::clear_shadow(string const &var);

1688 13 expand_string 0 4 2692 35 ExecutionEnvironment::expand_string 0 1 357 0
69
static string ExecutionEnvironment::expand_string(string const &str);

1689 12 get_num_args 0 4 2692 34 ExecutionEnvironment::get_num_args 0 1 358 348
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_num_args
//       Access: Public, Static
//  Description: Returns the number of command-line arguments
//               available, not counting arg 0, the binary name.
////////////////////////////////////////////////////////////////////
59
static inline int ExecutionEnvironment::get_num_args(void);

1690 7 get_arg 0 4 2692 29 ExecutionEnvironment::get_arg 0 1 359 462
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_arg
//       Access: Public, Static
//  Description: Returns the nth command-line argument.  The index n
//               must be in the range [0 .. get_num_args()).  The
//               first parameter, n == 0, is the first actual
//               parameter, not the binary name.
////////////////////////////////////////////////////////////////////
58
static inline string ExecutionEnvironment::get_arg(int n);

1691 15 get_binary_name 0 4 2692 37 ExecutionEnvironment::get_binary_name 0 1 360 352
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_binary_name
//       Access: Public, Static
//  Description: Returns the name of the binary executable that
//               started this program, if it can be determined.
////////////////////////////////////////////////////////////////////
65
static inline string ExecutionEnvironment::get_binary_name(void);

1692 14 get_dtool_name 0 4 2692 36 ExecutionEnvironment::get_dtool_name 0 1 361 349
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_dtool_name
//       Access: Public, Static
//  Description: Returns the name of the libdtool DLL that
//               is used in this program, if it can be determined.
////////////////////////////////////////////////////////////////////
64
static inline string ExecutionEnvironment::get_dtool_name(void);

1693 15 set_binary_name 0 4 2692 37 ExecutionEnvironment::set_binary_name 0 1 362 253
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_binary_name
//       Access: Public, Static
//  Description: Do not use.
////////////////////////////////////////////////////////////////////
77
static inline void ExecutionEnvironment::set_binary_name(string const &name);

1694 14 set_dtool_name 0 4 2692 36 ExecutionEnvironment::set_dtool_name 0 1 363 252
////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_dtool_name
//       Access: Public, Static
//  Description: Do not use.
////////////////////////////////////////////////////////////////////
76
static inline void ExecutionEnvironment::set_dtool_name(string const &name);

1695 7 get_cwd 0 4 2692 29 ExecutionEnvironment::get_cwd 0 1 364 0
52
static Filename ExecutionEnvironment::get_cwd(void);

1696 21 ~ExecutionEnvironment 0 4 2692 43 ExecutionEnvironment::~ExecutionEnvironment 0 0 0
50
ExecutionEnvironment::~ExecutionEnvironment(void);

1697 9 ~ios_base 0 4 2697 19 ios_base::~ios_base 0 0 0
26
ios_base::~ios_base(void);

1698 4 good 0 4 2696 9 ios::good 0 1 385 0
27
bool ios::good(void) const;

1699 3 eof 0 4 2696 8 ios::eof 0 1 386 0
26
bool ios::eof(void) const;

1700 4 fail 0 4 2696 9 ios::fail 0 1 387 0
27
bool ios::fail(void) const;

1701 3 bad 0 4 2696 8 ios::bad 0 1 388 0
26
bool ios::bad(void) const;

1702 5 clear 0 4 2696 10 ios::clear 0 1 389 0
22
void ios::clear(void);

1703 4 ~ios 0 4 2696 9 ios::~ios 0 0 0
16
ios::~ios(void);

1704 13 upcast_to_ios 0 12 2695 22 istream::upcast_to_ios 0 1 376 26
upcast from istream to ios
34
ios *istream::upcast_to_ios(void);

1705 3 get 0 4 2695 12 istream::get 0 1 372 0
23
int istream::get(void);

1706 5 tellg 0 4 2695 14 istream::tellg 0 1 373 0
36
ios::streampos istream::tellg(void);

1707 5 seekg 0 4 2695 14 istream::seekg 0 2 374 375 0
104
void istream::seekg(ios::streampos pos);
void istream::seekg(ios::streamoff off, ios_base::seekdir dir);

1708 8 ~istream 0 4 2695 17 istream::~istream 0 0 0
24
istream::~istream(void);

1709 17 upcast_to_istream 0 12 2694 27 iostream::upcast_to_istream 0 1 370 31
upcast from iostream to istream
43
istream *iostream::upcast_to_istream(void);

1710 20 downcast_to_iostream 0 12 2695 29 istream::downcast_to_iostream 0 1 371 33
downcast from istream to iostream
46
iostream *istream::downcast_to_iostream(void);

1711 13 upcast_to_ios 0 12 2700 22 ostream::upcast_to_ios 0 1 384 26
upcast from ostream to ios
34
ios *ostream::upcast_to_ios(void);

1712 3 put 0 4 2700 12 ostream::put 0 1 379 0
26
void ostream::put(char c);

1713 5 flush 0 4 2700 14 ostream::flush 0 1 380 0
26
void ostream::flush(void);

1714 5 tellp 0 4 2700 14 ostream::tellp 0 1 381 0
36
ios::streampos ostream::tellp(void);

1715 5 seekp 0 4 2700 14 ostream::seekp 0 2 382 383 0
104
void ostream::seekp(ios::streampos pos);
void ostream::seekp(ios::streamoff off, ios_base::seekdir dir);

1716 8 ~ostream 0 4 2700 17 ostream::~ostream 0 0 0
24
ostream::~ostream(void);

1717 17 upcast_to_ostream 0 12 2694 27 iostream::upcast_to_ostream 0 1 377 31
upcast from iostream to ostream
43
ostream *iostream::upcast_to_ostream(void);

1718 20 downcast_to_iostream 0 12 2700 29 ostream::downcast_to_iostream 0 1 378 33
downcast from ostream to iostream
46
iostream *ostream::downcast_to_iostream(void);

1719 5 flush 0 4 2694 15 iostream::flush 0 1 369 0
27
void iostream::flush(void);

1720 9 ~iostream 0 4 2694 19 iostream::~iostream 0 0 0
26
iostream::~iostream(void);

1721 10 FileStream 0 4 2693 22 FileStream::FileStream 0 2 365 366 446
////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
133
inline FileStream::FileStream(void);
inline FileStream::FileStream(char const *filename, ios_base::openmode mode = (::ios_base::in));

1722 11 ~FileStream 0 4 2693 23 FileStream::~FileStream 0 0 221
////////////////////////////////////////////////////////////////////
//     Function: FileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
37
inline FileStream::~FileStream(void);

1723 4 open 0 4 2693 16 FileStream::open 0 1 367 216
////////////////////////////////////////////////////////////////////
//     Function: FileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
95
inline void FileStream::open(char const *filename, ios_base::openmode mode = (::ios_base::in));

1724 5 close 0 4 2693 17 FileStream::close 0 1 368 217
////////////////////////////////////////////////////////////////////
//     Function: FileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
36
inline void FileStream::close(void);

1725 8 Filename 0 4 2701 18 Filename::Filename 0 5 390 391 392 393 394 891
////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
278
inline Filename::Filename(string const &filename = (""));
inline Filename::Filename(wstring const &filename);
inline Filename::Filename(char const *filename);
inline Filename::Filename(Filename const &copy);
Filename::Filename(Filename const &dirname, Filename const &basename);

1726 9 ~Filename 0 4 2701 19 Filename::~Filename 0 0 219
////////////////////////////////////////////////////////////////////
//     Function: Filename::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
33
inline Filename::~Filename(void);

1727 10 __reduce__ 0 4 2701 20 Filename::__reduce__ 0 1 395 0
53
PyObject *Filename::__reduce__(PyObject *self) const;

1728 13 text_filename 0 4 2701 23 Filename::text_filename 0 2 396 397 652
// Static constructors to explicitly create a filename that refers
// to a text or binary file.  This is in lieu of calling set_text()
// or set_binary() or set_type().

////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
145
static inline Filename Filename::text_filename(Filename const &filename);
static inline Filename Filename::text_filename(string const &filename);

1729 15 binary_filename 0 4 2701 25 Filename::binary_filename 0 2 398 399 486
////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
149
static inline Filename Filename::binary_filename(Filename const &filename);
static inline Filename Filename::binary_filename(string const &filename);

1730 12 dso_filename 0 4 2701 22 Filename::dso_filename 0 1 400 239
////////////////////////////////////////////////////////////////////
//     Function: Filename::dso_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
70
static inline Filename Filename::dso_filename(string const &filename);

1731 19 executable_filename 0 4 2701 29 Filename::executable_filename 0 1 401 246
////////////////////////////////////////////////////////////////////
//     Function: Filename::executable_filename named constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
77
static inline Filename Filename::executable_filename(string const &filename);

1732 16 pattern_filename 0 4 2701 26 Filename::pattern_filename 0 1 402 348
////////////////////////////////////////////////////////////////////
//     Function: Filename::pattern_filename named constructor
//       Access: Published
//  Description: Constructs a filename that represents a sequence of
//               numbered files.  See set_pattern().
////////////////////////////////////////////////////////////////////
74
static inline Filename Filename::pattern_filename(string const &filename);

1733 16 from_os_specific 0 4 2701 26 Filename::from_os_specific 0 1 403 0
117
static Filename Filename::from_os_specific(string const &os_specific, Filename::Type type = (::Filename::T_general));

1734 18 from_os_specific_w 0 4 2701 28 Filename::from_os_specific_w 0 1 404 0
120
static Filename Filename::from_os_specific_w(wstring const &os_specific, Filename::Type type = (::Filename::T_general));

1735 11 expand_from 0 4 2701 21 Filename::expand_from 0 1 405 0
112
static Filename Filename::expand_from(string const &user_string, Filename::Type type = (::Filename::T_general));

1736 9 temporary 0 4 2701 19 Filename::temporary 0 1 406 0
159
static Filename Filename::temporary(string const &dirname, string const &prefix, string const &suffix = ((())), Filename::Type type = (::Filename::T_general));

1737 18 get_home_directory 0 4 2701 28 Filename::get_home_directory 0 1 407 0
58
static Filename const &Filename::get_home_directory(void);

1738 18 get_temp_directory 0 4 2701 28 Filename::get_temp_directory 0 1 408 0
58
static Filename const &Filename::get_temp_directory(void);

1739 26 get_user_appdata_directory 0 4 2701 36 Filename::get_user_appdata_directory 0 1 409 0
66
static Filename const &Filename::get_user_appdata_directory(void);

1740 28 get_common_appdata_directory 0 4 2701 38 Filename::get_common_appdata_directory 0 1 410 0
68
static Filename const &Filename::get_common_appdata_directory(void);

1741 10 operator = 0 4 2701 20 Filename::operator = 0 4 411 412 413 414 961
// Assignment is via the = operator.

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy assignment operator
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
248
inline Filename &Filename::operator =(string const &filename);
inline Filename &Filename::operator =(wstring const &filename);
inline Filename &Filename::operator =(char const *filename);
inline Filename &Filename::operator =(Filename const &copy);

1742 17 operator typecast 0 132 2701 27 Filename::operator typecast 0 1 505 60
// And retrieval is by any of the classic string operations.
61
inline string const &Filename::operator typecast(void) const;

1743 5 c_str 0 4 2701 15 Filename::c_str 0 1 415 214
////////////////////////////////////////////////////////////////////
//     Function: Filename::c_str
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
inline char const *Filename::c_str(void) const;

1744 5 empty 0 4 2701 15 Filename::empty 0 1 416 214
////////////////////////////////////////////////////////////////////
//     Function: Filename::empty
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
40
inline bool Filename::empty(void) const;

1745 6 length 0 4 2701 16 Filename::length 0 1 417 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
43
inline size_t Filename::length(void) const;

1746 11 operator [] 0 4 2701 21 Filename::operator [] 0 1 418 0
47
inline char Filename::operator [](int n) const;

1747 8 __repr__ 0 4 2701 18 Filename::__repr__ 0 1 419 0
41
PyObject *Filename::__repr__(void) const;

1748 6 substr 0 4 2701 16 Filename::substr 0 1 420 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
118
inline string Filename::substr(size_t begin, size_t end = (::template< ctype >::basic_string< wchar_t >::npos)) const;

1749 11 operator += 0 4 2701 21 Filename::operator += 0 1 421 0
55
inline void Filename::operator +=(string const &other);

1750 10 operator + 0 4 2701 20 Filename::operator + 0 1 422 0
64
inline Filename Filename::operator +(string const &other) const;

1751 10 operator / 0 4 2701 20 Filename::operator / 0 1 423 0
66
inline Filename Filename::operator /(Filename const &other) const;

1752 12 get_fullpath 0 4 2701 22 Filename::get_fullpath 0 1 424 416
// Or, you can use any of these.

////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath
//       Access: Published
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator.
////////////////////////////////////////////////////////////////////
49
inline string Filename::get_fullpath(void) const;

1753 14 get_fullpath_w 0 4 2701 24 Filename::get_fullpath_w 0 1 425 296
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_w
//       Access: Published
//  Description: Returns the entire filename as a wide-character
//               string.
////////////////////////////////////////////////////////////////////
52
inline wstring Filename::get_fullpath_w(void) const;

1754 11 get_dirname 0 4 2701 21 Filename::get_dirname 0 1 426 380
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_dirname
//       Access: Published
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
////////////////////////////////////////////////////////////////////
48
inline string Filename::get_dirname(void) const;

1755 12 get_basename 0 4 2701 22 Filename::get_basename 0 1 427 387
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename
//       Access: Published
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
////////////////////////////////////////////////////////////////////
49
inline string Filename::get_basename(void) const;

1756 25 get_fullpath_wo_extension 0 4 2701 35 Filename::get_fullpath_wo_extension 0 1 428 334
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_wo_extension
//       Access: Published
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
////////////////////////////////////////////////////////////////////
62
inline string Filename::get_fullpath_wo_extension(void) const;

1757 25 get_basename_wo_extension 0 4 2701 35 Filename::get_basename_wo_extension 0 1 429 322
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename_wo_extension
//       Access: Published
//  Description: Returns the basename part of the filename, without
//               the file extension.
////////////////////////////////////////////////////////////////////
62
inline string Filename::get_basename_wo_extension(void) const;

1758 13 get_extension 0 4 2701 23 Filename::get_extension 0 1 430 383
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_extension
//       Access: Published
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
////////////////////////////////////////////////////////////////////
50
inline string Filename::get_extension(void) const;

1759 12 set_fullpath 0 4 2701 22 Filename::set_fullpath 0 1 431 68
// You can also use any of these to reassign pieces of the filename.
45
void Filename::set_fullpath(string const &s);

1760 11 set_dirname 0 4 2701 21 Filename::set_dirname 0 1 432 0
44
void Filename::set_dirname(string const &s);

1761 12 set_basename 0 4 2701 22 Filename::set_basename 0 1 433 0
45
void Filename::set_basename(string const &s);

1762 25 set_fullpath_wo_extension 0 4 2701 35 Filename::set_fullpath_wo_extension 0 1 434 0
58
void Filename::set_fullpath_wo_extension(string const &s);

1763 25 set_basename_wo_extension 0 4 2701 35 Filename::set_basename_wo_extension 0 1 435 0
58
void Filename::set_basename_wo_extension(string const &s);

1764 13 set_extension 0 4 2701 23 Filename::set_extension 0 1 436 0
46
void Filename::set_extension(string const &s);

1765 10 set_binary 0 4 2701 20 Filename::set_binary 0 1 437 682
// Setting these flags appropriately is helpful when opening or
// searching for a file; it helps the Filename resolve OS-specific
// conventions (for instance, that dynamic library names should
// perhaps be changed from .so to .dll).

////////////////////////////////////////////////////////////////////
//     Function: Filename::set_binary
//       Access: Published
//  Description: Indicates that the filename represents a binary file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
39
inline void Filename::set_binary(void);

1766 8 set_text 0 4 2701 18 Filename::set_text 0 1 438 441
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_text
//       Access: Published
//  Description: Indicates that the filename represents a text file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
////////////////////////////////////////////////////////////////////
37
inline void Filename::set_text(void);

1767 9 is_binary 0 4 2701 19 Filename::is_binary 0 1 439 523
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a binary file via a previous call to
//               set_binary().  It is possible that neither
//               is_binary() nor is_text() will be true, if neither
//               set_binary() nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
44
inline bool Filename::is_binary(void) const;

1768 7 is_text 0 4 2701 17 Filename::is_text 0 1 440 517
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_text
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a text file via a previous call to
//               set_text().  It is possible that neither is_binary()
//               nor is_text() will be true, if neither set_binary()
//               nor set_text() was ever called.
////////////////////////////////////////////////////////////////////
42
inline bool Filename::is_text(void) const;

1769 17 is_binary_or_text 0 4 2701 27 Filename::is_binary_or_text 0 1 441 459
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary_or_text
//       Access: Published
//  Description: Returns true either is_binary() or is_text() is true;
//               that is, that the filename has been specified as
//               either binary or text.  If this is false, the
//               filename has not been specified.
////////////////////////////////////////////////////////////////////
52
inline bool Filename::is_binary_or_text(void) const;

1770 8 set_type 0 4 2701 18 Filename::set_type 0 1 442 646
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_type
//       Access: Published
//  Description: Sets the type of the file represented by the
//               filename.  This is useful for to_os_specific(),
//               resolve_filename(), test_existence(), and all such
//               real-world access functions.  It helps the Filename
//               know how to map the internal filename to the
//               OS-specific filename (for instance, maybe executables
//               should have an .exe extension).
////////////////////////////////////////////////////////////////////
52
inline void Filename::set_type(Filename::Type type);

1771 8 get_type 0 4 2701 18 Filename::get_type 0 1 443 325
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_type
//       Access: Published
//  Description: Returns the type of the file represented by the
//               filename, as previously set by set_type().
////////////////////////////////////////////////////////////////////
53
inline Filename::Type Filename::get_type(void) const;

1772 11 set_pattern 0 4 2701 21 Filename::set_pattern 0 1 444 1075
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_pattern
//       Access: Published
//  Description: Sets the flag indicating whether this is a filename
//               pattern.  When this is true, the filename is
//               understood to be a placeholder for a numbered
//               sequence of filename, such as an image sequence.  In
//               this case, a sequence of one or more hash characters
//               ("#") should appear in the filename string; these
//               characters will be filled in with the corresponding
//               number (or more) of digits representing the sequence
//               number.  Sequence numbers always begin counting at 0.
//
//               When this is true, methods like has_hash() and
//               get_hash_to_end() and get_filename_index() may be
//               called.  Methods like is_exists() will implicitly
//               test for existance of filename sequence 0.
////////////////////////////////////////////////////////////////////
48
inline void Filename::set_pattern(bool pattern);

1773 11 get_pattern 0 4 2701 21 Filename::get_pattern 0 1 445 321
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_pattern
//       Access: Published
//  Description: Returns the flag indicating whether this is a
//               filename pattern.  See set_pattern().
////////////////////////////////////////////////////////////////////
46
inline bool Filename::get_pattern(void) const;

1774 8 has_hash 0 4 2701 18 Filename::has_hash 0 1 446 651
////////////////////////////////////////////////////////////////////
//     Function: Filename::has_hash
//       Access: Published
//  Description: Returns true if the filename is indicated to be a
//               filename pattern (that is, set_pattern(true) was
//               called), and the filename pattern did include a
//               sequence of hash marks, or false if it was not a
//               filename pattern or did not include hash marks.  If
//               this is true, then get_filename_index() will return a
//               different filename each time.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::has_hash(void) const;

1775 18 get_filename_index 0 4 2701 28 Filename::get_filename_index 0 1 447 0
55
Filename Filename::get_filename_index(int index) const;

1776 15 get_hash_to_end 0 4 2701 25 Filename::get_hash_to_end 0 1 448 375
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_hash_to_end
//       Access: Published
//  Description: Returns the part of the filename beginning at the
//               hash sequence (if any), and continuing to the end of
//               the filename.
////////////////////////////////////////////////////////////////////
52
inline string Filename::get_hash_to_end(void) const;

1777 15 set_hash_to_end 0 4 2701 25 Filename::set_hash_to_end 0 1 449 0
48
void Filename::set_hash_to_end(string const &s);

1778 18 extract_components 0 4 2701 28 Filename::extract_components 0 1 450 0
67
void Filename::extract_components(vector_string &components) const;

1779 11 standardize 0 4 2701 21 Filename::standardize 0 1 451 0
33
void Filename::standardize(void);

1780 8 is_local 0 4 2701 18 Filename::is_local 0 1 452 383
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_local
//       Access: Published
//  Description: Returns true if the filename is local, e.g. does not
//               begin with a slash, or false if the filename is fully
//               specified from the root.
////////////////////////////////////////////////////////////////////
43
inline bool Filename::is_local(void) const;

1781 18 is_fully_qualified 0 4 2701 28 Filename::is_fully_qualified 0 1 453 782
////////////////////////////////////////////////////////////////////
//     Function: Filename::is_fully_qualified
//       Access: Published
//  Description: Returns true if the filename is fully qualified,
//               e.g. begins with a slash.  This is almost, but not
//               quite, the same thing as !is_local().  It's not
//               exactly the same because a special case is made for
//               filenames that begin with a single dot followed by a
//               slash--these are considered to be fully qualified
//               (they are explicitly relative to the current
//               directory, and do not refer to a filename on a search
//               path somewhere).
////////////////////////////////////////////////////////////////////
53
inline bool Filename::is_fully_qualified(void) const;

1782 13 make_absolute 0 4 2701 23 Filename::make_absolute 0 2 454 455 0
98
void Filename::make_absolute(void);
void Filename::make_absolute(Filename const &start_directory);

1783 14 make_canonical 0 4 2701 24 Filename::make_canonical 0 1 456 0
36
bool Filename::make_canonical(void);

1784 14 make_true_case 0 4 2701 24 Filename::make_true_case 0 1 457 0
36
bool Filename::make_true_case(void);

1785 14 to_os_specific 0 4 2701 24 Filename::to_os_specific 0 1 458 0
44
string Filename::to_os_specific(void) const;

1786 16 to_os_specific_w 0 4 2701 26 Filename::to_os_specific_w 0 1 459 0
47
wstring Filename::to_os_specific_w(void) const;

1787 13 to_os_generic 0 4 2701 23 Filename::to_os_generic 0 1 460 0
43
string Filename::to_os_generic(void) const;

1788 16 to_os_short_name 0 4 2701 26 Filename::to_os_short_name 0 1 461 0
46
string Filename::to_os_short_name(void) const;

1789 15 to_os_long_name 0 4 2701 25 Filename::to_os_long_name 0 1 462 0
45
string Filename::to_os_long_name(void) const;

1790 6 exists 0 4 2701 16 Filename::exists 0 1 463 0
34
bool Filename::exists(void) const;

1791 15 is_regular_file 0 4 2701 25 Filename::is_regular_file 0 1 464 0
43
bool Filename::is_regular_file(void) const;

1792 11 is_writable 0 4 2701 21 Filename::is_writable 0 1 465 0
39
bool Filename::is_writable(void) const;

1793 12 is_directory 0 4 2701 22 Filename::is_directory 0 1 466 0
40
bool Filename::is_directory(void) const;

1794 13 is_executable 0 4 2701 23 Filename::is_executable 0 1 467 0
41
bool Filename::is_executable(void) const;

1795 18 compare_timestamps 0 4 2701 28 Filename::compare_timestamps 0 1 468 0
127
int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old = (1), bool other_missing_is_old = (1)) const;

1796 13 get_timestamp 0 4 2701 23 Filename::get_timestamp 0 1 469 0
43
time_t Filename::get_timestamp(void) const;

1797 20 get_access_timestamp 0 4 2701 30 Filename::get_access_timestamp 0 1 470 0
50
time_t Filename::get_access_timestamp(void) const;

1798 13 get_file_size 0 4 2701 23 Filename::get_file_size 0 1 471 0
47
streamsize Filename::get_file_size(void) const;

1799 16 resolve_filename 0 4 2701 26 Filename::resolve_filename 0 1 472 0
105
bool Filename::resolve_filename(DSearchPath const &searchpath, string const &default_extension = ((())));

1800 16 make_relative_to 0 4 2701 26 Filename::make_relative_to 0 1 473 0
78
bool Filename::make_relative_to(Filename directory, bool allow_backups = (1));

1801 18 find_on_searchpath 0 4 2701 28 Filename::find_on_searchpath 0 1 474 0
64
int Filename::find_on_searchpath(DSearchPath const &searchpath);

1802 14 scan_directory 0 4 2701 24 Filename::scan_directory 0 2 475 476 0
109
bool Filename::scan_directory(vector_string &contents) const;
PyObject *Filename::scan_directory(void) const;

1803 9 open_read 0 4 2701 19 Filename::open_read 0 2 477 478 0
100
bool Filename::open_read(ifstream &stream) const;
bool Filename::open_read(pifstream &stream) const;

1804 10 open_write 0 4 2701 20 Filename::open_write 0 2 479 480 0
144
bool Filename::open_write(ofstream &stream, bool truncate = (1)) const;
bool Filename::open_write(pofstream &stream, bool truncate = (1)) const;

1805 11 open_append 0 4 2701 21 Filename::open_append 0 2 481 482 0
104
bool Filename::open_append(ofstream &stream) const;
bool Filename::open_append(pofstream &stream) const;

1806 15 open_read_write 0 4 2701 25 Filename::open_read_write 0 2 483 484 0
152
bool Filename::open_read_write(fstream &stream, bool truncate = (0)) const;
bool Filename::open_read_write(pfstream &stream, bool truncate = (0)) const;

1807 16 open_read_append 0 4 2701 26 Filename::open_read_append 0 2 485 486 0
112
bool Filename::open_read_append(fstream &stream) const;
bool Filename::open_read_append(pfstream &stream) const;

1808 5 chdir 0 4 2701 15 Filename::chdir 0 1 487 0
33
bool Filename::chdir(void) const;

1809 5 touch 0 4 2701 15 Filename::touch 0 1 488 0
33
bool Filename::touch(void) const;

1810 6 unlink 0 4 2701 16 Filename::unlink 0 1 489 0
34
bool Filename::unlink(void) const;

1811 9 rename_to 0 4 2701 19 Filename::rename_to 0 1 490 0
54
bool Filename::rename_to(Filename const &other) const;

1812 7 copy_to 0 4 2701 17 Filename::copy_to 0 1 491 0
52
bool Filename::copy_to(Filename const &other) const;

1813 8 make_dir 0 4 2701 18 Filename::make_dir 0 1 492 0
36
bool Filename::make_dir(void) const;

1814 5 mkdir 0 4 2701 15 Filename::mkdir 0 1 493 0
33
bool Filename::mkdir(void) const;

1815 5 rmdir 0 4 2701 15 Filename::rmdir 0 1 494 0
33
bool Filename::rmdir(void) const;

1816 11 operator == 0 4 2701 21 Filename::operator == 0 1 495 34
// Comparison operators are handy.
61
inline bool Filename::operator ==(string const &other) const;

1817 11 operator != 0 4 2701 21 Filename::operator != 0 1 496 0
61
inline bool Filename::operator !=(string const &other) const;

1818 10 operator < 0 4 2701 20 Filename::operator < 0 1 497 0
60
inline bool Filename::operator <(string const &other) const;

1819 10 compare_to 0 4 2701 20 Filename::compare_to 0 1 498 219
////////////////////////////////////////////////////////////////////
//     Function: Filename::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
61
inline int Filename::compare_to(Filename const &other) const;

1820 11 __nonzero__ 0 4 2701 21 Filename::__nonzero__ 0 1 499 646
////////////////////////////////////////////////////////////////////
//     Function: Filename::__nonzero__
//       Access: Published
//  Description: Returns true if the Filename is valid (not empty),
//               or false if it is an empty string.
//
//               This implements the Python equivalent to operator
//               bool.  Defining an actual operator bool method for
//               C++ use would work too, but it seems to cause too
//               many ambiguities for the C++ compiler, so we use this
//               Python-only approach instead.
////////////////////////////////////////////////////////////////////
46
inline bool Filename::__nonzero__(void) const;

1821 8 get_hash 0 4 2701 18 Filename::get_hash 0 1 500 0
35
int Filename::get_hash(void) const;

1822 6 output 0 4 2701 16 Filename::output 0 1 501 215
////////////////////////////////////////////////////////////////////
//     Function: Filename::output
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline void Filename::output(ostream &out) const;

1823 23 set_filesystem_encoding 0 4 2701 33 Filename::set_filesystem_encoding 0 1 502 557
////////////////////////////////////////////////////////////////////
//     Function: Filename::set_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames.  This is used to represent
//               wide-character (Unicode) filenames internally.  On
//               non-Windows-based systems, the encoded filename is
//               also passed to the underlying operating system.
////////////////////////////////////////////////////////////////////
85
static inline void Filename::set_filesystem_encoding(TextEncoder::Encoding encoding);

1824 23 get_filesystem_encoding 0 4 2701 33 Filename::get_filesystem_encoding 0 1 503 386
////////////////////////////////////////////////////////////////////
//     Function: Filename::get_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames objects.  See
//               set_filesystem_encoding().
////////////////////////////////////////////////////////////////////
76
static inline TextEncoder::Encoding Filename::get_filesystem_encoding(void);

1825 14 get_class_type 0 4 2701 24 Filename::get_class_type 0 1 504 0
49
static TypeHandle Filename::get_class_type(void);

1826 11 GlobPattern 0 4 2703 24 GlobPattern::GlobPattern 0 2 506 507 447
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
122
inline GlobPattern::GlobPattern(string const &pattern = ((())));
inline GlobPattern::GlobPattern(GlobPattern const &copy);

1827 10 operator = 0 4 2703 23 GlobPattern::operator = 0 1 508 0
61
inline void GlobPattern::operator =(GlobPattern const &copy);

1828 11 operator == 0 4 2703 24 GlobPattern::operator == 0 1 509 0
69
inline bool GlobPattern::operator ==(GlobPattern const &other) const;

1829 11 operator != 0 4 2703 24 GlobPattern::operator != 0 1 510 0
69
inline bool GlobPattern::operator !=(GlobPattern const &other) const;

1830 10 operator < 0 4 2703 23 GlobPattern::operator < 0 1 511 0
68
inline bool GlobPattern::operator <(GlobPattern const &other) const;

1831 11 set_pattern 0 4 2703 24 GlobPattern::set_pattern 0 1 512 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_pattern
//       Access: Public
//  Description: Changes the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
60
inline void GlobPattern::set_pattern(string const &pattern);

1832 11 get_pattern 0 4 2703 24 GlobPattern::get_pattern 0 1 513 301
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_pattern
//       Access: Public
//  Description: Returns the pattern string that the GlobPattern
//               object matches.
////////////////////////////////////////////////////////////////////
58
inline string const &GlobPattern::get_pattern(void) const;

1833 18 set_case_sensitive 0 4 2703 31 GlobPattern::set_case_sensitive 0 1 514 370
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_case_sensitive
//       Access: Public
//  Description: Sets whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
65
inline void GlobPattern::set_case_sensitive(bool case_sensitive);

1834 18 get_case_sensitive 0 4 2703 31 GlobPattern::get_case_sensitive 0 1 515 373
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_case_sensitive
//       Access: Public
//  Description: Returns whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
////////////////////////////////////////////////////////////////////
56
inline bool GlobPattern::get_case_sensitive(void) const;

1835 17 set_nomatch_chars 0 4 2703 30 GlobPattern::set_nomatch_chars 0 1 516 305
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_nomatch_chars
//       Access: Public
//  Description: Specifies a set of characters that are not matched by
//               * or ?.
////////////////////////////////////////////////////////////////////
72
inline void GlobPattern::set_nomatch_chars(string const &nomatch_chars);

1836 17 get_nomatch_chars 0 4 2703 30 GlobPattern::get_nomatch_chars 0 1 517 305
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_nomatch_chars
//       Access: Public
//  Description: Returns the set of characters that are not matched by
//               * or ?.
////////////////////////////////////////////////////////////////////
64
inline string const &GlobPattern::get_nomatch_chars(void) const;

1837 7 matches 0 4 2703 20 GlobPattern::matches 0 1 518 308
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::matches
//       Access: Public
//  Description: Returns true if the candidate string matches the
//               pattern, false otherwise.
////////////////////////////////////////////////////////////////////
64
inline bool GlobPattern::matches(string const &candidate) const;

1838 6 output 0 4 2703 19 GlobPattern::output 0 1 519 215
////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::output
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void GlobPattern::output(ostream &out) const;

1839 19 has_glob_characters 0 4 2703 32 GlobPattern::has_glob_characters 0 1 520 0
50
bool GlobPattern::has_glob_characters(void) const;

1840 16 get_const_prefix 0 4 2703 29 GlobPattern::get_const_prefix 0 1 521 0
49
string GlobPattern::get_const_prefix(void) const;

1841 11 match_files 0 4 2703 24 GlobPattern::match_files 0 2 522 523 0
161
int GlobPattern::match_files(vector_string &results, Filename const &cwd = ((()))) const;
PyObject *GlobPattern::match_files(Filename const &cwd = ((()))) const;

1842 12 ~GlobPattern 0 4 2703 25 GlobPattern::~GlobPattern 0 0 0
32
GlobPattern::~GlobPattern(void);

1843 14 IDecryptStream 0 4 2704 30 IDecryptStream::IDecryptStream 0 2 524 525 454
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
142
inline IDecryptStream::IDecryptStream(void);
inline IDecryptStream::IDecryptStream(istream *source, bool owns_source, string const &password);

1844 4 open 0 4 2704 20 IDecryptStream::open 0 1 526 220
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
103
inline IDecryptStream &IDecryptStream::open(istream *source, bool owns_source, string const &password);

1845 5 close 0 4 2704 21 IDecryptStream::close 0 1 527 348
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the source istream unless owns_source was true.
////////////////////////////////////////////////////////////////////
51
inline IDecryptStream &IDecryptStream::close(void);

1846 13 get_algorithm 0 4 2704 29 IDecryptStream::get_algorithm 0 1 528 309
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_algorithm
//       Access: Published
//  Description: Returns the encryption algorithm that was read from
//               the stream.
////////////////////////////////////////////////////////////////////
63
inline string const &IDecryptStream::get_algorithm(void) const;

1847 14 get_key_length 0 4 2704 30 IDecryptStream::get_key_length 0 1 529 321
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_key_length
//       Access: Published
//  Description: Returns the encryption key length, in bits, that was
//               read from the stream.
////////////////////////////////////////////////////////////////////
54
inline int IDecryptStream::get_key_length(void) const;

1848 19 get_iteration_count 0 4 2704 35 IDecryptStream::get_iteration_count 0 1 530 287
////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_iteration_count
//       Access: Published
//  Description: Returns the value that was was read from the stream.
////////////////////////////////////////////////////////////////////
59
inline int IDecryptStream::get_iteration_count(void) const;

1849 15 ~IDecryptStream 0 4 2704 31 IDecryptStream::~IDecryptStream 0 0 0
38
IDecryptStream::~IDecryptStream(void);

1850 11 IFileStream 0 4 2705 24 IFileStream::IFileStream 0 2 531 532 448
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
137
inline IFileStream::IFileStream(void);
inline IFileStream::IFileStream(char const *filename, ios_base::openmode mode = (::ios_base::in));

1851 12 ~IFileStream 0 4 2705 25 IFileStream::~IFileStream 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline IFileStream::~IFileStream(void);

1852 4 open 0 4 2705 17 IFileStream::open 0 1 533 217
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
96
inline void IFileStream::open(char const *filename, ios_base::openmode mode = (::ios_base::in));

1853 5 close 0 4 2705 18 IFileStream::close 0 1 534 218
////////////////////////////////////////////////////////////////////
//     Function: IFileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline void IFileStream::close(void);

1854 7 acquire 0 4 2707 26 StreamWrapperBase::acquire 0 1 538 952
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::acquire
//       Access: Published
//  Description: Acquires the internal lock.  
//
//               User code should call this to take temporary
//               possession of the stream and perform direct I/O
//               operations on it, for instance to make several
//               sequential atomic reads.  You may not call any of the
//               StreamWrapper methods while the lock is held, other
//               than release().
//
//               Use with extreme caution!  This is a very low-level,
//               non-recursive lock.  You must call acquire() only
//               once, and you must later call release() exactly once.
//               Failing to do so may result in a hard deadlock with
//               no available debugging features.
////////////////////////////////////////////////////////////////////
45
inline void StreamWrapperBase::acquire(void);

1855 7 release 0 4 2707 26 StreamWrapperBase::release 0 1 539 381
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::release
//       Access: Published
//  Description: Releases the internal lock.  Must be called exactly
//               once following a call to acquire().  See the cautions
//               with acquire().
////////////////////////////////////////////////////////////////////
45
inline void StreamWrapperBase::release(void);

1856 18 ~StreamWrapperBase 0 4 2707 37 StreamWrapperBase::~StreamWrapperBase 0 0 0
44
StreamWrapperBase::~StreamWrapperBase(void);

1857 27 upcast_to_StreamWrapperBase 0 12 2706 43 IStreamWrapper::upcast_to_StreamWrapperBase 0 1 537 47
upcast from IStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *IStreamWrapper::upcast_to_StreamWrapperBase(void);

1858 14 IStreamWrapper 0 4 2706 30 IStreamWrapper::IStreamWrapper 0 1 535 453
////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline IStreamWrapper::IStreamWrapper(istream &stream);

1859 15 ~IStreamWrapper 0 4 2706 31 IStreamWrapper::~IStreamWrapper 0 0 0
38
IStreamWrapper::~IStreamWrapper(void);

1860 11 get_istream 0 4 2706 27 IStreamWrapper::get_istream 0 1 536 271
////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::get_istream
//       Access: Published
//  Description: Returns the istream this object is wrapping.
////////////////////////////////////////////////////////////////////
56
inline istream *IStreamWrapper::get_istream(void) const;

1861 15 get_total_alloc 0 4 2708 32 NeverFreeMemory::get_total_alloc 0 1 540 353
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_alloc
//       Access: Published, Static
//  Description: Returns the total number of bytes consumed by all the
//               pages allocated internally by this object.
////////////////////////////////////////////////////////////////////
60
static inline size_t NeverFreeMemory::get_total_alloc(void);

1862 14 get_total_used 0 4 2708 31 NeverFreeMemory::get_total_used 0 1 541 356
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_used
//       Access: Published, Static
//  Description: Returns the total number of bytes requested by the
//               application in calls to NeverFreeMemory::alloc().
////////////////////////////////////////////////////////////////////
59
static inline size_t NeverFreeMemory::get_total_used(void);

1863 16 get_total_unused 0 4 2708 33 NeverFreeMemory::get_total_unused 0 1 542 454
////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_unused
//       Access: Published, Static
//  Description: Returns the difference between get_total_alloc() and
//               get_total_used().  This represents bytes in allocated
//               pages that have not (yet) been used by the
//               application.
////////////////////////////////////////////////////////////////////
61
static inline size_t NeverFreeMemory::get_total_unused(void);

1864 16 ~NeverFreeMemory 0 4 2708 33 NeverFreeMemory::~NeverFreeMemory 0 0 0
40
NeverFreeMemory::~NeverFreeMemory(void);

1865 6 Notify 0 4 2709 14 Notify::Notify 0 1 543 0
21
Notify::Notify(void);

1866 7 ~Notify 0 4 2709 15 Notify::~Notify 0 0 0
22
Notify::~Notify(void);

1867 15 set_ostream_ptr 0 4 2709 23 Notify::set_ostream_ptr 0 1 544 0
70
void Notify::set_ostream_ptr(ostream *ostream_ptr, bool delete_later);

1868 15 get_ostream_ptr 0 4 2709 23 Notify::get_ostream_ptr 0 1 545 0
45
ostream *Notify::get_ostream_ptr(void) const;

1869 18 set_assert_handler 0 4 2709 26 Notify::set_assert_handler 0 0 0
71
void Notify::set_assert_handler(Notify::AssertHandler *assert_handler);

1870 20 clear_assert_handler 0 4 2709 28 Notify::clear_assert_handler 0 1 546 0
40
void Notify::clear_assert_handler(void);

1871 18 has_assert_handler 0 4 2709 26 Notify::has_assert_handler 0 1 547 0
44
bool Notify::has_assert_handler(void) const;

1872 18 get_assert_handler 0 4 2709 26 Notify::get_assert_handler 0 1 548 0
62
Notify::AssertHandler *Notify::get_assert_handler(void) const;

1873 17 has_assert_failed 0 4 2709 25 Notify::has_assert_failed 0 1 549 1042
////////////////////////////////////////////////////////////////////
//     Function: Notify::has_assert_failed
//       Access: Public
//  Description: Returns true if an assertion test has failed (and not
//               been ignored) since the last call to
//               clear_assert_failed().
//
//               When an assertion test fails, the assert handler
//               may decide either to abort, return, or ignore the
//               assertion.  Naturally, if it decides to abort, this
//               flag is irrelevant.  If it chooses to ignore the
//               assertion, the flag is not set.  However, if the
//               assert handler chooses to return out of the
//               function (the normal case), it will also set this
//               flag to indicate that an assertion failure has
//               occurred.
//
//               This will also be the behavior in the absence of a
//               user-defined assert handler.
////////////////////////////////////////////////////////////////////
50
inline bool Notify::has_assert_failed(void) const;

1874 24 get_assert_error_message 0 4 2709 32 Notify::get_assert_error_message 0 1 550 332
////////////////////////////////////////////////////////////////////
//     Function: Notify::get_assert_error_message
//       Access: Public
//  Description: Returns the error message that corresponds to the
//               assertion that most recently failed.
////////////////////////////////////////////////////////////////////
66
inline string const &Notify::get_assert_error_message(void) const;

1875 19 clear_assert_failed 0 4 2709 27 Notify::clear_assert_failed 0 1 551 342
////////////////////////////////////////////////////////////////////
//     Function: Notify::clear_assert_failed
//       Access: Public
//  Description: Resets the assert_failed flag that is set whenever an
//               assertion test fails.  See has_assert_failed().
////////////////////////////////////////////////////////////////////
46
inline void Notify::clear_assert_failed(void);

1876 16 get_top_category 0 4 2709 24 Notify::get_top_category 0 1 552 0
47
NotifyCategory *Notify::get_top_category(void);

1877 12 get_category 0 4 2709 20 Notify::get_category 0 3 553 554 555 0
249
NotifyCategory *Notify::get_category(string const &basename, NotifyCategory *parent_category);
NotifyCategory *Notify::get_category(string const &basename, string const &parent_fullname);
NotifyCategory *Notify::get_category(string const &fullname);

1878 3 out 0 4 2709 11 Notify::out 0 1 556 0
34
static ostream &Notify::out(void);

1879 4 null 0 4 2709 12 Notify::null 0 1 557 0
35
static ostream &Notify::null(void);

1880 12 write_string 0 4 2709 20 Notify::write_string 0 1 558 0
52
static void Notify::write_string(string const &str);

1881 3 ptr 0 4 2709 11 Notify::ptr 0 1 559 0
33
static Notify *Notify::ptr(void);

1882 20 upcast_to_MemoryBase 0 12 2710 36 NotifyCategory::upcast_to_MemoryBase 0 1 581 40
upcast from NotifyCategory to MemoryBase
55
MemoryBase *NotifyCategory::upcast_to_MemoryBase(void);

1883 26 downcast_to_NotifyCategory 0 12 2658 38 MemoryBase::downcast_to_NotifyCategory 0 1 582 42
downcast from MemoryBase to NotifyCategory
61
NotifyCategory *MemoryBase::downcast_to_NotifyCategory(void);

1884 21 upcast_to_ConfigFlags 0 12 2710 37 NotifyCategory::upcast_to_ConfigFlags 0 1 583 41
upcast from NotifyCategory to ConfigFlags
57
ConfigFlags *NotifyCategory::upcast_to_ConfigFlags(void);

1885 26 downcast_to_NotifyCategory 0 12 2672 39 ConfigFlags::downcast_to_NotifyCategory 0 1 584 43
downcast from ConfigFlags to NotifyCategory
62
NotifyCategory *ConfigFlags::downcast_to_NotifyCategory(void);

1886 12 get_fullname 0 4 2710 28 NotifyCategory::get_fullname 0 1 560 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_fullname
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline string NotifyCategory::get_fullname(void) const;

1887 12 get_basename 0 4 2710 28 NotifyCategory::get_basename 0 1 561 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_basename
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
55
inline string NotifyCategory::get_basename(void) const;

1888 12 get_severity 0 4 2710 28 NotifyCategory::get_severity 0 1 562 224
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_severity
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

1889 12 set_severity 0 4 2710 28 NotifyCategory::set_severity 0 1 563 395
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::set_severity
//       Access: Public
//  Description: Sets the severity level of messages that will be
//               reported from this Category.  This allows any message
//               of this severity level or higher.
////////////////////////////////////////////////////////////////////
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

1890 5 is_on 0 4 2710 21 NotifyCategory::is_on 0 1 564 331
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_on
//       Access: Public
//  Description: Returns true if messages of the indicated severity
//               level ought to be reported for this Category.
////////////////////////////////////////////////////////////////////
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

1891 7 is_spam 0 4 2710 23 NotifyCategory::is_spam 0 1 565 260
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_spam
//       Access: Public
//  Description: A shorthand way to write is_on(NS_spam).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_spam(void) const;

1892 8 is_debug 0 4 2710 24 NotifyCategory::is_debug 0 1 566 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_debug
//       Access: Public
//  Description: A shorthand way to write is_on(NS_debug).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_debug(void) const;

1893 7 is_info 0 4 2710 23 NotifyCategory::is_info 0 1 567 260
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_info
//       Access: Public
//  Description: A shorthand way to write is_on(NS_info).
////////////////////////////////////////////////////////////////////
48
inline bool NotifyCategory::is_info(void) const;

1894 10 is_warning 0 4 2710 26 NotifyCategory::is_warning 0 1 568 266
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_warning
//       Access: Public
//  Description: A shorthand way to write is_on(NS_warning).
////////////////////////////////////////////////////////////////////
51
inline bool NotifyCategory::is_warning(void) const;

1895 8 is_error 0 4 2710 24 NotifyCategory::is_error 0 1 569 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_error
//       Access: Public
//  Description: A shorthand way to write is_on(NS_error).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_error(void) const;

1896 8 is_fatal 0 4 2710 24 NotifyCategory::is_fatal 0 1 570 262
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_fatal
//       Access: Public
//  Description: A shorthand way to write is_on(NS_fatal).
////////////////////////////////////////////////////////////////////
49
inline bool NotifyCategory::is_fatal(void) const;

1897 3 out 0 4 2710 19 NotifyCategory::out 0 1 571 0
79
ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = (1)) const;

1898 4 spam 0 4 2710 20 NotifyCategory::spam 0 1 572 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
////////////////////////////////////////////////////////////////////
62
inline ostream &NotifyCategory::spam(bool prefix = (1)) const;

1899 5 debug 0 4 2710 21 NotifyCategory::debug 0 1 573 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::debug(bool prefix = (1)) const;

1900 4 info 0 4 2710 20 NotifyCategory::info 0 1 574 255
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
////////////////////////////////////////////////////////////////////
62
inline ostream &NotifyCategory::info(bool prefix = (1)) const;

1901 7 warning 0 4 2710 23 NotifyCategory::warning 0 1 575 261
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
////////////////////////////////////////////////////////////////////
65
inline ostream &NotifyCategory::warning(bool prefix = (1)) const;

1902 5 error 0 4 2710 21 NotifyCategory::error 0 1 576 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::error(bool prefix = (1)) const;

1903 5 fatal 0 4 2710 21 NotifyCategory::fatal 0 1 577 257
////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
////////////////////////////////////////////////////////////////////
63
inline ostream &NotifyCategory::fatal(bool prefix = (1)) const;

1904 16 get_num_children 0 4 2710 32 NotifyCategory::get_num_children 0 1 578 0
49
int NotifyCategory::get_num_children(void) const;

1905 9 get_child 0 4 2710 25 NotifyCategory::get_child 0 1 579 0
55
NotifyCategory *NotifyCategory::get_child(int i) const;

1906 16 set_server_delta 0 4 2710 32 NotifyCategory::set_server_delta 0 1 580 0
61
static void NotifyCategory::set_server_delta(long int delta);

1907 15 ~NotifyCategory 0 4 2710 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

1908 14 OEncryptStream 0 4 2712 30 OEncryptStream::OEncryptStream 0 2 585 586 454
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
138
inline OEncryptStream::OEncryptStream(void);
inline OEncryptStream::OEncryptStream(ostream *dest, bool owns_dest, string const &password);

1909 4 open 0 4 2712 20 OEncryptStream::open 0 1 587 220
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
99
inline OEncryptStream &OEncryptStream::open(ostream *dest, bool owns_dest, string const &password);

1910 5 close 0 4 2712 21 OEncryptStream::close 0 1 588 344
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
////////////////////////////////////////////////////////////////////
51
inline OEncryptStream &OEncryptStream::close(void);

1911 13 set_algorithm 0 4 2712 29 OEncryptStream::set_algorithm 0 1 589 722
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_algorithm
//       Access: Published
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to open().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but open() will
//               fail.
////////////////////////////////////////////////////////////////////
67
inline void OEncryptStream::set_algorithm(string const &algorithm);

1912 14 set_key_length 0 4 2712 30 OEncryptStream::set_key_length 0 1 590 658
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_key_length
//       Access: Published
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               open().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but open() will fail.
////////////////////////////////////////////////////////////////////
59
inline void OEncryptStream::set_key_length(int key_length);

1913 19 set_iteration_count 0 4 2712 35 OEncryptStream::set_iteration_count 0 1 591 851
////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_iteration_count
//       Access: Published
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to open().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               encryption-iteration-count config variable.
////////////////////////////////////////////////////////////////////
69
inline void OEncryptStream::set_iteration_count(int iteration_count);

1914 15 ~OEncryptStream 0 4 2712 31 OEncryptStream::~OEncryptStream 0 0 0
38
OEncryptStream::~OEncryptStream(void);

1915 11 OFileStream 0 4 2713 24 OFileStream::OFileStream 0 2 592 593 448
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
138
inline OFileStream::OFileStream(void);
inline OFileStream::OFileStream(char const *filename, ios_base::openmode mode = (::ios_base::out));

1916 12 ~OFileStream 0 4 2713 25 OFileStream::~OFileStream 0 0 222
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
39
inline OFileStream::~OFileStream(void);

1917 4 open 0 4 2713 17 OFileStream::open 0 1 594 217
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::open
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
97
inline void OFileStream::open(char const *filename, ios_base::openmode mode = (::ios_base::out));

1918 5 close 0 4 2713 18 OFileStream::close 0 1 595 218
////////////////////////////////////////////////////////////////////
//     Function: OFileStream::close
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
37
inline void OFileStream::close(void);

1919 27 upcast_to_StreamWrapperBase 0 12 2714 43 OStreamWrapper::upcast_to_StreamWrapperBase 0 1 598 47
upcast from OStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *OStreamWrapper::upcast_to_StreamWrapperBase(void);

1920 14 OStreamWrapper 0 4 2714 30 OStreamWrapper::OStreamWrapper 0 1 596 453
////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline OStreamWrapper::OStreamWrapper(ostream &stream);

1921 15 ~OStreamWrapper 0 4 2714 31 OStreamWrapper::~OStreamWrapper 0 0 0
38
OStreamWrapper::~OStreamWrapper(void);

1922 11 get_ostream 0 4 2714 27 OStreamWrapper::get_ostream 0 1 597 271
////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::get_ostream
//       Access: Published
//  Description: Returns the ostream this object is wrapping.
////////////////////////////////////////////////////////////////////
56
inline ostream *OStreamWrapper::get_ostream(void) const;

1923 14 PointerToArray 0 4 2716 40 PointerToArray< double >::PointerToArray 0 3 599 600 601 0
277
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((double const *)(0)))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(_object *self, _object *source);

1924 11 empty_array 0 4 2716 37 PointerToArray< double >::empty_array 0 1 602 0
161
static inline PointerToArray< double > PointerToArray< double >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((double const *)(0)))));

1925 4 size 0 4 2716 30 PointerToArray< double >::size 0 1 603 0
63
inline unsigned int PointerToArray< double >::size(void) const;

1926 9 push_back 0 4 2716 35 PointerToArray< double >::push_back 0 1 604 0
65
inline void PointerToArray< double >::push_back(double const &x);

1927 8 pop_back 0 4 2716 34 PointerToArray< double >::pop_back 0 1 605 0
53
inline void PointerToArray< double >::pop_back(void);

1928 11 get_element 0 4 2716 37 PointerToArray< double >::get_element 0 1 606 0
81
inline double const &PointerToArray< double >::get_element(unsigned int n) const;

1929 11 set_element 0 4 2716 37 PointerToArray< double >::set_element 0 1 607 0
87
inline void PointerToArray< double >::set_element(unsigned int n, double const &value);

1930 11 __getitem__ 0 4 2716 37 PointerToArray< double >::__getitem__ 0 1 608 0
74
double const &PointerToArray< double >::__getitem__(unsigned int n) const;

1931 11 __setitem__ 0 4 2716 37 PointerToArray< double >::__setitem__ 0 1 609 0
80
void PointerToArray< double >::__setitem__(unsigned int n, double const &value);

1932 8 get_data 0 4 2716 34 PointerToArray< double >::get_data 0 1 610 0
75
inline basic_string< char > PointerToArray< double >::get_data(void) const;

1933 8 set_data 0 4 2716 34 PointerToArray< double >::set_data 0 1 611 0
81
inline void PointerToArray< double >::set_data(basic_string< char > const &data);

1934 11 get_subdata 0 4 2716 37 PointerToArray< double >::get_subdata 0 1 612 0
108
inline basic_string< char > PointerToArray< double >::get_subdata(unsigned int n, unsigned int count) const;

1935 11 set_subdata 0 4 2716 37 PointerToArray< double >::set_subdata 0 1 613 0
120
inline void PointerToArray< double >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1936 13 get_ref_count 0 4 2716 39 PointerToArray< double >::get_ref_count 0 1 614 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

1937 18 get_node_ref_count 0 4 2716 44 PointerToArray< double >::get_node_ref_count 0 1 615 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

1938 13 __getbuffer__ 0 4 2716 39 PointerToArray< double >::__getbuffer__ 0 1 616 0
87
int PointerToArray< double >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1939 17 __releasebuffer__ 0 4 2716 43 PointerToArray< double >::__releasebuffer__ 0 1 617 0
87
void PointerToArray< double >::__releasebuffer__(_object *self, Py_buffer *view) const;

1940 15 ~PointerToArray 0 4 2716 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

1941 14 PointerToArray 0 4 2718 39 PointerToArray< float >::PointerToArray 0 3 618 619 620 0
272
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((float const *)(0)))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(_object *self, _object *source);

1942 11 empty_array 0 4 2718 36 PointerToArray< float >::empty_array 0 1 621 0
158
static inline PointerToArray< float > PointerToArray< float >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((float const *)(0)))));

1943 4 size 0 4 2718 29 PointerToArray< float >::size 0 1 622 0
62
inline unsigned int PointerToArray< float >::size(void) const;

1944 9 push_back 0 4 2718 34 PointerToArray< float >::push_back 0 1 623 0
63
inline void PointerToArray< float >::push_back(float const &x);

1945 8 pop_back 0 4 2718 33 PointerToArray< float >::pop_back 0 1 624 0
52
inline void PointerToArray< float >::pop_back(void);

1946 11 get_element 0 4 2718 36 PointerToArray< float >::get_element 0 1 625 0
79
inline float const &PointerToArray< float >::get_element(unsigned int n) const;

1947 11 set_element 0 4 2718 36 PointerToArray< float >::set_element 0 1 626 0
85
inline void PointerToArray< float >::set_element(unsigned int n, float const &value);

1948 11 __getitem__ 0 4 2718 36 PointerToArray< float >::__getitem__ 0 1 627 0
72
float const &PointerToArray< float >::__getitem__(unsigned int n) const;

1949 11 __setitem__ 0 4 2718 36 PointerToArray< float >::__setitem__ 0 1 628 0
78
void PointerToArray< float >::__setitem__(unsigned int n, float const &value);

1950 8 get_data 0 4 2718 33 PointerToArray< float >::get_data 0 1 629 0
74
inline basic_string< char > PointerToArray< float >::get_data(void) const;

1951 8 set_data 0 4 2718 33 PointerToArray< float >::set_data 0 1 630 0
80
inline void PointerToArray< float >::set_data(basic_string< char > const &data);

1952 11 get_subdata 0 4 2718 36 PointerToArray< float >::get_subdata 0 1 631 0
107
inline basic_string< char > PointerToArray< float >::get_subdata(unsigned int n, unsigned int count) const;

1953 11 set_subdata 0 4 2718 36 PointerToArray< float >::set_subdata 0 1 632 0
119
inline void PointerToArray< float >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1954 13 get_ref_count 0 4 2718 38 PointerToArray< float >::get_ref_count 0 1 633 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

1955 18 get_node_ref_count 0 4 2718 43 PointerToArray< float >::get_node_ref_count 0 1 634 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

1956 13 __getbuffer__ 0 4 2718 38 PointerToArray< float >::__getbuffer__ 0 1 635 0
86
int PointerToArray< float >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1957 17 __releasebuffer__ 0 4 2718 42 PointerToArray< float >::__releasebuffer__ 0 1 636 0
86
void PointerToArray< float >::__releasebuffer__(_object *self, Py_buffer *view) const;

1958 15 ~PointerToArray 0 4 2718 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

1959 14 PointerToArray 0 4 2720 37 PointerToArray< int >::PointerToArray 0 3 637 638 639 0
262
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((int const *)(0)))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(_object *self, _object *source);

1960 11 empty_array 0 4 2720 34 PointerToArray< int >::empty_array 0 1 640 0
152
static inline PointerToArray< int > PointerToArray< int >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((int const *)(0)))));

1961 4 size 0 4 2720 27 PointerToArray< int >::size 0 1 641 0
60
inline unsigned int PointerToArray< int >::size(void) const;

1962 9 push_back 0 4 2720 32 PointerToArray< int >::push_back 0 1 642 0
59
inline void PointerToArray< int >::push_back(int const &x);

1963 8 pop_back 0 4 2720 31 PointerToArray< int >::pop_back 0 1 643 0
50
inline void PointerToArray< int >::pop_back(void);

1964 11 get_element 0 4 2720 34 PointerToArray< int >::get_element 0 1 644 0
75
inline int const &PointerToArray< int >::get_element(unsigned int n) const;

1965 11 set_element 0 4 2720 34 PointerToArray< int >::set_element 0 1 645 0
81
inline void PointerToArray< int >::set_element(unsigned int n, int const &value);

1966 11 __getitem__ 0 4 2720 34 PointerToArray< int >::__getitem__ 0 1 646 0
68
int const &PointerToArray< int >::__getitem__(unsigned int n) const;

1967 11 __setitem__ 0 4 2720 34 PointerToArray< int >::__setitem__ 0 1 647 0
74
void PointerToArray< int >::__setitem__(unsigned int n, int const &value);

1968 8 get_data 0 4 2720 31 PointerToArray< int >::get_data 0 1 648 0
72
inline basic_string< char > PointerToArray< int >::get_data(void) const;

1969 8 set_data 0 4 2720 31 PointerToArray< int >::set_data 0 1 649 0
78
inline void PointerToArray< int >::set_data(basic_string< char > const &data);

1970 11 get_subdata 0 4 2720 34 PointerToArray< int >::get_subdata 0 1 650 0
105
inline basic_string< char > PointerToArray< int >::get_subdata(unsigned int n, unsigned int count) const;

1971 11 set_subdata 0 4 2720 34 PointerToArray< int >::set_subdata 0 1 651 0
117
inline void PointerToArray< int >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1972 13 get_ref_count 0 4 2720 36 PointerToArray< int >::get_ref_count 0 1 652 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

1973 18 get_node_ref_count 0 4 2720 41 PointerToArray< int >::get_node_ref_count 0 1 653 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

1974 13 __getbuffer__ 0 4 2720 36 PointerToArray< int >::__getbuffer__ 0 1 654 0
84
int PointerToArray< int >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1975 17 __releasebuffer__ 0 4 2720 40 PointerToArray< int >::__releasebuffer__ 0 1 655 0
84
void PointerToArray< int >::__releasebuffer__(_object *self, Py_buffer *view) const;

1976 15 ~PointerToArray 0 4 2720 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

1977 14 PointerToArray 0 4 2722 47 PointerToArray< unsigned char >::PointerToArray 0 3 656 657 658 0
312
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = ((_get_type_handle((unsigned char const *)(0)))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(_object *self, _object *source);

1978 11 empty_array 0 4 2722 44 PointerToArray< unsigned char >::empty_array 0 1 659 0
182
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(unsigned int n, TypeHandle type_handle = ((_get_type_handle((unsigned char const *)(0)))));

1979 4 size 0 4 2722 37 PointerToArray< unsigned char >::size 0 1 660 0
70
inline unsigned int PointerToArray< unsigned char >::size(void) const;

1980 9 push_back 0 4 2722 42 PointerToArray< unsigned char >::push_back 0 1 661 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

1981 8 pop_back 0 4 2722 41 PointerToArray< unsigned char >::pop_back 0 1 662 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

1982 11 get_element 0 4 2722 44 PointerToArray< unsigned char >::get_element 0 1 663 0
95
inline unsigned char const &PointerToArray< unsigned char >::get_element(unsigned int n) const;

1983 11 set_element 0 4 2722 44 PointerToArray< unsigned char >::set_element 0 1 664 0
101
inline void PointerToArray< unsigned char >::set_element(unsigned int n, unsigned char const &value);

1984 11 __getitem__ 0 4 2722 44 PointerToArray< unsigned char >::__getitem__ 0 1 665 0
88
unsigned char const &PointerToArray< unsigned char >::__getitem__(unsigned int n) const;

1985 11 __setitem__ 0 4 2722 44 PointerToArray< unsigned char >::__setitem__ 0 1 666 0
94
void PointerToArray< unsigned char >::__setitem__(unsigned int n, unsigned char const &value);

1986 8 get_data 0 4 2722 41 PointerToArray< unsigned char >::get_data 0 1 667 0
82
inline basic_string< char > PointerToArray< unsigned char >::get_data(void) const;

1987 8 set_data 0 4 2722 41 PointerToArray< unsigned char >::set_data 0 1 668 0
88
inline void PointerToArray< unsigned char >::set_data(basic_string< char > const &data);

1988 11 get_subdata 0 4 2722 44 PointerToArray< unsigned char >::get_subdata 0 1 669 0
115
inline basic_string< char > PointerToArray< unsigned char >::get_subdata(unsigned int n, unsigned int count) const;

1989 11 set_subdata 0 4 2722 44 PointerToArray< unsigned char >::set_subdata 0 1 670 0
127
inline void PointerToArray< unsigned char >::set_subdata(unsigned int n, unsigned int count, basic_string< char > const &data);

1990 13 get_ref_count 0 4 2722 46 PointerToArray< unsigned char >::get_ref_count 0 1 671 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

1991 18 get_node_ref_count 0 4 2722 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 672 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

1992 13 __getbuffer__ 0 4 2722 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 673 0
94
int PointerToArray< unsigned char >::__getbuffer__(_object *self, Py_buffer *view, int flags);

1993 17 __releasebuffer__ 0 4 2722 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 674 0
94
void PointerToArray< unsigned char >::__releasebuffer__(_object *self, Py_buffer *view) const;

1994 15 ~PointerToArray 0 4 2722 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

1995 18 get_version_string 0 4 2723 31 PandaSystem::get_version_string 0 1 675 0
52
static string PandaSystem::get_version_string(void);

1996 26 get_package_version_string 0 4 2723 39 PandaSystem::get_package_version_string 0 1 676 0
60
static string PandaSystem::get_package_version_string(void);

1997 20 get_package_host_url 0 4 2723 33 PandaSystem::get_package_host_url 0 1 677 0
54
static string PandaSystem::get_package_host_url(void);

1998 30 get_p3d_coreapi_version_string 0 4 2723 43 PandaSystem::get_p3d_coreapi_version_string 0 1 678 0
64
static string PandaSystem::get_p3d_coreapi_version_string(void);

1999 17 get_major_version 0 4 2723 30 PandaSystem::get_major_version 0 1 679 0
48
static int PandaSystem::get_major_version(void);

2000 17 get_minor_version 0 4 2723 30 PandaSystem::get_minor_version 0 1 680 0
48
static int PandaSystem::get_minor_version(void);

2001 20 get_sequence_version 0 4 2723 33 PandaSystem::get_sequence_version 0 1 681 0
51
static int PandaSystem::get_sequence_version(void);

2002 19 is_official_version 0 4 2723 32 PandaSystem::is_official_version 0 1 682 0
51
static bool PandaSystem::is_official_version(void);

2003 15 get_distributor 0 4 2723 28 PandaSystem::get_distributor 0 1 683 0
49
static string PandaSystem::get_distributor(void);

2004 12 get_compiler 0 4 2723 25 PandaSystem::get_compiler 0 1 684 0
46
static string PandaSystem::get_compiler(void);

2005 14 get_build_date 0 4 2723 27 PandaSystem::get_build_date 0 1 685 0
48
static string PandaSystem::get_build_date(void);

2006 14 get_git_commit 0 4 2723 27 PandaSystem::get_git_commit 0 1 686 0
48
static string PandaSystem::get_git_commit(void);

2007 12 get_platform 0 4 2723 25 PandaSystem::get_platform 0 1 687 0
46
static string PandaSystem::get_platform(void);

2008 10 has_system 0 4 2723 23 PandaSystem::has_system 0 1 688 0
57
bool PandaSystem::has_system(string const &system) const;

2009 15 get_num_systems 0 4 2723 28 PandaSystem::get_num_systems 0 1 689 0
45
int PandaSystem::get_num_systems(void) const;

2010 10 get_system 0 4 2723 23 PandaSystem::get_system 0 1 690 0
44
string PandaSystem::get_system(int n) const;

2011 14 get_system_tag 0 4 2723 27 PandaSystem::get_system_tag 0 1 691 0
82
string PandaSystem::get_system_tag(string const &system, string const &tag) const;

2012 10 add_system 0 4 2723 23 PandaSystem::add_system 0 1 692 0
51
void PandaSystem::add_system(string const &system);

2013 14 set_system_tag 0 4 2723 27 PandaSystem::set_system_tag 0 1 693 0
95
void PandaSystem::set_system_tag(string const &system, string const &tag, string const &value);

2014 9 heap_trim 0 4 2723 22 PandaSystem::heap_trim 0 1 694 0
40
bool PandaSystem::heap_trim(size_t pad);

2015 6 output 0 4 2723 19 PandaSystem::output 0 1 695 0
45
void PandaSystem::output(ostream &out) const;

2016 5 write 0 4 2723 18 PandaSystem::write 0 1 696 0
44
void PandaSystem::write(ostream &out) const;

2017 14 get_global_ptr 0 4 2723 27 PandaSystem::get_global_ptr 0 1 697 0
54
static PandaSystem *PandaSystem::get_global_ptr(void);

2018 14 get_class_type 0 4 2723 27 PandaSystem::get_class_type 0 1 698 0
52
static TypeHandle PandaSystem::get_class_type(void);

2019 12 StreamReader 0 4 2724 26 StreamReader::StreamReader 0 2 699 700 864
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Published
//  Description: If owns_stream is true, the stream pointer will be
//               deleted when the StreamReader destructs.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
126
inline StreamReader::StreamReader(istream *in, bool owns_stream);
inline StreamReader::StreamReader(StreamReader const &copy);

2020 10 operator = 0 4 2724 24 StreamReader::operator = 0 1 701 0
63
inline void StreamReader::operator =(StreamReader const &copy);

2021 13 ~StreamReader 0 4 2724 27 StreamReader::~StreamReader 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamReader::~StreamReader(void);

2022 11 get_istream 0 4 2724 25 StreamReader::get_istream 0 1 702 251
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_istream
//       Access: Published
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline istream *StreamReader::get_istream(void) const;

2023 8 get_bool 0 4 2724 22 StreamReader::get_bool 0 1 703 247
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_bool
//       Access: Published
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
41
inline bool StreamReader::get_bool(void);

2024 8 get_int8 0 4 2724 22 StreamReader::get_int8 0 1 704 254
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int8
//       Access: Published
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
44
inline PN_int8 StreamReader::get_int8(void);

2025 9 get_uint8 0 4 2724 23 StreamReader::get_uint8 0 1 705 258
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint8
//       Access: Published
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_uint8 StreamReader::get_uint8(void);

2026 9 get_int16 0 4 2724 23 StreamReader::get_int16 0 1 706 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int16
//       Access: Published
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_int16 StreamReader::get_int16(void);

2027 9 get_int32 0 4 2724 23 StreamReader::get_int32 0 1 707 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int32
//       Access: Published
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_int32 StreamReader::get_int32(void);

2028 9 get_int64 0 4 2724 23 StreamReader::get_int64 0 1 708 256
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int64
//       Access: Published
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
46
inline PN_int64 StreamReader::get_int64(void);

2029 10 get_uint16 0 4 2724 24 StreamReader::get_uint16 0 1 709 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint16
//       Access: Published
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_uint16 StreamReader::get_uint16(void);

2030 10 get_uint32 0 4 2724 24 StreamReader::get_uint32 0 1 710 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint32
//       Access: Published
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_uint32 StreamReader::get_uint32(void);

2031 10 get_uint64 0 4 2724 24 StreamReader::get_uint64 0 1 711 260
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint64
//       Access: Published
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_uint64 StreamReader::get_uint64(void);

2032 11 get_float32 0 4 2724 25 StreamReader::get_float32 0 1 712 445
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
////////////////////////////////////////////////////////////////////
45
inline float StreamReader::get_float32(void);

2033 11 get_float64 0 4 2724 25 StreamReader::get_float64 0 1 713 265
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float64
//       Access: Published
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
50
inline PN_float64 StreamReader::get_float64(void);

2034 12 get_be_int16 0 4 2724 26 StreamReader::get_be_int16 0 1 714 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int16
//       Access: Published
//  Description: Extracts a signed big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
49
inline PN_int16 StreamReader::get_be_int16(void);

2035 12 get_be_int32 0 4 2724 26 StreamReader::get_be_int32 0 1 715 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int32
//       Access: Published
//  Description: Extracts a signed big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
49
inline PN_int32 StreamReader::get_be_int32(void);

2036 12 get_be_int64 0 4 2724 26 StreamReader::get_be_int64 0 1 716 270
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int64
//       Access: Published
//  Description: Extracts a signed big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
49
inline PN_int64 StreamReader::get_be_int64(void);

2037 13 get_be_uint16 0 4 2724 27 StreamReader::get_be_uint16 0 1 717 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint16
//       Access: Published
//  Description: Extracts an unsigned big-endian 16-bit integer.
////////////////////////////////////////////////////////////////////
51
inline PN_uint16 StreamReader::get_be_uint16(void);

2038 13 get_be_uint32 0 4 2724 27 StreamReader::get_be_uint32 0 1 718 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint32
//       Access: Published
//  Description: Extracts an unsigned big-endian 32-bit integer.
////////////////////////////////////////////////////////////////////
51
inline PN_uint32 StreamReader::get_be_uint32(void);

2039 13 get_be_uint64 0 4 2724 27 StreamReader::get_be_uint64 0 1 719 274
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint64
//       Access: Published
//  Description: Extracts an unsigned big-endian 64-bit integer.
////////////////////////////////////////////////////////////////////
51
inline PN_uint64 StreamReader::get_be_uint64(void);

2040 14 get_be_float32 0 4 2724 28 StreamReader::get_be_float32 0 1 720 459
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision big-endian
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
////////////////////////////////////////////////////////////////////
48
inline float StreamReader::get_be_float32(void);

2041 14 get_be_float64 0 4 2724 28 StreamReader::get_be_float64 0 1 721 279
////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float64
//       Access: Published
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
53
inline PN_float64 StreamReader::get_be_float64(void);

2042 10 get_string 0 4 2724 24 StreamReader::get_string 0 1 722 0
38
string StreamReader::get_string(void);

2043 12 get_string32 0 4 2724 26 StreamReader::get_string32 0 1 723 0
40
string StreamReader::get_string32(void);

2044 12 get_z_string 0 4 2724 26 StreamReader::get_z_string 0 1 724 0
40
string StreamReader::get_z_string(void);

2045 16 get_fixed_string 0 4 2724 30 StreamReader::get_fixed_string 0 1 725 0
51
string StreamReader::get_fixed_string(size_t size);

2046 10 skip_bytes 0 4 2724 24 StreamReader::skip_bytes 0 1 726 0
43
void StreamReader::skip_bytes(size_t size);

2047 13 extract_bytes 0 4 2724 27 StreamReader::extract_bytes 0 1 727 0
118
string StreamReader::extract_bytes(size_t size);
size_t StreamReader::extract_bytes(unsigned char *into, size_t size);

2048 8 readline 0 4 2724 22 StreamReader::readline 0 1 728 0
36
string StreamReader::readline(void);

2049 9 readlines 0 4 2724 23 StreamReader::readlines 0 1 729 0
40
PyObject *StreamReader::readlines(void);

2050 24 upcast_to_IStreamWrapper 0 12 2725 39 StreamWrapper::upcast_to_IStreamWrapper 0 1 732 43
upcast from StreamWrapper to IStreamWrapper
62
IStreamWrapper *StreamWrapper::upcast_to_IStreamWrapper(void);

2051 25 downcast_to_StreamWrapper 0 12 2706 41 IStreamWrapper::downcast_to_StreamWrapper 0 1 733 45
downcast from IStreamWrapper to StreamWrapper
63
StreamWrapper *IStreamWrapper::downcast_to_StreamWrapper(void);

2052 24 upcast_to_OStreamWrapper 0 12 2725 39 StreamWrapper::upcast_to_OStreamWrapper 0 1 734 43
upcast from StreamWrapper to OStreamWrapper
62
OStreamWrapper *StreamWrapper::upcast_to_OStreamWrapper(void);

2053 25 downcast_to_StreamWrapper 0 12 2714 41 OStreamWrapper::downcast_to_StreamWrapper 0 1 735 45
downcast from OStreamWrapper to StreamWrapper
63
StreamWrapper *OStreamWrapper::downcast_to_StreamWrapper(void);

2054 13 StreamWrapper 0 4 2725 28 StreamWrapper::StreamWrapper 0 1 730 451
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
54
inline StreamWrapper::StreamWrapper(iostream &stream);

2055 14 ~StreamWrapper 0 4 2725 29 StreamWrapper::~StreamWrapper 0 0 0
36
StreamWrapper::~StreamWrapper(void);

2056 12 get_iostream 0 4 2725 27 StreamWrapper::get_iostream 0 1 731 272
////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::get_iostream
//       Access: Published
//  Description: Returns the iostream this object is wrapping.
////////////////////////////////////////////////////////////////////
57
inline iostream *StreamWrapper::get_iostream(void) const;

2057 12 StreamWriter 0 4 2726 26 StreamWriter::StreamWriter 0 2 736 737 757
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
////////////////////////////////////////////////////////////////////
127
inline StreamWriter::StreamWriter(ostream *out, bool owns_stream);
inline StreamWriter::StreamWriter(StreamWriter const &copy);

2058 10 operator = 0 4 2726 24 StreamWriter::operator = 0 1 738 0
63
inline void StreamWriter::operator =(StreamWriter const &copy);

2059 13 ~StreamWriter 0 4 2726 27 StreamWriter::~StreamWriter 0 0 223
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
41
inline StreamWriter::~StreamWriter(void);

2060 11 get_ostream 0 4 2726 25 StreamWriter::get_ostream 0 1 739 251
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::get_ostream
//       Access: Published
//  Description: Returns the stream in use.
////////////////////////////////////////////////////////////////////
54
inline ostream *StreamWriter::get_ostream(void) const;

2061 8 add_bool 0 4 2726 22 StreamWriter::add_bool 0 1 740 257
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_bool
//       Access: Published
//  Description: Adds a boolean value to the stream.
////////////////////////////////////////////////////////////////////
47
inline void StreamWriter::add_bool(bool value);

2062 8 add_int8 0 4 2726 22 StreamWriter::add_int8 0 1 741 264
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int8
//       Access: Published
//  Description: Adds a signed 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
50
inline void StreamWriter::add_int8(PN_int8 value);

2063 9 add_uint8 0 4 2726 23 StreamWriter::add_uint8 0 1 742 268
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint8
//       Access: Published
//  Description: Adds an unsigned 8-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_uint8(PN_uint8 value);

2064 9 add_int16 0 4 2726 23 StreamWriter::add_int16 0 1 743 316
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int16
//       Access: Published
//  Description: Adds a signed 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_int16(PN_int16 value);

2065 9 add_int32 0 4 2726 23 StreamWriter::add_int32 0 1 744 266
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int32
//       Access: Published
//  Description: Adds a signed 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_int32(PN_int32 value);

2066 9 add_int64 0 4 2726 23 StreamWriter::add_int64 0 1 745 266
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int64
//       Access: Published
//  Description: Adds a signed 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
52
inline void StreamWriter::add_int64(PN_int64 value);

2067 10 add_uint16 0 4 2726 24 StreamWriter::add_uint16 0 1 746 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_uint16(PN_uint16 value);

2068 10 add_uint32 0 4 2726 24 StreamWriter::add_uint32 0 1 747 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_uint32(PN_uint32 value);

2069 10 add_uint64 0 4 2726 24 StreamWriter::add_uint64 0 1 748 270
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit integer to the stream.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_uint64(PN_uint64 value);

2070 11 add_float32 0 4 2726 25 StreamWriter::add_float32 0 1 749 455
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision floating-point number
//               to the stream.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::add_float32(float value);

2071 11 add_float64 0 4 2726 25 StreamWriter::add_float64 0 1 750 275
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float64
//       Access: Published
//  Description: Adds a 64-bit floating-point number to the stream.
////////////////////////////////////////////////////////////////////
56
inline void StreamWriter::add_float64(PN_float64 value);

2072 12 add_be_int16 0 4 2726 26 StreamWriter::add_be_int16 0 1 751 372
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int16
//       Access: Published
//  Description: Adds a signed 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_int16(PN_int16 value);

2073 12 add_be_int32 0 4 2726 26 StreamWriter::add_be_int32 0 1 752 303
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int32
//       Access: Published
//  Description: Adds a signed 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_int32(PN_int32 value);

2074 12 add_be_int64 0 4 2726 26 StreamWriter::add_be_int64 0 1 753 303
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int64
//       Access: Published
//  Description: Adds a signed 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
55
inline void StreamWriter::add_be_int64(PN_int64 value);

2075 13 add_be_uint16 0 4 2726 27 StreamWriter::add_be_uint16 0 1 754 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_be_uint16(PN_uint16 value);

2076 13 add_be_uint32 0 4 2726 27 StreamWriter::add_be_uint32 0 1 755 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_be_uint32(PN_uint32 value);

2077 13 add_be_uint64 0 4 2726 27 StreamWriter::add_be_uint64 0 1 756 307
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
57
inline void StreamWriter::add_be_uint64(PN_uint64 value);

2078 14 add_be_float32 0 4 2726 28 StreamWriter::add_be_float32 0 1 757 469
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the stream.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
////////////////////////////////////////////////////////////////////
54
inline void StreamWriter::add_be_float32(float value);

2079 14 add_be_float64 0 4 2726 28 StreamWriter::add_be_float64 0 1 758 312
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float64
//       Access: Published
//  Description: Adds a 64-bit big-endian floating-point number to the
//               streamWriter.
////////////////////////////////////////////////////////////////////
59
inline void StreamWriter::add_be_float64(PN_float64 value);

2080 10 add_string 0 4 2726 24 StreamWriter::add_string 0 1 759 334
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string
//       Access: Published
//  Description: Adds a variable-length string to the stream.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
56
inline void StreamWriter::add_string(string const &str);

2081 12 add_string32 0 4 2726 26 StreamWriter::add_string32 0 1 760 316
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string32
//       Access: Published
//  Description: Adds a variable-length string to the stream, using a
//               32-bit length field.
////////////////////////////////////////////////////////////////////
58
inline void StreamWriter::add_string32(string const &str);

2082 12 add_z_string 0 4 2726 26 StreamWriter::add_z_string 0 1 761 316
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_z_string
//       Access: Published
//  Description: Adds a variable-length string to the stream, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::add_z_string(string str);

2083 16 add_fixed_string 0 4 2726 30 StreamWriter::add_fixed_string 0 1 762 517
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_fixed_string
//       Access: Published
//  Description: Adds a fixed-length string to the stream.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
75
inline void StreamWriter::add_fixed_string(string const &str, size_t size);

2084 9 pad_bytes 0 4 2726 23 StreamWriter::pad_bytes 0 1 763 0
42
void StreamWriter::pad_bytes(size_t size);

2085 11 append_data 0 4 2726 25 StreamWriter::append_data 0 1 764 602
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
////////////////////////////////////////////////////////////////////
128
inline void StreamWriter::append_data(void const *data, size_t size);
inline void StreamWriter::append_data(string const &data);

2086 5 flush 0 4 2726 19 StreamWriter::flush 0 1 765 258
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::flush
//       Access: Published
//  Description: Calls flush() on the underlying stream.
////////////////////////////////////////////////////////////////////
38
inline void StreamWriter::flush(void);

2087 5 write 0 4 2726 19 StreamWriter::write 0 1 766 371
////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::write
//       Access: Published
//  Description: A synonym of append_data().  This is useful when
//               assigning the StreamWriter to sys.stderr and/or
//               sys.stdout in Python.
////////////////////////////////////////////////////////////////////
51
inline void StreamWriter::write(string const &str);

2088 11 TextEncoder 0 4 2727 24 TextEncoder::TextEncoder 0 2 767 768 453
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
96
inline TextEncoder::TextEncoder(void);
inline TextEncoder::TextEncoder(TextEncoder const &copy);

2089 12 set_encoding 0 4 2727 25 TextEncoder::set_encoding 0 1 769 692
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_encoding
//       Access: Published
//  Description: Specifies how the string set via set_text() is to be
//               interpreted.  The default, E_iso8859, means a
//               standard string with one-byte characters
//               (i.e. ASCII).  Other encodings are possible to take
//               advantage of character sets with more than 256
//               characters.
//
//               This affects only future calls to set_text(); it does
//               not change text that was set previously.
////////////////////////////////////////////////////////////////////
70
inline void TextEncoder::set_encoding(TextEncoder::Encoding encoding);

2090 12 get_encoding 0 4 2727 25 TextEncoder::get_encoding 0 1 770 344
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoding
//       Access: Published
//  Description: Returns the encoding by which the string set via
//               set_text() is to be interpreted.  See set_encoding().
////////////////////////////////////////////////////////////////////
67
inline TextEncoder::Encoding TextEncoder::get_encoding(void) const;

2091 20 set_default_encoding 0 4 2727 33 TextEncoder::set_default_encoding 0 1 771 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
85
static inline void TextEncoder::set_default_encoding(TextEncoder::Encoding encoding);

2092 20 get_default_encoding 0 4 2727 33 TextEncoder::get_default_encoding 0 1 772 387
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
////////////////////////////////////////////////////////////////////
76
static inline TextEncoder::Encoding TextEncoder::get_default_encoding(void);

2093 8 set_text 0 4 2727 21 TextEncoder::set_text 0 2 773 774 1135
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: Changes the text that is stored in the encoder.  The
//               text should be encoded according to the method
//               indicated by set_encoding().  Subsequent calls to
//               get_text() will return this same string, while
//               get_wtext() will return the decoded version of the
//               string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
////////////////////////////////////////////////////////////////////
141
inline void TextEncoder::set_text(string const &text);
inline void TextEncoder::set_text(string const &text, TextEncoder::Encoding encoding);

2094 10 clear_text 0 4 2727 23 TextEncoder::clear_text 0 1 775 261
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::clear_text
//       Access: Published
//  Description: Removes the text from the TextEncoder.
////////////////////////////////////////////////////////////////////
42
inline void TextEncoder::clear_text(void);

2095 8 has_text 0 4 2727 21 TextEncoder::has_text 0 1 776 220
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::has_text
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
46
inline bool TextEncoder::has_text(void) const;

2096 10 make_upper 0 4 2727 23 TextEncoder::make_upper 0 1 777 0
35
void TextEncoder::make_upper(void);

2097 10 make_lower 0 4 2727 23 TextEncoder::make_lower 0 1 778 0
35
void TextEncoder::make_lower(void);

2098 8 get_text 0 4 2727 21 TextEncoder::get_text 0 2 779 780 618
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the current
//               encoding system.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the indicated
//               encoding system.
////////////////////////////////////////////////////////////////////
123
inline string TextEncoder::get_text(void) const;
inline string TextEncoder::get_text(TextEncoder::Encoding encoding) const;

2099 11 append_text 0 4 2727 24 TextEncoder::append_text 0 1 781 300
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
////////////////////////////////////////////////////////////////////
57
inline void TextEncoder::append_text(string const &text);

2100 19 append_unicode_char 0 4 2727 32 TextEncoder::append_unicode_char 0 1 782 380
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
////////////////////////////////////////////////////////////////////
60
inline void TextEncoder::append_unicode_char(int character);

2101 13 get_num_chars 0 4 2727 26 TextEncoder::get_num_chars 0 1 783 411
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_num_chars
//       Access: Published
//  Description: Returns the number of characters in the stored text.
//               This is a count of wide characters, after the string
//               has been decoded according to set_encoding().
////////////////////////////////////////////////////////////////////
50
inline int TextEncoder::get_num_chars(void) const;

2102 16 get_unicode_char 0 4 2727 29 TextEncoder::get_unicode_char 0 1 784 459
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_unicode_char
//       Access: Published
//  Description: Returns the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
58
inline int TextEncoder::get_unicode_char(int index) const;

2103 16 set_unicode_char 0 4 2727 29 TextEncoder::set_unicode_char 0 1 785 456
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_unicode_char
//       Access: Published
//  Description: Sets the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
////////////////////////////////////////////////////////////////////
68
inline void TextEncoder::set_unicode_char(int index, int character);

2104 16 get_encoded_char 0 4 2727 29 TextEncoder::get_encoded_char 0 2 786 787 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
////////////////////////////////////////////////////////////////////
155
inline string TextEncoder::get_encoded_char(int index) const;
inline string TextEncoder::get_encoded_char(int index, TextEncoder::Encoding encoding) const;

2105 17 get_text_as_ascii 0 4 2727 30 TextEncoder::get_text_as_ascii 0 1 788 1136
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain encoded in
//               the encoding specified by set_encoding().
////////////////////////////////////////////////////////////////////
57
inline string TextEncoder::get_text_as_ascii(void) const;

2106 13 reencode_text 0 4 2727 26 TextEncoder::reencode_text 0 1 789 559
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::reencode_text
//       Access: Published, Static
//  Description: Given the indicated text string, which is assumed to
//               be encoded via the encoding "from", decodes it and
//               then reencodes it into the encoding "to", and returns
//               the newly encoded string.  This does not change or
//               affect any properties on the TextEncoder itself.
////////////////////////////////////////////////////////////////////
122
static inline string TextEncoder::reencode_text(string const &text, TextEncoder::Encoding from, TextEncoder::Encoding to);

2107 15 unicode_isalpha 0 4 2727 28 TextEncoder::unicode_isalpha 0 1 790 408
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isalpha
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               alphabetic letter, false otherwise.  This is akin to
//               ctype's isalpha(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isalpha(int character);

2108 15 unicode_isdigit 0 4 2727 28 TextEncoder::unicode_isdigit 0 1 791 403
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isdigit
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               numeric digit, false otherwise.  This is akin to
//               ctype's isdigit(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isdigit(int character);

2109 15 unicode_ispunct 0 4 2727 28 TextEncoder::unicode_ispunct 0 1 792 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_ispunct
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               punctuation mark, false otherwise.  This is akin to
//               ctype's ispunct(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_ispunct(int character);

2110 15 unicode_islower 0 4 2727 28 TextEncoder::unicode_islower 0 1 793 406
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_islower
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               lowercase letter, false otherwise.  This is akin to
//               ctype's islower(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_islower(int character);

2111 15 unicode_isupper 0 4 2727 28 TextEncoder::unicode_isupper 0 1 794 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isupper
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               uppercase letter, false otherwise.  This is akin to
//               ctype's isupper(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isupper(int character);

2112 15 unicode_isspace 0 4 2727 28 TextEncoder::unicode_isspace 0 1 795 407
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isspace
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               whitespace letter, false otherwise.  This is akin to
//               ctype's isspace(), extended to Unicode.
////////////////////////////////////////////////////////////////////
63
static inline bool TextEncoder::unicode_isspace(int character);

2113 15 unicode_toupper 0 4 2727 28 TextEncoder::unicode_toupper 0 1 796 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_toupper
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's toupper(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_toupper(int character);

2114 15 unicode_tolower 0 4 2727 28 TextEncoder::unicode_tolower 0 1 797 391
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_tolower
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's tolower(),
//               extended to Unicode.
////////////////////////////////////////////////////////////////////
62
static inline int TextEncoder::unicode_tolower(int character);

2115 5 upper 0 4 2727 18 TextEncoder::upper 0 2 798 799 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
157
static inline string TextEncoder::upper(string const &source);
static inline string TextEncoder::upper(string const &source, TextEncoder::Encoding encoding);

2116 5 lower 0 4 2727 18 TextEncoder::lower 0 2 800 801 668
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the default encoding.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the indicated encoding.
////////////////////////////////////////////////////////////////////
157
static inline string TextEncoder::lower(string const &source);
static inline string TextEncoder::lower(string const &source, TextEncoder::Encoding encoding);

2117 9 set_wtext 0 4 2727 22 TextEncoder::set_wtext 0 1 802 558
// Direct support for wide-character strings.  Now publishable with
// the new wstring support in interrogate.

////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_wtext
//       Access: Published
//  Description: Changes the text that is stored in the encoder.
//               Subsequent calls to get_wtext() will return this same
//               string, while get_text() will return the encoded
//               version of the string.
////////////////////////////////////////////////////////////////////
57
inline void TextEncoder::set_wtext(wstring const &wtext);

2118 9 get_wtext 0 4 2727 22 TextEncoder::get_wtext 0 1 803 316
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext
//       Access: Published
//  Description: Returns the text associated with the TextEncoder, as
//               a wide-character string.
////////////////////////////////////////////////////////////////////
57
inline wstring const &TextEncoder::get_wtext(void) const;

2119 12 append_wtext 0 4 2727 25 TextEncoder::append_wtext 0 1 804 316
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
////////////////////////////////////////////////////////////////////
59
inline void TextEncoder::append_wtext(wstring const &text);

2120 18 get_wtext_as_ascii 0 4 2727 31 TextEncoder::get_wtext_as_ascii 0 1 805 0
52
wstring TextEncoder::get_wtext_as_ascii(void) const;

2121 8 is_wtext 0 4 2727 21 TextEncoder::is_wtext 0 1 806 0
39
bool TextEncoder::is_wtext(void) const;

2122 12 encode_wchar 0 4 2727 25 TextEncoder::encode_wchar 0 1 807 0
84
static string TextEncoder::encode_wchar(wchar_t ch, TextEncoder::Encoding encoding);

2123 12 encode_wtext 0 4 2727 25 TextEncoder::encode_wtext 0 2 808 809 330
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published
//  Description: Encodes a wide-text string into a single-char string,
//               according to the current encoding.
////////////////////////////////////////////////////////////////////
163
inline string TextEncoder::encode_wtext(wstring const &wtext) const;
static string TextEncoder::encode_wtext(wstring const &wtext, TextEncoder::Encoding encoding);

2124 11 decode_text 0 4 2727 24 TextEncoder::decode_text 0 2 810 811 332
////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the current encoding system.
////////////////////////////////////////////////////////////////////
159
inline wstring TextEncoder::decode_text(string const &text) const;
static wstring TextEncoder::decode_text(string const &text, TextEncoder::Encoding encoding);

2125 12 ~TextEncoder 0 4 2727 25 TextEncoder::~TextEncoder 0 0 0
32
TextEncoder::~TextEncoder(void);

2126 10 TypeHandle 0 4 2729 22 TypeHandle::TypeHandle 0 2 812 813 766
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
91
inline TypeHandle::TypeHandle(void);
inline TypeHandle::TypeHandle(TypeHandle const &copy);

2127 4 make 0 4 2729 16 TypeHandle::make 0 1 814 0
59
static TypeHandle TypeHandle::make(PyTypeObject *classobj);

2128 11 operator == 0 4 2729 23 TypeHandle::operator == 0 1 815 0
67
inline bool TypeHandle::operator ==(TypeHandle const &other) const;

2129 11 operator != 0 4 2729 23 TypeHandle::operator != 0 1 816 0
67
inline bool TypeHandle::operator !=(TypeHandle const &other) const;

2130 10 operator < 0 4 2729 22 TypeHandle::operator < 0 1 817 0
66
inline bool TypeHandle::operator <(TypeHandle const &other) const;

2131 11 operator <= 0 4 2729 23 TypeHandle::operator <= 0 1 818 0
67
inline bool TypeHandle::operator <=(TypeHandle const &other) const;

2132 10 operator > 0 4 2729 22 TypeHandle::operator > 0 1 819 0
66
inline bool TypeHandle::operator >(TypeHandle const &other) const;

2133 11 operator >= 0 4 2729 23 TypeHandle::operator >= 0 1 820 0
67
inline bool TypeHandle::operator >=(TypeHandle const &other) const;

2134 10 compare_to 0 4 2729 22 TypeHandle::compare_to 0 1 821 463
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::compare_to
//       Access: Published
//  Description: Sorts TypeHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
////////////////////////////////////////////////////////////////////
65
inline int TypeHandle::compare_to(TypeHandle const &other) const;

2135 8 get_hash 0 4 2729 20 TypeHandle::get_hash 0 1 822 263
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
////////////////////////////////////////////////////////////////////
47
inline size_t TypeHandle::get_hash(void) const;

2136 8 get_name 0 4 2729 20 TypeHandle::get_name 0 1 823 484
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
85
inline string TypeHandle::get_name(TypedObject *object = ((TypedObject *)(0))) const;

2137 15 is_derived_from 0 4 2729 27 TypeHandle::is_derived_from 0 1 824 557
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
109
inline bool TypeHandle::is_derived_from(TypeHandle parent, TypedObject *object = ((TypedObject *)(0))) const;

2138 22 get_num_parent_classes 0 4 2729 34 TypeHandle::get_num_parent_classes 0 1 825 878
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
96
inline int TypeHandle::get_num_parent_classes(TypedObject *object = ((TypedObject *)(0))) const;

2139 16 get_parent_class 0 4 2729 28 TypeHandle::get_parent_class 0 1 826 383
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the nth parent class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_parent_classes().
////////////////////////////////////////////////////////////////////
64
inline TypeHandle TypeHandle::get_parent_class(int index) const;

2140 21 get_num_child_classes 0 4 2729 33 TypeHandle::get_num_child_classes 0 1 827 626
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
95
inline int TypeHandle::get_num_child_classes(TypedObject *object = ((TypedObject *)(0))) const;

2141 15 get_child_class 0 4 2729 27 TypeHandle::get_child_class 0 1 828 380
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the nth child class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_child_classes().
////////////////////////////////////////////////////////////////////
63
inline TypeHandle TypeHandle::get_child_class(int index) const;

2142 18 get_parent_towards 0 4 2729 30 TypeHandle::get_parent_towards 0 1 829 959
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
////////////////////////////////////////////////////////////////////
120
inline TypeHandle TypeHandle::get_parent_towards(TypeHandle ancestor, TypedObject *object = ((TypedObject *)(0))) const;

2143 24 get_best_parent_from_Set 0 4 2729 36 TypeHandle::get_best_parent_from_Set 0 1 830 274
////////////////////////////////////////////////////////////////////
//     Function: get_best_parent_from_Set
//       Access: Published
//  Description: Return the Index of the BEst fit Classs from a set
////////////////////////////////////////////////////////////////////
84
inline int TypeHandle::get_best_parent_from_Set(set< int > const &legal_vals) const;

2144 16 get_memory_usage 0 4 2729 28 TypeHandle::get_memory_usage 0 1 831 0
77
int TypeHandle::get_memory_usage(TypeHandle::MemoryClass memory_class) const;

2145 16 inc_memory_usage 0 4 2729 28 TypeHandle::inc_memory_usage 0 1 832 0
82
void TypeHandle::inc_memory_usage(TypeHandle::MemoryClass memory_class, int size);

2146 16 dec_memory_usage 0 4 2729 28 TypeHandle::dec_memory_usage 0 1 833 0
82
void TypeHandle::dec_memory_usage(TypeHandle::MemoryClass memory_class, int size);

2147 9 get_index 0 4 2729 21 TypeHandle::get_index 0 1 834 654
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               TypeHandle. Each different TypeHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               TypeHandles as opaque classes.  This is provided for
//               the convenience of non-C++ scripting languages to
//               build a hashtable of TypeHandles.
////////////////////////////////////////////////////////////////////
45
inline int TypeHandle::get_index(void) const;

2148 6 output 0 4 2729 18 TypeHandle::output 0 1 835 218
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
51
inline void TypeHandle::output(ostream &out) const;

2149 4 none 0 4 2729 16 TypeHandle::none 0 1 836 315
////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued TypeHandle that is used
//               to indicate no type.
////////////////////////////////////////////////////////////////////
48
static inline TypeHandle TypeHandle::none(void);

2150 22 operator typecast bool 0 132 2729 34 TypeHandle::operator typecast bool 0 1 837 0
59
inline bool TypeHandle::operator typecast bool(void) const;

2151 11 ~TypeHandle 0 4 2729 23 TypeHandle::~TypeHandle 0 0 0
30
TypeHandle::~TypeHandle(void);

2152 9 find_type 0 4 2731 23 TypeRegistry::find_type 0 1 838 0
61
TypeHandle TypeRegistry::find_type(string const &name) const;

2153 15 find_type_by_id 0 4 2731 29 TypeRegistry::find_type_by_id 0 1 839 0
55
TypeHandle TypeRegistry::find_type_by_id(int id) const;

2154 8 get_name 0 4 2731 22 TypeRegistry::get_name 0 1 840 0
74
string TypeRegistry::get_name(TypeHandle type, TypedObject *object) const;

2155 15 is_derived_from 0 4 2731 29 TypeRegistry::is_derived_from 0 1 841 0
97
bool TypeRegistry::is_derived_from(TypeHandle child, TypeHandle base, TypedObject *child_object);

2156 19 get_num_typehandles 0 4 2731 33 TypeRegistry::get_num_typehandles 0 1 842 0
44
int TypeRegistry::get_num_typehandles(void);

2157 14 get_typehandle 0 4 2731 28 TypeRegistry::get_typehandle 0 1 843 0
47
TypeHandle TypeRegistry::get_typehandle(int n);

2158 20 get_num_root_classes 0 4 2731 34 TypeRegistry::get_num_root_classes 0 1 844 0
45
int TypeRegistry::get_num_root_classes(void);

2159 14 get_root_class 0 4 2731 28 TypeRegistry::get_root_class 0 1 845 0
47
TypeHandle TypeRegistry::get_root_class(int n);

2160 22 get_num_parent_classes 0 4 2731 36 TypeRegistry::get_num_parent_classes 0 1 846 0
92
int TypeRegistry::get_num_parent_classes(TypeHandle child, TypedObject *child_object) const;

2161 16 get_parent_class 0 4 2731 30 TypeRegistry::get_parent_class 0 1 847 0
77
TypeHandle TypeRegistry::get_parent_class(TypeHandle child, int index) const;

2162 21 get_num_child_classes 0 4 2731 35 TypeRegistry::get_num_child_classes 0 1 848 0
91
int TypeRegistry::get_num_child_classes(TypeHandle child, TypedObject *child_object) const;

2163 15 get_child_class 0 4 2731 29 TypeRegistry::get_child_class 0 1 849 0
76
TypeHandle TypeRegistry::get_child_class(TypeHandle child, int index) const;

2164 18 get_parent_towards 0 4 2731 32 TypeRegistry::get_parent_towards 0 1 850 0
106
TypeHandle TypeRegistry::get_parent_towards(TypeHandle child, TypeHandle base, TypedObject *child_object);

2165 16 reregister_types 0 4 2731 30 TypeRegistry::reregister_types 0 1 851 0
49
static void TypeRegistry::reregister_types(void);

2166 5 write 0 4 2731 19 TypeRegistry::write 0 1 852 0
45
void TypeRegistry::write(ostream &out) const;

2167 3 ptr 0 4 2731 17 TypeRegistry::ptr 0 1 853 63
// ptr() returns the pointer to the global TypeRegistry object.
45
static TypeRegistry *TypeRegistry::ptr(void);

2168 13 ~TypeRegistry 0 4 2731 27 TypeRegistry::~TypeRegistry 0 0 0
34
TypeRegistry::~TypeRegistry(void);

2169 20 upcast_to_MemoryBase 0 12 2732 33 TypedObject::upcast_to_MemoryBase 0 1 859 37
upcast from TypedObject to MemoryBase
52
MemoryBase *TypedObject::upcast_to_MemoryBase(void);

2170 23 downcast_to_TypedObject 0 12 2658 35 MemoryBase::downcast_to_TypedObject 0 1 860 39
downcast from MemoryBase to TypedObject
55
TypedObject *MemoryBase::downcast_to_TypedObject(void);

2171 12 ~TypedObject 0 6 2732 25 TypedObject::~TypedObject 0 0 44
// A virtual destructor is just a good idea.
40
virtual TypedObject::~TypedObject(void);

2172 8 get_type 0 6 2732 21 TypedObject::get_type 0 1 854 79
// Derived classes should override this function to return
// get_class_type().
57
virtual TypeHandle TypedObject::get_type(void) const = 0;

2173 14 get_type_index 0 4 2732 27 TypedObject::get_type_index 0 1 855 441
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::get_type_index
//       Access: Published
//  Description: Returns the internal index number associated with
//               this object's TypeHandle, a unique number for each
//               different type.  This is equivalent to
//               get_type().get_index().
////////////////////////////////////////////////////////////////////
51
inline int TypedObject::get_type_index(void) const;

2174 10 is_of_type 0 4 2732 23 TypedObject::is_of_type 0 1 856 313
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_of_type
//       Access: Published
//  Description: Returns true if the current object is or derives from
//               the indicated type.
////////////////////////////////////////////////////////////////////
61
inline bool TypedObject::is_of_type(TypeHandle handle) const;

2175 13 is_exact_type 0 4 2732 26 TypedObject::is_exact_type 0 1 857 308
////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Published
//  Description: Returns true if the current object is the indicated
//               type exactly.
////////////////////////////////////////////////////////////////////
64
inline bool TypedObject::is_exact_type(TypeHandle handle) const;

2176 14 get_class_type 0 4 2732 27 TypedObject::get_class_type 0 1 858 0
52
static TypeHandle TypedObject::get_class_type(void);

2177 7 fstream 0 4 2733 16 fstream::fstream 0 1 861 0
23
fstream::fstream(void);

2178 5 close 0 4 2733 14 fstream::close 0 1 862 0
26
void fstream::close(void);

2179 8 ~fstream 0 4 2733 17 fstream::~fstream 0 0 0
24
fstream::~fstream(void);

2180 8 ifstream 0 4 2734 18 ifstream::ifstream 0 1 863 0
25
ifstream::ifstream(void);

2181 5 close 0 4 2734 15 ifstream::close 0 1 864 0
27
void ifstream::close(void);

2182 9 ~ifstream 0 4 2734 19 ifstream::~ifstream 0 0 0
26
ifstream::~ifstream(void);

2183 8 ofstream 0 4 2735 18 ofstream::ofstream 0 1 865 0
25
ofstream::ofstream(void);

2184 5 close 0 4 2735 15 ofstream::close 0 1 866 0
27
void ofstream::close(void);

2185 9 ~ofstream 0 4 2735 19 ofstream::~ofstream 0 0 0
26
ofstream::~ofstream(void);

2186 11 is_tracking 0 4 2736 24 MemoryUsage::is_tracking 0 1 867 374
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_tracking
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               tracking memory (e.g. track-memory-usage is
//               configured #t).
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_tracking(void);

2187 11 is_counting 0 4 2736 24 MemoryUsage::is_counting 0 1 868 413
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_counting
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               at least counting memory (e.g. this is a Windows
//               debug build), even if it's not fully tracking it.
////////////////////////////////////////////////////////////////////
50
static inline bool MemoryUsage::is_counting(void);

2188 20 get_current_cpp_size 0 4 2736 33 MemoryUsage::get_current_cpp_size 0 1 869 394
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_current_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, not including the memory
//               previously frozen.
////////////////////////////////////////////////////////////////////
61
static inline size_t MemoryUsage::get_current_cpp_size(void);

2189 18 get_total_cpp_size 0 4 2736 31 MemoryUsage::get_total_cpp_size 0 1 870 388
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, including the memory
//               previously frozen.
////////////////////////////////////////////////////////////////////
59
static inline size_t MemoryUsage::get_total_cpp_size(void);

2190 26 get_panda_heap_single_size 0 4 2736 39 MemoryUsage::get_panda_heap_single_size 0 1 871 366
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_single_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for individual objects.
////////////////////////////////////////////////////////////////////
67
static inline size_t MemoryUsage::get_panda_heap_single_size(void);

2191 25 get_panda_heap_array_size 0 4 2736 38 MemoryUsage::get_panda_heap_array_size 0 1 872 353
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_array_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for arrays.
////////////////////////////////////////////////////////////////////
66
static inline size_t MemoryUsage::get_panda_heap_array_size(void);

2192 23 get_panda_heap_overhead 0 4 2736 36 MemoryUsage::get_panda_heap_overhead 0 1 873 465
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_overhead
//       Access: Public, Static
//  Description: Returns the extra bytes allocated from the system
//               that are not immediately used for holding allocated
//               objects.  This can only be determined if
//               ALTERNATIVE_MALLOC is enabled.
////////////////////////////////////////////////////////////////////
64
static inline size_t MemoryUsage::get_panda_heap_overhead(void);

2193 19 get_panda_mmap_size 0 4 2736 32 MemoryUsage::get_panda_mmap_size 0 1 874 350
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_mmap_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               virtual memory pool from code within Panda.
////////////////////////////////////////////////////////////////////
60
static inline size_t MemoryUsage::get_panda_mmap_size(void);

2194 17 get_external_size 0 4 2736 30 MemoryUsage::get_external_size 0 1 875 852
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_external_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               in the heap that Panda didn't seem to be responsible
//               for.  This includes a few bytes for very low-level
//               objects (like ConfigVariables) that cannot use Panda
//               memory tracking because they are so very low-level.
//
//               This also includes all of the memory that might have
//               been allocated by a high-level interpreter, like
//               Python.
//
//               This number is only available if Panda is able to
//               hook into the actual heap callback.
////////////////////////////////////////////////////////////////////
58
static inline size_t MemoryUsage::get_external_size(void);

2195 14 get_total_size 0 4 2736 27 MemoryUsage::get_total_size 0 1 876 348
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_size
//       Access: Public, Static
//  Description: Returns the total size of allocated memory consumed
//               by the process, as nearly as can be determined.
////////////////////////////////////////////////////////////////////
55
static inline size_t MemoryUsage::get_total_size(void);

2196 16 get_num_pointers 0 4 2736 29 MemoryUsage::get_num_pointers 0 1 877 282
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_num_pointers
//       Access: Public, Static
//  Description: Returns the number of pointers currently active.
////////////////////////////////////////////////////////////////////
54
static inline int MemoryUsage::get_num_pointers(void);

2197 12 get_pointers 0 4 2736 25 MemoryUsage::get_pointers 0 1 878 333
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers currently active.
////////////////////////////////////////////////////////////////////
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

2198 20 get_pointers_of_type 0 4 2736 33 MemoryUsage::get_pointers_of_type 0 1 879 380
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_type
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers of the indicated type currently
//               active.
////////////////////////////////////////////////////////////////////
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

2199 19 get_pointers_of_age 0 4 2736 32 MemoryUsage::get_pointers_of_age 0 1 880 416
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_age
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers that were allocated within the range
//               of the indicated number of seconds ago.
////////////////////////////////////////////////////////////////////
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

2200 28 get_pointers_with_zero_count 0 4 2736 41 MemoryUsage::get_pointers_with_zero_count 0 1 881 1326
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_with_zero_count
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all currently active pointers (that is, pointers
//               allocated since the last call to freeze(), and not
//               yet freed) that have a zero reference count.
//
//               Generally, an undeleted pointer with a zero reference
//               count means its reference count has never been
//               incremented beyond zero (since once it has been
//               incremented, the only way it can return to zero would
//               free the pointer).  This may include objects that are
//               allocated statically or on the stack, which are never
//               intended to be deleted.  Or, it might represent a
//               programmer or compiler error.
//
//               This function has the side-effect of incrementing
//               each of their reference counts by one, thus
//               preventing them from ever being freed--but since they
//               hadn't been freed anyway, probably no additional harm
//               is done.
////////////////////////////////////////////////////////////////////
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

2201 6 freeze 0 4 2736 19 MemoryUsage::freeze 0 1 882 574
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::freeze
//       Access: Public, Static
//  Description: 'Freezes' all pointers currently stored so that they
//               are no longer reported; only newly allocate pointers
//               from this point on will appear in future information
//               requests.  This makes it easier to differentiate
//               between continuous leaks and one-time memory
//               allocations.
////////////////////////////////////////////////////////////////////
45
static inline void MemoryUsage::freeze(void);

2202 18 show_current_types 0 4 2736 31 MemoryUsage::show_current_types 0 1 883 312
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
57
static inline void MemoryUsage::show_current_types(void);

2203 16 show_trend_types 0 4 2736 29 MemoryUsage::show_trend_types 0 1 884 372
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
55
static inline void MemoryUsage::show_trend_types(void);

2204 17 show_current_ages 0 4 2736 30 MemoryUsage::show_current_ages 0 1 885 310
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               active pointers.
////////////////////////////////////////////////////////////////////
56
static inline void MemoryUsage::show_current_ages(void);

2205 15 show_trend_ages 0 4 2736 28 MemoryUsage::show_trend_ages 0 1 886 370
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               pointers allocated and freed since the last call to
//               freeze().
////////////////////////////////////////////////////////////////////
54
static inline void MemoryUsage::show_trend_ages(void);

2206 12 ~MemoryUsage 0 4 2736 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

2207 18 get_config_express 0 1 0 18 get_config_express 0 1 1321 92
// Returns the configure object for accessing config variables from a
// scripting language.
34
DConfig &get_config_express(void);

2208 20 upcast_to_MemoryBase 0 12 2738 36 ReferenceCount::upcast_to_MemoryBase 0 1 893 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

2209 26 downcast_to_ReferenceCount 0 12 2658 38 MemoryBase::downcast_to_ReferenceCount 0 1 894 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

2210 15 ~ReferenceCount 0 6 2738 31 ReferenceCount::~ReferenceCount 0 0 231
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::Destructor
//       Access: Public, Virtual
//  Description:
////////////////////////////////////////////////////////////////////
53
virtual inline ReferenceCount::~ReferenceCount(void);

2211 13 get_ref_count 0 4 2738 29 ReferenceCount::get_ref_count 0 1 887 265
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::get_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
53
inline int ReferenceCount::get_ref_count(void) const;

2212 3 ref 0 4 2738 19 ReferenceCount::ref 0 1 888 896
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::ref
//       Access: Published
//  Description: Explicitly increments the reference count.  User code
//               should avoid using ref() and unref() directly, which
//               can result in missed reference counts.  Instead, let
//               a PointerTo object manage the reference counting
//               automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
////////////////////////////////////////////////////////////////////
44
inline void ReferenceCount::ref(void) const;

2213 5 unref 0 6 2738 21 ReferenceCount::unref 0 1 889 1336
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::unref
//       Access: Published, Virtual
//  Description: Explicitly decrements the reference count.  Note that
//               the object will not be implicitly deleted by unref()
//               simply because the reference count drops to zero.
//               (Having a member function delete itself is
//               problematic.) However, see the helper function
//               unref_delete().
//
//               User code should avoid using ref() and unref()
//               directly, which can result in missed reference
//               counts.  Instead, let a PointerTo object manage the
//               reference counting automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
54
virtual inline bool ReferenceCount::unref(void) const;

2214 24 test_ref_count_integrity 0 4 2738 40 ReferenceCount::test_ref_count_integrity 0 1 890 395
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.  Returns true if ok,
//               false otherwise.
////////////////////////////////////////////////////////////////////
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

2215 22 test_ref_count_nonzero 0 4 2738 38 ReferenceCount::test_ref_count_nonzero 0 1 891 402
////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_nonzero
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't zero, or completely bogus.  Returns true
//               if ok, false otherwise.
////////////////////////////////////////////////////////////////////
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

2216 14 get_class_type 0 4 2738 30 ReferenceCount::get_class_type 0 1 892 0
55
static TypeHandle ReferenceCount::get_class_type(void);

2217 10 get_length 0 4 2739 18 Buffer::get_length 0 1 895 214
////////////////////////////////////////////////////////////////////
//     Function: Buffer::get_length
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
42
inline int Buffer::get_length(void) const;

2218 15 compress_string 0 1 0 15 compress_string 0 1 1322 0
68
string compress_string(string const &source, int compression_level);

2219 17 decompress_string 0 1 0 17 decompress_string 0 1 1323 0
47
string decompress_string(string const &source);

2220 13 compress_file 0 1 0 13 compress_file 0 1 1324 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

2221 15 decompress_file 0 1 0 15 decompress_file 0 1 1325 0
67
bool decompress_file(Filename const &source, Filename const &dest);

2222 15 compress_stream 0 1 0 15 compress_stream 0 1 1326 0
76
bool compress_stream(istream &source, ostream &dest, int compression_level);

2223 17 decompress_stream 0 1 0 17 decompress_stream 0 1 1327 0
55
bool decompress_stream(istream &source, ostream &dest);

2224 11 copy_stream 0 1 0 11 copy_stream 0 1 1328 0
49
bool copy_stream(istream &source, ostream &dest);

2225 9 add_level 0 6 2740 36 PStatCollectorForwardBase::add_level 0 1 896 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

2226 18 get_node_ref_count 0 4 2741 38 NodeReferenceCount::get_node_ref_count 0 1 897 274
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
////////////////////////////////////////////////////////////////////
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

2227 8 node_ref 0 4 2741 28 NodeReferenceCount::node_ref 0 1 898 338
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the node reference count and
//               the normal reference count simultaneously.
////////////////////////////////////////////////////////////////////
53
inline void NodeReferenceCount::node_ref(void) const;

2228 10 node_unref 0 4 2741 30 NodeReferenceCount::node_unref 0 1 899 462
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
////////////////////////////////////////////////////////////////////
55
inline bool NodeReferenceCount::node_unref(void) const;

2229 24 test_ref_count_integrity 0 4 2741 44 NodeReferenceCount::test_ref_count_integrity 0 1 900 344
////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
////////////////////////////////////////////////////////////////////
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

2230 14 get_class_type 0 4 2741 34 NodeReferenceCount::get_class_type 0 1 901 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

2231 8 Datagram 0 4 2742 18 Datagram::Datagram 0 3 902 903 904 1017
////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs an empty datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
186
inline Datagram::Datagram(void);
inline Datagram::Datagram(void const *data, size_t size);
inline Datagram::Datagram(string const &data);
inline Datagram::Datagram(Datagram const &copy);

2232 10 operator = 0 4 2742 20 Datagram::operator = 0 1 905 0
55
inline void Datagram::operator =(Datagram const &copy);

2233 5 clear 0 6 2742 15 Datagram::clear 0 1 906 314
////////////////////////////////////////////////////////////////////
//     Function: Datagram::clear
//       Access: Public, Virtual
//  Description: Resets the datagram to empty, in preparation for
//               building up a new datagram.
////////////////////////////////////////////////////////////////////
35
virtual void Datagram::clear(void);

2234 8 dump_hex 0 4 2742 18 Datagram::dump_hex 0 1 907 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
////////////////////////////////////////////////////////////////////
71
void Datagram::dump_hex(ostream &out, unsigned int indent = (0)) const;

2235 8 add_bool 0 4 2742 18 Datagram::add_bool 0 1 908 252
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_bool
//       Access: Public
//  Description: Adds a boolean value to the datagram.
////////////////////////////////////////////////////////////////////
43
inline void Datagram::add_bool(bool value);

2236 8 add_int8 0 4 2742 18 Datagram::add_int8 0 1 909 259
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
46
inline void Datagram::add_int8(PN_int8 value);

2237 9 add_uint8 0 4 2742 19 Datagram::add_uint8 0 1 910 263
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_uint8(PN_uint8 value);

2238 9 add_int16 0 4 2742 19 Datagram::add_int16 0 1 911 311
// The default numeric packing is little-endian.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_int16(PN_int16 value);

2239 9 add_int32 0 4 2742 19 Datagram::add_int32 0 1 912 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_int32(PN_int32 value);

2240 9 add_int64 0 4 2742 19 Datagram::add_int64 0 1 913 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::add_int64(PN_int64 value);

2241 10 add_uint16 0 4 2742 20 Datagram::add_uint16 0 1 914 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_uint16(PN_uint16 value);

2242 10 add_uint32 0 4 2742 20 Datagram::add_uint32 0 1 915 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_uint32(PN_uint32 value);

2243 10 add_uint64 0 4 2742 20 Datagram::add_uint64 0 1 916 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the datagram.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::add_uint64(PN_uint64 value);

2244 11 add_float32 0 4 2742 21 Datagram::add_float32 0 1 917 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the datagram.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_float32(PN_float32 value);

2245 11 add_float64 0 4 2742 21 Datagram::add_float64 0 1 918 270
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the datagram.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_float64(PN_float64 value);

2246 12 add_stdfloat 0 4 2742 22 Datagram::add_stdfloat 0 1 919 327
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_stdfloat
//       Access: Public
//  Description: Adds either a 32-bit or a 64-bit floating-point
//               number, according to set_stdfloat_double().
////////////////////////////////////////////////////////////////////
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

2247 12 add_be_int16 0 4 2742 22 Datagram::add_be_int16 0 1 920 361
// These functions pack numbers big-endian, in case that's desired.

////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_int16(PN_int16 value);

2248 12 add_be_int32 0 4 2742 22 Datagram::add_be_int32 0 1 921 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_int32(PN_int32 value);

2249 12 add_be_int64 0 4 2742 22 Datagram::add_be_int64 0 1 922 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
51
inline void Datagram::add_be_int64(PN_int64 value);

2250 13 add_be_uint16 0 4 2742 23 Datagram::add_be_uint16 0 1 923 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_be_uint16(PN_uint16 value);

2251 13 add_be_uint32 0 4 2742 23 Datagram::add_be_uint32 0 1 924 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_be_uint32(PN_uint32 value);

2252 13 add_be_uint64 0 4 2742 23 Datagram::add_be_uint64 0 1 925 296
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               datagram.
////////////////////////////////////////////////////////////////////
53
inline void Datagram::add_be_uint64(PN_uint64 value);

2253 14 add_be_float32 0 4 2742 24 Datagram::add_be_float32 0 1 926 318
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the datagram.
////////////////////////////////////////////////////////////////////
55
inline void Datagram::add_be_float32(PN_float32 value);

2254 14 add_be_float64 0 4 2742 24 Datagram::add_be_float64 0 1 927 301
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               datagram.
////////////////////////////////////////////////////////////////////
55
inline void Datagram::add_be_float64(PN_float64 value);

2255 10 add_string 0 4 2742 20 Datagram::add_string 0 1 928 329
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram.  This
//               actually adds a count followed by n bytes.
////////////////////////////////////////////////////////////////////
52
inline void Datagram::add_string(string const &str);

2256 12 add_string32 0 4 2742 22 Datagram::add_string32 0 1 929 338
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the datagram, using
//               a 32-bit length field to allow very long strings.
////////////////////////////////////////////////////////////////////
54
inline void Datagram::add_string32(string const &str);

2257 12 add_z_string 0 4 2742 22 Datagram::add_z_string 0 1 930 311
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
47
inline void Datagram::add_z_string(string str);

2258 16 add_fixed_string 0 4 2742 26 Datagram::add_fixed_string 0 1 931 512
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the datagram.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
////////////////////////////////////////////////////////////////////
71
inline void Datagram::add_fixed_string(string const &str, size_t size);

2259 11 add_wstring 0 4 2742 21 Datagram::add_wstring 0 1 932 265
////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_wstring
//       Access: Public
//  Description: Adds a variable-length wstring to the datagram.
////////////////////////////////////////////////////////////////////
47
void Datagram::add_wstring(wstring const &str);

2260 9 pad_bytes 0 4 2742 19 Datagram::pad_bytes 0 1 933 289
////////////////////////////////////////////////////////////////////
//     Function: Datagram::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               datagram.
////////////////////////////////////////////////////////////////////
38
void Datagram::pad_bytes(size_t size);

2261 11 append_data 0 4 2742 21 Datagram::append_data 0 1 934 580
////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
////////////////////////////////////////////////////////////////////
113
void Datagram::append_data(void const *data, size_t size);
inline void Datagram::append_data(string const &data);

2262 6 assign 0 4 2742 16 Datagram::assign 0 0 284
////////////////////////////////////////////////////////////////////
//     Function: Datagram::assign
//       Access: Public
//  Description: Replaces the datagram's data with the indicated
//               block.
////////////////////////////////////////////////////////////////////
53
void Datagram::assign(void const *data, size_t size);

2263 11 get_message 0 4 2742 21 Datagram::get_message 0 1 935 258
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_message
//       Access: Public
//  Description: Returns the datagram's data as a string.
////////////////////////////////////////////////////////////////////
48
inline string Datagram::get_message(void) const;

2264 8 get_data 0 4 2742 18 Datagram::get_data 0 1 936 290
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_data
//       Access: Public
//  Description: Returns a pointer to the beginning of the datagram's
//               data.
////////////////////////////////////////////////////////////////////
50
inline void const *Datagram::get_data(void) const;

2265 10 get_length 0 4 2742 20 Datagram::get_length 0 1 937 261
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_length
//       Access: Public
//  Description: Returns the number of bytes in the datagram.
////////////////////////////////////////////////////////////////////
47
inline size_t Datagram::get_length(void) const;

2266 9 set_array 0 4 2742 19 Datagram::set_array 0 1 938 450
////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_array
//       Access: Public
//  Description: Replaces the data in the Datagram with the data in
//               the indicated PTA_uchar.  This is assignment by
//               reference: subsequent changes to the Datagram will
//               also change the source PTA_uchar.
////////////////////////////////////////////////////////////////////
48
inline void Datagram::set_array(PTA_uchar data);

2267 10 copy_array 0 4 2742 20 Datagram::copy_array 0 1 939 505
////////////////////////////////////////////////////////////////////
//     Function: Datagram::copy_array
//       Access: Public
//  Description: Replaces the data in the Datagram with a copy of the
//               data in the indicated CPTA_uchar.  Unlike
//               set_array(), a complete copy is made of the data;
//               subsequent changes to the Datagram will *not* change
//               the source CPTA_uchar.
////////////////////////////////////////////////////////////////////
50
inline void Datagram::copy_array(CPTA_uchar data);

2268 9 get_array 0 4 2742 19 Datagram::get_array 0 1 940 292
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_array
//       Access: Public
//  Description: Returns a const pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
50
inline CPTA_uchar Datagram::get_array(void) const;

2269 12 modify_array 0 4 2742 22 Datagram::modify_array 0 1 941 300
////////////////////////////////////////////////////////////////////
//     Function: Datagram::modify_array
//       Access: Public
//  Description: Returns a modifiable pointer to the actual data in
//               the Datagram.
////////////////////////////////////////////////////////////////////
46
inline PTA_uchar Datagram::modify_array(void);

2270 19 set_stdfloat_double 0 4 2742 29 Datagram::set_stdfloat_double 0 1 942 648
////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_stdfloat_double
//       Access: Public
//  Description: Changes the stdfloat_double flag, which defines the
//               operation performed by add_stdfloat() and
//               DatagramIterator::get_stdfloat().  When this is true,
//               add_stdfloat() adds a 64-bit floating-point number;
//               when it is false, it adds a 32-bit floating-point
//               number.  The default is based on the STDFLOAT_DOUBLE
//               compilation flag.
////////////////////////////////////////////////////////////////////
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

2271 19 get_stdfloat_double 0 4 2742 29 Datagram::get_stdfloat_double 0 1 943 304
////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_stdfloat_double
//       Access: Public
//  Description: Returns the stdfloat_double flag.  See
//               set_stdfloat_double().
////////////////////////////////////////////////////////////////////
54
inline bool Datagram::get_stdfloat_double(void) const;

2272 11 operator == 0 4 2742 21 Datagram::operator == 0 1 944 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

2273 11 operator != 0 4 2742 21 Datagram::operator != 0 1 945 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

2274 10 operator < 0 4 2742 20 Datagram::operator < 0 1 946 0
62
inline bool Datagram::operator <(Datagram const &other) const;

2275 6 output 0 4 2742 16 Datagram::output 0 1 947 290
////////////////////////////////////////////////////////////////////
//     Function : Datagram::output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
42
void Datagram::output(ostream &out) const;

2276 5 write 0 4 2742 15 Datagram::write 0 1 948 289
////////////////////////////////////////////////////////////////////
//     Function : Datagram::write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
68
void Datagram::write(ostream &out, unsigned int indent = (0)) const;

2277 14 get_class_type 0 4 2742 24 Datagram::get_class_type 0 1 949 0
49
static TypeHandle Datagram::get_class_type(void);

2278 18 ~DatagramGenerator 0 6 2743 37 DatagramGenerator::~DatagramGenerator 0 0 326
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::Destructor
//       Access: Published, Virtual
//  Description: Does nothing since this is class is just
//               the definition of an interface
////////////////////////////////////////////////////////////////////
52
virtual DatagramGenerator::~DatagramGenerator(void);

2279 12 get_datagram 0 6 2743 31 DatagramGenerator::get_datagram 0 1 950 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

2280 13 save_datagram 0 6 2743 32 DatagramGenerator::save_datagram 0 1 951 725
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::save_datagram
//       Access: Published, Virtual
//  Description: Skips over the next datagram without extracting it,
//               but saves the relevant file information in the
//               SubfileInfo object so that its data may be read
//               later.  For non-file-based datagram generators, this
//               may mean creating a temporary file and copying the
//               contents of the datagram to disk.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.
////////////////////////////////////////////////////////////////////
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

2281 6 is_eof 0 6 2743 25 DatagramGenerator::is_eof 0 1 952 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

2282 8 is_error 0 6 2743 27 DatagramGenerator::is_error 0 1 953 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

2283 12 get_filename 0 6 2743 31 DatagramGenerator::get_filename 0 1 954 419
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the source for
//               these datagrams, if any, or empty string if the
//               datagrams do not originate from a file on disk.
////////////////////////////////////////////////////////////////////
62
virtual Filename const &DatagramGenerator::get_filename(void);

2284 13 get_timestamp 0 6 2743 32 DatagramGenerator::get_timestamp 0 1 955 399
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_timestamp
//       Access: Published, Virtual
//  Description: Returns the on-disk timestamp of the file that was
//               read, at the time it was opened, if that is
//               available, or 0 if it is not.
////////////////////////////////////////////////////////////////////
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

2285 8 get_file 0 6 2743 27 DatagramGenerator::get_file 0 1 956 412
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a file on disk.
////////////////////////////////////////////////////////////////////
63
virtual FileReference const *DatagramGenerator::get_file(void);

2286 9 get_vfile 0 6 2743 28 DatagramGenerator::get_vfile 0 1 957 410
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_vfile
//       Access: Published, Virtual
//  Description: Returns the VirtualFile that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a VirtualFile.
////////////////////////////////////////////////////////////////////
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

2287 12 get_file_pos 0 6 2743 31 DatagramGenerator::get_file_pos 0 1 958 646
////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramGenerators that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               get_datagram().
////////////////////////////////////////////////////////////////////
56
virtual streampos DatagramGenerator::get_file_pos(void);

2288 16 DatagramIterator 0 4 2744 34 DatagramIterator::DatagramIterator 0 3 959 960 961 684
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
211
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, size_t offset = (0));
inline DatagramIterator::DatagramIterator(DatagramIterator const &copy);

2289 10 operator = 0 4 2744 28 DatagramIterator::operator = 0 1 962 0
71
inline void DatagramIterator::operator =(DatagramIterator const &copy);

2290 17 ~DatagramIterator 0 4 2744 35 DatagramIterator::~DatagramIterator 0 0 224
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
49
inline DatagramIterator::~DatagramIterator(void);

2291 8 get_bool 0 4 2744 26 DatagramIterator::get_bool 0 1 963 248
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_bool
//       Access: Public
//  Description: Extracts a boolean value.
////////////////////////////////////////////////////////////////////
45
inline bool DatagramIterator::get_bool(void);

2292 8 get_int8 0 4 2744 26 DatagramIterator::get_int8 0 1 964 255
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int8
//       Access: Public
//  Description: Extracts a signed 8-bit integer.
////////////////////////////////////////////////////////////////////
48
inline PN_int8 DatagramIterator::get_int8(void);

2293 9 get_uint8 0 4 2744 27 DatagramIterator::get_uint8 0 1 965 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint8
//       Access: Public
//  Description: Extracts an unsigned 8-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_uint8 DatagramIterator::get_uint8(void);

2294 9 get_int16 0 4 2744 27 DatagramIterator::get_int16 0 1 966 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int16
//       Access: Public
//  Description: Extracts a signed 16-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_int16 DatagramIterator::get_int16(void);

2295 9 get_int32 0 4 2744 27 DatagramIterator::get_int32 0 1 967 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int32
//       Access: Public
//  Description: Extracts a signed 32-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_int32 DatagramIterator::get_int32(void);

2296 9 get_int64 0 4 2744 27 DatagramIterator::get_int64 0 1 968 257
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int64
//       Access: Public
//  Description: Extracts a signed 64-bit integer.
////////////////////////////////////////////////////////////////////
50
inline PN_int64 DatagramIterator::get_int64(void);

2297 10 get_uint16 0 4 2744 28 DatagramIterator::get_uint16 0 1 969 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit integer.
////////////////////////////////////////////////////////////////////
52
inline PN_uint16 DatagramIterator::get_uint16(void);

2298 10 get_uint32 0 4 2744 28 DatagramIterator::get_uint32 0 1 970 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit integer.
////////////////////////////////////////////////////////////////////
52
inline PN_uint32 DatagramIterator::get_uint32(void);

2299 10 get_uint64 0 4 2744 28 DatagramIterator::get_uint64 0 1 971 261
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit integer.
////////////////////////////////////////////////////////////////////
52
inline PN_uint64 DatagramIterator::get_uint64(void);

2300 11 get_float32 0 4 2744 29 DatagramIterator::get_float32 0 1 972 300
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float32
//       Access: Public
//  Description: Extracts a 32-bit single-precision floating-point
//               number.
////////////////////////////////////////////////////////////////////
54
inline PN_float32 DatagramIterator::get_float32(void);

2301 11 get_float64 0 4 2744 29 DatagramIterator::get_float64 0 1 973 266
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float64
//       Access: Public
//  Description: Extracts a 64-bit floating-point number.
////////////////////////////////////////////////////////////////////
54
inline PN_float64 DatagramIterator::get_float64(void);

2302 12 get_stdfloat 0 4 2744 30 DatagramIterator::get_stdfloat 0 1 974 349
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_stdfloat
//       Access: Public
//  Description: Extracts either a 32-bit or a 64-bit floating-point
//               number, according to Datagram::set_stdfloat_double().
////////////////////////////////////////////////////////////////////
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

2303 12 get_be_int16 0 4 2744 30 DatagramIterator::get_be_int16 0 1 975 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int16
//       Access: Public
//  Description: Extracts a signed 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
53
inline PN_int16 DatagramIterator::get_be_int16(void);

2304 12 get_be_int32 0 4 2744 30 DatagramIterator::get_be_int32 0 1 976 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int32
//       Access: Public
//  Description: Extracts a signed 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
53
inline PN_int32 DatagramIterator::get_be_int32(void);

2305 12 get_be_int64 0 4 2744 30 DatagramIterator::get_be_int64 0 1 977 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int64
//       Access: Public
//  Description: Extracts a signed 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
53
inline PN_int64 DatagramIterator::get_be_int64(void);

2306 13 get_be_uint16 0 4 2744 31 DatagramIterator::get_be_uint16 0 1 978 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit big-endian integer.
////////////////////////////////////////////////////////////////////
55
inline PN_uint16 DatagramIterator::get_be_uint16(void);

2307 13 get_be_uint32 0 4 2744 31 DatagramIterator::get_be_uint32 0 1 979 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit big-endian integer.
////////////////////////////////////////////////////////////////////
55
inline PN_uint32 DatagramIterator::get_be_uint32(void);

2308 13 get_be_uint64 0 4 2744 31 DatagramIterator::get_be_uint64 0 1 980 275
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit big-endian integer.
////////////////////////////////////////////////////////////////////
55
inline PN_uint64 DatagramIterator::get_be_uint64(void);

2309 14 get_be_float32 0 4 2744 32 DatagramIterator::get_be_float32 0 1 981 314
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float32
//       Access: Public
//  Description: Extracts a 32-bit big-endian single-precision
//               floating-point number.
////////////////////////////////////////////////////////////////////
57
inline PN_float32 DatagramIterator::get_be_float32(void);

2310 14 get_be_float64 0 4 2744 32 DatagramIterator::get_be_float64 0 1 982 280
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float64
//       Access: Public
//  Description: Extracts a 64-bit big-endian floating-point number.
////////////////////////////////////////////////////////////////////
57
inline PN_float64 DatagramIterator::get_be_float64(void);

2311 10 get_string 0 4 2744 28 DatagramIterator::get_string 0 1 983 259
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string
//       Access: Public
//  Description: Extracts a variable-length string.
////////////////////////////////////////////////////////////////////
42
string DatagramIterator::get_string(void);

2312 12 get_string32 0 4 2744 30 DatagramIterator::get_string32 0 1 984 305
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string32
//       Access: Public
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
////////////////////////////////////////////////////////////////////
44
string DatagramIterator::get_string32(void);

2313 12 get_z_string 0 4 2744 30 DatagramIterator::get_z_string 0 1 985 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_z_string
//       Access: Public
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
////////////////////////////////////////////////////////////////////
44
string DatagramIterator::get_z_string(void);

2314 16 get_fixed_string 0 4 2744 34 DatagramIterator::get_fixed_string 0 1 986 379
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_fixed_string
//       Access: Public
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
////////////////////////////////////////////////////////////////////
55
string DatagramIterator::get_fixed_string(size_t size);

2315 11 get_wstring 0 4 2744 29 DatagramIterator::get_wstring 0 1 987 307
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_wstring
//       Access: Public
//  Description: Extracts a variable-length wstring (with a 32-bit
//               length field).
////////////////////////////////////////////////////////////////////
44
wstring DatagramIterator::get_wstring(void);

2316 10 skip_bytes 0 4 2744 28 DatagramIterator::skip_bytes 0 1 988 299
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::skip_bytes
//       Access: Public
//  Description: Skips over the indicated number of bytes in the
//               datagram.
////////////////////////////////////////////////////////////////////
54
inline void DatagramIterator::skip_bytes(size_t size);

2317 13 extract_bytes 0 4 2744 31 DatagramIterator::extract_bytes 0 1 989 856
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Public
//  Description: Extracts the indicated number of bytes in the
//               datagram and returns them as a string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Published
//  Description: Extracts the indicated number of bytes in the
//               datagram into the given character buffer.  Assumes
//               that the buffer is big enough to hold the requested
//               number of bytes.  Returns the number of bytes
//               that were successfully written.
////////////////////////////////////////////////////////////////////
126
string DatagramIterator::extract_bytes(size_t size);
size_t DatagramIterator::extract_bytes(unsigned char *into, size_t size);

2318 19 get_remaining_bytes 0 4 2744 37 DatagramIterator::get_remaining_bytes 0 1 990 352
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_bytes
//       Access: Public
//  Description: Returns the remaining bytes in the datagram as a
//               string, but does not extract them from the iterator.
////////////////////////////////////////////////////////////////////
64
inline string DatagramIterator::get_remaining_bytes(void) const;

2319 18 get_remaining_size 0 4 2744 36 DatagramIterator::get_remaining_size 0 1 991 271
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_size
//       Access: Public
//  Description: Return the bytes left in the datagram.
////////////////////////////////////////////////////////////////////
60
inline int DatagramIterator::get_remaining_size(void) const;

2320 12 get_datagram 0 4 2744 30 DatagramIterator::get_datagram 0 1 992 264
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_datagram
//       Access: Public
//  Description: Return the datagram of this iterator.
////////////////////////////////////////////////////////////////////
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

2321 17 get_current_index 0 4 2744 35 DatagramIterator::get_current_index 0 1 993 335
////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_current_index
//       Access: Public
//  Description: Returns the current position within the datagram of the
//               next piece of data to extract.
////////////////////////////////////////////////////////////////////
62
inline size_t DatagramIterator::get_current_index(void) const;

2322 6 output 0 4 2744 24 DatagramIterator::output 0 1 994 280
////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
50
void DatagramIterator::output(ostream &out) const;

2323 5 write 0 4 2744 23 DatagramIterator::write 0 1 995 279
////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
////////////////////////////////////////////////////////////////////
76
void DatagramIterator::write(ostream &out, unsigned int indent = (0)) const;

2324 14 get_class_type 0 4 2744 32 DatagramIterator::get_class_type 0 1 996 0
57
static TypeHandle DatagramIterator::get_class_type(void);

2325 13 ~DatagramSink 0 6 2745 27 DatagramSink::~DatagramSink 0 0 318
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::Destructor
//       Access: Public, Virtual
//  Description: Does nothing since this is class is just
//               the definition of an interface
////////////////////////////////////////////////////////////////////
42
virtual DatagramSink::~DatagramSink(void);

2326 12 put_datagram 0 6 2745 26 DatagramSink::put_datagram 0 1 997 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

2327 13 copy_datagram 0 6 2745 27 DatagramSink::copy_datagram 0 2 998 999 1354
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the entire indicated
//               file (via the vfs) as the next datagram.  This is
//               intended to support potentially very large datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the range of the indicated
//               file (outside of the vfs) as the next datagram.  This
//               is intended to support potentially very large
//               datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
////////////////////////////////////////////////////////////////////
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

2328 8 is_error 0 6 2745 22 DatagramSink::is_error 0 1 1000 0
46
virtual bool DatagramSink::is_error(void) = 0;

2329 5 flush 0 6 2745 19 DatagramSink::flush 0 1 1001 0
43
virtual void DatagramSink::flush(void) = 0;

2330 12 get_filename 0 6 2745 26 DatagramSink::get_filename 0 1 1002 414
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the target for
//               these datagrams, if any, or empty string if the
//               datagrams do not get written to a file on disk.
////////////////////////////////////////////////////////////////////
57
virtual Filename const &DatagramSink::get_filename(void);

2331 8 get_file 0 6 2745 22 DatagramSink::get_file 0 1 1003 403
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the target for
//               these datagrams, if any, or NULL if the datagrams do
//               not written to a file on disk.
////////////////////////////////////////////////////////////////////
58
virtual FileReference const *DatagramSink::get_file(void);

2332 12 get_file_pos 0 6 2745 26 DatagramSink::get_file_pos 0 1 1004 636
////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramSinks that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               put_datagram().
////////////////////////////////////////////////////////////////////
51
virtual streampos DatagramSink::get_file_pos(void);

2333 14 encrypt_string 0 1 0 14 encrypt_string 0 1 1329 0
153
string encrypt_string(string const &source, string const &password, string const &algorithm = ((())), int key_length = (-1), int iteration_count = (-1));

2334 14 decrypt_string 0 1 0 14 decrypt_string 0 1 1330 0
68
string decrypt_string(string const &source, string const &password);

2335 12 encrypt_file 0 1 0 12 encrypt_file 0 1 1331 0
173
bool encrypt_file(Filename const &source, Filename const &dest, string const &password, string const &algorithm = ((())), int key_length = (-1), int iteration_count = (-1));

2336 12 decrypt_file 0 1 0 12 decrypt_file 0 1 1332 0
88
bool decrypt_file(Filename const &source, Filename const &dest, string const &password);

2337 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 1333 0
161
bool encrypt_stream(istream &source, ostream &dest, string const &password, string const &algorithm = ((())), int key_length = (-1), int iteration_count = (-1));

2338 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 1334 0
76
bool decrypt_stream(istream &source, ostream &dest, string const &password);

2339 13 error_to_text 0 1 0 13 error_to_text 0 1 1335 185
////////////////////////////////////////////////////////////////////
//     Function: error_to_text
//  Description:
////////////////////////////////////////////////////////////////////
40
string error_to_text(ErrorUtilCode err);

2340 15 get_write_error 0 1 0 15 get_write_error 0 1 1336 0
26
int get_write_error(void);

2341 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 1337 191
////////////////////////////////////////////////////////////////////
//     Function: handle_socket_error
//  Description:
////////////////////////////////////////////////////////////////////
33
string handle_socket_error(void);

2342 17 get_network_error 0 1 0 17 get_network_error 0 1 1338 0
28
int get_network_error(void);

2343 21 upcast_to_TypedObject 0 12 2747 42 TypedReferenceCount::upcast_to_TypedObject 0 1 1006 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

2344 31 downcast_to_TypedReferenceCount 0 12 2732 44 TypedObject::downcast_to_TypedReferenceCount 0 1 1007 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

2345 24 upcast_to_ReferenceCount 0 12 2747 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 1008 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

2346 31 downcast_to_TypedReferenceCount 0 12 2738 47 ReferenceCount::downcast_to_TypedReferenceCount 0 1 1009 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

2347 14 get_class_type 0 4 2747 35 TypedReferenceCount::get_class_type 0 1 1005 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

2348 20 ~TypedReferenceCount 0 4 2747 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

2349 13 FileReference 0 4 2748 28 FileReference::FileReference 0 1 1010 225
////////////////////////////////////////////////////////////////////
//     Function: FileReference::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline FileReference::FileReference(Filename const &filename);

2350 12 get_filename 0 4 2748 27 FileReference::get_filename 0 1 1011 265
////////////////////////////////////////////////////////////////////
//     Function: FileReference::get_filename
//       Access: Published
//  Description: Returns the filename of the reference.
////////////////////////////////////////////////////////////////////
63
inline Filename const &FileReference::get_filename(void) const;

2351 14 get_class_type 0 4 2748 29 FileReference::get_class_type 0 1 1012 0
54
static TypeHandle FileReference::get_class_type(void);

2352 14 ~FileReference 0 4 2748 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

2353 7 Ramfile 0 4 2749 16 Ramfile::Ramfile 0 1 1013 219
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
30
inline Ramfile::Ramfile(void);

2354 4 seek 0 4 2749 13 Ramfile::seek 0 1 1014 363
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::seek
//       Access: Published
//  Description: Moves the data pointer to the indicated byte
//               position.  It is not an error to move the pointer
//               past the end of data.
////////////////////////////////////////////////////////////////////
38
inline void Ramfile::seek(size_t pos);

2355 4 tell 0 4 2749 13 Ramfile::tell 0 1 1015 322
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::tell
//       Access: Published
//  Description: Returns the current data pointer position as a byte
//               offset from the beginning of the stream.
////////////////////////////////////////////////////////////////////
40
inline size_t Ramfile::tell(void) const;

2356 4 read 0 4 2749 13 Ramfile::read 0 1 1016 594
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::read
//       Access: Published
//  Description: Extracts and returns the indicated number of
//               characters from the current data pointer, and
//               advances the data pointer.  If the data pointer
//               exceeds the end of the buffer, returns empty string.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.read() function.
////////////////////////////////////////////////////////////////////
36
string Ramfile::read(size_t length);

2357 8 readline 0 4 2749 17 Ramfile::readline 0 1 1017 599
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.readline()
//               function.
////////////////////////////////////////////////////////////////////
31
string Ramfile::readline(void);

2358 9 readlines 0 4 2749 18 Ramfile::readlines 0 1 1018 0
35
PyObject *Ramfile::readlines(void);

2359 8 get_data 0 4 2749 17 Ramfile::get_data 0 1 1019 321
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data
//       Access: Published
//  Description: Returns the entire buffer contents as a string,
//               regardless of the current data pointer.
////////////////////////////////////////////////////////////////////
51
inline string const &Ramfile::get_data(void) const;

2360 13 get_data_size 0 4 2749 22 Ramfile::get_data_size 0 1 1020 269
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data_size
//       Access: Published
//  Description: Returns the size of the entire buffer contents.
////////////////////////////////////////////////////////////////////
49
inline size_t Ramfile::get_data_size(void) const;

2361 5 clear 0 4 2749 14 Ramfile::clear 0 1 1021 250
////////////////////////////////////////////////////////////////////
//     Function: Ramfile::clear
//       Access: Published
//  Description: Empties the current buffer contents.
////////////////////////////////////////////////////////////////////
33
inline void Ramfile::clear(void);

2362 8 ~Ramfile 0 4 2749 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

2363 7 HashVal 0 4 2750 16 HashVal::HashVal 0 2 1022 1023 445
////////////////////////////////////////////////////////////////////
//     Function: HashVal::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

2364 10 operator = 0 4 2750 19 HashVal::operator = 0 1 1024 0
53
inline void HashVal::operator =(HashVal const &copy);

2365 11 operator == 0 4 2750 20 HashVal::operator == 0 1 1025 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

2366 11 operator != 0 4 2750 20 HashVal::operator != 0 1 1026 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

2367 10 operator < 0 4 2750 19 HashVal::operator < 0 1 1027 0
60
inline bool HashVal::operator <(HashVal const &other) const;

2368 10 compare_to 0 4 2750 19 HashVal::compare_to 0 1 1028 218
////////////////////////////////////////////////////////////////////
//     Function: HashVal::compare_to
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
59
inline int HashVal::compare_to(HashVal const &other) const;

2369 10 merge_with 0 4 2750 19 HashVal::merge_with 0 1 1029 311
////////////////////////////////////////////////////////////////////
//     Function: HashVal::merge_with
//       Access: Published
//  Description: Generates a new HashVal representing the xor of this
//               one and the other one.
////////////////////////////////////////////////////////////////////
54
inline void HashVal::merge_with(HashVal const &other);

2370 10 output_dec 0 4 2750 19 HashVal::output_dec 0 1 1030 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_dec
//       Access: Published
//  Description: Outputs the HashVal as four unsigned decimal
//               integers.
////////////////////////////////////////////////////////////////////
52
inline void HashVal::output_dec(ostream &out) const;

2371 9 input_dec 0 4 2750 18 HashVal::input_dec 0 1 1031 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input
//       Access: Published
//  Description: Inputs the HashVal as four unsigned decimal integers.
////////////////////////////////////////////////////////////////////
44
inline void HashVal::input_dec(istream &in);

2372 10 output_hex 0 4 2750 19 HashVal::output_hex 0 1 1032 272
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_hex
//       Access: Published
//  Description: Outputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
45
void HashVal::output_hex(ostream &out) const;

2373 9 input_hex 0 4 2750 18 HashVal::input_hex 0 1 1033 270
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_hex
//       Access: Published
//  Description: Inputs the HashVal as a 32-digit hexadecimal number.
////////////////////////////////////////////////////////////////////
37
void HashVal::input_hex(istream &in);

2374 13 output_binary 0 4 2750 22 HashVal::output_binary 0 1 1034 370
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_binary
//       Access: Published
//  Description: Outputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order generated by
//               write_stream().
////////////////////////////////////////////////////////////////////
48
void HashVal::output_binary(ostream &out) const;

2375 12 input_binary 0 4 2750 21 HashVal::input_binary 0 1 1035 366
////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_binary
//       Access: Published
//  Description: Inputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order expected by
//               read_stream().
////////////////////////////////////////////////////////////////////
40
void HashVal::input_binary(istream &in);

2376 6 output 0 4 2750 15 HashVal::output 0 1 1036 215
////////////////////////////////////////////////////////////////////
//     Function: HashVal::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
48
inline void HashVal::output(ostream &out) const;

2377 6 as_dec 0 4 2750 15 HashVal::as_dec 0 1 1037 290
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_dec
//       Access: Published
//  Description: Returns the HashVal as a string with four decimal
//               numbers.
////////////////////////////////////////////////////////////////////
35
string HashVal::as_dec(void) const;

2378 12 set_from_dec 0 4 2750 21 HashVal::set_from_dec 0 1 1038 336
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_dec
//       Access: Published
//  Description: Sets the HashVal from a string with four decimal
//               numbers.  Returns true if valid, false otherwise.
////////////////////////////////////////////////////////////////////
47
bool HashVal::set_from_dec(string const &text);

2379 6 as_hex 0 4 2750 15 HashVal::as_hex 0 1 1039 267
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_hex
//       Access: Published
//  Description: Returns the HashVal as a 32-byte hexadecimal string.
////////////////////////////////////////////////////////////////////
35
string HashVal::as_hex(void) const;

2380 12 set_from_hex 0 4 2750 21 HashVal::set_from_hex 0 1 1040 334
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_hex
//       Access: Published
//  Description: Sets the HashVal from a 32-byte hexademical string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
47
bool HashVal::set_from_hex(string const &text);

2381 6 as_bin 0 4 2750 15 HashVal::as_bin 0 1 1041 262
////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_bin
//       Access: Published
//  Description: Returns the HashVal as a 16-byte binary string.
////////////////////////////////////////////////////////////////////
35
string HashVal::as_bin(void) const;

2382 12 set_from_bin 0 4 2750 21 HashVal::set_from_bin 0 1 1042 329
////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_bin
//       Access: Published
//  Description: Sets the HashVal from a 16-byte binary string.
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
47
bool HashVal::set_from_bin(string const &text);

2383 14 write_datagram 0 4 2750 23 HashVal::write_datagram 0 1 1043 223
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
65
inline void HashVal::write_datagram(Datagram &destination) const;

2384 13 read_datagram 0 4 2750 22 HashVal::read_datagram 0 1 1044 222
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_datagram
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
61
inline void HashVal::read_datagram(DatagramIterator &source);

2385 12 write_stream 0 4 2750 21 HashVal::write_stream 0 1 1045 221
////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
67
inline void HashVal::write_stream(StreamWriter &destination) const;

2386 11 read_stream 0 4 2750 20 HashVal::read_stream 0 1 1046 220
////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_stream
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
55
inline void HashVal::read_stream(StreamReader &source);

2387 9 hash_file 0 4 2750 18 HashVal::hash_file 0 1 1047 500
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_file
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
50
bool HashVal::hash_file(Filename const &filename);

2388 11 hash_stream 0 4 2750 20 HashVal::hash_stream 0 1 1048 502
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_stream
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
43
bool HashVal::hash_stream(istream &stream);

2389 12 hash_ramfile 0 4 2750 21 HashVal::hash_ramfile 0 1 1049 433
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_ramfile
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

2390 11 hash_string 0 4 2750 20 HashVal::hash_string 0 1 1050 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_string
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
53
inline void HashVal::hash_string(string const &data);

2391 11 hash_buffer 0 4 2750 20 HashVal::hash_buffer 0 1 1051 432
////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_buffer
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
////////////////////////////////////////////////////////////////////
58
void HashVal::hash_buffer(char const *buffer, int length);

2392 8 ~HashVal 0 4 2750 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

2393 19 MemoryUsagePointers 0 4 2751 40 MemoryUsagePointers::MemoryUsagePointers 0 1 1052 231
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
47
MemoryUsagePointers::MemoryUsagePointers(void);

2394 20 ~MemoryUsagePointers 0 4 2751 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 230
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Destructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
48
MemoryUsagePointers::~MemoryUsagePointers(void);

2395 16 get_num_pointers 0 4 2751 37 MemoryUsagePointers::get_num_pointers 0 1 1053 279
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_num_pointers
//       Access: Published
//  Description: Returns the number of pointers in the set.
////////////////////////////////////////////////////////////////////
54
int MemoryUsagePointers::get_num_pointers(void) const;

2396 11 get_pointer 0 4 2751 32 MemoryUsagePointers::get_pointer 0 1 1054 267
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set.
////////////////////////////////////////////////////////////////////
62
ReferenceCount *MemoryUsagePointers::get_pointer(int n) const;

2397 17 get_typed_pointer 0 4 2751 38 MemoryUsagePointers::get_typed_pointer 0 1 1055 445
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_typed_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set, typecast to a
//               TypedObject if possible.  If the pointer is not a
//               TypedObject or if the cast cannot be made, returns
//               NULL.
////////////////////////////////////////////////////////////////////
65
TypedObject *MemoryUsagePointers::get_typed_pointer(int n) const;

2398 8 get_type 0 4 2751 29 MemoryUsagePointers::get_type 0 1 1056 305
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type
//       Access: Published
//  Description: Returns the actual type of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
54
TypeHandle MemoryUsagePointers::get_type(int n) const;

2399 13 get_type_name 0 4 2751 34 MemoryUsagePointers::get_type_name 0 1 1057 308
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type_name
//       Access: Published
//  Description: Returns the type name of the nth pointer, if it is
//               known.
////////////////////////////////////////////////////////////////////
55
string MemoryUsagePointers::get_type_name(int n) const;

2400 7 get_age 0 4 2751 28 MemoryUsagePointers::get_age 0 1 1058 459
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_age
//       Access: Published
//  Description: Returns the age of the nth pointer: the number of
//               seconds elapsed between the time it was allocated and
//               the time it was added to this set via a call to
//               MemoryUsage::get_pointers().
////////////////////////////////////////////////////////////////////
49
double MemoryUsagePointers::get_age(int n) const;

2401 18 get_python_pointer 0 4 2751 39 MemoryUsagePointers::get_python_pointer 0 1 1059 0
63
PyObject *MemoryUsagePointers::get_python_pointer(int n) const;

2402 5 clear 0 4 2751 26 MemoryUsagePointers::clear 0 1 1060 254
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::clear
//       Access: Published
//  Description: Empties the set of pointers.
////////////////////////////////////////////////////////////////////
38
void MemoryUsagePointers::clear(void);

2403 6 output 0 4 2751 27 MemoryUsagePointers::output 0 1 1061 227
////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
53
void MemoryUsagePointers::output(ostream &out) const;

2404 10 ISubStream 0 4 2752 22 ISubStream::ISubStream 0 2 1062 1063 440
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
133
inline ISubStream::ISubStream(void);
inline ISubStream::ISubStream(IStreamWrapper *source, ios::streampos start, ios::streampos end);

2405 4 open 0 4 2752 16 ISubStream::open 0 1 1064 697
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               source, with the first character being the character
//               at position "start" within the source, for end -
//               start total characters.  The character at "end"
//               within the source will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the ISubStream will
//               continue until the end of the source stream.
////////////////////////////////////////////////////////////////////
102
inline ISubStream &ISubStream::open(IStreamWrapper *source, ios::streampos start, ios::streampos end);

2406 5 close 0 4 2752 17 ISubStream::close 0 1 1065 309
////////////////////////////////////////////////////////////////////
//     Function: ISubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the source istream.
////////////////////////////////////////////////////////////////////
43
inline ISubStream &ISubStream::close(void);

2407 11 ~ISubStream 0 4 2752 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

2408 10 OSubStream 0 4 2753 22 OSubStream::OSubStream 0 2 1066 1067 440
////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
150
inline OSubStream::OSubStream(void);
inline OSubStream::OSubStream(OStreamWrapper *dest, ios::streampos start, ios::streampos end, bool append = (0));

2409 4 open 0 4 2753 16 OSubStream::open 0 1 1068 689
////////////////////////////////////////////////////////////////////
//     Function: OSubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               dest, with the first character being the character
//               at position "start" within the dest, for end -
//               start total characters.  The character at "end"
//               within the dest will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the OSubStream will
//               continue until the end of the dest stream.
////////////////////////////////////////////////////////////////////
119
inline OSubStream &OSubStream::open(OStreamWrapper *dest, ios::streampos start, ios::streampos end, bool append = (0));

2410 5 close 0 4 2753 17 OSubStream::close 0 1 1069 307
////////////////////////////////////////////////////////////////////
//     Function: OSubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the dest ostream.
////////////////////////////////////////////////////////////////////
43
inline OSubStream &OSubStream::close(void);

2411 11 ~OSubStream 0 4 2753 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

2412 9 SubStream 0 4 2754 20 SubStream::SubStream 0 2 1070 1071 438
////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
147
inline SubStream::SubStream(void);
inline SubStream::SubStream(StreamWrapper *nested, ios::streampos start, ios::streampos end, bool append = (0));

2413 4 open 0 4 2754 15 SubStream::open 0 1 1072 534
////////////////////////////////////////////////////////////////////
//     Function: SubStream::open
//       Access: Public
//  Description: Starts the SubStream reading and writing from the
//               indicated nested stream, within the indicated range.
//               "end" is the first character outside of the range.
//
//               If end is zero, it indicates that the SubStream will
//               continue until the end of the nested stream.
////////////////////////////////////////////////////////////////////
118
inline SubStream &SubStream::open(StreamWrapper *nested, ios::streampos start, ios::streampos end, bool append = (0));

2414 5 close 0 4 2754 16 SubStream::close 0 1 1073 308
////////////////////////////////////////////////////////////////////
//     Function: SubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the nested ostream.
////////////////////////////////////////////////////////////////////
41
inline SubStream &SubStream::close(void);

2415 10 ~SubStream 0 4 2754 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

2416 18 clear_certificates 0 4 2755 34 OpenSSLWrapper::clear_certificates 0 1 1074 464
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::clear_certificates
//       Access: Public
//  Description: Removes all the certificates from the global store,
//               including the compiled-in certificates loaded from
//               ca_bundle_data.c.  You can add new certificates by
//               calling load_certificates().
////////////////////////////////////////////////////////////////////
46
void OpenSSLWrapper::clear_certificates(void);

2417 17 load_certificates 0 4 2755 33 OpenSSLWrapper::load_certificates 0 1 1075 793
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates
//       Access: Public
//  Description: Reads the PEM-formatted certificate(s) (delimited by
//               -----BEGIN CERTIFICATE----- and -----END
//               CERTIFICATE-----) from the indicated file and adds
//               them to the global store object, retrieved via
//               get_x509_store().
//
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

2418 30 load_certificates_from_pem_ram 0 4 2755 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 1076 1077 1422
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////
166
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(string const &data);

2419 30 load_certificates_from_der_ram 0 4 2755 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 1078 1079 1422
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
////////////////////////////////////////////////////////////////////
166
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(string const &data);

2420 14 get_x509_store 0 4 2755 30 OpenSSLWrapper::get_x509_store 0 1 1080 698
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_x509_store
//       Access: Public
//  Description: Returns the global X509_STORE object.
//
//               It has to be a global object, because OpenSSL seems
//               to store some global pointers associated with this
//               object whether you want it to or not, and keeping
//               independent copies of a local X509_STORE object
//               doesn't seem to work that well.  So, we have one
//               store that keeps all certificates the application
//               might need.
////////////////////////////////////////////////////////////////////
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

2421 17 notify_ssl_errors 0 4 2755 33 OpenSSLWrapper::notify_ssl_errors 0 1 1081 572
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_ssl_errors
//       Access: Public
//  Description: A convenience function that is itself a wrapper
//               around the OpenSSL convenience function to output the
//               recent OpenSSL errors.  This function sends the error
//               string to express_cat.warning().  If
//               REPORT_OPENSSL_ERRORS is not defined, the function
//               does nothing.
////////////////////////////////////////////////////////////////////
45
void OpenSSLWrapper::notify_ssl_errors(void);

2422 23 notify_debug_ssl_errors 0 4 2755 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 1082 326
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_debug_ssl_errors
//       Access: Public
//  Description: As notify_ssl_errors(), but sends the output to debug
//               instead of warning.
////////////////////////////////////////////////////////////////////
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

2423 14 get_global_ptr 0 4 2755 30 OpenSSLWrapper::get_global_ptr 0 1 1083 235
////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_global_ptr
//       Access: Public, Static
//  Description: 
////////////////////////////////////////////////////////////////////
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

2424 9 Multifile 0 4 2756 20 Multifile::Multifile 0 1 1084 477
////////////////////////////////////////////////////////////////////
//     Function: Multifile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::Copy Constructor
//       Access: Private
//  Description: Don't try to copy Multifiles.
////////////////////////////////////////////////////////////////////
27
Multifile::Multifile(void);

2425 9 open_read 0 4 2756 20 Multifile::open_read 0 2 1085 1086 1282
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
206
bool Multifile::open_read(Filename const &multifile_name, streampos const &offset = (0));
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = (0), streampos const &offset = (0));

2426 10 open_write 0 4 2756 21 Multifile::open_write 0 2 1087 1088 1366
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Published
//  Description: Opens the named Multifile on disk for writing.  If
//               there already exists a file by that name, it is
//               truncated.  The Multifile is then prepared for
//               accepting a brand new set of subfiles, which will be
//               written to the indicated filename.  Individual
//               subfiles may not be extracted or read.
//
//               Also see the version of open_write() which accepts an
//               ostream.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
139
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(ostream *multifile_stream, bool owns_pointer = (0));

2427 15 open_read_write 0 4 2756 26 Multifile::open_read_write 0 2 1089 1090 1364
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Published
//  Description: Opens the named Multifile on disk for reading and
//               writing.  If there already exists a file by that
//               name, its index is read.  Subfiles may be added or
//               removed, and the resulting changes will be written to
//               the named file.
//
//               Also see the version of open_read_write() which
//               accepts an iostream.  Returns true on success, false
//               on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
////////////////////////////////////////////////////////////////////
150
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(iostream *multifile_stream, bool owns_pointer = (0));

2428 5 close 0 4 2756 16 Multifile::close 0 1 1091 402
////////////////////////////////////////////////////////////////////
//     Function: Multifile::close
//       Access: Published
//  Description: Closes the Multifile if it is open.  All changes are
//               flushed to disk, and the file becomes invalid for
//               further operations until the next call to open().
////////////////////////////////////////////////////////////////////
28
void Multifile::close(void);

2429 18 get_multifile_name 0 4 2756 29 Multifile::get_multifile_name 0 1 1092 304
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_multifile_name
//       Access: Published
//  Description: Returns the filename of the Multifile, if it is
//               available.
////////////////////////////////////////////////////////////////////
65
inline Filename const &Multifile::get_multifile_name(void) const;

2430 18 set_multifile_name 0 4 2756 29 Multifile::set_multifile_name 0 1 1093 471
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_multifile_name
//       Access: Published
//  Description: Replaces the filename of the Multifile.  This is
//               primarily used for documentation purposes only;
//               changing this name does not open the indicated file.
//               See open_read() or open_write() for that.
////////////////////////////////////////////////////////////////////
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

2431 13 is_read_valid 0 4 2756 24 Multifile::is_read_valid 0 1 1094 398
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_read_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               read mode and there have been no errors, and
//               individual Subfile contents may be extracted.
////////////////////////////////////////////////////////////////////
49
inline bool Multifile::is_read_valid(void) const;

2432 14 is_write_valid 0 4 2756 25 Multifile::is_write_valid 0 1 1095 407
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_write_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               write mode and there have been no errors, and
//               Subfiles may be added or removed from the Multifile.
////////////////////////////////////////////////////////////////////
50
inline bool Multifile::is_write_valid(void) const;

2433 12 needs_repack 0 4 2756 23 Multifile::needs_repack 0 1 1096 345
////////////////////////////////////////////////////////////////////
//     Function: Multifile::needs_repack
//       Access: Published
//  Description: Returns true if the Multifile index is suboptimal and
//               should be repacked.  Call repack() to achieve this.
////////////////////////////////////////////////////////////////////
48
inline bool Multifile::needs_repack(void) const;

2434 13 get_timestamp 0 4 2756 24 Multifile::get_timestamp 0 1 1097 588
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_timestamp
//       Access: Published
//  Description: Returns the modification timestamp of the overall
//               Multifile.  This indicates the most recent date at
//               which subfiles were added or removed from the
//               Multifile.  Note that it is logically possible for an
//               individual subfile to have a more recent timestamp
//               than the overall timestamp.
////////////////////////////////////////////////////////////////////
51
inline time_t Multifile::get_timestamp(void) const;

2435 20 set_record_timestamp 0 4 2756 31 Multifile::set_record_timestamp 0 1 1098 900
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_record_timestamp
//       Access: Published
//  Description: Sets the flag indicating whether timestamps should be
//               recorded within the Multifile or not.  The default is
//               true, indicating the Multifile will record timestamps
//               for the overall file and also for each subfile.  
//
//               If this is false, the Multifile will not record
//               timestamps internally.  In this case, the return
//               value from get_timestamp() or get_subfile_timestamp()
//               will be estimations.
//
//               You may want to set this false to minimize the
//               bitwise difference between independently-generated
//               Multifiles.
////////////////////////////////////////////////////////////////////
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

2436 20 get_record_timestamp 0 4 2756 31 Multifile::get_record_timestamp 0 1 1099 388
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_record_timestamp
//       Access: Published
//  Description: Returns the flag indicating whether timestamps
//               should be recorded within the Multifile or not.  See
//               set_record_timestamp().
////////////////////////////////////////////////////////////////////
56
inline bool Multifile::get_record_timestamp(void) const;

2437 16 set_scale_factor 0 4 2756 27 Multifile::set_scale_factor 0 1 1100 1220
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_scale_factor
//       Access: Published
//  Description: Changes the internal scale factor for this Multifile.
//
//               This is normally 1, but it may be set to any
//               arbitrary value (greater than zero) to support
//               Multifile archives that exceed 4GB, if necessary.
//               (Individual subfiles may still not exceed 4GB.)
//
//               All addresses within the file are rounded up to the
//               next multiple of _scale_factor, and zeros are written
//               to the file to fill the resulting gaps.  Then the
//               address is divided by _scale_factor and written out
//               as a 32-bit integer.  Thus, setting a scale factor of
//               2 supports up to 8GB files, 3 supports 12GB files,
//               etc.
//
//               Calling this function on an already-existing
//               Multifile will have no immediate effect until a
//               future call to repack() or close() (or until the
//               Multifile is destructed).
////////////////////////////////////////////////////////////////////
54
void Multifile::set_scale_factor(size_t scale_factor);

2438 16 get_scale_factor 0 4 2756 27 Multifile::get_scale_factor 0 1 1101 321
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_scale_factor
//       Access: Published
//  Description: Returns the internal scale factor for this Multifile.
//               See set_scale_factor().
////////////////////////////////////////////////////////////////////
54
inline size_t Multifile::get_scale_factor(void) const;

2439 19 set_encryption_flag 0 4 2756 30 Multifile::set_encryption_flag 0 1 1102 818
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_flag
//       Access: Published
//  Description: Sets the flag indicating whether subsequently-added
//               subfiles should be encrypted before writing them to
//               the multifile.  If true, subfiles will be encrypted;
//               if false (the default), they will be written without
//               encryption.
//
//               When true, subfiles will be encrypted with the
//               password specified by set_encryption_password().  It
//               is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.
////////////////////////////////////////////////////////////////////
54
inline void Multifile::set_encryption_flag(bool flag);

2440 19 get_encryption_flag 0 4 2756 30 Multifile::get_encryption_flag 0 1 1103 430
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_flag
//       Access: Published
//  Description: Returns the flag indicating whether
//               subsequently-added subfiles should be encrypted
//               before writing them to the multifile.  See
//               set_encryption_flag().
////////////////////////////////////////////////////////////////////
55
inline bool Multifile::get_encryption_flag(void) const;

2441 23 set_encryption_password 0 4 2756 34 Multifile::set_encryption_password 0 1 1104 696
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_password
//       Access: Published
//  Description: Specifies the password that will be used to encrypt
//               subfiles subsequently added to the multifile, if the
//               encryption flag is also set true (see
//               set_encryption_flag()).
//
//               It is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.  Changing this value may cause an
//               implicit call to flush().
////////////////////////////////////////////////////////////////////
82
inline void Multifile::set_encryption_password(string const &encryption_password);

2442 23 get_encryption_password 0 4 2756 34 Multifile::get_encryption_password 0 1 1105 395
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_password
//       Access: Published
//  Description: Returns the password that will be used to encrypt
//               subfiles subsequently added to the multifile.  See
//               set_encryption_password().
////////////////////////////////////////////////////////////////////
68
inline string const &Multifile::get_encryption_password(void) const;

2443 24 set_encryption_algorithm 0 4 2756 35 Multifile::set_encryption_algorithm 0 1 1106 1073
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_algorithm
//       Access: Public
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to add_subfile().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but flush() will fail
//               and the file will be invalid.
//
//               It is possible to apply a different encryption
//               algorithm to different files, and unlike the
//               password, this does not interfere with mounting the
//               multifile via VFS.  Changing this value may cause an
//               implicit call to flush().
////////////////////////////////////////////////////////////////////
84
inline void Multifile::set_encryption_algorithm(string const &encryption_algorithm);

2444 24 get_encryption_algorithm 0 4 2756 35 Multifile::get_encryption_algorithm 0 1 1107 331
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_algorithm
//       Access: Public
//  Description: Returns the encryption algorithm that was specified
//               by set_encryption_algorithm().
////////////////////////////////////////////////////////////////////
69
inline string const &Multifile::get_encryption_algorithm(void) const;

2445 25 set_encryption_key_length 0 4 2756 36 Multifile::set_encryption_key_length 0 1 1108 998
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_key_length
//       Access: Public
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               add_subfile().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but flush() will fail and the file will be invalid.
//
//               It is possible to apply a different key length to
//               different files, and unlike the password, this does
//               not interfere with mounting the multifile via VFS.
//               Changing this value may cause an implicit call to
//               flush().
////////////////////////////////////////////////////////////////////
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

2446 25 get_encryption_key_length 0 4 2756 36 Multifile::get_encryption_key_length 0 1 1109 344
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_key_length
//       Access: Public
//  Description: Returns the encryption key length, in bits, that was
//               specified by set_encryption_key_length().
////////////////////////////////////////////////////////////////////
60
inline int Multifile::get_encryption_key_length(void) const;

2447 30 set_encryption_iteration_count 0 4 2756 41 Multifile::set_encryption_iteration_count 0 1 1110 1174
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_iteration_count
//       Access: Public
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to add_subfile().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               multifile-encryption-iteration-count config variable.
//
//               It is possible to apply a different iteration count
//               to different files, and unlike the password, this
//               does not interfere with mounting the multifile via
//               VFS.  Changing this value causes an implicit call to
//               flush().
////////////////////////////////////////////////////////////////////
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

2448 30 get_encryption_iteration_count 0 4 2756 41 Multifile::get_encryption_iteration_count 0 1 1111 328
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_iteration_count
//       Access: Public
//  Description: Returns the value that was specified by
//               set_encryption_iteration_count().
////////////////////////////////////////////////////////////////////
65
inline int Multifile::get_encryption_iteration_count(void) const;

2449 11 add_subfile 0 4 2756 22 Multifile::add_subfile 0 2 1112 1113 2178
////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Published
//  Description: Adds a file on disk as a subfile to the Multifile.
//               The file named by filename will be read and added to
//               the Multifile at the next call to flush().  If there
//               already exists a subfile with the indicated name, it
//               is replaced without examining its contents (but see
//               also update_subfile).
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Public
//  Description: Adds a file from a stream as a subfile to the Multifile.
//               The indicated istream will be read and its contents
//               added to the Multifile at the next call to flush().
//               The file will be added as a binary subfile.
//
//               Note that the istream must remain untouched and
//               unused by any other code until flush() is called.  At
//               that time, the Multifile will read the entire
//               contents of the istream from the current file
//               position to the end of the file.  Subsequently, the
//               Multifile will *not* close or delete the istream.  It
//               is the caller's responsibility to ensure that the
//               istream pointer does not destruct during the lifetime
//               of the Multifile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
////////////////////////////////////////////////////////////////////
212
string Multifile::add_subfile(string const &subfile_name, Filename const &filename, int compression_level);
string Multifile::add_subfile(string const &subfile_name, istream *subfile_data, int compression_level);

2450 14 update_subfile 0 4 2756 25 Multifile::update_subfile 0 1 1114 775
////////////////////////////////////////////////////////////////////
//     Function: Multifile::update_subfile
//       Access: Published
//  Description: Adds a file on disk to the subfile.  If a subfile
//               already exists with the same name, its contents are
//               compared byte-for-byte to the disk file, and it is
//               replaced only if it is different; otherwise, the
//               multifile is left unchanged.
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
////////////////////////////////////////////////////////////////////
110
string Multifile::update_subfile(string const &subfile_name, Filename const &filename, int compression_level);

2451 13 add_signature 0 4 2756 24 Multifile::add_signature 0 2 1115 1116 5970
////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The chain filename may be empty if the certificate
//               does not require an authenticating certificate chain
//               (e.g. because it is self-signed).
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//
//               This flavor of add_signature() reads the certificate
//               and private key from a PEM-formatted file, for
//               instance as generated by the openssl command.  If the
//               private key file is password-encrypted, the third
//               parameter will be used as the password to decrypt it.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               This flavor of add_signature() reads the certificate,
//               private key, and certificate chain from the same
//               PEM-formatted file.  It takes the first private key
//               found as the intended key, and then uses the first
//               certificate found that matches that key as the
//               signing certificate.  Any other certificates in the
//               file are taken to be part of the chain.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               If chain is non-NULL, it represents the certificate
//               chain that validates the certificate.
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The signature certificate is the first certificate on
//               the CertChain object.  Any remaining certificates are
//               support certificates to authenticate the first one.
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
224
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, string const &password = (""));
bool Multifile::add_signature(Filename const &composite, string const &password = (""));

2452 18 get_num_signatures 0 4 2756 29 Multifile::get_num_signatures 0 1 1117 921
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_signatures
//       Access: Published
//  Description: Returns the number of matching signatures found on
//               the Multifile.  These signatures may be iterated via
//               get_signature() and related methods.
//
//               A signature on this list is guaranteed to match the
//               Multifile contents, proving that the Multifile has
//               been unmodified since the signature was applied.
//               However, this does not guarantee that the certificate
//               itself is actually from who it says it is from; only
//               that it matches the Multifile contents.  See
//               validate_signature_certificate() to authenticate a
//               particular certificate.
////////////////////////////////////////////////////////////////////
46
int Multifile::get_num_signatures(void) const;

2453 26 get_signature_subject_name 0 4 2756 37 Multifile::get_signature_subject_name 0 1 1118 669
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_subject_name
//       Access: Published
//  Description: Returns the "subject name" for the nth signature found
//               on the Multifile.  This is a string formatted
//               according to RFC2253 that should more-or-less
//               identify a particular certificate; when paired with
//               the public key (see get_signature_public_key()), it
//               can uniquely identify a certificate.  See the
//               comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
58
string Multifile::get_signature_subject_name(int n) const;

2454 27 get_signature_friendly_name 0 4 2756 38 Multifile::get_signature_friendly_name 0 1 1119 127
//               See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
59
string Multifile::get_signature_friendly_name(int n) const;

2455 24 get_signature_public_key 0 4 2756 35 Multifile::get_signature_public_key 0 1 1120 691
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_public_key
//       Access: Published
//  Description: Returns the public key used for the nth signature
//               found on the Multifile.  This is encoded in DER form
//               and returned as a string of hex digits.
//
//               This can be used, in conjunction with the subject
//               name (see get_signature_subject_name()), to uniquely
//               identify a particular certificate and its subsequent
//               reissues.  See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
56
string Multifile::get_signature_public_key(int n) const;

2456 27 print_signature_certificate 0 4 2756 38 Multifile::print_signature_certificate 0 1 1121 415
////////////////////////////////////////////////////////////////////
//     Function: Multifile::print_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               user-readable verbose form, to the indicated stream.
//               See the comments in get_num_signatures().
////////////////////////////////////////////////////////////////////
71
void Multifile::print_signature_certificate(int n, ostream &out) const;

2457 27 write_signature_certificate 0 4 2756 38 Multifile::write_signature_certificate 0 1 1122 398
////////////////////////////////////////////////////////////////////
//     Function: Multifile::write_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               PEM form, to the indicated stream.  See the comments
//               in get_num_signatures().
////////////////////////////////////////////////////////////////////
71
void Multifile::write_signature_certificate(int n, ostream &out) const;

2458 30 validate_signature_certificate 0 4 2756 41 Multifile::validate_signature_certificate 0 1 1123 595
////////////////////////////////////////////////////////////////////
//     Function: Multifile::validate_signature_certificate
//       Access: Published
//  Description: Checks that the certificate used for the nth
//               signature is a valid, authorized certificate with
//               some known certificate authority.  Returns 0 if it
//               is valid, -1 if there is some error, or the
//               corresponding OpenSSL error code if it is invalid,
//               out-of-date, or self-signed.
////////////////////////////////////////////////////////////////////
59
int Multifile::validate_signature_certificate(int n) const;

2459 5 flush 0 4 2756 16 Multifile::flush 0 1 1124 1090
////////////////////////////////////////////////////////////////////
//     Function: Multifile::flush
//       Access: Published
//  Description: Writes all contents of the Multifile to disk.  Until
//               flush() is called, add_subfile() and remove_subfile()
//               do not actually do anything to disk.  At this point,
//               all of the recently-added subfiles are read and their
//               contents are added to the end of the Multifile, and
//               the recently-removed subfiles are marked gone from
//               the Multifile.
//
//               This may result in a suboptimal index.  To guarantee
//               that the index is written at the beginning of the
//               file, call repack() instead of flush().
//
//               It is not necessary to call flush() explicitly unless
//               you are concerned about reading the recently-added
//               subfiles immediately.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
28
bool Multifile::flush(void);

2460 6 repack 0 4 2756 17 Multifile::repack 0 1 1125 959
////////////////////////////////////////////////////////////////////
//     Function: Multifile::repack
//       Access: Published
//  Description: Forces a complete rewrite of the Multifile and all of
//               its contents, so that its index will appear at the
//               beginning of the file with all of the subfiles listed
//               in alphabetical order.  This is considered optimal
//               for reading, and is the standard configuration; but
//               it is not essential to do this.
//
//               It is only valid to call this if the Multifile was
//               opened using open_read_write() and an explicit
//               filename, rather than an iostream.  Also, we must
//               have write permission to the directory containing the
//               Multifile.
//
//               Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
29
bool Multifile::repack(void);

2461 16 get_num_subfiles 0 4 2756 27 Multifile::get_num_subfiles 0 1 1126 412
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_subfiles
//       Access: Published
//  Description: Returns the number of subfiles within the Multifile.
//               The subfiles may be accessed in alphabetical order by
//               iterating through [0 .. get_num_subfiles()).
////////////////////////////////////////////////////////////////////
44
int Multifile::get_num_subfiles(void) const;

2462 12 find_subfile 0 4 2756 23 Multifile::find_subfile 0 1 1127 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::find_subfile
//       Access: Published
//  Description: Returns the index of the subfile with the indicated
//               name, or -1 if the named subfile is not within the
//               Multifile.
////////////////////////////////////////////////////////////////////
62
int Multifile::find_subfile(string const &subfile_name) const;

2463 13 has_directory 0 4 2756 24 Multifile::has_directory 0 1 1128 461
////////////////////////////////////////////////////////////////////
//     Function: Multifile::has_directory
//       Access: Published
//  Description: Returns true if the indicated subfile name is the
//               directory prefix to one or more files within the
//               Multifile.  That is, the Multifile contains at least
//               one file named "subfile_name/...".
////////////////////////////////////////////////////////////////////
64
bool Multifile::has_directory(string const &subfile_name) const;

2464 14 scan_directory 0 4 2756 25 Multifile::scan_directory 0 1 1129 755
////////////////////////////////////////////////////////////////////
//     Function: Multifile::scan_directory
//       Access: Published
//  Description: Considers subfile_name to be the name of a
//               subdirectory within the Multifile, but not a file
//               itself; fills the given vector up with the sorted list
//               of subdirectories or files within the named
//               directory.
//
//               Note that directories do not exist explicitly within
//               a Multifile; this just checks for the existence of
//               files with the given initial prefix.
//
//               Returns true if successful, false otherwise.
////////////////////////////////////////////////////////////////////
90
bool Multifile::scan_directory(vector_string &contents, string const &subfile_name) const;

2465 14 remove_subfile 0 4 2756 25 Multifile::remove_subfile 0 2 1130 1131 1596
////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the named subfile from the Multifile, if it
//               exists; returns true if successfully removed, or
//               false if it did not exist in the first place.  The
//               file will not actually be removed from the disk until
//               the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the nth subfile from the Multifile.  This
//               will cause all subsequent index numbers to decrease
//               by one.  The file will not actually be removed from
//               the disk until the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
////////////////////////////////////////////////////////////////////
109
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(string const &subfile_name);

2466 16 get_subfile_name 0 4 2756 27 Multifile::get_subfile_name 0 1 1132 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_name
//       Access: Published
//  Description: Returns the name of the nth subfile.
////////////////////////////////////////////////////////////////////
59
string const &Multifile::get_subfile_name(int index) const;

2467 18 get_subfile_length 0 4 2756 29 Multifile::get_subfile_length 0 1 1133 433
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_length
//       Access: Published
//  Description: Returns the uncompressed data length of the nth
//               subfile.  This might return 0 if the subfile has
//               recently been added and flush() has not yet been
//               called.
////////////////////////////////////////////////////////////////////
54
size_t Multifile::get_subfile_length(int index) const;

2468 21 get_subfile_timestamp 0 4 2756 32 Multifile::get_subfile_timestamp 0 1 1134 567
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_timestamp
//       Access: Published
//  Description: Returns the modification time of the nth
//               subfile.  If this is called on an older .mf file,
//               which did not store individual timestamps in the file
//               (or if get_record_timestamp() is false), this will
//               return the modification time of the overall
//               multifile.
////////////////////////////////////////////////////////////////////
57
time_t Multifile::get_subfile_timestamp(int index) const;

2469 21 is_subfile_compressed 0 4 2756 32 Multifile::is_subfile_compressed 0 1 1135 372
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_compressed
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               compressed when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
55
bool Multifile::is_subfile_compressed(int index) const;

2470 20 is_subfile_encrypted 0 4 2756 31 Multifile::is_subfile_encrypted 0 1 1136 370
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_encrypted
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               encrypted when stored within the archive, false
//               otherwise.
////////////////////////////////////////////////////////////////////
54
bool Multifile::is_subfile_encrypted(int index) const;

2471 15 is_subfile_text 0 4 2756 26 Multifile::is_subfile_text 0 1 1137 647
////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_text
//       Access: Published
//  Description: Returns true if the indicated subfile represents text
//               data, or false if it represents binary data.  If the
//               file is text data, it may have been processed by
//               end-of-line conversion when it was added.  (But the
//               actual bits in the multifile will represent the
//               standard Unix end-of-line convention, e.g. \n instead
//               of \r\n.)
////////////////////////////////////////////////////////////////////
49
bool Multifile::is_subfile_text(int index) const;

2472 13 get_index_end 0 4 2756 24 Multifile::get_index_end 0 1 1138 688
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_index_end
//       Access: Published
//  Description: Returns the first byte that is guaranteed to follow
//               any index byte already written to disk in the
//               Multifile.
//
//               This number is largely meaningless in many cases, but
//               if needs_repack() is false, and the file is flushed,
//               this will indicate the number of bytes in the header
//               + index.  Everything at this byte position and later
//               will be actual data.
////////////////////////////////////////////////////////////////////
47
streampos Multifile::get_index_end(void) const;

2473 26 get_subfile_internal_start 0 4 2756 37 Multifile::get_subfile_internal_start 0 1 1139 653
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_start
//       Access: Published
//  Description: Returns the starting byte position within the
//               Multifile at which the indicated subfile begins.
//               This may be used, with get_subfile_internal_length(),
//               for low-level access to the subfile, but usually it
//               is better to use open_read_subfile() instead (which
//               automatically decrypts and/or uncompresses the
//               subfile data).
////////////////////////////////////////////////////////////////////
65
streampos Multifile::get_subfile_internal_start(int index) const;

2474 27 get_subfile_internal_length 0 4 2756 38 Multifile::get_subfile_internal_length 0 1 1140 639
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_length
//       Access: Published
//  Description: Returns the number of bytes the indicated subfile
//               consumes within the archive.  For compressed
//               subfiles, this will generally be smaller than
//               get_subfile_length(); for encrypted (but
//               noncompressed) subfiles, it may be slightly
//               different, for noncompressed and nonencrypted
//               subfiles, it will be equal.
////////////////////////////////////////////////////////////////////
63
size_t Multifile::get_subfile_internal_length(int index) const;

2475 12 read_subfile 0 4 2756 23 Multifile::read_subfile 0 1 1141 925
////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Published
//  Description: Returns a string that contains the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Public
//  Description: Fills a string with the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Public
//  Description: Fills a pvector with the entire contents of
//               the indicated subfile.
////////////////////////////////////////////////////////////////////
49
inline string Multifile::read_subfile(int index);

2476 17 open_read_subfile 0 4 2756 28 Multifile::open_read_subfile 0 1 1142 1636
////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Published
//  Description: Returns an istream that may be used to read the
//               indicated subfile.  You may seek() within this
//               istream to your heart's content; even though it will
//               be a reference to the already-opened pfstream of the
//               Multifile itself, byte 0 appears to be the beginning
//               of the subfile and EOF appears to be the end of the
//               subfile.
//
//               The returned istream will have been allocated via
//               new; you should pass the pointer to
//               close_read_subfile() when you are finished with it to
//               delete it and release its resources.
//
//               Any future calls to repack() or close() (or the
//               Multifile destructor) will invalidate all currently
//               open subfile pointers.
//
//               The return value will be NULL if the stream cannot be
//               opened for some reason.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Private
//  Description: This variant of open_read_subfile() is used
//               internally only, and accepts a pointer to the
//               internal Subfile object, which is assumed to be valid
//               and written to the multifile.
////////////////////////////////////////////////////////////////////
49
istream *Multifile::open_read_subfile(int index);

2477 18 close_read_subfile 0 4 2756 29 Multifile::close_read_subfile 0 1 1143 531
////////////////////////////////////////////////////////////////////
//     Function: Multifile::close_read_subfile
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_subfile().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
59
static void Multifile::close_read_subfile(istream *stream);

2478 15 extract_subfile 0 4 2756 26 Multifile::extract_subfile 0 1 1144 300
////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile
//       Access: Published
//  Description: Extracts the nth subfile into a file with the given
//               name.
////////////////////////////////////////////////////////////////////
69
bool Multifile::extract_subfile(int index, Filename const &filename);

2479 18 extract_subfile_to 0 4 2756 29 Multifile::extract_subfile_to 0 1 1145 276
////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile_to
//       Access: Public
//  Description: Extracts the nth subfile to the indicated ostream.
////////////////////////////////////////////////////////////////////
60
bool Multifile::extract_subfile_to(int index, ostream &out);

2480 15 compare_subfile 0 4 2756 26 Multifile::compare_subfile 0 1 1146 858
////////////////////////////////////////////////////////////////////
//     Function: Multifile::compare_subfile
//       Access: Published
//  Description: Performs a byte-for-byte comparison of the indicated
//               file on disk with the nth subfile.  Returns true if
//               the files are equivalent, or false if they are
//               different (or the file is missing).
//
//               If Filename::set_binary() or set_text() has already
//               been called, it specifies the nature of the source
//               file.  If this is different from the text flag of the
//               subfile, the comparison will always return false.
//               If this has not been specified, it will be set from
//               the text flag of the subfile.
////////////////////////////////////////////////////////////////////
69
bool Multifile::compare_subfile(int index, Filename const &filename);

2481 6 output 0 4 2756 17 Multifile::output 0 1 1147 217
////////////////////////////////////////////////////////////////////
//     Function: Multifile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
void Multifile::output(ostream &out) const;

2482 2 ls 0 4 2756 13 Multifile::ls 0 1 1148 263
////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
////////////////////////////////////////////////////////////////////
50
void Multifile::ls(ostream &out = (::cout)) const;

2483 16 get_magic_number 0 4 2756 27 Multifile::get_magic_number 0 1 1149 346
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_magic_number
//       Access: Published, Static
//  Description: Returns a string with the first n bytes written to a
//               Multifile, to identify it as a Multifile.
////////////////////////////////////////////////////////////////////
55
static inline string Multifile::get_magic_number(void);

2484 17 set_header_prefix 0 4 2756 28 Multifile::set_header_prefix 0 1 1150 1041
////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_header_prefix
//       Access: Published
//  Description: Sets the string which is written to the Multifile
//               before the Multifile header.  This string must begin
//               with a hash mark and end with a newline character;
//               and if it includes embedded newline characters, each
//               one must be followed by a hash mark.  If these
//               conditions are not initially true, the string will be
//               modified as necessary to make it so.
//
//               This is primarily useful as a simple hack to allow
//               p3d applications to be run directly from the command
//               line on Unix-like systems.
//
//               The return value is true if successful, or false on
//               failure (for instance, because the header prefix
//               violates the above rules).
////////////////////////////////////////////////////////////////////
63
void Multifile::set_header_prefix(string const &header_prefix);

2485 17 get_header_prefix 0 4 2756 28 Multifile::get_header_prefix 0 1 1151 345
////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_header_prefix
//       Access: Published
//  Description: Returns the string that preceded the Multifile header
//               on the file, if any.  See set_header_prefix().
////////////////////////////////////////////////////////////////////
62
inline string const &Multifile::get_header_prefix(void) const;

2486 7 Namable 0 4 2757 16 Namable::Namable 0 2 1152 1153 439
////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
105
inline Namable::Namable(string const &initial_name = (""));
inline Namable::Namable(Namable const &copy);

2487 10 operator = 0 4 2757 19 Namable::operator = 0 1 1154 229
////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Assignment Operator
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
58
inline Namable &Namable::operator =(Namable const &other);

2488 8 set_name 0 4 2757 17 Namable::set_name 0 1 1155 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::set_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
50
inline void Namable::set_name(string const &name);

2489 10 clear_name 0 4 2757 19 Namable::clear_name 0 1 1156 251
////////////////////////////////////////////////////////////////////
//     Function: Namable::clear_name
//       Access: Public
//  Description: Resets the Namable's name to empty.
////////////////////////////////////////////////////////////////////
38
inline void Namable::clear_name(void);

2490 8 has_name 0 4 2757 17 Namable::has_name 0 1 1157 311
////////////////////////////////////////////////////////////////////
//     Function: Namable::has_name
//       Access: Public
//  Description: Returns true if the Namable has a nonempty name set,
//               false if the name is empty.
////////////////////////////////////////////////////////////////////
42
inline bool Namable::has_name(void) const;

2491 8 get_name 0 4 2757 17 Namable::get_name 0 1 1158 213
////////////////////////////////////////////////////////////////////
//     Function: Namable::get_name
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
51
inline string const &Namable::get_name(void) const;

2492 6 output 0 4 2757 15 Namable::output 0 1 1159 483
// In the absence of any definition to the contrary, outputting a
// Namable will write out its name.

////////////////////////////////////////////////////////////////////
//     Function: Namable::output
//       Access: Public
//  Description: Outputs the Namable.  This function simply writes the
//               name to the output stream; most Namable derivatives
//               will probably redefine this.
////////////////////////////////////////////////////////////////////
48
inline void Namable::output(ostream &out) const;

2493 14 get_class_type 0 4 2757 23 Namable::get_class_type 0 1 1160 0
48
static TypeHandle Namable::get_class_type(void);

2494 8 ~Namable 0 4 2757 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

2495 11 SubfileInfo 0 4 2758 24 SubfileInfo::SubfileInfo 0 4 1161 1162 1163 1164 915
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Default Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Copy Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
283
inline SubfileInfo::SubfileInfo(void);
inline SubfileInfo::SubfileInfo(FileReference const *file, streampos start, streamsize size);
inline SubfileInfo::SubfileInfo(Filename const &filename, streampos start, streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

2496 10 operator = 0 4 2758 23 SubfileInfo::operator = 0 1 1165 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

2497 8 is_empty 0 4 2758 21 SubfileInfo::is_empty 0 1 1166 322
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::is_empty
//       Access: Published
//  Description: Returns true if this SubfileInfo doesn't define any
//               file, false if it has real data.
////////////////////////////////////////////////////////////////////
46
inline bool SubfileInfo::is_empty(void) const;

2498 8 get_file 0 4 2758 21 SubfileInfo::get_file 0 1 1167 273
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_file
//       Access: Published
//  Description: Returns the FileReference that represents this file.
////////////////////////////////////////////////////////////////////
62
inline FileReference const *SubfileInfo::get_file(void) const;

2499 12 get_filename 0 4 2758 25 SubfileInfo::get_filename 0 1 1168 252
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_filename
//       Access: Published
//  Description: A shortcut to the filename.
////////////////////////////////////////////////////////////////////
61
inline Filename const &SubfileInfo::get_filename(void) const;

2500 9 get_start 0 4 2758 22 SubfileInfo::get_start 0 1 1169 305
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_start
//       Access: Published
//  Description: Returns the offset within the file at which this file
//               data begins.
////////////////////////////////////////////////////////////////////
52
inline streampos SubfileInfo::get_start(void) const;

2501 8 get_size 0 4 2758 21 SubfileInfo::get_size 0 1 1170 339
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_size
//       Access: Published
//  Description: Returns the number of consecutive bytes, beginning at
//               get_start(), that correspond to this file data.
////////////////////////////////////////////////////////////////////
52
inline streamsize SubfileInfo::get_size(void) const;

2502 6 output 0 4 2758 19 SubfileInfo::output 0 1 1171 219
////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void SubfileInfo::output(ostream &out) const;

2503 12 ~SubfileInfo 0 4 2758 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

2504 15 get_file_system 0 6 2759 28 VirtualFile::get_file_system 0 1 1172 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

2505 12 get_filename 0 6 2759 25 VirtualFile::get_filename 0 1 1173 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

2506 21 get_original_filename 0 4 2759 34 VirtualFile::get_original_filename 0 1 1174 418
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_original_filename
//       Access: Published
//  Description: Returns the original filename as it was used to
//               locate this VirtualFile.  This is usually, but not
//               always, the same string returned by get_filename().
////////////////////////////////////////////////////////////////////
70
inline Filename const &VirtualFile::get_original_filename(void) const;

2507 8 has_file 0 6 2759 21 VirtualFile::has_file 0 1 1175 280
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::has_file
//       Access: Published, Virtual
//  Description: Returns true if this file exists, false otherwise.
////////////////////////////////////////////////////////////////////
47
virtual bool VirtualFile::has_file(void) const;

2508 12 is_directory 0 6 2759 25 VirtualFile::is_directory 0 1 1176 354
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_directory
//       Access: Published, Virtual
//  Description: Returns true if this file represents a directory (and
//               scan_directory() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
51
virtual bool VirtualFile::is_directory(void) const;

2509 15 is_regular_file 0 6 2759 28 VirtualFile::is_regular_file 0 1 1177 355
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_regular_file
//       Access: Published, Virtual
//  Description: Returns true if this file represents a regular file
//               (and read_file() may be called), false otherwise.
////////////////////////////////////////////////////////////////////
54
virtual bool VirtualFile::is_regular_file(void) const;

2510 11 is_writable 0 6 2759 24 VirtualFile::is_writable 0 1 1178 406
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_writable
//       Access: Published, Virtual
//  Description: Returns true if this file may be written to, which
//               implies write_file() may be called (unless it is a
//               directory instead of a regular file).
////////////////////////////////////////////////////////////////////
50
virtual bool VirtualFile::is_writable(void) const;

2511 11 delete_file 0 6 2759 24 VirtualFile::delete_file 0 1 1179 454
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::delete_file
//       Access: Public
//  Description: Attempts to delete this file or directory.  This can
//               remove a single file or an empty directory.  It will
//               not remove a nonempty directory.  Returns true on
//               success, false on failure.
////////////////////////////////////////////////////////////////////
44
virtual bool VirtualFile::delete_file(void);

2512 11 rename_file 0 6 2759 24 VirtualFile::rename_file 0 1 1180 964
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::rename_file
//       Access: Public
//  Description: Attempts to move or rename this file or directory.
//               If the original file is an ordinary file, it will
//               quietly replace any already-existing file in the new
//               filename (but not a directory).  If the original file
//               is a directory, the new filename must not already
//               exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
////////////////////////////////////////////////////////////////////
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

2513 9 copy_file 0 6 2759 22 VirtualFile::copy_file 0 1 1181 362
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of this file to the
//               indicated file.  Returns true on success, false on
//               failure.
////////////////////////////////////////////////////////////////////
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

2514 14 scan_directory 0 4 2759 27 VirtualFile::scan_directory 0 1 1182 522
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
////////////////////////////////////////////////////////////////////
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

2515 6 output 0 4 2759 19 VirtualFile::output 0 1 1183 219
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::output
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
45
void VirtualFile::output(ostream &out) const;

2516 2 ls 0 4 2759 15 VirtualFile::ls 0 1 1184 287
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
////////////////////////////////////////////////////////////////////
52
void VirtualFile::ls(ostream &out = (::cout)) const;

2517 6 ls_all 0 4 2759 19 VirtualFile::ls_all 0 1 1185 335
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
////////////////////////////////////////////////////////////////////
56
void VirtualFile::ls_all(ostream &out = (::cout)) const;

2518 9 read_file 0 4 2759 22 VirtualFile::read_file 0 1 1186 1047
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Returns the entire contents of the file as a string.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Fills up the indicated string with the contents of
//               the file, if it is a regular file.  Returns true on
//               success, false otherwise.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public, Virtual
//  Description: Fills up the indicated pvector with the contents of
//               the file, if it is a regular file.  Returns true on
//               success, false otherwise.
////////////////////////////////////////////////////////////////////
61
inline string VirtualFile::read_file(bool auto_unwrap) const;

2519 14 open_read_file 0 6 2759 27 VirtualFile::open_read_file 0 1 1187 449
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_file
//       Access: Published, Virtual
//  Description: Opens the file for reading.  Returns a newly
//               allocated istream on success (which you should
//               eventually delete when you are done reading).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
69
virtual istream *VirtualFile::open_read_file(bool auto_unwrap) const;

2520 15 close_read_file 0 6 2759 28 VirtualFile::close_read_file 0 1 1188 519
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
65
virtual void VirtualFile::close_read_file(istream *stream) const;

2521 19 was_read_successful 0 6 2759 32 VirtualFile::was_read_successful 0 1 1189 627
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::was_read_successful
//       Access: Published, Virtual
//  Description: Call this method after a reading the istream returned
//               by open_read_file() to completion.  If it returns
//               true, the file was read completely and without error;
//               if it returns false, there may have been some errors
//               or a truncated file read.  This is particularly
//               likely if the stream is a VirtualFileHTTP.
////////////////////////////////////////////////////////////////////
58
virtual bool VirtualFile::was_read_successful(void) const;

2522 10 write_file 0 4 2759 23 VirtualFile::write_file 0 1 1190 655
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::write_file
//       Access: Public
//  Description: Writes the entire contents of the file as a string,
//               if it is writable.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::write_file
//       Access: Public, Virtual
//  Description: Writes the indicated data to the file, if it is
//               writable.  Returns true on success, false otherwise.
////////////////////////////////////////////////////////////////////
72
inline bool VirtualFile::write_file(string const &data, bool auto_wrap);

2523 15 open_write_file 0 6 2759 28 VirtualFile::open_write_file 0 1 1191 450
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated ostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
77
virtual ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

2524 16 open_append_file 0 6 2759 29 VirtualFile::open_append_file 0 1 1192 452
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_append_file
//       Access: Published, Virtual
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
////////////////////////////////////////////////////////////////////
53
virtual ostream *VirtualFile::open_append_file(void);

2525 16 close_write_file 0 6 2759 29 VirtualFile::close_write_file 0 1 1193 521
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
60
virtual void VirtualFile::close_write_file(ostream *stream);

2526 20 open_read_write_file 0 6 2759 33 VirtualFile::open_read_write_file 0 1 1194 456
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated iostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
////////////////////////////////////////////////////////////////////
67
virtual iostream *VirtualFile::open_read_write_file(bool truncate);

2527 21 open_read_append_file 0 6 2759 34 VirtualFile::open_read_append_file 0 1 1195 472
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_append_file
//       Access: Published, Virtual
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
////////////////////////////////////////////////////////////////////
59
virtual iostream *VirtualFile::open_read_append_file(void);

2528 21 close_read_write_file 0 6 2759 34 VirtualFile::close_read_write_file 0 1 1196 532
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
66
virtual void VirtualFile::close_read_write_file(iostream *stream);

2529 13 get_file_size 0 6 2759 26 VirtualFile::get_file_size 0 2 1197 1198 853
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the already-open file.  Pass in the stream that
//               was returned by open_read_file(); some
//               implementations may require this stream to determine
//               the size.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the file before it has been opened.
////////////////////////////////////////////////////////////////////
128
virtual streamsize VirtualFile::get_file_size(istream *stream) const;
virtual streamsize VirtualFile::get_file_size(void) const;

2530 13 get_timestamp 0 6 2759 26 VirtualFile::get_timestamp 0 1 1199 776
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_timestamp
//       Access: Published, Virtual
//  Description: Returns a time_t value that represents the time the
//               file was last modified, to within whatever precision
//               the operating system records this information (on a
//               Windows95 system, for instance, this may only be
//               accurate to within 2 seconds).
//
//               If the timestamp cannot be determined, either because
//               it is not supported by the operating system or
//               because there is some error (such as file not found),
//               returns 0.
////////////////////////////////////////////////////////////////////
54
virtual time_t VirtualFile::get_timestamp(void) const;

2531 15 get_system_info 0 6 2759 28 VirtualFile::get_system_info 0 1 1200 629
////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_system_info
//       Access: Published, Virtual
//  Description: Populates the SubfileInfo structure with the data
//               representing where the file actually resides on disk,
//               if this is knowable.  Returns true if the file might
//               reside on disk, and the info is populated, or false
//               if it does not (or it is not known where the file
//               resides), in which case the info is meaningless.
////////////////////////////////////////////////////////////////////
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

2532 14 get_class_type 0 4 2759 27 VirtualFile::get_class_type 0 1 1201 0
52
static TypeHandle VirtualFile::get_class_type(void);

2533 12 ~VirtualFile 0 4 2759 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

2534 14 get_class_type 0 4 2760 36 VirtualFileComposite::get_class_type 0 1 1202 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

2535 21 ~VirtualFileComposite 0 4 2760 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

2536 15 get_file_system 0 4 2761 33 VirtualFileMount::get_file_system 0 1 1203 304
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_file_system
//       Access: Public
//  Description: Returns the file system this mount object is attached
//               to.
////////////////////////////////////////////////////////////////////
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

2537 15 get_mount_point 0 4 2761 33 VirtualFileMount::get_mount_point 0 1 1204 410
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_point
//       Access: Public
//  Description: Returns the name of the directory within the virtual
//               file system that this mount object is attached to.
//               This directory name will end with a slash.
////////////////////////////////////////////////////////////////////
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

2538 15 get_mount_flags 0 4 2761 33 VirtualFileMount::get_mount_flags 0 1 1205 333
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_flags
//       Access: Public
//  Description: Returns the set of flags passed by the user to the
//               VirtualFileSystem::mount() command.
////////////////////////////////////////////////////////////////////
57
inline int VirtualFileMount::get_mount_flags(void) const;

2539 6 output 0 6 2761 24 VirtualFileMount::output 0 1 1206 230
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::output
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
58
virtual void VirtualFileMount::output(ostream &out) const;

2540 5 write 0 6 2761 23 VirtualFileMount::write 0 1 1207 229
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::write
//       Access: Public, Virtual
//  Description: 
////////////////////////////////////////////////////////////////////
57
virtual void VirtualFileMount::write(ostream &out) const;

2541 14 get_class_type 0 4 2761 32 VirtualFileMount::get_class_type 0 1 1208 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

2542 25 VirtualFileMountMultifile 0 4 2762 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 1209 235
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

2543 13 get_multifile 0 4 2762 40 VirtualFileMountMultifile::get_multifile 0 1 1210 319
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::get_multifile
//       Access: Public
//  Description: Returns the Multifile pointer that this mount object
//               is based on.
////////////////////////////////////////////////////////////////////
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

2544 14 get_class_type 0 4 2762 41 VirtualFileMountMultifile::get_class_type 0 1 1211 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

2545 23 VirtualFileMountRamdisk 0 4 2763 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 1212 233
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountRamdisk::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

2546 14 get_class_type 0 4 2763 39 VirtualFileMountRamdisk::get_class_type 0 1 1213 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

2547 24 ~VirtualFileMountRamdisk 0 4 2763 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

2548 22 VirtualFileMountSystem 0 4 2764 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 1214 232
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::Constructor
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

2549 21 get_physical_filename 0 4 2764 45 VirtualFileMountSystem::get_physical_filename 0 1 1215 357
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::get_physical_filename
//       Access: Public
//  Description: Returns the name of the source file on the OS
//               filesystem of the directory or file that is mounted.
////////////////////////////////////////////////////////////////////
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

2550 14 get_class_type 0 4 2764 38 VirtualFileMountSystem::get_class_type 0 1 1216 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

2551 23 ~VirtualFileMountSystem 0 4 2764 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

2552 9 get_mount 0 4 2765 28 VirtualFileSimple::get_mount 0 1 1217 312
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::get_mount
//       Access: Published, Virtual
//  Description: Returns the VirtualFileMount this file is associated
//               with.
////////////////////////////////////////////////////////////////////
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

2553 19 is_implicit_pz_file 0 4 2765 38 VirtualFileSimple::is_implicit_pz_file 0 1 1218 429
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::is_implicit_pz_file
//       Access: Published
//  Description: Returns true if this file is a .pz file that should
//               be implicitly decompressed on load, or false if it is
//               not a .pz file or if it should not be decompressed.
////////////////////////////////////////////////////////////////////
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

2554 14 get_class_type 0 4 2765 33 VirtualFileSimple::get_class_type 0 1 1219 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

2555 18 ~VirtualFileSimple 0 4 2765 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

2556 13 TemporaryFile 0 4 2766 28 TemporaryFile::TemporaryFile 0 1 1220 225
////////////////////////////////////////////////////////////////////
//     Function: TemporaryFile::Constructor
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
62
inline TemporaryFile::TemporaryFile(Filename const &filename);

2557 14 get_class_type 0 4 2766 29 TemporaryFile::get_class_type 0 1 1221 0
54
static TypeHandle TemporaryFile::get_class_type(void);

2558 17 IDecompressStream 0 4 2767 36 IDecompressStream::IDecompressStream 0 2 1222 1223 454
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
130
inline IDecompressStream::IDecompressStream(void);
inline IDecompressStream::IDecompressStream(istream *source, bool owns_source);

2559 4 open 0 4 2767 23 IDecompressStream::open 0 1 1224 220
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::open
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
85
inline IDecompressStream &IDecompressStream::open(istream *source, bool owns_source);

2560 5 close 0 4 2767 24 IDecompressStream::close 0 1 1225 342
////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the source istream unless owns_source was true.
////////////////////////////////////////////////////////////////////
57
inline IDecompressStream &IDecompressStream::close(void);

2561 18 ~IDecompressStream 0 4 2767 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

2562 15 OCompressStream 0 4 2768 32 OCompressStream::OCompressStream 0 2 1226 1227 450
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
147
inline OCompressStream::OCompressStream(void);
inline OCompressStream::OCompressStream(ostream *dest, bool owns_dest, int compression_level = (6));

2563 4 open 0 4 2768 21 OCompressStream::open 0 1 1228 218
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::open
//       Access: Public
//  Description: 
////////////////////////////////////////////////////////////////////
106
inline OCompressStream &OCompressStream::open(ostream *dest, bool owns_dest, int compression_level = (6));

2564 5 close 0 4 2768 22 OCompressStream::close 0 1 1229 336
////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
////////////////////////////////////////////////////////////////////
53
inline OCompressStream &OCompressStream::close(void);

2565 16 ~OCompressStream 0 4 2768 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

2566 13 get_num_files 0 4 2769 30 VirtualFileList::get_num_files 0 1 1230 270
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_num_files
//       Access: Published
//  Description: Returns the number of files in the list.
////////////////////////////////////////////////////////////////////
54
inline int VirtualFileList::get_num_files(void) const;

2567 8 get_file 0 4 2769 25 VirtualFileList::get_file 0 1 1231 258
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_file
//       Access: Published
//  Description: Returns the nth file in the list.
////////////////////////////////////////////////////////////////////
59
inline VirtualFile *VirtualFileList::get_file(int n) const;

2568 11 operator [] 0 4 2769 28 VirtualFileList::operator [] 0 1 1232 261
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator []
//       Access: Published
//  Description: Returns the nth file in the list.
////////////////////////////////////////////////////////////////////
62
inline VirtualFile *VirtualFileList::operator [](int n) const;

2569 4 size 0 4 2769 21 VirtualFileList::size 0 1 1233 261
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::size
//       Access: Published
//  Description: Returns the number of files in the list.
////////////////////////////////////////////////////////////////////
45
inline int VirtualFileList::size(void) const;

2570 11 operator += 0 4 2769 28 VirtualFileList::operator += 0 1 1234 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

2571 10 operator + 0 4 2769 27 VirtualFileList::operator + 0 1 1235 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

2572 17 VirtualFileSystem 0 4 2770 36 VirtualFileSystem::VirtualFileSystem 0 1 1236 230
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Constructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
VirtualFileSystem::VirtualFileSystem(void);

2573 18 ~VirtualFileSystem 0 4 2770 37 VirtualFileSystem::~VirtualFileSystem 0 0 229
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Destructor
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
44
VirtualFileSystem::~VirtualFileSystem(void);

2574 5 mount 0 4 2770 24 VirtualFileSystem::mount 0 3 1237 1238 1239 2271
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated Multifile at the given mount
//               point.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               The filename specified as the first parameter must
//               refer to a real, physical filename on disk; it cannot
//               be a virtual file already appearing within the vfs
//               filespace.  However, it is possible to mount such a
//               file; see mount_loop() for this.
////
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Adds the given VirtualFileMount object to the mount
//               list.  This is a lower-level function that the other
//               flavors of mount(); it requires you to create a
//               VirtualFileMount object specifically.
////////////////////////////////////////////////////////////////////
325
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, string const &password = (""));
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

2575 10 mount_loop 0 4 2770 29 VirtualFileSystem::mount_loop 0 1 1240 971
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount_loop
//       Access: Published
//  Description: This is similar to mount(), but it receives the name
//               of a Multifile that already appears within the
//               virtual file system.  It can be used to mount a
//               Multifile that is itself hosted within a
//               virtually-mounted Multifile.
//
//               This interface can also be used to mount physical
//               files (that appear within the virtual filespace), but
//               it cannot be used to mount directories.  Use mount()
//               if you need to mount a directory.
//
//               Note that there is additional overhead, in the form
//               of additional buffer copies of the data, for
//               recursively mounting a multifile like this.
////////////////////////////////////////////////////////////////////
140
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, string const &password = (""));

2576 7 unmount 0 4 2770 26 VirtualFileSystem::unmount 0 3 1241 1242 1243 1159
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated Multifile
//               from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated directory
//               name or multifile name from the file system.  Returns
//               the number of appearances unmounted.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts the indicated VirtualFileMount object
//               from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
177
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

2577 13 unmount_point 0 4 2770 32 VirtualFileSystem::unmount_point 0 1 1244 388
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_point
//       Access: Published
//  Description: Unmounts all systems attached to the given mount
//               point from the file system.  Returns the number of
//               appearances unmounted.
////////////////////////////////////////////////////////////////////
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

2578 11 unmount_all 0 4 2770 30 VirtualFileSystem::unmount_all 0 1 1245 329
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_all
//       Access: Published
//  Description: Unmounts all files from the file system.  Returns the
//               number of systems unmounted.
////////////////////////////////////////////////////////////////////
41
int VirtualFileSystem::unmount_all(void);

2579 14 get_num_mounts 0 4 2770 33 VirtualFileSystem::get_num_mounts 0 1 1246 304
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_num_mounts
//       Access: Published
//  Description: Returns the number of individual mounts in the
//               system.
////////////////////////////////////////////////////////////////////
50
int VirtualFileSystem::get_num_mounts(void) const;

2580 9 get_mount 0 4 2770 28 VirtualFileSystem::get_mount 0 1 1247 264
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_mount
//       Access: Published
//  Description: Returns the nth mount in the system.
////////////////////////////////////////////////////////////////////
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

2581 5 chdir 0 4 2770 24 VirtualFileSystem::chdir 0 1 1248 429
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::chdir
//       Access: Published
//  Description: Changes the current directory.  This is used to
//               resolve relative pathnames in get_file() and/or
//               find_file().  Returns true if successful, false
//               otherwise.
////////////////////////////////////////////////////////////////////
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

2582 7 get_cwd 0 4 2770 26 VirtualFileSystem::get_cwd 0 1 1249 275
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_cwd
//       Access: Published
//  Description: Returns the current directory name.  See chdir().
////////////////////////////////////////////////////////////////////
48
Filename VirtualFileSystem::get_cwd(void) const;

2583 14 make_directory 0 4 2770 33 VirtualFileSystem::make_directory 0 1 1250 544
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Returns true on success, false on failure
//               (for instance, because the parent directory does not
//               exist, or is read-only).  If the directory already
//               existed prior to this call, returns true.
////////////////////////////////////////////////////////////////////
65
bool VirtualFileSystem::make_directory(Filename const &filename);

2584 19 make_directory_full 0 4 2770 38 VirtualFileSystem::make_directory_full 0 1 1251 424
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory_full
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Will also create any intervening directories
//               needed.  Returns true on success, false on failure.
////////////////////////////////////////////////////////////////////
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

2585 8 get_file 0 4 2770 27 VirtualFileSystem::get_file 0 1 1252 902
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
//
//               If status_only is true, the file will be checked for
//               existence and length and so on, but the returned
//               file's contents cannot be read.  This is an
//               optimization which is especially important for
//               certain mount types, for instance HTTP, for which
//               opening a file to determine its status is
//               substantially less expensive than opening it to read
//               its contents.
////////////////////////////////////////////////////////////////////
109
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = (0)) const;

2586 11 create_file 0 4 2770 30 VirtualFileSystem::create_file 0 1 1253 592
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::create_file
//       Access: Published
//  Description: Attempts to create a file by the indicated name in
//               the filesystem, if possible, and returns it.  If a
//               file by this name already exists, returns the same
//               thing as get_file().  If the filename is located
//               within a read-only directory, or the directory
//               doesn't exist, returns NULL.
////////////////////////////////////////////////////////////////////
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

2587 9 find_file 0 4 2770 28 VirtualFileSystem::find_file 0 1 1254 436
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
////////////////////////////////////////////////////////////////////
141
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = (0)) const;

2588 11 delete_file 0 4 2770 30 VirtualFileSystem::delete_file 0 1 1255 467
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::delete_file
//       Access: Public
//  Description: Attempts to delete the indicated file or directory.
//               This can remove a single file or an empty directory.
//               It will not remove a nonempty directory.  Returns
//               true on success, false on failure.
////////////////////////////////////////////////////////////////////
62
bool VirtualFileSystem::delete_file(Filename const &filename);

2589 11 rename_file 0 4 2770 30 VirtualFileSystem::rename_file 0 1 1256 980
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::rename_file
//       Access: Public
//  Description: Attempts to move or rename the indicated file or
//               directory.  If the original file is an ordinary file,
//               it will quietly replace any already-existing file in
//               the new filename (but not a directory).  If the
//               original file is a directory, the new filename must
//               not already exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
////////////////////////////////////////////////////////////////////
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

2590 9 copy_file 0 4 2770 28 VirtualFileSystem::copy_file 0 1 1257 377
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of the indicated file
//               to the indicated file.  Returns true on success,
//               false on failure.
////////////////////////////////////////////////////////////////////
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

2591 16 resolve_filename 0 4 2770 35 VirtualFileSystem::resolve_filename 0 1 1258 440
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
////////////////////////////////////////////////////////////////////
140
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, string const &default_extension = ((()))) const;

2592 14 find_all_files 0 4 2770 33 VirtualFileSystem::find_all_files 0 1 1259 672
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_all_files
//       Access: Public
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
////////////////////////////////////////////////////////////////////
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

2593 6 exists 0 4 2770 25 VirtualFileSystem::exists 0 1 1260 302
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::exists
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists.
////////////////////////////////////////////////////////////////////
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

2594 12 is_directory 0 4 2770 31 VirtualFileSystem::is_directory 0 1 1261 327
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_directory
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a directory.
////////////////////////////////////////////////////////////////////
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

2595 15 is_regular_file 0 4 2770 34 VirtualFileSystem::is_regular_file 0 1 1262 333
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_regular_file
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a regular file.
////////////////////////////////////////////////////////////////////
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

2596 14 scan_directory 0 4 2770 33 VirtualFileSystem::scan_directory 0 1 1263 528
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
////////////////////////////////////////////////////////////////////
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

2597 2 ls 0 4 2770 21 VirtualFileSystem::ls 0 1 1264 307
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory.
////////////////////////////////////////////////////////////////////
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

2598 6 ls_all 0 4 2770 25 VirtualFileSystem::ls_all 0 1 1265 362
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls_all
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory, and all files below,
//               recursively.
////////////////////////////////////////////////////////////////////
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

2599 5 write 0 4 2770 24 VirtualFileSystem::write 0 1 1266 303
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write
//       Access: Published
//  Description: Print debugging information.
//               (e.g. from Python or gdb prompt).
////////////////////////////////////////////////////////////////////
50
void VirtualFileSystem::write(ostream &out) const;

2600 14 get_global_ptr 0 4 2770 33 VirtualFileSystem::get_global_ptr 0 1 1267 773
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global VirtualFileSystem.  You
//               may create your own personal VirtualFileSystem
//               objects and use them for whatever you like, but Panda
//               will attempt to load models and stuff from this
//               default object.
//
//               Initially, the global VirtualFileSystem is set up to
//               mount the OS filesystem to root; i.e. it is
//               equivalent to the OS filesystem.  This may be
//               subsequently adjusted by the user.
////////////////////////////////////////////////////////////////////
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

2601 9 read_file 0 4 2770 28 VirtualFileSystem::read_file 0 1 1268 2166
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Public
//  Description: Convenience function; fills the string up with the
//               data from the indicated file, if it exists and can be
//               read.  Returns true on success, false otherwise.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Public
//  Description: Convenience function; fills the pvector up with the
//               data from the indicated file, if it exists and can be
//               read.  Returns true on success, false otherwise.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

2602 14 open_read_file 0 4 2770 33 VirtualFileSystem::open_read_file 0 1 1269 750
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               istream if the file exists and can be read, or NULL
//               otherwise.  Does not return an invalid istream.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
////////////////////////////////////////////////////////////////////
93
istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

2603 15 close_read_file 0 4 2770 34 VirtualFileSystem::close_read_file 0 1 1270 533
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
64
static void VirtualFileSystem::close_read_file(istream *stream);

2604 10 write_file 0 4 2770 29 VirtualFileSystem::write_file 0 1 1271 926
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write_file
//       Access: Published
//  Description: Convenience function; writes the entire contents of
//               the indicated file as a string.
//
//               If auto_wrap is true, an explicitly-named .pz file
//               is automatically compressed while writing.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write_file
//       Access: Public
//  Description: Convenience function; writes the entire contents of
//               the indicated file as a block of data.
//
//               If auto_wrap is true, an explicitly-named .pz file
//               is automatically compressed while writing.
////////////////////////////////////////////////////////////////////
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

2605 15 open_write_file 0 4 2770 34 VirtualFileSystem::open_write_file 0 1 1272 658
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               ostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid ostream.
//
//               If auto_wrap is true, an explicitly-named .pz file is
//               automatically compressed while writing.  If truncate
//               is true, the file is truncated to zero length before
//               writing.
////////////////////////////////////////////////////////////////////
101
ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

2606 16 open_append_file 0 4 2770 35 VirtualFileSystem::open_append_file 0 1 1273 449
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_append_file
//       Access: Published
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
////////////////////////////////////////////////////////////////////
71
ostream *VirtualFileSystem::open_append_file(Filename const &filename);

2607 16 close_write_file 0 4 2770 35 VirtualFileSystem::close_write_file 0 1 1274 535
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
65
static void VirtualFileSystem::close_write_file(ostream *stream);

2608 20 open_read_write_file 0 4 2770 39 VirtualFileSystem::open_read_write_file 0 1 1275 425
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               iostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid iostream.
////////////////////////////////////////////////////////////////////
91
iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

2609 21 open_read_append_file 0 4 2770 40 VirtualFileSystem::open_read_append_file 0 1 1276 469
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_append_file
//       Access: Published
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
////////////////////////////////////////////////////////////////////
77
iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

2610 21 close_read_write_file 0 4 2770 40 VirtualFileSystem::close_read_write_file 0 1 1277 546
////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
////////////////////////////////////////////////////////////////////
71
static void VirtualFileSystem::close_read_write_file(iostream *stream);

2611 13 get_long_time 0 4 2772 24 TrueClock::get_long_time 0 1 1278 454
// get_long_time() returns the most accurate timer we have over a
// long interval.  It may not be very precise for measuring short
// intervals, but it should not drift substantially over the long
// haul.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_long_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
38
double TrueClock::get_long_time(void);

2612 14 get_short_time 0 4 2772 25 TrueClock::get_short_time 0 1 1279 458
// get_short_time() returns the most precise timer we have over a
// short interval.  It may tend to drift over the long haul, but it
// should have lots of digits to measure short intervals very
// precisely.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
46
inline double TrueClock::get_short_time(void);

2613 18 get_short_raw_time 0 4 2772 29 TrueClock::get_short_raw_time 0 1 1280 399
// get_short_raw_time() is like get_short_time(), but does not apply
// any corrections (e.g. paranoid-clock) to the result returned by
// the OS.

////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_raw_time, Win32 implementation
//       Access: Published
//  Description: 
////////////////////////////////////////////////////////////////////
43
double TrueClock::get_short_raw_time(void);

2614 15 get_error_count 0 4 2772 26 TrueClock::get_error_count 0 1 1281 675
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_error_count
//       Access: Published
//  Description: Returns the number of clock errors that have
//               been detected.  Each time a clock error is detected,
//               in which the value returned by either of the above
//               methods is suspect, the value returned by this method
//               will be incremented.  Applications can monitor this
//               value and react, for instance, by resynchronizing
//               their clocks each time this value changes.
////////////////////////////////////////////////////////////////////
50
inline int TrueClock::get_error_count(void) const;

2615 14 get_global_ptr 0 4 2772 25 TrueClock::get_global_ptr 0 1 1282 309
////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one TrueClock object in
//               the world.
////////////////////////////////////////////////////////////////////
57
static inline TrueClock *TrueClock::get_global_ptr(void);

2616 16 set_cpu_affinity 0 4 2772 27 TrueClock::set_cpu_affinity 0 1 1283 0
55
bool TrueClock::set_cpu_affinity(PN_uint32 mask) const;

2617 9 Patchfile 0 4 2773 20 Patchfile::Patchfile 0 2 1284 1285 527
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create a patch file and initializes internal data
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create patch file with buffer to patch
////////////////////////////////////////////////////////////////////
77
Patchfile::Patchfile(void);
Patchfile::Patchfile(PointerTo< Buffer > buffer);

2618 10 ~Patchfile 0 4 2773 21 Patchfile::~Patchfile 0 0 217
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Destructor
//       Access: Public
//  Description:
////////////////////////////////////////////////////////////////////
28
Patchfile::~Patchfile(void);

2619 5 build 0 4 2773 16 Patchfile::build 0 1 1286 680
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::build
//       Access: Public
//  Description:
//               This implementation uses the "greedy differencing
//               algorithm" described in the masters thesis
//               "Differential Compression: A Generalized Solution
//               for Binary Files" by Randal C. Burns (p.13).
//               For an original file of size M and a new file of
//               size N, this algorithm is O(M) in space and
//               O(M*N) (worst-case) in time.
//               return false on error
////////////////////////////////////////////////////////////////////
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

2620 11 read_header 0 4 2773 22 Patchfile::read_header 0 1 1287 449
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::read_header
//       Access: Published
//  Description: Opens the patch file for reading, and gets the header
//               information from the file but does not begin to do
//               any real work.  This can be used to query the data
//               stored in the patch.
////////////////////////////////////////////////////////////////////
55
int Patchfile::read_header(Filename const &patch_file);

2621 8 initiate 0 4 2773 19 Patchfile::initiate 0 2 1288 1289 697
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file (original
//               file and patch are destroyed in the process).
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file.  In this form,
//               neither the original file nor the patch file are
//               destroyed.
////////////////////////////////////////////////////////////////////
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

2622 3 run 0 4 2773 14 Patchfile::run 0 1 1290 660
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::run
//       Access: Published
//  Description: Perform one buffer's worth of patching
//               Returns EU_ok while patching
//               Returns EU_success when done
//               If error happens will return one of:
//               EU_error_abort : Patching has not been initiated
//               EU_error_file_invalid : file is corrupted
//               EU_error_invalid_checksum : incompatible patch file
//               EU_error_write_file_rename : could not rename file
////////////////////////////////////////////////////////////////////
25
int Patchfile::run(void);

2623 5 apply 0 4 2773 16 Patchfile::apply 0 2 1291 1292 788
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will delete the patch file and overwrite
//               the original file.
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will not delete any files.
////////////////////////////////////////////////////////////////////
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

2624 12 get_progress 0 4 2773 23 Patchfile::get_progress 0 1 1293 368
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_progress
//       Access: Published
//  Description: Returns a value in the range 0..1, representing the
//               amount of progress through the patchfile, during a
//               session.
////////////////////////////////////////////////////////////////////
55
inline PN_stdfloat Patchfile::get_progress(void) const;

2625 19 set_allow_multifile 0 4 2773 30 Patchfile::set_allow_multifile 0 1 1294 685
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_allow_multifile
//       Access: Published
//  Description: If this flag is set true, the Patchfile will make a
//               special case for patching Panda Multifiles, if
//               detected, and attempt to patch them on a
//               subfile-by-subfile basis.  If this flag is false, the
//               Patchfile will always patch the file on a full-file
//               basis.
//
//               This has effect only when building patches; it is not
//               used for applying patches.
////////////////////////////////////////////////////////////////////
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

2626 19 get_allow_multifile 0 4 2773 30 Patchfile::get_allow_multifile 0 1 1295 256
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_allow_multifile
//       Access: Published
//  Description: See set_allow_multifile().
////////////////////////////////////////////////////////////////////
49
inline bool Patchfile::get_allow_multifile(void);

2627 20 set_footprint_length 0 4 2773 31 Patchfile::set_footprint_length 0 1 1296 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
56
inline void Patchfile::set_footprint_length(int length);

2628 20 get_footprint_length 0 4 2773 31 Patchfile::get_footprint_length 0 1 1297 230
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
49
inline int Patchfile::get_footprint_length(void);

2629 22 reset_footprint_length 0 4 2773 33 Patchfile::reset_footprint_length 0 1 1298 232
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::reset_footprint_length
//       Access: Published
//  Description:
////////////////////////////////////////////////////////////////////
52
inline void Patchfile::reset_footprint_length(void);

2630 15 has_source_hash 0 4 2773 26 Patchfile::has_source_hash 0 1 1299 391
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::has_source_hash
//       Access: Published
//  Description: Returns true if the MD5 hash for the source file is
//               known.  (Some early versions of the patch file did
//               not store this information.)
////////////////////////////////////////////////////////////////////
51
inline bool Patchfile::has_source_hash(void) const;

2631 15 get_source_hash 0 4 2773 26 Patchfile::get_source_hash 0 1 1300 267
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_source_hash
//       Access: Published
//  Description: Returns the MD5 hash for the source file.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_source_hash(void) const;

2632 15 get_result_hash 0 4 2773 26 Patchfile::get_result_hash 0 1 1301 310
////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_result_hash
//       Access: Published
//  Description: Returns the MD5 hash for the file after the patch has
//               been applied.
////////////////////////////////////////////////////////////////////
61
inline HashVal const &Patchfile::get_result_hash(void) const;

2633 13 password_hash 0 1 0 13 password_hash 0 1 1339 0
88
string password_hash(string const &password, string const &salt, int iters, int keylen);

2634 12 ProfileTimer 0 4 2774 26 ProfileTimer::ProfileTimer 0 2 1302 1303 0
131
ProfileTimer::ProfileTimer(char const *name = (0), int maxEntries = (4096));
ProfileTimer::ProfileTimer(ProfileTimer const &other);

2635 13 ~ProfileTimer 0 4 2774 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

2636 4 init 0 4 2774 18 ProfileTimer::init 0 1 1304 0
67
void ProfileTimer::init(char const *name, int maxEntries = (4096));

2637 2 on 0 4 2774 16 ProfileTimer::on 0 1 1305 0
28
void ProfileTimer::on(void);

2638 4 mark 0 4 2774 18 ProfileTimer::mark 0 1 1306 0
41
void ProfileTimer::mark(char const *tag);

2639 3 off 0 4 2774 17 ProfileTimer::off 0 2 1307 1308 0
70
void ProfileTimer::off(void);
void ProfileTimer::off(char const *tag);

2640 12 getTotalTime 0 4 2774 26 ProfileTimer::getTotalTime 0 1 1309 110
// Don't call any of the following during timing:
// (Because they are slow, not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

2641 16 consolidateAllTo 0 4 2774 30 ProfileTimer::consolidateAllTo 0 1 1310 0
68
static void ProfileTimer::consolidateAllTo(ostream &out = (::cout));

2642 13 consolidateTo 0 4 2774 27 ProfileTimer::consolidateTo 0 1 1311 0
64
void ProfileTimer::consolidateTo(ostream &out = (::cout)) const;

2643 10 printAllTo 0 4 2774 24 ProfileTimer::printAllTo 0 1 1312 0
62
static void ProfileTimer::printAllTo(ostream &out = (::cout));

2644 7 printTo 0 4 2774 21 ProfileTimer::printTo 0 1 1313 0
58
void ProfileTimer::printTo(ostream &out = (::cout)) const;

2645 11 was_deleted 0 4 2775 30 WeakPointerToVoid::was_deleted 0 1 1314 327
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::was_deleted
//       Access: Published
//  Description: Returns true if the object we are pointing to has
//               been deleted, false otherwise.
////////////////////////////////////////////////////////////////////
55
inline bool WeakPointerToVoid::was_deleted(void) const;

2646 16 is_valid_pointer 0 4 2775 35 WeakPointerToVoid::is_valid_pointer 0 1 1315 328
////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::is_valid_pointer
//       Access: Published
//  Description: Returns true if the pointer is not null and the
//               object has not been deleted.
////////////////////////////////////////////////////////////////////
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

2647 16 set_string_value 0 4 2776 33 WindowsRegistry::set_string_value 0 1 1316 608
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_string_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as a
//               string.  The supplied string value is automatically
//               converted from whatever encoding is set by
//               TextEncoder::set_default_encoding() and written as a
//               Unicode string.  The registry key must already exist
//               prior to calling this function.
////////////////////////////////////////////////////////////////////
170
static bool WindowsRegistry::set_string_value(string const &key, string const &name, string const &value, WindowsRegistry::RegLevel rl = (::WindowsRegistry::rl_machine));

2648 13 set_int_value 0 4 2776 30 WindowsRegistry::set_int_value 0 1 1317 400
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_int_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as an
//               integer.  The registry key must already exist prior
//               to calling this function.
////////////////////////////////////////////////////////////////////
157
static bool WindowsRegistry::set_int_value(string const &key, string const &name, int value, WindowsRegistry::RegLevel rl = (::WindowsRegistry::rl_machine));

2649 12 get_key_type 0 4 2776 29 WindowsRegistry::get_key_type 0 1 1318 355
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_key_type
//       Access: Published, Static
//  Description: Returns the type of the indicated key, or T_none if
//               the key is not known or is some unsupported type.
////////////////////////////////////////////////////////////////////
162
static WindowsRegistry::Type WindowsRegistry::get_key_type(string const &key, string const &name, WindowsRegistry::RegLevel rl = (::WindowsRegistry::rl_machine));

2650 16 get_string_value 0 4 2776 33 WindowsRegistry::get_string_value 0 1 1319 597
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_string_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is a string value.  The
//               string value is automatically encoded using
//               TextEncoder::get_default_encoding().  If the key is
//               not defined or is not a string type value,
//               default_value is returned instead.
////////////////////////////////////////////////////////////////////
180
static string WindowsRegistry::get_string_value(string const &key, string const &name, string const &default_value, WindowsRegistry::RegLevel rl = (::WindowsRegistry::rl_machine));

2651 13 get_int_value 0 4 2776 30 WindowsRegistry::get_int_value 0 1 1320 478
////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_int_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is an integer value.  If
//               the key is not defined or is not an integer type
//               value, default_value is returned instead.
////////////////////////////////////////////////////////////////////
164
static int WindowsRegistry::get_int_value(string const &key, string const &name, int default_value, WindowsRegistry::RegLevel rl = (::WindowsRegistry::rl_machine));

2652 16 ~WindowsRegistry 0 4 2776 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

1339
1 0 0 7 12 2783 1355 0 0 1 4 copy 1 2781  
2 0 0 7 12 2783 1355 0 0 1 4 copy 1 2784  
3 0 0 7 12 2783 1355 0 0 1 6 source 1 2786  
4 0 0 6 13 2788 0 0 0 1 4 this 3 2781  
5 0 0 6 14 2789 0 0 0 2 4 this 3 2781  1 n 1 2788  
6 0 0 6 15 2789 0 0 0 2 4 this 3 2781  1 n 1 2788  
7 0 0 6 16 2790 0 0 0 1 4 this 3 2781  
8 0 0 6 17 2790 0 0 0 3 4 this 3 2781  1 n 1 2788  5 count 1 2788  
9 0 0 6 18 2791 0 0 0 1 4 this 3 2781  
10 0 0 6 19 2791 0 0 0 1 4 this 3 2781  
11 0 0 6 20 2791 0 0 0 3 4 this 3 2781  4 view 1 2792  5 flags 1 2791  
12 0 0 4 21 2794 0 0 0 2 4 this 3 2781  4 view 1 2792  
13 0 0 4 9 2794 0 0 0 1 4 this 3 2795  
14 0 0 4 10 2794 0 0 0 2 4 this 3 2796  3 out 1 2798  
15 0 0 6 7 2801 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::is_null
//       Access: Published
//  Description: Returns true if the PointerTo is a NULL pointer,
//               false otherwise.  (Direct comparison to a NULL
//               pointer also works.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 2799  
16 0 0 6 8 2802 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: PointerToVoid::get_hash
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2799  
17 0 0 7 30 2805 1369 0 0 1 4 copy 1 2803  
18 0 0 7 30 2805 1369 0 0 1 4 copy 1 2806  
19 0 0 7 30 2805 1369 0 0 1 6 source 1 2786  
20 0 0 6 31 2788 0 0 0 1 4 this 3 2803  
21 0 0 6 32 2808 0 0 0 2 4 this 3 2803  1 n 1 2788  
22 0 0 6 33 2808 0 0 0 2 4 this 3 2803  1 n 1 2788  
23 0 0 6 34 2790 0 0 0 1 4 this 3 2803  
24 0 0 6 35 2790 0 0 0 3 4 this 3 2803  1 n 1 2788  5 count 1 2788  
25 0 0 6 36 2791 0 0 0 1 4 this 3 2803  
26 0 0 6 37 2791 0 0 0 1 4 this 3 2803  
27 0 0 6 38 2791 0 0 0 3 4 this 3 2803  4 view 1 2792  5 flags 1 2791  
28 0 0 4 39 2794 0 0 0 2 4 this 3 2803  4 view 1 2792  
29 0 0 4 27 2794 0 0 0 1 4 this 3 2809  
30 0 0 4 28 2794 0 0 0 2 4 this 3 2810  3 out 1 2798  
31 0 0 7 48 2814 1383 0 0 1 4 copy 1 2812  
32 0 0 7 48 2814 1383 0 0 1 4 copy 1 2815  
33 0 0 7 48 2814 1383 0 0 1 6 source 1 2786  
34 0 0 6 49 2788 0 0 0 1 4 this 3 2812  
35 0 0 6 50 2791 0 0 0 2 4 this 3 2812  1 n 1 2788  
36 0 0 6 51 2791 0 0 0 2 4 this 3 2812  1 n 1 2788  
37 0 0 6 52 2790 0 0 0 1 4 this 3 2812  
38 0 0 6 53 2790 0 0 0 3 4 this 3 2812  1 n 1 2788  5 count 1 2788  
39 0 0 6 54 2791 0 0 0 1 4 this 3 2812  
40 0 0 6 55 2791 0 0 0 1 4 this 3 2812  
41 0 0 6 56 2791 0 0 0 3 4 this 3 2812  4 view 1 2792  5 flags 1 2791  
42 0 0 4 57 2794 0 0 0 2 4 this 3 2812  4 view 1 2792  
43 0 0 4 45 2794 0 0 0 1 4 this 3 2817  
44 0 0 4 46 2794 0 0 0 2 4 this 3 2818  3 out 1 2798  
45 0 0 7 66 2822 1397 0 0 1 4 copy 1 2820  
46 0 0 7 66 2822 1397 0 0 1 4 copy 1 2823  
47 0 0 7 66 2822 1397 0 0 1 6 source 1 2786  
48 0 0 6 67 2788 0 0 0 1 4 this 3 2820  
49 0 0 6 68 2825 0 0 0 2 4 this 3 2820  1 n 1 2788  
50 0 0 6 69 2825 0 0 0 2 4 this 3 2820  1 n 1 2788  
51 0 0 6 70 2790 0 0 0 1 4 this 3 2820  
52 0 0 6 71 2790 0 0 0 3 4 this 3 2820  1 n 1 2788  5 count 1 2788  
53 0 0 6 72 2791 0 0 0 1 4 this 3 2820  
54 0 0 6 73 2791 0 0 0 1 4 this 3 2820  
55 0 0 6 74 2791 0 0 0 3 4 this 3 2820  4 view 1 2792  5 flags 1 2791  
56 0 0 4 75 2794 0 0 0 2 4 this 3 2820  4 view 1 2792  
57 0 0 4 63 2794 0 0 0 1 4 this 3 2826  
58 0 0 4 64 2794 0 0 0 2 4 this 3 2827  3 out 1 2798  
59 0 0 6 82 2831 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_page
//       Access: Public
//  Description: Returns the page on which this declaration can be
//               found.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2829  
60 0 0 6 83 2832 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_variable
//       Access: Public
//  Description: Returns the variable that this declaration names.
//               This variable may or may not have been defined by the
//               time the declaration is read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2829  
61 0 0 6 84 2790 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_value
//       Access: Public
//  Description: Returns the value assigned to this variable.  This is
//               the original one-line text defined for the variable
//               in the .prc file (or passed to
//               ConfigPage::make_declaration()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2829  
62 0 0 4 85 2794 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::set_string_value
//       Access: Public
//  Description: Changes the value assigned to this variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2833  5 value 1 2790  
63 0 0 6 86 2791 0 0 405 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_num_words
//       Access: Public
//  Description: Returns the number of words in the declaration's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2829  
64 0 0 6 87 2801 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_string_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
65 0 0 6 88 2801 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_bool_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               boolean value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
66 0 0 6 89 2801 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
67 0 0 6 90 2801 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_int64_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               int64 value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
68 0 0 6 91 2801 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::has_double_word
//       Access: Public
//  Description: Returns true if the declaration's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
69 0 0 6 92 2790 0 0 404 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_string_word
//       Access: Public
//  Description: Returns the string value of the nth word of the
//               declaration's value, or empty string if there is no
//               nth value.  See also has_string_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
70 0 0 6 93 2801 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_bool_word
//       Access: Public
//  Description: Returns the boolean value of the nth word of the
//               declaration's value, or false if there is no nth
//               value.  See also has_bool_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
71 0 0 6 94 2791 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
72 0 0 6 95 2834 0 0 389 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_int64_word
//       Access: Public
//  Description: Returns the int64 value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_int64_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
73 0 0 6 96 2789 0 0 393 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_double_word
//       Access: Public
//  Description: Returns the integer value of the nth word of the
//               declaration's value, or 0 if there is no nth value.
//               See also has_double_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2829  1 n 1 2791  
74 0 0 4 97 2794 0 0 0 3 4 this 3 2833  1 n 1 2791  5 value 1 2790  
75 0 0 4 98 2794 0 0 0 3 4 this 3 2833  1 n 1 2791  5 value 1 2801  
76 0 0 4 99 2794 0 0 0 3 4 this 3 2833  1 n 1 2791  5 value 1 2791  
77 0 0 4 100 2794 0 0 0 3 4 this 3 2833  1 n 1 2791  5 value 1 2834  
78 0 0 4 101 2794 0 0 0 3 4 this 3 2833  1 n 1 2791  5 value 1 2789  
79 0 0 6 102 2791 0 0 530 ////////////////////////////////////////////////////////////////////
//     Function: ConfigDeclaration::get_decl_seq
//       Access: Public
//  Description: Returns the sequence number of the declaration within
//               the page.  Sequence numbers are assigned as each
//               declaration is created; each declaration is given a
//               higher sequence number than all the declarations
//               created in the page before it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2829  
80 0 0 4 103 2794 0 0 0 2 4 this 3 2829  3 out 1 2798  
81 0 0 4 104 2794 0 0 0 2 4 this 3 2829  3 out 1 2798  
82 0 0 6 106 2831 0 0 0 0 
83 0 0 6 107 2831 0 0 0 0 
84 0 0 6 108 2790 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_name
//       Access: Published
//  Description: Returns the name of the page.  If the page was loaded
//               from a .prc file, this is usually the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
85 0 0 6 109 2801 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_special
//       Access: Published
//  Description: Returns true if this is the special "default" or
//               "local" page, or false if it is an ordinary page,
//               e.g. an implicit page loaded from a prc file at
//               startup, or an explicit page created by
//               ConfigPageManager::make_explicit_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
86 0 0 6 110 2801 0 0 437 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::is_implicit
//       Access: Published
//  Description: Returns true if the page was loaded by implicitly
//               searching the config path on startup, or false if it
//               was explicitly loaded by dynamic code after initial
//               startup.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
87 0 0 4 111 2794 0 0 0 2 4 this 3 2831  4 sort 1 2791  
88 0 0 6 112 2791 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_sort
//       Access: Published
//  Description: Returns the explicit sort order of this particular
//               ConfigPage.  See set_sort().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
89 0 0 6 113 2791 0 0 728 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_page_seq
//       Access: Published
//  Description: Returns the sequence number of the page.  
//
//               Sequence numbers for a particular class (implicit
//               vs. explicit) of pages are assigned as each page is
//               loaded; each page is given a higher sequence number
//               than all the pages loaded before it.
//
//               The implicit_load pages, which are discovered in the
//               file system automatically, have a different set of
//               sequence numbers than the explicit pages.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
90 0 0 6 114 2791 0 0 592 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_trust_level
//       Access: Published
//  Description: Returns the trust level associated with this page.
//               An untrusted page is trust level 0; if the page was
//               loaded from a signed .prc file, its trust level is
//               the index number of the certificate that signed it.
//               Generally, a higher trust level value represents
//               a greater level of trust.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
91 0 0 4 115 2794 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::set_trust_level
//       Access: Published
//  Description: Explicitly sets the trust level on this particular
//               page.  Note that any subsequent changes to the page,
//               or to any variable declarations on it, will reset the
//               trust level to zero.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2831  11 trust_level 1 2791  
92 0 0 6 116 2790 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPage::get_signature
//       Access: Published
//  Description: Returns the raw binary signature that was found in
//               the prc file, if any.  This method is probably not
//               terribly useful for most applications.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2836  
93 0 0 4 117 2794 0 0 0 1 4 this 3 2831  
94 0 0 6 118 2801 0 0 0 2 4 this 3 2831  2 in 1 2838  
95 0 0 6 119 2801 0 0 0 3 4 this 3 2831  2 in 1 2838  8 password 1 2790  
96 0 0 6 120 2833 0 0 0 3 4 this 3 2831  8 variable 1 2832  5 value 1 2790  
97 0 0 6 120 2833 0 0 0 3 4 this 3 2831  8 variable 1 2790  5 value 1 2790  
98 0 0 6 121 2801 0 0 0 2 4 this 3 2831  4 decl 1 2833  
99 0 0 6 122 2791 0 0 0 1 4 this 3 2836  
100 0 0 6 123 2829 0 0 0 2 4 this 3 2836  1 n 1 2791  
101 0 0 6 124 2833 0 0 0 2 4 this 3 2831  1 n 1 2791  
102 0 0 6 125 2790 0 0 0 2 4 this 3 2836  1 n 1 2791  
103 0 0 6 126 2790 0 0 0 2 4 this 3 2836  1 n 1 2791  
104 0 0 6 127 2801 0 0 0 2 4 this 3 2836  1 n 1 2791  
105 0 0 4 128 2794 0 0 0 2 4 this 3 2836  3 out 1 2798  
106 0 0 4 129 2794 0 0 0 2 4 this 3 2836  3 out 1 2798  
107 0 0 4 130 2794 0 0 0 2 4 this 3 2836  3 out 1 2798  
108 0 0 6 132 2801 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::loaded_implicit_pages
//       Access: Published
//  Description: Returns true if the implicit *.prc files have already
//               been loaded, false otherwise.  Normally this will
//               only be false briefly before startup.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2839  
109 0 0 4 133 2794 0 0 536 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::load_implicit_pages
//       Access: Published
//  Description: Searches the PRC_DIR and/or PRC_PATH directories for
//               *.prc files and loads them in as pages.  This is
//               normally called automatically at startup time, when
//               the first variable's value is referenced.  See also
//               reload_implicit_pages().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2841  
110 0 0 4 134 2794 0 0 0 1 4 this 3 2841  
111 0 0 6 135 2842 0 0 556 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_search_path
//       Access: Published
//  Description: Returns the search path used to locate implicit .prc
//               files.  This is determined by the PRC_DIR and
//               PRC_PATH environment variables.  The object returned
//               by this method may be modified to change the path at
//               runtime, and then reload_implicit_pages() called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2841  
112 0 0 6 136 2791 0 0 574 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.prc", that
//               are compiled in that will be searched for as default
//               config filenames.  Normally there is only one
//               pattern, and it is "*.prc", but others may be
//               specified with the PRC_FILENAME variable in
//               Config.pp.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2839  
113 0 0 6 137 2790 0 0 385 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid config file.  See
//               get_num_prc_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2839  1 n 1 2791  
114 0 0 6 138 2791 0 0 436 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_encrypted_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.pre", that
//               are compiled in that will be searched for as special
//               config files that are understood to be encrypted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2839  
115 0 0 6 139 2790 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_encrypted_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid encrypted config
//               file.  See get_num_prc_encrypted_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2839  1 n 1 2791  
116 0 0 6 140 2791 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_prc_executable_patterns
//       Access: Published
//  Description: Returns the number of patterns, like "*.exe", that
//               are compiled in that will be searched for as special
//               config files that are to be executed as a program,
//               and their output taken to be input.  This is normally
//               empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2839  
117 0 0 6 141 2790 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_prc_executable_pattern
//       Access: Published
//  Description: Returns the nth filename pattern that will be
//               considered a match as a valid executable-style config
//               file.  See get_num_prc_executable_patterns().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2839  1 n 1 2791  
118 0 0 6 142 2831 0 0 0 2 4 this 3 2841  4 name 1 2790  
119 0 0 6 143 2801 0 0 0 2 4 this 3 2841  4 page 1 2831  
120 0 0 6 144 2791 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_implicit_pages
//       Access: Published
//  Description: Returns the current number of implicitly-loaded
//               ConfigPages in the world.  These represent files that
//               were automatically discovered on the disk as .prc
//               files.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2839  
121 0 0 6 145 2831 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_implicit_page
//       Access: Published
//  Description: Returns the nth implicit ConfigPage in the world.
//               See get_num_implicit_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2839  1 n 1 2791  
122 0 0 6 146 2791 0 0 490 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_num_explicit_pages
//       Access: Published
//  Description: Returns the current number of explicitly-loaded
//               ConfigPages in the world.  These represent pages that
//               were loaded dynamically at runtime by explicit calls
//               to ConfigPageManager::make_explicit_page().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2839  
123 0 0 6 147 2831 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: ConfigPageManager::get_explicit_page
//       Access: Published
//  Description: Returns the nth explicit ConfigPage in the world.
//               See get_num_explicit_pages().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2839  1 n 1 2791  
124 0 0 4 148 2794 0 0 0 2 4 this 3 2839  3 out 1 2798  
125 0 0 4 149 2794 0 0 0 2 4 this 3 2839  3 out 1 2798  
126 0 0 6 150 2841 0 0 0 0 
127 0 0 7 165 2843 1479 0 492 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::Constructor
//       Access: Published
//  Description: Use this constructor to make a ConfigVariable of an
//               unspecified type.  Usually you'd want to do this just
//               to reference a previously-defined ConfigVariable of a
//               specific type, without having to know what type it is.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
128 0 0 6 167 2829 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_default_value
//       Access: Published
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
129 0 0 6 168 2790 0 0 315 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_value
//       Access: Published
//  Description: Returns the toplevel value of the variable, formatted
//               as a string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
130 0 0 4 169 2794 0 0 443 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_value
//       Access: Published
//  Description: Changes the value assigned to this variable.  This
//               creates a local value that shadows any values defined
//               in the .prc files, until clear_local_value() is
//               called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2843  5 value 1 2790  
131 0 0 4 170 2794 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::clear_value
//       Access: Published
//  Description: Removes the value assigned to this variable, and lets
//               its original value (as read from the prc files) show
//               through.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2843  
132 0 0 6 171 2791 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_num_words
//       Access: Published
//  Description: Returns the number of words in the variable's
//               value.  A word is defined as a sequence of
//               non-whitespace characters delimited by whitespace.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2844  
133 0 0 6 172 2801 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_string_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               string value for the nth word.  This is really the
//               same thing as asking if there are at least n words in
//               the value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
134 0 0 6 173 2801 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_bool_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               boolean value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
135 0 0 6 174 2801 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
136 0 0 6 175 2801 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_int64_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               64-bit integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
137 0 0 6 176 2801 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::has_double_word
//       Access: Published
//  Description: Returns true if the variable's value has a valid
//               integer value for the nth word.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
138 0 0 6 177 2790 0 0 401 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_string_word
//       Access: Published
//  Description: Returns the string value of the nth word of the
//               variable's value, or empty string if there is no
//               nth value.  See also has_string_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
139 0 0 6 178 2801 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_bool_word
//       Access: Published
//  Description: Returns the boolean value of the nth word of the
//               variable's value, or false if there is no nth
//               value.  See also has_bool_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
140 0 0 6 179 2791 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
141 0 0 6 180 2834 0 0 384 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_int64_word
//       Access: Published
//  Description: Returns the int64 value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_int_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
142 0 0 6 181 2789 0 0 390 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::get_double_word
//       Access: Published
//  Description: Returns the integer value of the nth word of the
//               variable's value, or 0 if there is no nth value.
//               See also has_double_word().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2844  1 n 1 2791  
143 0 0 4 182 2794 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_string_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2843  1 n 1 2791  5 value 1 2790  
144 0 0 4 183 2794 0 0 324 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_bool_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2843  1 n 1 2791  5 value 1 2801  
145 0 0 4 184 2794 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2843  1 n 1 2791  5 value 1 2791  
146 0 0 4 185 2794 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_int64_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2843  1 n 1 2791  5 value 1 2834  
147 0 0 4 186 2794 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariable::set_double_word
//       Access: Published
//  Description: Changes the nth word to the indicated value without
//               affecting the other words.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2843  1 n 1 2791  5 value 1 2789  
148 0 0 6 153 2790 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_name
//       Access: Published
//  Description: Returns the name of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
149 0 0 6 154 2673 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_value_type
//       Access: Published
//  Description: Returns the stated type of this variable.  This
//               should be VT_list, unless a later variable
//               declaration has changed it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
150 0 0 6 155 2790 0 0 323 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_description
//       Access: Published
//  Description: Returns the brief description of this variable, if
//               it has been defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
151 0 0 6 156 2791 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
152 0 0 6 157 2801 0 0 749 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
153 0 0 6 158 2791 0 0 835 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
154 0 0 6 159 2801 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
155 0 0 6 160 2801 0 0 525 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::clear_local_value
//       Access: Published
//  Description: Removes the local value defined for this variable,
//               and allows its value to be once again retrieved from
//               the .prc files.
//
//               Returns true if the value was successfully removed,
//               false if it did not exist in the first place.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2848  
156 0 0 6 161 2801 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_local_value
//       Access: Published
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
157 0 0 6 162 2801 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::has_value
//       Access: Public
//  Description: Returns true if this variable has an explicit value,
//               either from a prc file or locally set, or false if
//               variable has its default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2846  
158 0 0 4 163 2794 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2846  3 out 1 2798  
159 0 0 4 164 2794 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBase::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2846  3 out 1 2798  
160 0 0 7 188 2849 1510 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
161 0 0 7 188 2849 1510 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2801  11 description 1 2790  5 flags 1 2791  
162 0 0 7 188 2849 1510 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2790  11 description 1 2790  5 flags 1 2791  
163 0 0 6 189 2849 0 0 0 2 4 this 3 2849  5 value 1 2801  
164 0 0 6 191 2791 0 0 277 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2850  
165 0 0 6 192 2801 0 0 0 2 4 this 3 2850  1 n 1 2791  
166 0 0 4 193 2794 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2849  5 value 1 2801  
167 0 0 6 194 2801 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2850  
168 0 0 6 195 2801 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2850  
169 0 0 6 196 2801 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2850  1 n 1 2791  
170 0 0 4 197 2794 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableBool::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2849  1 n 1 2791  5 value 1 2801  
171 0 0 6 190 2801 0 0 0 1 4 this 3 2850  
172 0 0 6 200 2790 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_name
//       Access: Public
//  Description: Returns the name of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
173 0 0 6 201 2801 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_used
//       Access: Public
//  Description: Returns true if the variable has been referenced by a
//               ConfigVariable somewhere in code, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
174 0 0 6 202 2673 0 0 376 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_value_type
//       Access: Public
//  Description: Returns the stated type of this variable.  If the
//               variable has not yet been defined, this will be
//               VT_undefined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
175 0 0 6 203 2790 0 0 320 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_description
//       Access: Public
//  Description: Returns the brief description of this variable, if
//               it has been defined.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
176 0 0 6 204 2791 0 0 522 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_flags
//       Access: Public
//  Description: Returns the flags value as set by set_flags().  This
//               includes the trust level and some other settings.
//               See the individual methods is_closed(),
//               get_trust_level(), etc. to pull out the semantic
//               meaning of these flags individually.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
177 0 0 6 205 2801 0 0 749 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_closed
//       Access: Public
//  Description: Returns true if the variable is not trusted by any
//               prc file (and hence cannot be modified from its
//               compiled-in default value), or false for the normal
//               case, in which the variable can be modified by any
//               prc file at or above its trust level (see
//               get_trust_level()).
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
178 0 0 6 206 2791 0 0 835 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trust_level
//       Access: Public
//  Description: Returns the minimum trust_level a prc file must
//               demonstrate in order to redefine the value for this
//               variable.  Arguably, this should be called the
//               "mistrust level", since the larger the value, the
//               more suspicious we are of prc files.  This value is
//               not used if is_closed() returns true, which indicates
//               no file may be trusted.
//
//               This value only has effect in a release build
//               (specifically, when PRC_RESPECT_TRUST_LEVEL is
//               defined true in Config.pp).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
179 0 0 6 207 2801 0 0 510 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::is_dynamic
//       Access: Public
//  Description: Returns true if the variable was indicated as
//               "dynamic" by its constructor, indicating that its
//               name was dynamically generated, possibly from a large
//               pool, and it should not be listed along with the
//               other variables.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
180 0 0 6 208 2829 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_default_value
//       Access: Public
//  Description: Returns the default variable specified for this
//               variable.  If the variable has not yet been defined,
//               this will return NULL.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
181 0 0 4 209 2794 0 0 0 2 4 this 3 2832  10 value_type 1 2673  
182 0 0 4 210 2794 0 0 0 2 4 this 3 2832  5 flags 1 2791  
183 0 0 4 211 2794 0 0 0 2 4 this 3 2832  11 description 1 2790  
184 0 0 4 212 2794 0 0 0 2 4 this 3 2832  13 default_value 1 2790  
185 0 0 4 213 2794 0 0 306 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::set_used
//       Access: Public
//  Description: Marks that the variable has been "declared" by a
//               ConfigVariable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2832  
186 0 0 6 214 2833 0 0 0 1 4 this 3 2832  
187 0 0 6 215 2801 0 0 0 1 4 this 3 2832  
188 0 0 6 216 2801 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::has_local_value
//       Access: Public
//  Description: Returns true if this variable's value has been
//               shadowed by a local assignment (as created via
//               make_local_value()), or false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
189 0 0 6 217 2801 0 0 0 1 4 this 3 2852  
190 0 0 6 218 2791 0 0 0 1 4 this 3 2852  
191 0 0 6 219 2829 0 0 0 2 4 this 3 2852  1 n 1 2791  
192 0 0 6 220 2791 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_references
//       Access: Public
//  Description: Returns the number of prc files that reference this
//               variable.  This is not exactly the same as the number
//               of declarations; see get_reference().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
193 0 0 6 221 2829 0 0 645 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_reference
//       Access: Public
//  Description: Returns the nth declaration in a prc file that
//               references this variable.  This is similar, but not
//               identical to, get_declaration().  The difference is
//               that this will list *only* true references in a prc
//               file, and will not list default values or
//               locally-assigned values; it also will list even the
//               untrusted files.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2791  
194 0 0 6 222 2791 0 0 378 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_trusted_references
//       Access: Public
//  Description: Returns the number of trusted prc files that
//               reference this variable.  See also
//               get_num_references().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
195 0 0 6 223 2829 0 0 776 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_trusted_reference
//       Access: Public
//  Description: Returns the nth declaration in a trusted prc file
//               that references this variable.  This is similar, but
//               not identical to, get_declaration().  The difference
//               is that this will list *only* true references in a
//               prc file, and will not list default values or
//               locally-assigned values.
//
//               This is also similar to get_reference(), except that
//               it only lists the trusted declarations, omitting the
//               untrusted ones.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2791  
196 0 0 6 224 2791 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_num_unique_references
//       Access: Public
//  Description: Returns the number of trusted, unique (by string
//               value) values there exist for this variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2852  
197 0 0 6 225 2829 0 0 431 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableCore::get_unique_reference
//       Access: Public
//  Description: Returns the nth trusted, unique value for this
//               variable.  This is similar to
//               get_trusted_reference(), except that duplicate values
//               are removed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2852  1 n 1 2791  
198 0 0 4 226 2794 0 0 0 2 4 this 3 2852  3 out 1 2798  
199 0 0 4 227 2794 0 0 0 2 4 this 3 2852  3 out 1 2798  
200 0 0 7 229 2854 1549 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
201 0 0 7 229 2854 1549 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2789  11 description 1 2790  5 flags 1 2791  
202 0 0 7 229 2854 1549 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2790  11 description 1 2790  5 flags 1 2791  
203 0 0 6 230 2854 0 0 0 2 4 this 3 2854  5 value 1 2789  
204 0 0 6 232 2791 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2855  
205 0 0 6 233 2789 0 0 0 2 4 this 3 2855  1 n 1 2791  
206 0 0 4 234 2794 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2854  5 value 1 2789  
207 0 0 6 235 2789 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2855  
208 0 0 6 236 2789 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2855  
209 0 0 6 237 2789 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2855  1 n 1 2791  
210 0 0 4 238 2794 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableDouble::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2854  1 n 1 2791  5 value 1 2789  
211 0 0 6 231 2789 0 0 0 1 4 this 3 2855  
212 0 0 7 241 2857 1571 0 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
213 0 0 7 241 2857 1571 0 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2858  11 description 1 2790  5 flags 1 2791  
214 0 0 6 242 2857 0 0 0 2 4 this 3 2857  5 value 1 2858  
215 0 0 6 244 2790 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::c_str
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
216 0 0 6 245 2801 0 0 225 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::empty
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
217 0 0 6 246 2802 0 0 226 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
218 0 0 6 247 2862 0 0 0 2 4 this 3 2860  1 n 1 2791  
219 0 0 6 248 2790 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath
//       Access: Public
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator, so this function is a
//               little redundant.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
220 0 0 6 249 2790 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_dirname
//       Access: Public
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
221 0 0 6 250 2790 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename
//       Access: Public
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
222 0 0 6 251 2790 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_fullpath_wo_extension
//       Access: Public
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
223 0 0 6 252 2790 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_basename_wo_extension
//       Access: Public
//  Description: Returns the basename part of the filename, without
//               the file extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
224 0 0 6 253 2790 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_extension
//       Access: Public
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
225 0 0 6 254 2801 0 0 34 // Comparison operators are handy. 2 4 this 3 2860  5 other 1 2858  
226 0 0 6 255 2801 0 0 0 2 4 this 3 2860  5 other 1 2858  
227 0 0 6 256 2801 0 0 0 2 4 this 3 2860  5 other 1 2858  
228 0 0 4 257 2794 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2857  5 value 1 2858  
229 0 0 7 258 2863 1726 0 262 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
230 0 0 7 259 2863 1726 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2860  
231 0 0 7 260 2863 1726 0 265 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2860  1 n 1 2791  
232 0 0 4 261 2794 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableFilename::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2857  1 n 1 2791  5 value 1 2858  
233 0 0 6 243 2858 0 0 0 1 4 this 3 2860  
234 0 0 7 264 2864 1582 0 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
235 0 0 7 264 2864 1582 0 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2791  11 description 1 2790  5 flags 1 2791  
236 0 0 7 264 2864 1582 0 230 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2790  11 description 1 2790  5 flags 1 2791  
237 0 0 6 265 2864 0 0 0 2 4 this 3 2864  5 value 1 2791  
238 0 0 6 267 2791 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2865  
239 0 0 6 268 2791 0 0 0 2 4 this 3 2865  1 n 1 2791  
240 0 0 4 269 2794 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2864  5 value 1 2791  
241 0 0 6 270 2791 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2865  
242 0 0 6 271 2791 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2865  
243 0 0 6 272 2791 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2865  1 n 1 2791  
244 0 0 4 273 2794 0 0 337 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2864  1 n 1 2791  5 value 1 2791  
245 0 0 6 266 2791 0 0 0 1 4 this 3 2865  
246 0 0 7 276 2867 1593 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
247 0 0 7 276 2867 1593 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2834  11 description 1 2790  5 flags 1 2834  
248 0 0 7 276 2867 1593 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2790  11 description 1 2790  5 flags 1 2834  
249 0 0 6 277 2867 0 0 0 2 4 this 3 2867  5 value 1 2834  
250 0 0 6 279 2834 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::size()
//       Access: Published
//  Description: Returns the number of unique words in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
251 0 0 6 280 2834 0 0 0 2 4 this 3 2868  1 n 1 2791  
252 0 0 4 281 2794 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2867  5 value 1 2834  
253 0 0 6 282 2834 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
254 0 0 6 283 2834 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2868  
255 0 0 6 284 2834 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2868  1 n 1 2791  
256 0 0 4 285 2794 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableInt64::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2867  1 n 1 2791  5 value 1 2834  
257 0 0 6 278 2834 0 0 0 1 4 this 3 2868  
258 0 0 7 288 2870 1595 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2790  11 description 1 2790  5 flags 1 2791  
259 0 0 6 290 2791 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_values
//       Access: Published
//  Description: Returns the number of values in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
260 0 0 6 291 2790 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_string_value
//       Access: Published
//  Description: Returns the nth value of the variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  1 n 1 2791  
261 0 0 6 292 2791 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_num_unique_values
//       Access: Published
//  Description: Returns the number of unique values in the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
262 0 0 6 293 2790 0 0 281 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::get_unique_value
//       Access: Published
//  Description: Returns the nth unique value of the variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2871  1 n 1 2791  
263 0 0 6 294 2791 0 0 278 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableList::size()
//       Access: Published
//  Description: Returns the number of unique values of the variable.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2871  
264 0 0 6 295 2790 0 0 0 2 4 this 3 2871  1 n 1 2791  
265 0 0 4 296 2794 0 0 0 2 4 this 3 2871  3 out 1 2798  
266 0 0 4 297 2794 0 0 0 2 4 this 3 2871  3 out 1 2798  
267 0 0 6 299 2832 0 0 0 2 4 this 3 2873  4 name 1 2790  
268 0 0 6 300 2832 0 0 0 6 4 this 3 2873  7 pattern 1 2790  4 type 1 2673  13 default_value 1 2790  11 description 1 2790  5 flags 1 2791  
269 0 0 6 301 2791 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_num_variables
//       Access: Published
//  Description: Returns the current number of active ConfigVariableCores in
//               the world.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2874  
270 0 0 6 302 2832 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableManager::get_variable
//       Access: Published
//  Description: Returns the nth active ConfigVariableCore in the world.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2874  1 n 1 2791  
271 0 0 6 303 2790 0 0 0 2 4 this 3 2874  1 n 1 2791  
272 0 0 6 304 2801 0 0 0 2 4 this 3 2874  1 n 1 2791  
273 0 0 4 305 2794 0 0 0 2 4 this 3 2874  3 out 1 2798  
274 0 0 4 306 2794 0 0 0 2 4 this 3 2874  3 out 1 2798  
275 0 0 4 307 2794 0 0 0 2 4 this 3 2874  3 out 1 2798  
276 0 0 4 308 2794 0 0 0 1 4 this 3 2874  
277 0 0 4 309 2794 0 0 0 1 4 this 3 2874  
278 0 0 4 310 2794 0 0 0 1 4 this 3 2874  
279 0 0 6 311 2873 0 0 0 0 
280 0 0 7 313 2878 1618 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2876  11 description 1 2790  5 flags 1 2791  
281 0 0 7 313 2878 1618 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 name 1 2790  11 description 1 2790  5 flags 1 2791  
282 0 0 7 313 2878 1618 0 237 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2790  11 description 1 2790  5 flags 1 2791  
283 0 0 6 316 2876 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
284 0 0 6 317 2876 0 0 243 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_default_value
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
285 0 0 6 318 2801 0 0 359 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear_local_value
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2878  
286 0 0 4 319 2794 0 0 347 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::clear
//       Access: Published
//  Description: Removes all the directories locally added to the
//               search list, and restores it to its original form.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2878  
287 0 0 4 320 2794 0 0 293 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_directory
//       Access: Published
//  Description: Adds a new directory to the end of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  9 directory 1 2858  
288 0 0 4 321 2794 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_directory
//       Access: Published
//  Description: Adds a new directory to the front of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  9 directory 1 2858  
289 0 0 4 322 2794 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  4 path 1 2876  
290 0 0 4 322 2794 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::append_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the end of the search list.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2878  4 path 1 2790  9 separator 1 2790  
291 0 0 4 323 2794 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::prepend_path
//       Access: Published
//  Description: Adds all of the directories listed in the search path
//               to the beginning of the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2878  4 path 1 2876  
292 0 0 6 324 2801 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::is_empty
//       Access: Published
//  Description: Returns true if the search list is empty, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
293 0 0 6 325 2791 0 0 298 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_num_directories
//       Access: Published
//  Description: Returns the number of directories on the search list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2879  
294 0 0 6 326 2858 0 0 284 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::get_directory
//       Access: Published
//  Description: Returns the nth directory on the search list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  1 n 1 2791  
295 0 0 7 327 2863 1726 0 466 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_file
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Returns the full
//               matching pathname of the first match if found, or the
//               empty string if not found.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  8 filename 1 2858  
296 0 0 7 328 2881 1659 0 458 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  8 filename 1 2858  
297 0 0 6 328 2791 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::find_all_files
//       Access: Published
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2879  8 filename 1 2858  7 results 1 2881  
298 0 0 4 329 2794 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  3 out 1 2798  
299 0 0 4 330 2794 0 0 231 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableSearchPath::write
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2879  3 out 1 2798  
300 0 0 6 315 2876 0 0 0 1 4 this 3 2879  
301 0 0 7 332 2882 1650 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
302 0 0 7 332 2882 1650 0 233 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 name 1 2790  13 default_value 1 2790  11 description 1 2790  5 flags 1 2791  
303 0 0 6 333 2882 0 0 0 2 4 this 3 2882  5 value 1 2790  
304 0 0 6 335 2790 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::c_str
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2883  
305 0 0 6 336 2801 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::empty
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2883  
306 0 0 6 337 2802 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2883  
307 0 0 6 338 2862 0 0 0 2 4 this 3 2883  1 n 1 2791  
308 0 0 6 339 2801 0 0 34 // Comparison operators are handy. 2 4 this 3 2883  5 other 1 2790  
309 0 0 6 340 2801 0 0 0 2 4 this 3 2883  5 other 1 2790  
310 0 0 6 341 2801 0 0 0 2 4 this 3 2883  5 other 1 2790  
311 0 0 4 342 2794 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_value
//       Access: Published
//  Description: Reassigns the variable's local value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2882  5 value 1 2790  
312 0 0 6 343 2790 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_value
//       Access: Published
//  Description: Returns the variable's value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2883  
313 0 0 6 344 2790 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_default_value
//       Access: Published
//  Description: Returns the variable's default value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2883  
314 0 0 6 345 2790 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::get_word
//       Access: Published
//  Description: Returns the variable's nth value.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2883  1 n 1 2791  
315 0 0 4 346 2794 0 0 340 ////////////////////////////////////////////////////////////////////
//     Function: ConfigVariableString::set_word
//       Access: Published
//  Description: Reassigns the variable's nth value.  This makes a
//               local copy of the variable's overall value.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2882  1 n 1 2791  5 value 1 2790  
316 0 0 6 334 2790 0 0 0 1 4 this 3 2883  
317 0 0 6 349 2801 0 0 0 2 3 sym 1 2790  3 def 1 2801  
318 0 0 6 350 2791 0 0 0 2 3 sym 1 2790  3 def 1 2791  
319 0 0 6 351 2808 0 0 0 2 3 sym 1 2790  3 def 1 2808  
320 0 0 6 352 2789 0 0 0 2 3 sym 1 2790  3 def 1 2789  
321 0 0 6 353 2790 0 0 0 2 3 sym 1 2790  3 def 1 2790  
322 0 0 7 367 2842 1669 0 0 0 
323 0 0 7 367 2842 1669 0 0 1 4 copy 1 2876  
324 0 0 7 367 2842 1669 0 0 1 9 directory 1 2858  
325 0 0 7 367 2842 1669 0 0 2 4 path 1 2790  9 separator 1 2790  
326 0 0 6 368 2842 0 0 0 2 4 this 3 2842  4 copy 1 2876  
327 0 0 4 370 2794 0 0 0 1 4 this 3 2842  
328 0 0 4 371 2794 0 0 0 2 4 this 3 2842  9 directory 1 2858  
329 0 0 4 372 2794 0 0 0 2 4 this 3 2842  9 directory 1 2858  
330 0 0 4 373 2794 0 0 0 2 4 this 3 2842  4 path 1 2876  
331 0 0 4 373 2794 0 0 0 3 4 this 3 2842  4 path 1 2790  9 separator 1 2790  
332 0 0 4 374 2794 0 0 0 2 4 this 3 2842  4 path 1 2876  
333 0 0 6 375 2801 0 0 0 1 4 this 3 2876  
334 0 0 6 376 2791 0 0 0 1 4 this 3 2876  
335 0 0 6 377 2858 0 0 0 2 4 this 3 2876  1 n 1 2791  
336 0 0 7 378 2863 1726 0 0 2 4 this 3 2876  8 filename 1 2858  
337 0 0 7 379 2881 1659 0 445 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::find_all_files
//       Access: Published
//  Description: This variant of find_all_files() returns the new
//               Results object, instead of filling on in on the
//               parameter list.  This is a little more convenient to
//               call from Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2876  8 filename 1 2858  
338 0 0 6 379 2791 0 0 0 3 4 this 3 2876  8 filename 1 2858  7 results 1 2881  
339 0 0 7 380 2863 1726 0 531 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::search_path
//       Access: Published, Static
//  Description: A quick-and-easy way to search a searchpath for a
//               file when you don't feel like building or keeping
//               around a DSearchPath object.  This simply
//               constructs a temporary DSearchPath based on the
//               indicated path string, and searches that.
//////////////////////////////////////////////////////////////////// 3 8 filename 1 2858  4 path 1 2790  9 separator 1 2790  
340 0 0 4 381 2794 0 0 0 3 4 this 3 2876  3 out 1 2798  9 separator 1 2790  
341 0 0 4 382 2794 0 0 0 3 4 this 3 2876  3 out 1 2798  12 indent_level 1 2791  
342 0 0 7 357 2881 1659 0 0 0 
343 0 0 7 357 2881 1659 0 0 1 4 copy 1 2885  
344 0 0 6 358 2881 0 0 0 2 4 this 3 2881  4 copy 1 2885  
345 0 0 4 360 2794 0 0 0 1 4 this 3 2881  
346 0 0 6 361 2791 0 0 0 1 4 this 3 2885  
347 0 0 6 362 2858 0 0 0 2 4 this 3 2885  1 n 1 2791  
348 0 0 7 363 2863 1726 0 0 2 4 this 3 2885  1 n 1 2791  
349 0 0 6 364 2791 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: DSearchPath::Results::size
//       Access: Published
//  Description: Returns the num of filenames in the set.  This method
//               is defined to make the Results object appear to be a
//               list in Python.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2885  
350 0 0 4 365 2794 0 0 0 2 4 this 3 2885  3 out 1 2798  
351 0 0 4 366 2794 0 0 0 3 4 this 3 2885  3 out 1 2798  12 indent_level 1 2791  
352 0 0 6 384 2801 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::has_environment_variable
//       Access: Public, Static
//  Description: Returns true if the indicated environment variable
//               is defined.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2790  
353 0 0 6 385 2790 0 0 396 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_environment_variable
//       Access: Public, Static
//  Description: Returns the definition of the indicated environment
//               variable, or the empty string if the variable is
//               undefined.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2790  
354 0 0 4 386 2794 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_environment_variable
//       Access: Public, Static
//  Description: Changes the definition of the indicated environment
//               variable.
//////////////////////////////////////////////////////////////////// 2 3 var 1 2790  5 value 1 2790  
355 0 0 4 387 2794 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::shadow_environment_variable
//       Access: Public, Static
//  Description: Changes the apparent definition of the indicated
//               environment variable by masking it within this class
//               with a new value.  This does not change the actual
//               environment variable, but future calls to
//               get_environment_variable() will return this new
//               value.
//////////////////////////////////////////////////////////////////// 2 3 var 1 2790  5 value 1 2790  
356 0 0 4 388 2794 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::clear_shadow
//       Access: Public, Static
//  Description: Removes a value set by a previous call to
//               shadow_environment_variable(), and lets the actual
//               value of the variable show again.
//////////////////////////////////////////////////////////////////// 1 3 var 1 2790  
357 0 0 6 389 2790 0 0 0 1 3 str 1 2790  
358 0 0 6 390 2791 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_num_args
//       Access: Public, Static
//  Description: Returns the number of command-line arguments
//               available, not counting arg 0, the binary name.
//////////////////////////////////////////////////////////////////// 0 
359 0 0 6 391 2790 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_arg
//       Access: Public, Static
//  Description: Returns the nth command-line argument.  The index n
//               must be in the range [0 .. get_num_args()).  The
//               first parameter, n == 0, is the first actual
//               parameter, not the binary name.
//////////////////////////////////////////////////////////////////// 1 1 n 1 2791  
360 0 0 6 392 2790 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_binary_name
//       Access: Public, Static
//  Description: Returns the name of the binary executable that
//               started this program, if it can be determined.
//////////////////////////////////////////////////////////////////// 0 
361 0 0 6 393 2790 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::get_dtool_name
//       Access: Public, Static
//  Description: Returns the name of the libdtool DLL that
//               is used in this program, if it can be determined.
//////////////////////////////////////////////////////////////////// 0 
362 0 0 4 394 2794 0 0 253 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_binary_name
//       Access: Public, Static
//  Description: Do not use.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
363 0 0 4 395 2794 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: ExecutionEnvironment::set_dtool_name
//       Access: Public, Static
//  Description: Do not use.
//////////////////////////////////////////////////////////////////// 1 4 name 1 2790  
364 0 0 7 396 2863 1726 0 0 0 
365 0 0 7 430 2887 1722 0 222 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
366 0 0 7 430 2887 1722 0 222 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2790  4 mode 1 2699  
367 0 0 4 432 2794 0 0 216 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2887  8 filename 1 2790  4 mode 1 2699  
368 0 0 4 433 2794 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: FileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2887  
369 0 0 4 428 2794 0 0 0 1 4 this 3 2888  
370 0 0 6 417 2838 0 0 0 1 4 this 3 2888  
371 0 0 6 418 2888 0 0 0 1 4 this 3 2838  
372 0 0 6 413 2791 0 0 0 1 4 this 3 2838  
373 0 0 6 414 2889 0 0 0 1 4 this 3 2838  
374 0 0 4 415 2794 0 0 0 3 4 this 3 2838  3 off 1 2891  3 dir 1 2698  
375 0 0 4 415 2794 0 0 0 2 4 this 3 2838  3 pos 1 2889  
376 0 0 6 412 2893 0 0 0 1 4 this 3 2838  
377 0 0 6 426 2798 0 0 0 1 4 this 3 2888  
378 0 0 6 427 2888 0 0 0 1 4 this 3 2798  
379 0 0 4 421 2794 0 0 0 2 4 this 3 2798  1 c 1 2862  
380 0 0 4 422 2794 0 0 0 1 4 this 3 2798  
381 0 0 6 423 2889 0 0 0 1 4 this 3 2798  
382 0 0 4 424 2794 0 0 0 3 4 this 3 2798  3 off 1 2891  3 dir 1 2698  
383 0 0 4 424 2794 0 0 0 2 4 this 3 2798  3 pos 1 2889  
384 0 0 6 420 2893 0 0 0 1 4 this 3 2798  
385 0 0 6 406 2801 0 0 0 1 4 this 3 2894  
386 0 0 6 407 2801 0 0 0 1 4 this 3 2894  
387 0 0 6 408 2801 0 0 0 1 4 this 3 2894  
388 0 0 6 409 2801 0 0 0 1 4 this 3 2894  
389 0 0 4 410 2794 0 0 0 1 4 this 3 2893  
390 0 0 7 436 2863 1726 0 225 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2858  
391 0 0 7 436 2863 1726 0 0 2 7 dirname 1 2858  8 basename 1 2858  
392 0 0 7 436 2863 1726 0 220 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
393 0 0 7 436 2863 1726 0 220 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
394 0 0 7 436 2863 1726 0 220 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
395 0 0 6 438 2896 0 0 0 1 4 this 3 2858  
396 0 0 7 439 2863 1726 0 240 ////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2858  
397 0 0 7 439 2863 1726 0 240 ////////////////////////////////////////////////////////////////////
//     Function: Filename::text_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
398 0 0 7 440 2863 1726 0 242 ////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2858  
399 0 0 7 440 2863 1726 0 242 ////////////////////////////////////////////////////////////////////
//     Function: Filename::binary_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
400 0 0 7 441 2863 1726 0 239 ////////////////////////////////////////////////////////////////////
//     Function: Filename::dso_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
401 0 0 7 442 2863 1726 0 246 ////////////////////////////////////////////////////////////////////
//     Function: Filename::executable_filename named constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
402 0 0 7 443 2863 1726 0 348 ////////////////////////////////////////////////////////////////////
//     Function: Filename::pattern_filename named constructor
//       Access: Published
//  Description: Constructs a filename that represents a sequence of
//               numbered files.  See set_pattern().
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2790  
403 0 0 7 444 2863 1726 0 0 2 11 os_specific 1 2790  4 type 1 2702  
404 0 0 7 445 2863 1726 0 0 2 11 os_specific 1 2790  4 type 1 2702  
405 0 0 7 446 2863 1726 0 0 2 11 user_string 1 2790  4 type 1 2702  
406 0 0 7 447 2863 1726 0 0 4 7 dirname 1 2790  6 prefix 1 2790  6 suffix 1 2790  4 type 1 2702  
407 0 0 6 448 2858 0 0 0 0 
408 0 0 6 449 2858 0 0 0 0 
409 0 0 6 450 2858 0 0 0 0 
410 0 0 6 451 2858 0 0 0 0 
411 0 0 6 452 2863 0 0 233 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Copy assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  4 copy 1 2858  
412 0 0 6 452 2863 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  8 filename 1 2790  
413 0 0 6 452 2863 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  8 filename 1 2790  
414 0 0 6 452 2863 0 0 228 ////////////////////////////////////////////////////////////////////
//     Function: Filename::Assignment operator
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  8 filename 1 2790  
415 0 0 6 454 2790 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: Filename::c_str
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
416 0 0 6 455 2801 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: Filename::empty
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
417 0 0 6 456 2802 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
418 0 0 6 457 2862 0 0 0 2 4 this 3 2858  1 n 1 2791  
419 0 0 6 458 2896 0 0 0 1 4 this 3 2858  
420 0 0 6 459 2790 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::substr
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 this 3 2858  5 begin 1 2802  3 end 1 2802  
421 0 0 6 460 2863 0 0 0 2 4 this 3 2863  5 other 1 2790  
422 0 0 7 461 2863 1726 0 0 2 4 this 3 2858  5 other 1 2790  
423 0 0 7 462 2863 1726 0 0 2 4 this 3 2858  5 other 1 2858  
424 0 0 6 463 2790 0 0 382 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath
//       Access: Published
//  Description: Returns the entire filename: directory, basename,
//               extension.  This is the same thing returned by the
//               string typecast operator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
425 0 0 6 464 2790 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_w
//       Access: Published
//  Description: Returns the entire filename as a wide-character
//               string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
426 0 0 6 465 2790 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_dirname
//       Access: Published
//  Description: Returns the directory part of the filename.  This is
//               everything in the filename up to, but not including
//               the rightmost slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
427 0 0 6 466 2790 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename
//       Access: Published
//  Description: Returns the basename part of the filename.  This is
//               everything in the filename after the rightmost slash,
//               including any extensions.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
428 0 0 6 467 2790 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_fullpath_wo_extension
//       Access: Published
//  Description: Returns the full filename--directory and basename
//               parts--except for the extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
429 0 0 6 468 2790 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_basename_wo_extension
//       Access: Published
//  Description: Returns the basename part of the filename, without
//               the file extension.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
430 0 0 6 469 2790 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_extension
//       Access: Published
//  Description: Returns the file extension.  This is everything after
//               the rightmost dot, if there is one, or the empty
//               string if there is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
431 0 0 4 470 2794 0 0 68 // You can also use any of these to reassign pieces of the filename. 2 4 this 3 2863  1 s 1 2790  
432 0 0 4 471 2794 0 0 0 2 4 this 3 2863  1 s 1 2790  
433 0 0 4 472 2794 0 0 0 2 4 this 3 2863  1 s 1 2790  
434 0 0 4 473 2794 0 0 0 2 4 this 3 2863  1 s 1 2790  
435 0 0 4 474 2794 0 0 0 2 4 this 3 2863  1 s 1 2790  
436 0 0 4 475 2794 0 0 0 2 4 this 3 2863  1 s 1 2790  
437 0 0 4 476 2794 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_binary
//       Access: Published
//  Description: Indicates that the filename represents a binary file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2863  
438 0 0 4 477 2794 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_text
//       Access: Published
//  Description: Indicates that the filename represents a text file.
//               This is primarily relevant to the read_file() and
//               write_file() methods, so they can set the appropriate
//               flags to the OS.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2863  
439 0 0 6 478 2801 0 0 523 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a binary file via a previous call to
//               set_binary().  It is possible that neither
//               is_binary() nor is_text() will be true, if neither
//               set_binary() nor set_text() was ever called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
440 0 0 6 479 2801 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_text
//       Access: Published
//  Description: Returns true if the Filename has been indicated to
//               represent a text file via a previous call to
//               set_text().  It is possible that neither is_binary()
//               nor is_text() will be true, if neither set_binary()
//               nor set_text() was ever called.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
441 0 0 6 480 2801 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_binary_or_text
//       Access: Published
//  Description: Returns true either is_binary() or is_text() is true;
//               that is, that the filename has been specified as
//               either binary or text.  If this is false, the
//               filename has not been specified.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
442 0 0 4 481 2794 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_type
//       Access: Published
//  Description: Sets the type of the file represented by the
//               filename.  This is useful for to_os_specific(),
//               resolve_filename(), test_existence(), and all such
//               real-world access functions.  It helps the Filename
//               know how to map the internal filename to the
//               OS-specific filename (for instance, maybe executables
//               should have an .exe extension).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  4 type 1 2702  
443 0 0 6 482 2702 0 0 325 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_type
//       Access: Published
//  Description: Returns the type of the file represented by the
//               filename, as previously set by set_type().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
444 0 0 4 483 2794 0 0 1075 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_pattern
//       Access: Published
//  Description: Sets the flag indicating whether this is a filename
//               pattern.  When this is true, the filename is
//               understood to be a placeholder for a numbered
//               sequence of filename, such as an image sequence.  In
//               this case, a sequence of one or more hash characters
//               ("#") should appear in the filename string; these
//               characters will be filled in with the corresponding
//               number (or more) of digits representing the sequence
//               number.  Sequence numbers always begin counting at 0.
//
//               When this is true, methods like has_hash() and
//               get_hash_to_end() and get_filename_index() may be
//               called.  Methods like is_exists() will implicitly
//               test for existance of filename sequence 0.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2863  7 pattern 1 2801  
445 0 0 6 484 2801 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_pattern
//       Access: Published
//  Description: Returns the flag indicating whether this is a
//               filename pattern.  See set_pattern().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
446 0 0 6 485 2801 0 0 651 ////////////////////////////////////////////////////////////////////
//     Function: Filename::has_hash
//       Access: Published
//  Description: Returns true if the filename is indicated to be a
//               filename pattern (that is, set_pattern(true) was
//               called), and the filename pattern did include a
//               sequence of hash marks, or false if it was not a
//               filename pattern or did not include hash marks.  If
//               this is true, then get_filename_index() will return a
//               different filename each time.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
447 0 0 7 486 2863 1726 0 0 2 4 this 3 2858  5 index 1 2791  
448 0 0 6 487 2790 0 0 375 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_hash_to_end
//       Access: Published
//  Description: Returns the part of the filename beginning at the
//               hash sequence (if any), and continuing to the end of
//               the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
449 0 0 4 488 2794 0 0 0 2 4 this 3 2863  1 s 1 2790  
450 0 0 4 489 2794 0 0 0 2 4 this 3 2858  10 components 1 2898  
451 0 0 4 490 2794 0 0 0 1 4 this 3 2863  
452 0 0 6 491 2801 0 0 383 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_local
//       Access: Published
//  Description: Returns true if the filename is local, e.g. does not
//               begin with a slash, or false if the filename is fully
//               specified from the root.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
453 0 0 6 492 2801 0 0 782 ////////////////////////////////////////////////////////////////////
//     Function: Filename::is_fully_qualified
//       Access: Published
//  Description: Returns true if the filename is fully qualified,
//               e.g. begins with a slash.  This is almost, but not
//               quite, the same thing as !is_local().  It's not
//               exactly the same because a special case is made for
//               filenames that begin with a single dot followed by a
//               slash--these are considered to be fully qualified
//               (they are explicitly relative to the current
//               directory, and do not refer to a filename on a search
//               path somewhere).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
454 0 0 4 493 2794 0 0 0 1 4 this 3 2863  
455 0 0 4 493 2794 0 0 0 2 4 this 3 2863  15 start_directory 1 2858  
456 0 0 6 494 2801 0 0 0 1 4 this 3 2863  
457 0 0 6 495 2801 0 0 0 1 4 this 3 2863  
458 0 0 6 496 2790 0 0 0 1 4 this 3 2858  
459 0 0 6 497 2790 0 0 0 1 4 this 3 2858  
460 0 0 6 498 2790 0 0 0 1 4 this 3 2858  
461 0 0 6 499 2790 0 0 0 1 4 this 3 2858  
462 0 0 6 500 2790 0 0 0 1 4 this 3 2858  
463 0 0 6 501 2801 0 0 0 1 4 this 3 2858  
464 0 0 6 502 2801 0 0 0 1 4 this 3 2858  
465 0 0 6 503 2801 0 0 0 1 4 this 3 2858  
466 0 0 6 504 2801 0 0 0 1 4 this 3 2858  
467 0 0 6 505 2801 0 0 0 1 4 this 3 2858  
468 0 0 6 506 2791 0 0 0 4 4 this 3 2858  5 other 1 2858  19 this_missing_is_old 1 2801  20 other_missing_is_old 1 2801  
469 0 0 6 507 2901 0 0 0 1 4 this 3 2858  
470 0 0 6 508 2901 0 0 0 1 4 this 3 2858  
471 0 0 6 509 2902 0 0 0 1 4 this 3 2858  
472 0 0 6 510 2801 0 0 0 3 4 this 3 2863  10 searchpath 1 2876  17 default_extension 1 2790  
473 0 0 6 511 2801 0 0 0 3 4 this 3 2863  9 directory 1 2863  13 allow_backups 1 2801  
474 0 0 6 512 2791 0 0 0 2 4 this 3 2863  10 searchpath 1 2876  
475 0 0 6 513 2896 0 0 0 1 4 this 3 2858  
476 0 0 6 513 2801 0 0 0 2 4 this 3 2858  8 contents 1 2898  
477 0 0 6 514 2801 0 0 0 2 4 this 3 2858  6 stream 1 2903  
478 0 0 6 514 2801 0 0 0 2 4 this 3 2858  6 stream 1 2904  
479 0 0 6 515 2801 0 0 0 3 4 this 3 2858  6 stream 1 2906  8 truncate 1 2801  
480 0 0 6 515 2801 0 0 0 3 4 this 3 2858  6 stream 1 2907  8 truncate 1 2801  
481 0 0 6 516 2801 0 0 0 2 4 this 3 2858  6 stream 1 2906  
482 0 0 6 516 2801 0 0 0 2 4 this 3 2858  6 stream 1 2907  
483 0 0 6 517 2801 0 0 0 3 4 this 3 2858  6 stream 1 2909  8 truncate 1 2801  
484 0 0 6 517 2801 0 0 0 3 4 this 3 2858  6 stream 1 2910  8 truncate 1 2801  
485 0 0 6 518 2801 0 0 0 2 4 this 3 2858  6 stream 1 2909  
486 0 0 6 518 2801 0 0 0 2 4 this 3 2858  6 stream 1 2910  
487 0 0 6 519 2801 0 0 0 1 4 this 3 2858  
488 0 0 6 520 2801 0 0 0 1 4 this 3 2858  
489 0 0 6 521 2801 0 0 0 1 4 this 3 2858  
490 0 0 6 522 2801 0 0 0 2 4 this 3 2858  5 other 1 2858  
491 0 0 6 523 2801 0 0 0 2 4 this 3 2858  5 other 1 2858  
492 0 0 6 524 2801 0 0 0 1 4 this 3 2858  
493 0 0 6 525 2801 0 0 0 1 4 this 3 2858  
494 0 0 6 526 2801 0 0 0 1 4 this 3 2858  
495 0 0 6 527 2801 0 0 34 // Comparison operators are handy. 2 4 this 3 2858  5 other 1 2790  
496 0 0 6 528 2801 0 0 0 2 4 this 3 2858  5 other 1 2790  
497 0 0 6 529 2801 0 0 0 2 4 this 3 2858  5 other 1 2790  
498 0 0 6 530 2791 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: Filename::compare_to
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  5 other 1 2858  
499 0 0 6 531 2801 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: Filename::__nonzero__
//       Access: Published
//  Description: Returns true if the Filename is valid (not empty),
//               or false if it is an empty string.
//
//               This implements the Python equivalent to operator
//               bool.  Defining an actual operator bool method for
//               C++ use would work too, but it seems to cause too
//               many ambiguities for the C++ compiler, so we use this
//               Python-only approach instead.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2858  
500 0 0 6 532 2791 0 0 0 1 4 this 3 2858  
501 0 0 4 533 2794 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: Filename::output
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2858  3 out 1 2798  
502 0 0 4 534 2794 0 0 557 ////////////////////////////////////////////////////////////////////
//     Function: Filename::set_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames.  This is used to represent
//               wide-character (Unicode) filenames internally.  On
//               non-Windows-based systems, the encoded filename is
//               also passed to the underlying operating system.
//////////////////////////////////////////////////////////////////// 1 8 encoding 1 2728  
503 0 0 6 535 2728 0 0 386 ////////////////////////////////////////////////////////////////////
//     Function: Filename::get_filesystem_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequent Filenames objects.  See
//               set_filesystem_encoding().
//////////////////////////////////////////////////////////////////// 0 
504 0 0 7 536 2912 2151 0 0 0 
505 0 0 6 453 2790 0 0 60 // And retrieval is by any of the classic string operations. 1 4 this 3 2858  
506 0 0 7 538 2915 1842 0 225 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2913  
507 0 0 7 538 2915 1842 0 220 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 7 pattern 1 2790  
508 0 0 6 539 2915 0 0 0 2 4 this 3 2915  4 copy 1 2913  
509 0 0 6 540 2801 0 0 0 2 4 this 3 2913  5 other 1 2913  
510 0 0 6 541 2801 0 0 0 2 4 this 3 2913  5 other 1 2913  
511 0 0 6 542 2801 0 0 0 2 4 this 3 2913  5 other 1 2913  
512 0 0 4 543 2794 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_pattern
//       Access: Public
//  Description: Changes the pattern string that the GlobPattern
//               object matches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  7 pattern 1 2790  
513 0 0 6 544 2790 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_pattern
//       Access: Public
//  Description: Returns the pattern string that the GlobPattern
//               object matches.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2913  
514 0 0 4 545 2794 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_case_sensitive
//       Access: Public
//  Description: Sets whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  14 case_sensitive 1 2801  
515 0 0 6 546 2801 0 0 373 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_case_sensitive
//       Access: Public
//  Description: Returns whether the match is case sensitive (true) or
//               case insensitive (false).  The default is case
//               sensitive.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2913  
516 0 0 4 547 2794 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::set_nomatch_chars
//       Access: Public
//  Description: Specifies a set of characters that are not matched by
//               * or ?.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2915  13 nomatch_chars 1 2790  
517 0 0 6 548 2790 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::get_nomatch_chars
//       Access: Public
//  Description: Returns the set of characters that are not matched by
//               * or ?.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2913  
518 0 0 6 549 2801 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::matches
//       Access: Public
//  Description: Returns true if the candidate string matches the
//               pattern, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  9 candidate 1 2790  
519 0 0 4 550 2794 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: GlobPattern::output
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 2913  3 out 1 2798  
520 0 0 6 551 2801 0 0 0 1 4 this 3 2913  
521 0 0 6 552 2790 0 0 0 1 4 this 3 2913  
522 0 0 6 553 2896 0 0 0 2 4 this 3 2913  3 cwd 1 2858  
523 0 0 6 553 2791 0 0 0 3 4 this 3 2913  7 results 1 2898  3 cwd 1 2858  
524 0 0 7 556 2916 1849 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
525 0 0 7 556 2916 1849 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 source 1 2838  11 owns_source 1 2801  8 password 1 2790  
526 0 0 6 557 2916 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2916  6 source 1 2838  11 owns_source 1 2801  8 password 1 2790  
527 0 0 6 558 2916 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the source istream unless owns_source was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2916  
528 0 0 6 559 2790 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_algorithm
//       Access: Published
//  Description: Returns the encryption algorithm that was read from
//               the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2917  
529 0 0 6 560 2791 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_key_length
//       Access: Published
//  Description: Returns the encryption key length, in bits, that was
//               read from the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2917  
530 0 0 6 561 2791 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: IDecryptStream::get_iteration_count
//       Access: Published
//  Description: Returns the value that was was read from the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2917  
531 0 0 7 564 2919 1851 0 223 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
532 0 0 7 564 2919 1851 0 223 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2790  4 mode 1 2699  
533 0 0 4 566 2794 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2919  8 filename 1 2790  4 mode 1 2699  
534 0 0 4 567 2794 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: IFileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2919  
535 0 0 7 574 2920 1859 0 227 ////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2838  
536 0 0 6 576 2838 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: IStreamWrapper::get_istream
//       Access: Published
//  Description: Returns the istream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2921  
537 0 0 6 573 2923 0 0 0 1 4 this 3 2920  
538 0 0 4 570 2794 0 0 952 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::acquire
//       Access: Published
//  Description: Acquires the internal lock.  
//
//               User code should call this to take temporary
//               possession of the stream and perform direct I/O
//               operations on it, for instance to make several
//               sequential atomic reads.  You may not call any of the
//               StreamWrapper methods while the lock is held, other
//               than release().
//
//               Use with extreme caution!  This is a very low-level,
//               non-recursive lock.  You must call acquire() only
//               once, and you must later call release() exactly once.
//               Failing to do so may result in a hard deadlock with
//               no available debugging features.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2923  
539 0 0 4 571 2794 0 0 381 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapperBase::release
//       Access: Published
//  Description: Releases the internal lock.  Must be called exactly
//               once following a call to acquire().  See the cautions
//               with acquire().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2923  
540 0 0 6 578 2802 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_alloc
//       Access: Published, Static
//  Description: Returns the total number of bytes consumed by all the
//               pages allocated internally by this object.
//////////////////////////////////////////////////////////////////// 0 
541 0 0 6 579 2802 0 0 356 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_used
//       Access: Published, Static
//  Description: Returns the total number of bytes requested by the
//               application in calls to NeverFreeMemory::alloc().
//////////////////////////////////////////////////////////////////// 0 
542 0 0 6 580 2802 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: NeverFreeMemory::get_total_unused
//       Access: Published, Static
//  Description: Returns the difference between get_total_alloc() and
//               get_total_used().  This represents bytes in allocated
//               pages that have not (yet) been used by the
//               application.
//////////////////////////////////////////////////////////////////// 0 
543 0 0 7 583 2924 1866 0 0 0 
544 0 0 4 585 2794 0 0 0 3 4 this 3 2924  11 ostream_ptr 1 2798  12 delete_later 1 2801  
545 0 0 6 586 2798 0 0 0 1 4 this 3 2925  
546 0 0 4 588 2794 0 0 0 1 4 this 3 2924  
547 0 0 6 589 2801 0 0 0 1 4 this 3 2925  
548 0 0 4 590 2794 0 0 0 1 4 this 3 2925  
549 0 0 6 591 2801 0 0 1042 ////////////////////////////////////////////////////////////////////
//     Function: Notify::has_assert_failed
//       Access: Public
//  Description: Returns true if an assertion test has failed (and not
//               been ignored) since the last call to
//               clear_assert_failed().
//
//               When an assertion test fails, the assert handler
//               may decide either to abort, return, or ignore the
//               assertion.  Naturally, if it decides to abort, this
//               flag is irrelevant.  If it chooses to ignore the
//               assertion, the flag is not set.  However, if the
//               assert handler chooses to return out of the
//               function (the normal case), it will also set this
//               flag to indicate that an assertion failure has
//               occurred.
//
//               This will also be the behavior in the absence of a
//               user-defined assert handler.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2925  
550 0 0 6 592 2790 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: Notify::get_assert_error_message
//       Access: Public
//  Description: Returns the error message that corresponds to the
//               assertion that most recently failed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2925  
551 0 0 4 593 2794 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: Notify::clear_assert_failed
//       Access: Public
//  Description: Resets the assert_failed flag that is set whenever an
//               assertion test fails.  See has_assert_failed().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2924  
552 0 0 6 594 2927 0 0 0 1 4 this 3 2924  
553 0 0 6 595 2927 0 0 0 2 4 this 3 2924  8 fullname 1 2790  
554 0 0 6 595 2927 0 0 0 3 4 this 3 2924  8 basename 1 2790  15 parent_category 1 2927  
555 0 0 6 595 2927 0 0 0 3 4 this 3 2924  8 basename 1 2790  15 parent_fullname 1 2790  
556 0 0 6 596 2798 0 0 0 0 
557 0 0 6 597 2798 0 0 0 0 
558 0 0 4 598 2794 0 0 0 1 3 str 1 2790  
559 0 0 6 599 2924 0 0 0 0 
560 0 0 6 605 2790 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_fullname
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
561 0 0 6 606 2790 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_basename
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
562 0 0 6 607 2711 0 0 224 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::get_severity
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
563 0 0 4 608 2794 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::set_severity
//       Access: Public
//  Description: Sets the severity level of messages that will be
//               reported from this Category.  This allows any message
//               of this severity level or higher.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2927  8 severity 1 2711  
564 0 0 6 609 2801 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_on
//       Access: Public
//  Description: Returns true if messages of the indicated severity
//               level ought to be reported for this Category.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  8 severity 1 2711  
565 0 0 6 610 2801 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_spam
//       Access: Public
//  Description: A shorthand way to write is_on(NS_spam).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
566 0 0 6 611 2801 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_debug
//       Access: Public
//  Description: A shorthand way to write is_on(NS_debug).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
567 0 0 6 612 2801 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_info
//       Access: Public
//  Description: A shorthand way to write is_on(NS_info).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
568 0 0 6 613 2801 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_warning
//       Access: Public
//  Description: A shorthand way to write is_on(NS_warning).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
569 0 0 6 614 2801 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_error
//       Access: Public
//  Description: A shorthand way to write is_on(NS_error).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
570 0 0 6 615 2801 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::is_fatal
//       Access: Public
//  Description: A shorthand way to write is_on(NS_fatal).
//////////////////////////////////////////////////////////////////// 1 4 this 3 2928  
571 0 0 6 616 2798 0 0 0 3 4 this 3 2928  8 severity 1 2711  6 prefix 1 2801  
572 0 0 6 617 2798 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::spam
//       Access: Public
//  Description: A shorthand way to write out(NS_spam).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 prefix 1 2801  
573 0 0 6 618 2798 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::debug
//       Access: Public
//  Description: A shorthand way to write out(NS_debug).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 prefix 1 2801  
574 0 0 6 619 2798 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::info
//       Access: Public
//  Description: A shorthand way to write out(NS_info).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 prefix 1 2801  
575 0 0 6 620 2798 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::warning
//       Access: Public
//  Description: A shorthand way to write out(NS_warning).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 prefix 1 2801  
576 0 0 6 621 2798 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::error
//       Access: Public
//  Description: A shorthand way to write out(NS_error).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 prefix 1 2801  
577 0 0 6 622 2798 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: NotifyCategory::fatal
//       Access: Public
//  Description: A shorthand way to write out(NS_fatal).
//////////////////////////////////////////////////////////////////// 2 4 this 3 2928  6 prefix 1 2801  
578 0 0 6 623 2791 0 0 0 1 4 this 3 2928  
579 0 0 6 624 2927 0 0 0 2 4 this 3 2928  1 i 1 2791  
580 0 0 4 625 2794 0 0 0 1 5 delta 1 2892  
581 0 0 6 601 2930 0 0 0 1 4 this 3 2927  
582 0 0 6 602 2927 0 0 0 1 4 this 3 2930  
583 0 0 6 603 2931 0 0 0 1 4 this 3 2927  
584 0 0 6 604 2927 0 0 0 1 4 this 3 2931  
585 0 0 7 629 2932 1914 0 226 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
586 0 0 7 629 2932 1914 0 226 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 dest 1 2798  9 owns_dest 1 2801  8 password 1 2790  
587 0 0 6 630 2932 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 2932  4 dest 1 2798  9 owns_dest 1 2801  8 password 1 2790  
588 0 0 6 631 2932 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::close
//       Access: Published
//  Description: Resets the EncryptStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2932  
589 0 0 4 632 2794 0 0 722 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_algorithm
//       Access: Published
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to open().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but open() will
//               fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2932  9 algorithm 1 2790  
590 0 0 4 633 2794 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_key_length
//       Access: Published
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               open().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but open() will fail.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2932  10 key_length 1 2791  
591 0 0 4 634 2794 0 0 851 ////////////////////////////////////////////////////////////////////
//     Function: OEncryptStream::set_iteration_count
//       Access: Published
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to open().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               encryption-iteration-count config variable.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2932  15 iteration_count 1 2791  
592 0 0 7 637 2933 1916 0 223 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
593 0 0 7 637 2933 1916 0 223 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 filename 1 2790  4 mode 1 2699  
594 0 0 4 639 2794 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::open
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 2933  8 filename 1 2790  4 mode 1 2699  
595 0 0 4 640 2794 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: OFileStream::close
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 2933  
596 0 0 7 643 2934 1921 0 227 ////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2798  
597 0 0 6 645 2798 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: OStreamWrapper::get_ostream
//       Access: Published
//  Description: Returns the ostream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2935  
598 0 0 6 642 2923 0 0 0 1 4 this 3 2934  
599 0 0 7 648 2937 1940 0 0 1 4 copy 1 2784  
600 0 0 7 648 2937 1940 0 0 1 11 type_handle 1 2912  
601 0 0 7 648 2937 1940 0 0 1 6 source 1 2786  
602 0 0 7 649 2937 1940 0 0 2 1 n 1 2788  11 type_handle 1 2912  
603 0 0 6 650 2788 0 0 0 1 4 this 3 2784  
604 0 0 4 651 2794 0 0 0 2 4 this 3 2937  1 x 1 2789  
605 0 0 4 652 2794 0 0 0 1 4 this 3 2937  
606 0 0 6 653 2789 0 0 0 2 4 this 3 2784  1 n 1 2788  
607 0 0 4 654 2794 0 0 0 3 4 this 3 2937  1 n 1 2788  5 value 1 2789  
608 0 0 6 655 2789 0 0 0 2 4 this 3 2784  1 n 1 2788  
609 0 0 4 656 2794 0 0 0 3 4 this 3 2937  1 n 1 2788  5 value 1 2789  
610 0 0 6 657 2790 0 0 0 1 4 this 3 2784  
611 0 0 4 658 2794 0 0 0 2 4 this 3 2937  4 data 1 2790  
612 0 0 6 659 2790 0 0 0 3 4 this 3 2784  1 n 1 2788  5 count 1 2788  
613 0 0 4 660 2794 0 0 0 4 4 this 3 2937  1 n 1 2788  5 count 1 2788  4 data 1 2790  
614 0 0 6 661 2791 0 0 0 1 4 this 3 2784  
615 0 0 6 662 2791 0 0 0 1 4 this 3 2784  
616 0 0 6 663 2791 0 0 0 3 4 this 3 2937  4 view 1 2792  5 flags 1 2791  
617 0 0 4 664 2794 0 0 0 2 4 this 3 2784  4 view 1 2792  
618 0 0 7 668 2938 1958 0 0 1 4 copy 1 2806  
619 0 0 7 668 2938 1958 0 0 1 11 type_handle 1 2912  
620 0 0 7 668 2938 1958 0 0 1 6 source 1 2786  
621 0 0 7 669 2938 1958 0 0 2 1 n 1 2788  11 type_handle 1 2912  
622 0 0 6 670 2788 0 0 0 1 4 this 3 2806  
623 0 0 4 671 2794 0 0 0 2 4 this 3 2938  1 x 1 2808  
624 0 0 4 672 2794 0 0 0 1 4 this 3 2938  
625 0 0 6 673 2808 0 0 0 2 4 this 3 2806  1 n 1 2788  
626 0 0 4 674 2794 0 0 0 3 4 this 3 2938  1 n 1 2788  5 value 1 2808  
627 0 0 6 675 2808 0 0 0 2 4 this 3 2806  1 n 1 2788  
628 0 0 4 676 2794 0 0 0 3 4 this 3 2938  1 n 1 2788  5 value 1 2808  
629 0 0 6 677 2790 0 0 0 1 4 this 3 2806  
630 0 0 4 678 2794 0 0 0 2 4 this 3 2938  4 data 1 2790  
631 0 0 6 679 2790 0 0 0 3 4 this 3 2806  1 n 1 2788  5 count 1 2788  
632 0 0 4 680 2794 0 0 0 4 4 this 3 2938  1 n 1 2788  5 count 1 2788  4 data 1 2790  
633 0 0 6 681 2791 0 0 0 1 4 this 3 2806  
634 0 0 6 682 2791 0 0 0 1 4 this 3 2806  
635 0 0 6 683 2791 0 0 0 3 4 this 3 2938  4 view 1 2792  5 flags 1 2791  
636 0 0 4 684 2794 0 0 0 2 4 this 3 2806  4 view 1 2792  
637 0 0 7 688 2939 1976 0 0 1 4 copy 1 2815  
638 0 0 7 688 2939 1976 0 0 1 11 type_handle 1 2912  
639 0 0 7 688 2939 1976 0 0 1 6 source 1 2786  
640 0 0 7 689 2939 1976 0 0 2 1 n 1 2788  11 type_handle 1 2912  
641 0 0 6 690 2788 0 0 0 1 4 this 3 2815  
642 0 0 4 691 2794 0 0 0 2 4 this 3 2939  1 x 1 2791  
643 0 0 4 692 2794 0 0 0 1 4 this 3 2939  
644 0 0 6 693 2791 0 0 0 2 4 this 3 2815  1 n 1 2788  
645 0 0 4 694 2794 0 0 0 3 4 this 3 2939  1 n 1 2788  5 value 1 2791  
646 0 0 6 695 2791 0 0 0 2 4 this 3 2815  1 n 1 2788  
647 0 0 4 696 2794 0 0 0 3 4 this 3 2939  1 n 1 2788  5 value 1 2791  
648 0 0 6 697 2790 0 0 0 1 4 this 3 2815  
649 0 0 4 698 2794 0 0 0 2 4 this 3 2939  4 data 1 2790  
650 0 0 6 699 2790 0 0 0 3 4 this 3 2815  1 n 1 2788  5 count 1 2788  
651 0 0 4 700 2794 0 0 0 4 4 this 3 2939  1 n 1 2788  5 count 1 2788  4 data 1 2790  
652 0 0 6 701 2791 0 0 0 1 4 this 3 2815  
653 0 0 6 702 2791 0 0 0 1 4 this 3 2815  
654 0 0 6 703 2791 0 0 0 3 4 this 3 2939  4 view 1 2792  5 flags 1 2791  
655 0 0 4 704 2794 0 0 0 2 4 this 3 2815  4 view 1 2792  
656 0 0 7 708 2940 1994 0 0 1 4 copy 1 2823  
657 0 0 7 708 2940 1994 0 0 1 11 type_handle 1 2912  
658 0 0 7 708 2940 1994 0 0 1 6 source 1 2786  
659 0 0 7 709 2940 1994 0 0 2 1 n 1 2788  11 type_handle 1 2912  
660 0 0 6 710 2788 0 0 0 1 4 this 3 2823  
661 0 0 4 711 2794 0 0 0 2 4 this 3 2940  1 x 1 2825  
662 0 0 4 712 2794 0 0 0 1 4 this 3 2940  
663 0 0 6 713 2825 0 0 0 2 4 this 3 2823  1 n 1 2788  
664 0 0 4 714 2794 0 0 0 3 4 this 3 2940  1 n 1 2788  5 value 1 2825  
665 0 0 6 715 2825 0 0 0 2 4 this 3 2823  1 n 1 2788  
666 0 0 4 716 2794 0 0 0 3 4 this 3 2940  1 n 1 2788  5 value 1 2825  
667 0 0 6 717 2790 0 0 0 1 4 this 3 2823  
668 0 0 4 718 2794 0 0 0 2 4 this 3 2940  4 data 1 2790  
669 0 0 6 719 2790 0 0 0 3 4 this 3 2823  1 n 1 2788  5 count 1 2788  
670 0 0 4 720 2794 0 0 0 4 4 this 3 2940  1 n 1 2788  5 count 1 2788  4 data 1 2790  
671 0 0 6 721 2791 0 0 0 1 4 this 3 2823  
672 0 0 6 722 2791 0 0 0 1 4 this 3 2823  
673 0 0 6 723 2791 0 0 0 3 4 this 3 2940  4 view 1 2792  5 flags 1 2791  
674 0 0 4 724 2794 0 0 0 2 4 this 3 2823  4 view 1 2792  
675 0 0 6 727 2790 0 0 0 0 
676 0 0 6 728 2790 0 0 0 0 
677 0 0 6 729 2790 0 0 0 0 
678 0 0 6 730 2790 0 0 0 0 
679 0 0 6 731 2791 0 0 0 0 
680 0 0 6 732 2791 0 0 0 0 
681 0 0 6 733 2791 0 0 0 0 
682 0 0 6 734 2801 0 0 0 0 
683 0 0 6 735 2790 0 0 0 0 
684 0 0 6 736 2790 0 0 0 0 
685 0 0 6 737 2790 0 0 0 0 
686 0 0 6 738 2790 0 0 0 0 
687 0 0 6 739 2790 0 0 0 0 
688 0 0 6 740 2801 0 0 0 2 4 this 3 2941  6 system 1 2790  
689 0 0 6 741 2791 0 0 0 1 4 this 3 2941  
690 0 0 6 742 2790 0 0 0 2 4 this 3 2941  1 n 1 2791  
691 0 0 6 743 2790 0 0 0 3 4 this 3 2941  6 system 1 2790  3 tag 1 2790  
692 0 0 4 744 2794 0 0 0 2 4 this 3 2943  6 system 1 2790  
693 0 0 4 745 2794 0 0 0 4 4 this 3 2943  6 system 1 2790  3 tag 1 2790  5 value 1 2790  
694 0 0 6 746 2801 0 0 0 2 4 this 3 2943  3 pad 1 2802  
695 0 0 4 747 2794 0 0 0 2 4 this 3 2941  3 out 1 2798  
696 0 0 4 748 2794 0 0 0 2 4 this 3 2941  3 out 1 2798  
697 0 0 6 749 2943 0 0 0 0 
698 0 0 7 750 2912 2151 0 0 0 
699 0 0 7 752 2946 2021 0 306 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2944  
700 0 0 7 752 2946 2021 0 333 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::Constructor
//       Access: Published
//  Description: If owns_stream is true, the stream pointer will be
//               deleted when the StreamReader destructs.
//////////////////////////////////////////////////////////////////// 2 2 in 1 2838  11 owns_stream 1 2801  
701 0 0 6 753 2946 0 0 0 2 4 this 3 2946  4 copy 1 2944  
702 0 0 6 755 2838 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_istream
//       Access: Published
//  Description: Returns the stream in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2944  
703 0 0 6 756 2801 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_bool
//       Access: Published
//  Description: Extracts a boolean value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
704 0 0 6 757 2947 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int8
//       Access: Published
//  Description: Extracts a signed 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
705 0 0 6 758 2949 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint8
//       Access: Published
//  Description: Extracts an unsigned 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
706 0 0 6 759 2950 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int16
//       Access: Published
//  Description: Extracts a signed 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
707 0 0 6 760 2952 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int32
//       Access: Published
//  Description: Extracts a signed 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
708 0 0 6 761 2834 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_int64
//       Access: Published
//  Description: Extracts a signed 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
709 0 0 6 762 2953 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint16
//       Access: Published
//  Description: Extracts an unsigned 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
710 0 0 6 763 2955 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint32
//       Access: Published
//  Description: Extracts an unsigned 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
711 0 0 6 764 2956 0 0 260 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_uint64
//       Access: Published
//  Description: Extracts an unsigned 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
712 0 0 6 765 2808 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision floating-point
//               number.  Since this kind of float is not necessarily
//               portable across different architectures, special care
//               is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
713 0 0 6 766 2958 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_float64
//       Access: Published
//  Description: Extracts a 64-bit floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
714 0 0 6 767 2950 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int16
//       Access: Published
//  Description: Extracts a signed big-endian 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
715 0 0 6 768 2952 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int32
//       Access: Published
//  Description: Extracts a signed big-endian 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
716 0 0 6 769 2834 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_int64
//       Access: Published
//  Description: Extracts a signed big-endian 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
717 0 0 6 770 2953 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint16
//       Access: Published
//  Description: Extracts an unsigned big-endian 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
718 0 0 6 771 2955 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint32
//       Access: Published
//  Description: Extracts an unsigned big-endian 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
719 0 0 6 772 2956 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_uint64
//       Access: Published
//  Description: Extracts an unsigned big-endian 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
720 0 0 6 773 2808 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float32
//       Access: Published
//  Description: Extracts a 32-bit single-precision big-endian
//               floating-point number.  Since this kind of float is
//               not necessarily portable across different
//               architectures, special care is required.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
721 0 0 6 774 2958 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: StreamReader::get_be_float64
//       Access: Published
//  Description: Extracts a 64-bit big-endian floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2946  
722 0 0 6 775 2790 0 0 0 1 4 this 3 2946  
723 0 0 6 776 2790 0 0 0 1 4 this 3 2946  
724 0 0 6 777 2790 0 0 0 1 4 this 3 2946  
725 0 0 6 778 2790 0 0 0 2 4 this 3 2946  4 size 1 2802  
726 0 0 4 779 2794 0 0 0 2 4 this 3 2946  4 size 1 2802  
727 0 0 6 780 2790 0 0 0 2 4 this 3 2946  4 size 1 2802  
728 0 0 6 781 2790 0 0 0 1 4 this 3 2946  
729 0 0 6 782 2896 0 0 0 1 4 this 3 2946  
730 0 0 7 788 2959 2055 0 226 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2888  
731 0 0 6 790 2888 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: StreamWrapper::get_iostream
//       Access: Published
//  Description: Returns the iostream this object is wrapping.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2960  
732 0 0 6 784 2920 0 0 0 1 4 this 3 2959  
733 0 0 6 785 2959 0 0 0 1 4 this 3 2920  
734 0 0 6 786 2934 0 0 0 1 4 this 3 2959  
735 0 0 6 787 2959 0 0 0 1 4 this 3 2934  
736 0 0 7 792 2964 2059 0 306 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Copy Constructor
//       Access: Published
//  Description: The copy constructor does not copy ownership of the
//               stream.
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2962  
737 0 0 7 792 2964 2059 0 225 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 3 out 1 2798  11 owns_stream 1 2801  
738 0 0 6 793 2964 0 0 0 2 4 this 3 2964  4 copy 1 2962  
739 0 0 6 795 2798 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::get_ostream
//       Access: Published
//  Description: Returns the stream in use.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2962  
740 0 0 4 796 2794 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_bool
//       Access: Published
//  Description: Adds a boolean value to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2801  
741 0 0 4 797 2794 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int8
//       Access: Published
//  Description: Adds a signed 8-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2947  
742 0 0 4 798 2794 0 0 268 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint8
//       Access: Published
//  Description: Adds an unsigned 8-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2949  
743 0 0 4 799 2794 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int16
//       Access: Published
//  Description: Adds a signed 16-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2950  
744 0 0 4 800 2794 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int32
//       Access: Published
//  Description: Adds a signed 32-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2952  
745 0 0 4 801 2794 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_int64
//       Access: Published
//  Description: Adds a signed 64-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2834  
746 0 0 4 802 2794 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2953  
747 0 0 4 803 2794 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2955  
748 0 0 4 804 2794 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit integer to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2956  
749 0 0 4 805 2794 0 0 455 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision floating-point number
//               to the stream.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2808  
750 0 0 4 806 2794 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_float64
//       Access: Published
//  Description: Adds a 64-bit floating-point number to the stream.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2958  
751 0 0 4 807 2794 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int16
//       Access: Published
//  Description: Adds a signed 16-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2950  
752 0 0 4 808 2794 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int32
//       Access: Published
//  Description: Adds a signed 32-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2952  
753 0 0 4 809 2794 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_int64
//       Access: Published
//  Description: Adds a signed 64-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2834  
754 0 0 4 810 2794 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint16
//       Access: Published
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2953  
755 0 0 4 811 2794 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint32
//       Access: Published
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2955  
756 0 0 4 812 2794 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_uint64
//       Access: Published
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2956  
757 0 0 4 813 2794 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float32
//       Access: Published
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the stream.  Since this
//               kind of float is not necessarily portable across
//               different architectures, special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2808  
758 0 0 4 814 2794 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_be_float64
//       Access: Published
//  Description: Adds a 64-bit big-endian floating-point number to the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  5 value 1 2958  
759 0 0 4 815 2794 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string
//       Access: Published
//  Description: Adds a variable-length string to the stream.  This
//               actually adds a count followed by n bytes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  3 str 1 2790  
760 0 0 4 816 2794 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_string32
//       Access: Published
//  Description: Adds a variable-length string to the stream, using a
//               32-bit length field.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  3 str 1 2790  
761 0 0 4 817 2794 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_z_string
//       Access: Published
//  Description: Adds a variable-length string to the stream, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  3 str 1 2790  
762 0 0 4 818 2794 0 0 517 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::add_fixed_string
//       Access: Published
//  Description: Adds a fixed-length string to the stream.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2964  3 str 1 2790  4 size 1 2802  
763 0 0 4 819 2794 0 0 0 2 4 this 3 2964  4 size 1 2802  
764 0 0 4 820 2794 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::append_data
//       Access: Published
//  Description: Appends some more raw data to the end of the
//               streamWriter.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  4 data 1 2790  
765 0 0 4 821 2794 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::flush
//       Access: Published
//  Description: Calls flush() on the underlying stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2964  
766 0 0 4 822 2794 0 0 371 ////////////////////////////////////////////////////////////////////
//     Function: StreamWriter::write
//       Access: Published
//  Description: A synonym of append_data().  This is useful when
//               assigning the StreamWriter to sys.stderr and/or
//               sys.stdout in Python.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2964  3 str 1 2790  
767 0 0 7 825 2965 2125 0 223 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
768 0 0 7 825 2965 2125 0 228 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2966  
769 0 0 4 826 2794 0 0 692 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_encoding
//       Access: Published
//  Description: Specifies how the string set via set_text() is to be
//               interpreted.  The default, E_iso8859, means a
//               standard string with one-byte characters
//               (i.e. ASCII).  Other encodings are possible to take
//               advantage of character sets with more than 256
//               characters.
//
//               This affects only future calls to set_text(); it does
//               not change text that was set previously.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2965  8 encoding 1 2728  
770 0 0 6 827 2728 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoding
//       Access: Published
//  Description: Returns the encoding by which the string set via
//               set_text() is to be interpreted.  See set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
771 0 0 4 828 2794 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
//////////////////////////////////////////////////////////////////// 1 8 encoding 1 2728  
772 0 0 6 829 2728 0 0 387 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_default_encoding
//       Access: Published, Static
//  Description: Specifies the default encoding to be used for all
//               subsequently created TextEncoder objects.  See
//               set_encoding().
//////////////////////////////////////////////////////////////////// 0 
773 0 0 4 830 2794 0 0 561 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: Changes the text that is stored in the encoder.  The
//               text should be encoded according to the method
//               indicated by set_encoding().  Subsequent calls to
//               get_text() will return this same string, while
//               get_wtext() will return the decoded version of the
//               string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2965  4 text 1 2790  
774 0 0 4 830 2794 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_text
//       Access: Published
//  Description: The two-parameter version of set_text() accepts an
//               explicit encoding; the text is immediately decoded
//               and stored as a wide-character string.  Subsequent
//               calls to get_text() will return the same text
//               re-encoded using whichever encoding is specified by
//               set_encoding().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2965  4 text 1 2790  8 encoding 1 2728  
775 0 0 4 831 2794 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::clear_text
//       Access: Published
//  Description: Removes the text from the TextEncoder.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2965  
776 0 0 6 832 2801 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::has_text
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
777 0 0 4 833 2794 0 0 0 1 4 this 3 2965  
778 0 0 4 834 2794 0 0 0 1 4 this 3 2965  
779 0 0 6 835 2790 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the current
//               encoding system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
780 0 0 6 835 2790 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text
//       Access: Published
//  Description: Returns the current text, as encoded via the indicated
//               encoding system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2966  8 encoding 1 2728  
781 0 0 4 836 2794 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_text
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2965  4 text 1 2790  
782 0 0 4 837 2794 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_unicode_char
//       Access: Published
//  Description: Appends a single character to the end of the stored
//               text.  This may be a wide character, up to 16 bits in
//               Unicode.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2965  9 character 1 2791  
783 0 0 6 838 2791 0 0 411 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_num_chars
//       Access: Published
//  Description: Returns the number of characters in the stored text.
//               This is a count of wide characters, after the string
//               has been decoded according to set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
784 0 0 6 839 2791 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_unicode_char
//       Access: Published
//  Description: Returns the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2966  5 index 1 2791  
785 0 0 4 840 2794 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_unicode_char
//       Access: Published
//  Description: Sets the Unicode value of the nth character in the
//               stored text.  This may be a wide character (greater
//               than 255), after the string has been decoded
//               according to set_encoding().
//////////////////////////////////////////////////////////////////// 3 4 this 3 2965  5 index 1 2791  9 character 1 2791  
786 0 0 6 841 2790 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2966  5 index 1 2791  
787 0 0 6 841 2790 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_encoded_char
//       Access: Published
//  Description: Returns the nth char of the stored text, as a one-,
//               two-, or three-byte encoded string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2966  5 index 1 2791  8 encoding 1 2728  
788 0 0 6 842 2790 0 0 1136 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_text_as_ascii
//       Access: Published
//  Description: Returns the text associated with the node, converted
//               as nearly as possible to a fully-ASCII
//               representation.  This means replacing accented
//               letters with their unaccented ASCII equivalents.
//
//               It is possible that some characters in the string
//               cannot be converted to ASCII.  (The string may
//               involve symbols like the copyright symbol, for
//               instance, or it might involve letters in some other
//               alphabet such as Greek or Cyrillic, or even Latin
//               letters like thorn or eth that are not part of the
//               ASCII character set.)  In this case, as much of the
//               string as possible will be converted to ASCII, and
//               the nonconvertible characters will remain encoded in
//               the encoding specified by set_encoding().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
789 0 0 6 843 2790 0 0 559 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::reencode_text
//       Access: Published, Static
//  Description: Given the indicated text string, which is assumed to
//               be encoded via the encoding "from", decodes it and
//               then reencodes it into the encoding "to", and returns
//               the newly encoded string.  This does not change or
//               affect any properties on the TextEncoder itself.
//////////////////////////////////////////////////////////////////// 3 4 text 1 2790  4 from 1 2728  2 to 1 2728  
790 0 0 6 844 2801 0 0 408 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isalpha
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               alphabetic letter, false otherwise.  This is akin to
//               ctype's isalpha(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
791 0 0 6 845 2801 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isdigit
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               numeric digit, false otherwise.  This is akin to
//               ctype's isdigit(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
792 0 0 6 846 2801 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_ispunct
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               punctuation mark, false otherwise.  This is akin to
//               ctype's ispunct(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
793 0 0 6 847 2801 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_islower
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               lowercase letter, false otherwise.  This is akin to
//               ctype's islower(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
794 0 0 6 848 2801 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isupper
//       Access: Published, Static
//  Description: Returns true if the indicated character is an
//               uppercase letter, false otherwise.  This is akin to
//               ctype's isupper(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
795 0 0 6 849 2801 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_isspace
//       Access: Published, Static
//  Description: Returns true if the indicated character is a
//               whitespace letter, false otherwise.  This is akin to
//               ctype's isspace(), extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
796 0 0 6 850 2791 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_toupper
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's toupper(),
//               extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
797 0 0 6 851 2791 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::unicode_tolower
//       Access: Published, Static
//  Description: Returns the uppercase equivalent of the given Unicode
//               character.  This is akin to ctype's tolower(),
//               extended to Unicode.
//////////////////////////////////////////////////////////////////// 1 9 character 1 2791  
798 0 0 6 852 2790 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the default encoding.
//////////////////////////////////////////////////////////////////// 1 6 source 1 2790  
799 0 0 6 852 2790 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::upper
//       Access: Published, Static
//  Description: Converts the string to uppercase, assuming the string
//               is encoded in the indicated encoding.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2790  8 encoding 1 2728  
800 0 0 6 853 2790 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the default encoding.
//////////////////////////////////////////////////////////////////// 1 6 source 1 2790  
801 0 0 6 853 2790 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::lower
//       Access: Published, Static
//  Description: Converts the string to lowercase, assuming the string
//               is encoded in the indicated encoding.
//////////////////////////////////////////////////////////////////// 2 6 source 1 2790  8 encoding 1 2728  
802 0 0 4 854 2794 0 0 446 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::set_wtext
//       Access: Published
//  Description: Changes the text that is stored in the encoder.
//               Subsequent calls to get_wtext() will return this same
//               string, while get_text() will return the encoded
//               version of the string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2965  5 wtext 1 2790  
803 0 0 6 855 2790 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::get_wtext
//       Access: Published
//  Description: Returns the text associated with the TextEncoder, as
//               a wide-character string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2966  
804 0 0 4 856 2794 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::append_wtext
//       Access: Published
//  Description: Appends the indicates string to the end of the stored
//               wide-character text.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2965  4 text 1 2790  
805 0 0 6 857 2790 0 0 0 1 4 this 3 2966  
806 0 0 6 858 2801 0 0 0 1 4 this 3 2966  
807 0 0 6 859 2790 0 0 0 2 2 ch 1 2968  8 encoding 1 2728  
808 0 0 6 860 2790 0 0 330 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::encode_wtext
//       Access: Published
//  Description: Encodes a wide-text string into a single-char string,
//               according to the current encoding.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2966  5 wtext 1 2790  
809 0 0 6 860 2790 0 0 0 2 5 wtext 1 2790  8 encoding 1 2728  
810 0 0 6 861 2790 0 0 332 ////////////////////////////////////////////////////////////////////
//     Function: TextEncoder::decode_text
//       Access: Published
//  Description: Returns the given wstring decoded to a single-byte
//               string, via the current encoding system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2966  4 text 1 2790  
811 0 0 6 861 2790 0 0 0 2 4 text 1 2790  8 encoding 1 2728  
812 0 0 7 865 2912 2151 0 537 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Constructor
//       Access: Published
//  Description: The default constructor must do nothing, because we
//               can't guarantee ordering of static initializers.  If
//               the constructor tried to initialize its value, it
//               might happen after the value had already been set
//               previously by another static initializer!
//////////////////////////////////////////////////////////////////// 0 
813 0 0 7 865 2912 2151 0 227 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2969  
814 0 0 7 866 2912 2151 0 0 1 8 classobj 1 2971  
815 0 0 6 867 2801 0 0 0 2 4 this 3 2969  5 other 1 2969  
816 0 0 6 868 2801 0 0 0 2 4 this 3 2969  5 other 1 2969  
817 0 0 6 869 2801 0 0 0 2 4 this 3 2969  5 other 1 2969  
818 0 0 6 870 2801 0 0 0 2 4 this 3 2969  5 other 1 2969  
819 0 0 6 871 2801 0 0 0 2 4 this 3 2969  5 other 1 2969  
820 0 0 6 872 2801 0 0 0 2 4 this 3 2969  5 other 1 2969  
821 0 0 6 873 2791 0 0 463 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::compare_to
//       Access: Published
//  Description: Sorts TypeHandles arbitrarily (according to <, >,
//               etc.).  Returns a number less than 0 if this type
//               sorts before the other one, greater than zero if it
//               sorts after, 0 if they are equivalent.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  5 other 1 2969  
822 0 0 6 874 2802 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_hash
//       Access: Published
//  Description: Returns a hash code suitable for phash_map.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2969  
823 0 0 6 875 2790 0 0 484 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_name
//       Access: Published
//  Description: Returns the name of the type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  6 object 1 2974  
824 0 0 6 876 2801 0 0 557 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::is_derived_from
//       Access: Published
//  Description: Returns true if this type is derived from the
//               indicated type, false otherwise.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2969  6 parent 1 2912  6 object 1 2974  
825 0 0 6 877 2791 0 0 878 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the number of parent classes that this
//               type is known to have.  This may then be used to
//               index into get_parent_class().  The result will be 0
//               if this class does not inherit from any other
//               classes, 1 if normal, single inheritance is in
//               effect, or greater than one if multiple inheritance
//               is in effect.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  6 object 1 2974  
826 0 0 7 878 2912 2151 0 383 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_parent_classes
//       Access: Published
//  Description: Returns the nth parent class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_parent_classes().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  5 index 1 2791  
827 0 0 6 879 2791 0 0 626 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the number of child classes that this
//               type is known to have.  This may then be used to
//               index into get_child_class().
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  6 object 1 2974  
828 0 0 7 880 2912 2151 0 380 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_num_child_classes
//       Access: Published
//  Description: Returns the nth child class of this type.  The index
//               should be in the range 0 <= index <
//               get_num_child_classes().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  5 index 1 2791  
829 0 0 7 881 2912 2151 0 959 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_parent_towards
//       Access: Published
//  Description: Returns the parent class that is in a direct line of
//               inheritance to the indicated ancestor class.  This is
//               useful in the presence of multiple inheritance to try
//               to determine what properties an unknown type may
//               have.
//
//               The return value is TypeHandle::none() if the type
//               does not inherit from the ancestor.  If ancestor is
//               the same as this type, the return value is this type.
//
//               The "object" pointer is an optional pointer to the
//               TypedObject class that owns this TypeHandle.  It is
//               only used in case the TypeHandle is inadvertantly
//               undefined.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2969  8 ancestor 1 2912  6 object 1 2974  
830 0 0 6 882 2791 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: get_best_parent_from_Set
//       Access: Published
//  Description: Return the Index of the BEst fit Classs from a set
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  10 legal_vals 1 2975  
831 0 0 6 883 2791 0 0 0 2 4 this 3 2969  12 memory_class 1 2730  
832 0 0 4 884 2794 0 0 0 3 4 this 3 2912  12 memory_class 1 2730  4 size 1 2791  
833 0 0 4 885 2794 0 0 0 3 4 this 3 2912  12 memory_class 1 2730  4 size 1 2791  
834 0 0 6 886 2791 0 0 654 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::get_index
//       Access: Published
//  Description: Returns the integer index associated with this
//               TypeHandle. Each different TypeHandle will have a
//               different index.  However, you probably shouldn't be
//               using this method; you should just treat the
//               TypeHandles as opaque classes.  This is provided for
//               the convenience of non-C++ scripting languages to
//               build a hashtable of TypeHandles.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2969  
835 0 0 4 887 2794 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 2969  3 out 1 2798  
836 0 0 7 888 2912 2151 0 315 ////////////////////////////////////////////////////////////////////
//     Function: TypeHandle::none
//       Access: Published, Static
//  Description: Returns a special zero-valued TypeHandle that is used
//               to indicate no type.
//////////////////////////////////////////////////////////////////// 0 
837 0 0 6 889 2801 0 0 0 1 4 this 3 2969  
838 0 0 7 892 2912 2151 0 0 2 4 this 3 2978  4 name 1 2790  
839 0 0 7 893 2912 2151 0 0 2 4 this 3 2978  2 id 1 2791  
840 0 0 6 894 2790 0 0 0 3 4 this 3 2978  4 type 1 2912  6 object 1 2974  
841 0 0 6 895 2801 0 0 0 4 4 this 3 2980  5 child 1 2912  4 base 1 2912  12 child_object 1 2974  
842 0 0 6 896 2791 0 0 0 1 4 this 3 2980  
843 0 0 7 897 2912 2151 0 0 2 4 this 3 2980  1 n 1 2791  
844 0 0 6 898 2791 0 0 0 1 4 this 3 2980  
845 0 0 7 899 2912 2151 0 0 2 4 this 3 2980  1 n 1 2791  
846 0 0 6 900 2791 0 0 0 3 4 this 3 2978  5 child 1 2912  12 child_object 1 2974  
847 0 0 7 901 2912 2151 0 0 3 4 this 3 2978  5 child 1 2912  5 index 1 2791  
848 0 0 6 902 2791 0 0 0 3 4 this 3 2978  5 child 1 2912  12 child_object 1 2974  
849 0 0 7 903 2912 2151 0 0 3 4 this 3 2978  5 child 1 2912  5 index 1 2791  
850 0 0 7 904 2912 2151 0 0 4 4 this 3 2980  5 child 1 2912  4 base 1 2912  12 child_object 1 2974  
851 0 0 4 905 2794 0 0 0 0 
852 0 0 4 906 2794 0 0 0 2 4 this 3 2978  3 out 1 2798  
853 0 0 6 907 2980 0 0 63 // ptr() returns the pointer to the global TypeRegistry object. 0 
854 0 0 7 913 2912 2151 0 79 // Derived classes should override this function to return
// get_class_type(). 1 4 this 3 2981  
855 0 0 6 914 2791 0 0 441 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::get_type_index
//       Access: Published
//  Description: Returns the internal index number associated with
//               this object's TypeHandle, a unique number for each
//               different type.  This is equivalent to
//               get_type().get_index().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2981  
856 0 0 6 915 2801 0 0 313 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_of_type
//       Access: Published
//  Description: Returns true if the current object is or derives from
//               the indicated type.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2981  6 handle 1 2912  
857 0 0 6 916 2801 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: TypedObject::is_exact_type
//       Access: Published
//  Description: Returns true if the current object is the indicated
//               type exactly.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2981  6 handle 1 2912  
858 0 0 7 917 2912 2151 0 0 0 
859 0 0 6 910 2930 0 0 0 1 4 this 3 2974  
860 0 0 6 911 2974 0 0 0 1 4 this 3 2930  
861 0 0 7 919 2909 2179 0 0 0 
862 0 0 4 920 2794 0 0 0 1 4 this 3 2909  
863 0 0 7 923 2903 2182 0 0 0 
864 0 0 4 924 2794 0 0 0 1 4 this 3 2903  
865 0 0 7 927 2906 2185 0 0 0 
866 0 0 4 928 2794 0 0 0 1 4 this 3 2906  
867 0 0 6 932 2801 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_tracking
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               tracking memory (e.g. track-memory-usage is
//               configured #t).
//////////////////////////////////////////////////////////////////// 0 
868 0 0 6 933 2801 0 0 413 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::is_counting
//       Access: Public, Static
//  Description: Returns true if the MemoryUsage object is currently
//               at least counting memory (e.g. this is a Windows
//               debug build), even if it's not fully tracking it.
//////////////////////////////////////////////////////////////////// 0 
869 0 0 6 934 2802 0 0 394 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_current_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, not including the memory
//               previously frozen.
//////////////////////////////////////////////////////////////////// 0 
870 0 0 6 935 2802 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_cpp_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               consumed by C++ objects, including the memory
//               previously frozen.
//////////////////////////////////////////////////////////////////// 0 
871 0 0 6 936 2802 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_single_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for individual objects.
//////////////////////////////////////////////////////////////////// 0 
872 0 0 6 937 2802 0 0 353 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_array_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               heap from code within Panda, for arrays.
//////////////////////////////////////////////////////////////////// 0 
873 0 0 6 938 2802 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_heap_overhead
//       Access: Public, Static
//  Description: Returns the extra bytes allocated from the system
//               that are not immediately used for holding allocated
//               objects.  This can only be determined if
//               ALTERNATIVE_MALLOC is enabled.
//////////////////////////////////////////////////////////////////// 0 
874 0 0 6 939 2802 0 0 350 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_panda_mmap_size
//       Access: Public, Static
//  Description: Returns the total number of bytes allocated from the
//               virtual memory pool from code within Panda.
//////////////////////////////////////////////////////////////////// 0 
875 0 0 6 940 2802 0 0 852 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_external_size
//       Access: Public, Static
//  Description: Returns the total number of bytes of allocated memory
//               in the heap that Panda didn't seem to be responsible
//               for.  This includes a few bytes for very low-level
//               objects (like ConfigVariables) that cannot use Panda
//               memory tracking because they are so very low-level.
//
//               This also includes all of the memory that might have
//               been allocated by a high-level interpreter, like
//               Python.
//
//               This number is only available if Panda is able to
//               hook into the actual heap callback.
//////////////////////////////////////////////////////////////////// 0 
876 0 0 6 941 2802 0 0 348 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_total_size
//       Access: Public, Static
//  Description: Returns the total size of allocated memory consumed
//               by the process, as nearly as can be determined.
//////////////////////////////////////////////////////////////////// 0 
877 0 0 6 942 2791 0 0 282 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_num_pointers
//       Access: Public, Static
//  Description: Returns the number of pointers currently active.
//////////////////////////////////////////////////////////////////// 0 
878 0 0 4 943 2794 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers currently active.
//////////////////////////////////////////////////////////////////// 1 6 result 1 2983  
879 0 0 4 944 2794 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_type
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers of the indicated type currently
//               active.
//////////////////////////////////////////////////////////////////// 2 6 result 1 2983  4 type 1 2912  
880 0 0 4 945 2794 0 0 416 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_of_age
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all pointers that were allocated within the range
//               of the indicated number of seconds ago.
//////////////////////////////////////////////////////////////////// 3 6 result 1 2983  4 from 1 2789  2 to 1 2789  
881 0 0 4 946 2794 0 0 1326 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::get_pointers_with_zero_count
//       Access: Public, Static
//  Description: Fills the indicated MemoryUsagePointers with the set
//               of all currently active pointers (that is, pointers
//               allocated since the last call to freeze(), and not
//               yet freed) that have a zero reference count.
//
//               Generally, an undeleted pointer with a zero reference
//               count means its reference count has never been
//               incremented beyond zero (since once it has been
//               incremented, the only way it can return to zero would
//               free the pointer).  This may include objects that are
//               allocated statically or on the stack, which are never
//               intended to be deleted.  Or, it might represent a
//               programmer or compiler error.
//
//               This function has the side-effect of incrementing
//               each of their reference counts by one, thus
//               preventing them from ever being freed--but since they
//               hadn't been freed anyway, probably no additional harm
//               is done.
//////////////////////////////////////////////////////////////////// 1 6 result 1 2983  
882 0 0 4 947 2794 0 0 574 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::freeze
//       Access: Public, Static
//  Description: 'Freezes' all pointers currently stored so that they
//               are no longer reported; only newly allocate pointers
//               from this point on will appear in future information
//               requests.  This makes it easier to differentiate
//               between continuous leaks and one-time memory
//               allocations.
//////////////////////////////////////////////////////////////////// 0 
883 0 0 4 948 2794 0 0 312 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               active pointers.
//////////////////////////////////////////////////////////////////// 0 
884 0 0 4 949 2794 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_types
//       Access: Public, Static
//  Description: Shows the breakdown of types of all of the
//               pointers allocated and freed since the last call to
//               freeze().
//////////////////////////////////////////////////////////////////// 0 
885 0 0 4 950 2794 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_current_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               active pointers.
//////////////////////////////////////////////////////////////////// 0 
886 0 0 4 951 2794 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsage::show_trend_ages
//       Access: Public, Static
//  Description: Shows the breakdown of ages of all of the
//               pointers allocated and freed since the last call to
//               freeze().
//////////////////////////////////////////////////////////////////// 0 
887 0 0 6 958 2791 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::get_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
888 0 0 4 959 2794 0 0 896 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::ref
//       Access: Published
//  Description: Explicitly increments the reference count.  User code
//               should avoid using ref() and unref() directly, which
//               can result in missed reference counts.  Instead, let
//               a PointerTo object manage the reference counting
//               automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
889 0 0 6 960 2801 0 0 1336 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::unref
//       Access: Published, Virtual
//  Description: Explicitly decrements the reference count.  Note that
//               the object will not be implicitly deleted by unref()
//               simply because the reference count drops to zero.
//               (Having a member function delete itself is
//               problematic.) However, see the helper function
//               unref_delete().
//
//               User code should avoid using ref() and unref()
//               directly, which can result in missed reference
//               counts.  Instead, let a PointerTo object manage the
//               reference counting automatically.
//
//               This function is const, even though it changes the
//               object, because generally fiddling with an object's
//               reference count isn't considered part of fiddling
//               with the object.  An object might be const in other
//               ways, but we still need to accurately count the
//               number of references to it.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
890 0 0 6 961 2801 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.  Returns true if ok,
//               false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
891 0 0 6 962 2801 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: ReferenceCount::test_ref_count_nonzero
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't zero, or completely bogus.  Returns true
//               if ok, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2984  
892 0 0 7 963 2912 2151 0 0 0 
893 0 0 6 955 2930 0 0 0 1 4 this 3 2986  
894 0 0 7 956 2986 2210 0 0 1 4 this 3 2930  
895 0 0 6 965 2791 0 0 214 ////////////////////////////////////////////////////////////////////
//     Function: Buffer::get_length
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 2987  
896 0 0 4 974 2794 0 0 0 2 4 this 3 2989  5 level 1 2789  
897 0 0 6 976 2791 0 0 274 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::get_node_ref_count
//       Access: Published
//  Description: Returns the current reference count.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2990  
898 0 0 4 977 2794 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_ref
//       Access: Published
//  Description: Explicitly increments the node reference count and
//               the normal reference count simultaneously.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2990  
899 0 0 6 978 2801 0 0 462 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::node_unref
//       Access: Published
//  Description: Explicitly decrements the node reference count and
//               the normal reference count simultaneously.
//
//               The return value is true if the new reference count
//               is nonzero, false if it is zero.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2990  
900 0 0 6 979 2801 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: NodeReferenceCount::test_ref_count_integrity
//       Access: Published
//  Description: Does some easy checks to make sure that the reference
//               count isn't completely bogus.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2990  
901 0 0 7 980 2912 2151 0 0 0 
902 0 0 7 982 2992 2171 0 247 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs an empty datagram.
//////////////////////////////////////////////////////////////////// 0 
903 0 0 7 982 2992 2171 0 222 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 2993  
904 0 0 7 982 2992 2171 0 271 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::Constructor
//       Access: Public
//  Description: Constructs a datagram from an existing block of data.
//////////////////////////////////////////////////////////////////// 1 4 data 1 2790  
905 0 0 6 983 2992 0 0 0 2 4 this 3 2992  4 copy 1 2993  
906 0 0 4 984 2794 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::clear
//       Access: Public, Virtual
//  Description: Resets the datagram to empty, in preparation for
//               building up a new datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
907 0 0 4 985 2794 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::dump_hex
//       Access: Public
//  Description: Writes a representation of the entire datagram
//               contents, as a sequence of hex (and ASCII) values.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2993  3 out 1 2798  6 indent 1 2788  
908 0 0 4 986 2794 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_bool
//       Access: Public
//  Description: Adds a boolean value to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2801  
909 0 0 4 987 2794 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int8
//       Access: Public
//  Description: Adds a signed 8-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2947  
910 0 0 4 988 2794 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint8
//       Access: Public
//  Description: Adds an unsigned 8-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2949  
911 0 0 4 989 2794 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int16
//       Access: Public
//  Description: Adds a signed 16-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2950  
912 0 0 4 990 2794 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int32
//       Access: Public
//  Description: Adds a signed 32-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2952  
913 0 0 4 991 2794 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_int64
//       Access: Public
//  Description: Adds a signed 64-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2834  
914 0 0 4 992 2794 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2953  
915 0 0 4 993 2794 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2955  
916 0 0 4 994 2794 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit integer to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2956  
917 0 0 4 995 2794 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision floating-point number
//               to the datagram.  Since this kind of float is not
//               necessarily portable across different architectures,
//               special care is required.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2995  
918 0 0 4 996 2794 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_float64
//       Access: Public
//  Description: Adds a 64-bit floating-point number to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2958  
919 0 0 4 997 2794 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_stdfloat
//       Access: Public
//  Description: Adds either a 32-bit or a 64-bit floating-point
//               number, according to set_stdfloat_double().
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2996  
920 0 0 4 998 2794 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int16
//       Access: Public
//  Description: Adds a signed 16-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2950  
921 0 0 4 999 2794 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int32
//       Access: Public
//  Description: Adds a signed 32-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2952  
922 0 0 4 1000 2794 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_int64
//       Access: Public
//  Description: Adds a signed 64-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2834  
923 0 0 4 1001 2794 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint16
//       Access: Public
//  Description: Adds an unsigned 16-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2953  
924 0 0 4 1002 2794 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint32
//       Access: Public
//  Description: Adds an unsigned 32-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2955  
925 0 0 4 1003 2794 0 0 296 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_uint64
//       Access: Public
//  Description: Adds an unsigned 64-bit big-endian integer to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2956  
926 0 0 4 1004 2794 0 0 318 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float32
//       Access: Public
//  Description: Adds a 32-bit single-precision big-endian
//               floating-point number to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2995  
927 0 0 4 1005 2794 0 0 301 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_be_float64
//       Access: Public
//  Description: Adds a 64-bit big-endian floating-point number to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  5 value 1 2958  
928 0 0 4 1006 2794 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram.  This
//               actually adds a count followed by n bytes.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  3 str 1 2790  
929 0 0 4 1007 2794 0 0 338 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_string32
//       Access: Public
//  Description: Adds a variable-length string to the datagram, using
//               a 32-bit length field to allow very long strings.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  3 str 1 2790  
930 0 0 4 1008 2794 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_z_string
//       Access: Public
//  Description: Adds a variable-length string to the datagram, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  3 str 1 2790  
931 0 0 4 1009 2794 0 0 512 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_fixed_string
//       Access: Public
//  Description: Adds a fixed-length string to the datagram.  If the
//               string given is less than the requested size, this
//               will pad the string out with zeroes; if it is greater
//               than the requested size, this will silently truncate
//               the string.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2992  3 str 1 2790  4 size 1 2802  
932 0 0 4 1010 2794 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::add_wstring
//       Access: Public
//  Description: Adds a variable-length wstring to the datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  3 str 1 2790  
933 0 0 4 1011 2794 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::pad_bytes
//       Access: Public
//  Description: Adds the indicated number of zero bytes to the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  4 size 1 2802  
934 0 0 4 1012 2794 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::append_data
//       Access: Public
//  Description: Appends some more raw data to the end of the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  4 data 1 2790  
935 0 0 6 1014 2790 0 0 258 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_message
//       Access: Public
//  Description: Returns the datagram's data as a string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2993  
936 0 0 4 1015 2794 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_data
//       Access: Public
//  Description: Returns a pointer to the beginning of the datagram's
//               data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2993  
937 0 0 6 1016 2802 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_length
//       Access: Public
//  Description: Returns the number of bytes in the datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2993  
938 0 0 4 1017 2794 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_array
//       Access: Public
//  Description: Replaces the data in the Datagram with the data in
//               the indicated PTA_uchar.  This is assignment by
//               reference: subsequent changes to the Datagram will
//               also change the source PTA_uchar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  4 data 1 2997  
939 0 0 4 1018 2794 0 0 505 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::copy_array
//       Access: Public
//  Description: Replaces the data in the Datagram with a copy of the
//               data in the indicated CPTA_uchar.  Unlike
//               set_array(), a complete copy is made of the data;
//               subsequent changes to the Datagram will *not* change
//               the source CPTA_uchar.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  4 data 1 2998  
940 0 0 7 1019 2998 0 0 292 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_array
//       Access: Public
//  Description: Returns a const pointer to the actual data in
//               the Datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2993  
941 0 0 7 1020 2997 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::modify_array
//       Access: Public
//  Description: Returns a modifiable pointer to the actual data in
//               the Datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2992  
942 0 0 4 1021 2794 0 0 648 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::set_stdfloat_double
//       Access: Public
//  Description: Changes the stdfloat_double flag, which defines the
//               operation performed by add_stdfloat() and
//               DatagramIterator::get_stdfloat().  When this is true,
//               add_stdfloat() adds a 64-bit floating-point number;
//               when it is false, it adds a 32-bit floating-point
//               number.  The default is based on the STDFLOAT_DOUBLE
//               compilation flag.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2992  15 stdfloat_double 1 2801  
943 0 0 6 1022 2801 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: Datagram::get_stdfloat_double
//       Access: Public
//  Description: Returns the stdfloat_double flag.  See
//               set_stdfloat_double().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2993  
944 0 0 6 1023 2801 0 0 0 2 4 this 3 2993  5 other 1 2993  
945 0 0 6 1024 2801 0 0 0 2 4 this 3 2993  5 other 1 2993  
946 0 0 6 1025 2801 0 0 0 2 4 this 3 2993  5 other 1 2993  
947 0 0 4 1026 2794 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function : Datagram::output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2993  3 out 1 2798  
948 0 0 4 1027 2794 0 0 289 ////////////////////////////////////////////////////////////////////
//     Function : Datagram::write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 2993  3 out 1 2798  6 indent 1 2788  
949 0 0 7 1028 2912 2151 0 0 0 
950 0 0 6 1031 2801 0 0 0 2 4 this 3 2999  4 data 1 2992  
951 0 0 6 1032 2801 0 0 725 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::save_datagram
//       Access: Published, Virtual
//  Description: Skips over the next datagram without extracting it,
//               but saves the relevant file information in the
//               SubfileInfo object so that its data may be read
//               later.  For non-file-based datagram generators, this
//               may mean creating a temporary file and copying the
//               contents of the datagram to disk.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.
//////////////////////////////////////////////////////////////////// 2 4 this 3 2999  4 info 1 3000  
952 0 0 6 1033 2801 0 0 0 1 4 this 3 2999  
953 0 0 6 1034 2801 0 0 0 1 4 this 3 2999  
954 0 0 6 1035 2858 0 0 419 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the source for
//               these datagrams, if any, or empty string if the
//               datagrams do not originate from a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2999  
955 0 0 6 1036 2901 0 0 399 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_timestamp
//       Access: Published, Virtual
//  Description: Returns the on-disk timestamp of the file that was
//               read, at the time it was opened, if that is
//               available, or 0 if it is not.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3001  
956 0 0 7 1037 3004 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2999  
957 0 0 7 1038 3005 2533 0 410 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_vfile
//       Access: Published, Virtual
//  Description: Returns the VirtualFile that provides the source for
//               these datagrams, if any, or NULL if the datagrams do
//               not originate from a VirtualFile.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2999  
958 0 0 6 1039 3006 0 0 646 ////////////////////////////////////////////////////////////////////
//     Function: DatagramGenerator::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramGenerators that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               get_datagram().
//////////////////////////////////////////////////////////////////// 1 4 this 3 2999  
959 0 0 7 1041 3007 2290 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
960 0 0 7 1041 3007 2290 0 225 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 8 datagram 1 2993  6 offset 1 2802  
961 0 0 7 1041 3007 2290 0 230 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3008  
962 0 0 6 1042 3007 0 0 0 2 4 this 3 3007  4 copy 1 3008  
963 0 0 6 1044 2801 0 0 248 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_bool
//       Access: Public
//  Description: Extracts a boolean value.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
964 0 0 6 1045 2947 0 0 255 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int8
//       Access: Public
//  Description: Extracts a signed 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
965 0 0 6 1046 2949 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint8
//       Access: Public
//  Description: Extracts an unsigned 8-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
966 0 0 6 1047 2950 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int16
//       Access: Public
//  Description: Extracts a signed 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
967 0 0 6 1048 2952 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int32
//       Access: Public
//  Description: Extracts a signed 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
968 0 0 6 1049 2834 0 0 257 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_int64
//       Access: Public
//  Description: Extracts a signed 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
969 0 0 6 1050 2953 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
970 0 0 6 1051 2955 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
971 0 0 6 1052 2956 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
972 0 0 6 1053 2995 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float32
//       Access: Public
//  Description: Extracts a 32-bit single-precision floating-point
//               number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
973 0 0 6 1054 2958 0 0 266 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_float64
//       Access: Public
//  Description: Extracts a 64-bit floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
974 0 0 6 1055 2996 0 0 349 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_stdfloat
//       Access: Public
//  Description: Extracts either a 32-bit or a 64-bit floating-point
//               number, according to Datagram::set_stdfloat_double().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
975 0 0 6 1056 2950 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int16
//       Access: Public
//  Description: Extracts a signed 16-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
976 0 0 6 1057 2952 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int32
//       Access: Public
//  Description: Extracts a signed 32-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
977 0 0 6 1058 2834 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_int64
//       Access: Public
//  Description: Extracts a signed 64-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
978 0 0 6 1059 2953 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint16
//       Access: Public
//  Description: Extracts an unsigned 16-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
979 0 0 6 1060 2955 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint32
//       Access: Public
//  Description: Extracts an unsigned 32-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
980 0 0 6 1061 2956 0 0 275 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_uint64
//       Access: Public
//  Description: Extracts an unsigned 64-bit big-endian integer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
981 0 0 6 1062 2995 0 0 314 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float32
//       Access: Public
//  Description: Extracts a 32-bit big-endian single-precision
//               floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
982 0 0 6 1063 2958 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_be_float64
//       Access: Public
//  Description: Extracts a 64-bit big-endian floating-point number.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
983 0 0 6 1064 2790 0 0 259 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string
//       Access: Public
//  Description: Extracts a variable-length string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
984 0 0 6 1065 2790 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_string32
//       Access: Public
//  Description: Extracts a variable-length string with a 32-bit
//               length field.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
985 0 0 6 1066 2790 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_z_string
//       Access: Public
//  Description: Extracts a variable-length string, as a
//               NULL-terminated string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
986 0 0 6 1067 2790 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_fixed_string
//       Access: Public
//  Description: Extracts a fixed-length string.  However, if a zero
//               byte occurs within the string, it marks the end of
//               the string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3007  4 size 1 2802  
987 0 0 6 1068 2790 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_wstring
//       Access: Public
//  Description: Extracts a variable-length wstring (with a 32-bit
//               length field).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3007  
988 0 0 4 1069 2794 0 0 299 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::skip_bytes
//       Access: Public
//  Description: Skips over the indicated number of bytes in the
//               datagram.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3007  4 size 1 2802  
989 0 0 6 1070 2790 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::extract_bytes
//       Access: Public
//  Description: Extracts the indicated number of bytes in the
//               datagram and returns them as a string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3007  4 size 1 2802  
990 0 0 6 1071 2790 0 0 352 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_bytes
//       Access: Public
//  Description: Returns the remaining bytes in the datagram as a
//               string, but does not extract them from the iterator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3008  
991 0 0 6 1072 2791 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_remaining_size
//       Access: Public
//  Description: Return the bytes left in the datagram.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3008  
992 0 0 6 1073 2993 0 0 264 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_datagram
//       Access: Public
//  Description: Return the datagram of this iterator.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3008  
993 0 0 6 1074 2802 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: DatagramIterator::get_current_index
//       Access: Public
//  Description: Returns the current position within the datagram of the
//               next piece of data to extract.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3008  
994 0 0 4 1075 2794 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function : output
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3008  3 out 1 2798  
995 0 0 4 1076 2794 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function : write
//       Access : Public
//  Description : Write a string representation of this instance to
//                <out>.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3008  3 out 1 2798  6 indent 1 2788  
996 0 0 7 1077 2912 2151 0 0 0 
997 0 0 6 1080 2801 0 0 0 2 4 this 3 3010  4 data 1 2993  
998 0 0 6 1081 2801 0 0 661 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the entire indicated
//               file (via the vfs) as the next datagram.  This is
//               intended to support potentially very large datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3010  6 result 1 3000  8 filename 1 2858  
999 0 0 6 1081 2801 0 0 691 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::copy_datagram
//       Access: Published, Virtual
//  Description: Copies the file data from the range of the indicated
//               file (outside of the vfs) as the next datagram.  This
//               is intended to support potentially very large
//               datagrams.
//
//               Returns true on success, false on failure or if this
//               method is unimplemented.  On true, fills "result"
//               with the information that references the copied file,
//               if possible.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3010  6 result 1 3000  6 source 1 3011  
1000 0 0 6 1082 2801 0 0 0 1 4 this 3 3010  
1001 0 0 4 1083 2794 0 0 0 1 4 this 3 3010  
1002 0 0 6 1084 2858 0 0 414 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_filename
//       Access: Published, Virtual
//  Description: Returns the filename that provides the target for
//               these datagrams, if any, or empty string if the
//               datagrams do not get written to a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3010  
1003 0 0 7 1085 3004 0 0 403 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file
//       Access: Published, Virtual
//  Description: Returns the FileReference that provides the target for
//               these datagrams, if any, or NULL if the datagrams do
//               not written to a file on disk.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3010  
1004 0 0 6 1086 3006 0 0 636 ////////////////////////////////////////////////////////////////////
//     Function: DatagramSink::get_file_pos
//       Access: Published, Virtual
//  Description: Returns the current file position within the data
//               stream, if any, or 0 if the file position is not
//               meaningful or cannot be determined.
//
//               For DatagramSinks that return a meaningful file
//               position, this will be pointing to the first byte
//               following the datagram returned after a call to
//               put_datagram().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3010  
1005 0 0 7 1103 2912 2151 0 0 0 
1006 0 0 6 1099 2974 0 0 0 1 4 this 3 3013  
1007 0 0 7 1100 3013 2348 0 0 1 4 this 3 2974  
1008 0 0 7 1101 2986 2210 0 0 1 4 this 3 3013  
1009 0 0 7 1102 3013 2348 0 0 1 4 this 3 2986  
1010 0 0 7 1106 3014 2352 0 225 ////////////////////////////////////////////////////////////////////
//     Function: FileReference::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2858  
1011 0 0 6 1107 2858 0 0 265 ////////////////////////////////////////////////////////////////////
//     Function: FileReference::get_filename
//       Access: Published
//  Description: Returns the filename of the reference.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3004  
1012 0 0 7 1108 2912 2151 0 0 0 
1013 0 0 7 1111 3015 2362 0 219 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1014 0 0 4 1112 2794 0 0 363 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::seek
//       Access: Published
//  Description: Moves the data pointer to the indicated byte
//               position.  It is not an error to move the pointer
//               past the end of data.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3015  3 pos 1 2802  
1015 0 0 6 1113 2802 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::tell
//       Access: Published
//  Description: Returns the current data pointer position as a byte
//               offset from the beginning of the stream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3016  
1016 0 0 6 1114 2790 0 0 594 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::read
//       Access: Published
//  Description: Extracts and returns the indicated number of
//               characters from the current data pointer, and
//               advances the data pointer.  If the data pointer
//               exceeds the end of the buffer, returns empty string.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.read() function.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3015  6 length 1 2802  
1017 0 0 6 1115 2790 0 0 599 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::readline
//       Access: Published
//  Description: Assumes the stream represents a text file, and
//               extracts one line up to and including the trailing
//               newline character.  Returns empty string when the end
//               of file is reached.
//
//               The interface here is intentionally designed to be
//               similar to that for Python's file.readline()
//               function.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
1018 0 0 6 1116 2896 0 0 0 1 4 this 3 3015  
1019 0 0 6 1117 2790 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data
//       Access: Published
//  Description: Returns the entire buffer contents as a string,
//               regardless of the current data pointer.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3016  
1020 0 0 6 1118 2802 0 0 269 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::get_data_size
//       Access: Published
//  Description: Returns the size of the entire buffer contents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3016  
1021 0 0 4 1119 2794 0 0 250 ////////////////////////////////////////////////////////////////////
//     Function: Ramfile::clear
//       Access: Published
//  Description: Empties the current buffer contents.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3015  
1022 0 0 7 1122 3018 2392 0 219 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1023 0 0 7 1122 3018 2392 0 224 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::Copy Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3019  
1024 0 0 6 1123 3018 0 0 0 2 4 this 3 3018  4 copy 1 3019  
1025 0 0 6 1124 2801 0 0 0 2 4 this 3 3019  5 other 1 3019  
1026 0 0 6 1125 2801 0 0 0 2 4 this 3 3019  5 other 1 3019  
1027 0 0 6 1126 2801 0 0 0 2 4 this 3 3019  5 other 1 3019  
1028 0 0 6 1127 2791 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::compare_to
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  5 other 1 3019  
1029 0 0 4 1128 2794 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::merge_with
//       Access: Published
//  Description: Generates a new HashVal representing the xor of this
//               one and the other one.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  5 other 1 3019  
1030 0 0 4 1129 2794 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_dec
//       Access: Published
//  Description: Outputs the HashVal as four unsigned decimal
//               integers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  3 out 1 2798  
1031 0 0 4 1130 2794 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input
//       Access: Published
//  Description: Inputs the HashVal as four unsigned decimal integers.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  2 in 1 2838  
1032 0 0 4 1131 2794 0 0 272 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_hex
//       Access: Published
//  Description: Outputs the HashVal as a 32-digit hexadecimal number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  3 out 1 2798  
1033 0 0 4 1132 2794 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_hex
//       Access: Published
//  Description: Inputs the HashVal as a 32-digit hexadecimal number.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  2 in 1 2838  
1034 0 0 4 1133 2794 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output_binary
//       Access: Published
//  Description: Outputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order generated by
//               write_stream().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  3 out 1 2798  
1035 0 0 4 1134 2794 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::input_binary
//       Access: Published
//  Description: Inputs the HashVal as a binary stream of bytes in
//               order.  This is not the same order expected by
//               read_stream().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  2 in 1 2838  
1036 0 0 4 1135 2794 0 0 215 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  3 out 1 2798  
1037 0 0 6 1136 2790 0 0 290 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_dec
//       Access: Published
//  Description: Returns the HashVal as a string with four decimal
//               numbers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1038 0 0 6 1137 2801 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_dec
//       Access: Published
//  Description: Sets the HashVal from a string with four decimal
//               numbers.  Returns true if valid, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  4 text 1 2790  
1039 0 0 6 1138 2790 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_hex
//       Access: Published
//  Description: Returns the HashVal as a 32-byte hexadecimal string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1040 0 0 6 1139 2801 0 0 334 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_hex
//       Access: Published
//  Description: Sets the HashVal from a 32-byte hexademical string.
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  4 text 1 2790  
1041 0 0 6 1140 2790 0 0 262 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::as_bin
//       Access: Published
//  Description: Returns the HashVal as a 16-byte binary string.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3019  
1042 0 0 6 1141 2801 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::set_from_bin
//       Access: Published
//  Description: Sets the HashVal from a 16-byte binary string.
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  4 text 1 2790  
1043 0 0 4 1142 2794 0 0 223 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_datagram
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  11 destination 1 2992  
1044 0 0 4 1143 2794 0 0 222 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_datagram
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  6 source 1 3007  
1045 0 0 4 1144 2794 0 0 221 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::write_stream
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3019  11 destination 1 2964  
1046 0 0 4 1145 2794 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::read_stream
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  6 source 1 2946  
1047 0 0 6 1146 2801 0 0 500 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_file
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  8 filename 1 2858  
1048 0 0 6 1147 2801 0 0 502 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_stream
//       Access: Published
//  Description: Generates the hash value from the indicated file.
//               Returns true on success, false if the file cannot be
//               read.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  6 stream 1 2838  
1049 0 0 4 1148 2794 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_ramfile
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  7 ramfile 1 3016  
1050 0 0 4 1149 2794 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_string
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3018  4 data 1 2790  
1051 0 0 4 1150 2794 0 0 432 ////////////////////////////////////////////////////////////////////
//     Function: HashVal::hash_buffer
//       Access: Published
//  Description: Generates the hash value by hashing the indicated
//               data.  This method is only defined if we have the
//               OpenSSL library (which provides md5 functionality)
//               available.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3018  6 buffer 1 2790  6 length 1 2791  
1052 0 0 7 1153 2983 2394 0 231 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1053 0 0 6 1155 2791 0 0 279 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_num_pointers
//       Access: Published
//  Description: Returns the number of pointers in the set.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3021  
1054 0 0 7 1156 2986 2210 0 267 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  1 n 1 2791  
1055 0 0 6 1157 2974 0 0 445 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_typed_pointer
//       Access: Published
//  Description: Returns the nth pointer of the set, typecast to a
//               TypedObject if possible.  If the pointer is not a
//               TypedObject or if the cast cannot be made, returns
//               NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  1 n 1 2791  
1056 0 0 7 1158 2912 2151 0 305 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type
//       Access: Published
//  Description: Returns the actual type of the nth pointer, if it is
//               known.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  1 n 1 2791  
1057 0 0 6 1159 2790 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_type_name
//       Access: Published
//  Description: Returns the type name of the nth pointer, if it is
//               known.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  1 n 1 2791  
1058 0 0 6 1160 2789 0 0 459 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::get_age
//       Access: Published
//  Description: Returns the age of the nth pointer: the number of
//               seconds elapsed between the time it was allocated and
//               the time it was added to this set via a call to
//               MemoryUsage::get_pointers().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  1 n 1 2791  
1059 0 0 6 1161 2896 0 0 0 2 4 this 3 3021  1 n 1 2791  
1060 0 0 4 1162 2794 0 0 254 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::clear
//       Access: Published
//  Description: Empties the set of pointers.
//////////////////////////////////////////////////////////////////// 1 4 this 3 2983  
1061 0 0 4 1163 2794 0 0 227 ////////////////////////////////////////////////////////////////////
//     Function: MemoryUsagePointers::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3021  3 out 1 2798  
1062 0 0 7 1165 3023 2407 0 219 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1063 0 0 7 1165 3023 2407 0 219 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 6 source 1 2920  5 start 1 2889  3 end 1 2889  
1064 0 0 6 1166 3023 0 0 697 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               source, with the first character being the character
//               at position "start" within the source, for end -
//               start total characters.  The character at "end"
//               within the source will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the ISubStream will
//               continue until the end of the source stream.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3023  6 source 1 2920  5 start 1 2889  3 end 1 2889  
1065 0 0 6 1167 3023 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: ISubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the source istream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3023  
1066 0 0 7 1170 3024 2411 0 219 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1067 0 0 7 1170 3024 2411 0 219 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 4 dest 1 2934  5 start 1 2889  3 end 1 2889  6 append 1 2801  
1068 0 0 6 1171 3024 0 0 689 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::open
//       Access: Public
//  Description: Starts the SubStream reading from the indicated
//               dest, with the first character being the character
//               at position "start" within the dest, for end -
//               start total characters.  The character at "end"
//               within the dest will never be read; this will
//               appear to be EOF.
//
//               If end is zero, it indicates that the OSubStream will
//               continue until the end of the dest stream.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3024  4 dest 1 2934  5 start 1 2889  3 end 1 2889  6 append 1 2801  
1069 0 0 6 1172 3024 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: OSubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the dest ostream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3024  
1070 0 0 7 1175 3025 2415 0 218 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1071 0 0 7 1175 3025 2415 0 218 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 4 6 nested 1 2959  5 start 1 2889  3 end 1 2889  6 append 1 2801  
1072 0 0 6 1176 3025 0 0 534 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::open
//       Access: Public
//  Description: Starts the SubStream reading and writing from the
//               indicated nested stream, within the indicated range.
//               "end" is the first character outside of the range.
//
//               If end is zero, it indicates that the SubStream will
//               continue until the end of the nested stream.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3025  6 nested 1 2959  5 start 1 2889  3 end 1 2889  6 append 1 2801  
1073 0 0 6 1177 3025 0 0 308 ////////////////////////////////////////////////////////////////////
//     Function: SubStream::close
//       Access: Public
//  Description: Resets the SubStream to empty, but does not actually
//               close the nested ostream.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3025  
1074 0 0 4 1180 2794 0 0 464 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::clear_certificates
//       Access: Public
//  Description: Removes all the certificates from the global store,
//               including the compiled-in certificates loaded from
//               ca_bundle_data.c.  You can add new certificates by
//               calling load_certificates().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3026  
1075 0 0 6 1181 2791 0 0 793 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates
//       Access: Public
//  Description: Reads the PEM-formatted certificate(s) (delimited by
//               -----BEGIN CERTIFICATE----- and -----END
//               CERTIFICATE-----) from the indicated file and adds
//               them to the global store object, retrieved via
//               get_x509_store().
//
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  8 filename 1 2858  
1076 0 0 6 1182 2791 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3026  4 data 1 2790  9 data_size 1 2802  
1077 0 0 6 1182 2791 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_pem_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be PEM-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  4 data 1 2790  
1078 0 0 6 1183 2791 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3026  4 data 1 2790  9 data_size 1 2802  
1079 0 0 6 1183 2791 0 0 710 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::load_certificates_from_der_ram
//       Access: Public
//  Description: Reads a chain of trusted certificates from the
//               indicated data buffer and adds them to the X509_STORE
//               object.  The data buffer should be DER-formatted.
//               Returns the number of certificates read on success,
//               or 0 on failure.
//
//               You should call this only with trusted,
//               locally-stored certificates; not with certificates
//               received from an untrusted source.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3026  4 data 1 2790  
1080 0 0 6 1184 3027 0 0 698 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_x509_store
//       Access: Public
//  Description: Returns the global X509_STORE object.
//
//               It has to be a global object, because OpenSSL seems
//               to store some global pointers associated with this
//               object whether you want it to or not, and keeping
//               independent copies of a local X509_STORE object
//               doesn't seem to work that well.  So, we have one
//               store that keeps all certificates the application
//               might need.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3026  
1081 0 0 4 1185 2794 0 0 572 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_ssl_errors
//       Access: Public
//  Description: A convenience function that is itself a wrapper
//               around the OpenSSL convenience function to output the
//               recent OpenSSL errors.  This function sends the error
//               string to express_cat.warning().  If
//               REPORT_OPENSSL_ERRORS is not defined, the function
//               does nothing.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3026  
1082 0 0 4 1186 2794 0 0 326 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::notify_debug_ssl_errors
//       Access: Public
//  Description: As notify_ssl_errors(), but sends the output to debug
//               instead of warning.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3026  
1083 0 0 6 1187 3026 0 0 235 ////////////////////////////////////////////////////////////////////
//     Function: OpenSSLWrapper::get_global_ptr
//       Access: Public, Static
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1084 0 0 7 1189 3029 2210 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1085 0 0 6 1190 2801 0 0 651 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Published
//  Description: Opens the named Multifile on disk for reading.  The
//               Multifile index is read in, and the list of subfiles
//               becomes available; individual subfiles may then be
//               extracted or read, but the list of subfiles may not
//               be modified.
//
//               Also see the version of open_read() which accepts an
//               istream.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3029  14 multifile_name 1 2858  6 offset 1 3006  
1086 0 0 6 1190 2801 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read
//       Access: Public
//  Description: Opens an anonymous Multifile for reading using an
//               istream.  There must be seek functionality via
//               seekg() and tellg() on the istream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3029  16 multifile_stream 1 2920  12 owns_pointer 1 2801  6 offset 1 3006  
1087 0 0 6 1191 2801 0 0 734 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Published
//  Description: Opens the named Multifile on disk for writing.  If
//               there already exists a file by that name, it is
//               truncated.  The Multifile is then prepared for
//               accepting a brand new set of subfiles, which will be
//               written to the indicated filename.  Individual
//               subfiles may not be extracted or read.
//
//               Also see the version of open_write() which accepts an
//               ostream.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  14 multifile_name 1 2858  
1088 0 0 6 1191 2801 0 0 630 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_write
//       Access: Public
//  Description: Opens an anonymous Multifile for writing using an
//               ostream.  There must be seek functionality via
//               seekp() and tellp() on the pstream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3029  16 multifile_stream 1 2798  12 owns_pointer 1 2801  
1089 0 0 6 1192 2801 0 0 680 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Published
//  Description: Opens the named Multifile on disk for reading and
//               writing.  If there already exists a file by that
//               name, its index is read.  Subfiles may be added or
//               removed, and the resulting changes will be written to
//               the named file.
//
//               Also see the version of open_read_write() which
//               accepts an iostream.  Returns true on success, false
//               on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  14 multifile_name 1 2858  
1090 0 0 6 1192 2801 0 0 682 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_write
//       Access: Public
//  Description: Opens an anonymous Multifile for reading and writing
//               using an iostream.  There must be seek functionality
//               via seekg()/seekp() and tellg()/tellp() on the
//               iostream.
//
//               If owns_pointer is true, then the Multifile assumes
//               ownership of the stream pointer and will delete it
//               when the multifile is closed, including if this
//               function returns false.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3029  16 multifile_stream 1 2888  12 owns_pointer 1 2801  
1091 0 0 4 1193 2794 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::close
//       Access: Published
//  Description: Closes the Multifile if it is open.  All changes are
//               flushed to disk, and the file becomes invalid for
//               further operations until the next call to open().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3029  
1092 0 0 6 1194 2858 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_multifile_name
//       Access: Published
//  Description: Returns the filename of the Multifile, if it is
//               available.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1093 0 0 4 1195 2794 0 0 471 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_multifile_name
//       Access: Published
//  Description: Replaces the filename of the Multifile.  This is
//               primarily used for documentation purposes only;
//               changing this name does not open the indicated file.
//               See open_read() or open_write() for that.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  14 multifile_name 1 2858  
1094 0 0 6 1196 2801 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_read_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               read mode and there have been no errors, and
//               individual Subfile contents may be extracted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1095 0 0 6 1197 2801 0 0 407 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_write_valid
//       Access: Published
//  Description: Returns true if the Multifile has been opened for
//               write mode and there have been no errors, and
//               Subfiles may be added or removed from the Multifile.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1096 0 0 6 1198 2801 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::needs_repack
//       Access: Published
//  Description: Returns true if the Multifile index is suboptimal and
//               should be repacked.  Call repack() to achieve this.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1097 0 0 6 1199 2901 0 0 588 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_timestamp
//       Access: Published
//  Description: Returns the modification timestamp of the overall
//               Multifile.  This indicates the most recent date at
//               which subfiles were added or removed from the
//               Multifile.  Note that it is logically possible for an
//               individual subfile to have a more recent timestamp
//               than the overall timestamp.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1098 0 0 4 1200 2794 0 0 900 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_record_timestamp
//       Access: Published
//  Description: Sets the flag indicating whether timestamps should be
//               recorded within the Multifile or not.  The default is
//               true, indicating the Multifile will record timestamps
//               for the overall file and also for each subfile.  
//
//               If this is false, the Multifile will not record
//               timestamps internally.  In this case, the return
//               value from get_timestamp() or get_subfile_timestamp()
//               will be estimations.
//
//               You may want to set this false to minimize the
//               bitwise difference between independently-generated
//               Multifiles.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  16 record_timestamp 1 2801  
1099 0 0 6 1201 2801 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_record_timestamp
//       Access: Published
//  Description: Returns the flag indicating whether timestamps
//               should be recorded within the Multifile or not.  See
//               set_record_timestamp().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1100 0 0 4 1202 2794 0 0 1220 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_scale_factor
//       Access: Published
//  Description: Changes the internal scale factor for this Multifile.
//
//               This is normally 1, but it may be set to any
//               arbitrary value (greater than zero) to support
//               Multifile archives that exceed 4GB, if necessary.
//               (Individual subfiles may still not exceed 4GB.)
//
//               All addresses within the file are rounded up to the
//               next multiple of _scale_factor, and zeros are written
//               to the file to fill the resulting gaps.  Then the
//               address is divided by _scale_factor and written out
//               as a 32-bit integer.  Thus, setting a scale factor of
//               2 supports up to 8GB files, 3 supports 12GB files,
//               etc.
//
//               Calling this function on an already-existing
//               Multifile will have no immediate effect until a
//               future call to repack() or close() (or until the
//               Multifile is destructed).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  12 scale_factor 1 2802  
1101 0 0 6 1203 2802 0 0 321 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_scale_factor
//       Access: Published
//  Description: Returns the internal scale factor for this Multifile.
//               See set_scale_factor().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1102 0 0 4 1204 2794 0 0 818 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_flag
//       Access: Published
//  Description: Sets the flag indicating whether subsequently-added
//               subfiles should be encrypted before writing them to
//               the multifile.  If true, subfiles will be encrypted;
//               if false (the default), they will be written without
//               encryption.
//
//               When true, subfiles will be encrypted with the
//               password specified by set_encryption_password().  It
//               is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  4 flag 1 2801  
1103 0 0 6 1205 2801 0 0 430 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_flag
//       Access: Published
//  Description: Returns the flag indicating whether
//               subsequently-added subfiles should be encrypted
//               before writing them to the multifile.  See
//               set_encryption_flag().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1104 0 0 4 1206 2794 0 0 696 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_password
//       Access: Published
//  Description: Specifies the password that will be used to encrypt
//               subfiles subsequently added to the multifile, if the
//               encryption flag is also set true (see
//               set_encryption_flag()).
//
//               It is possible to apply a different password to
//               different files, but the resulting file can't be
//               mounted via VFS.  Changing this value may cause an
//               implicit call to flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  19 encryption_password 1 2790  
1105 0 0 6 1207 2790 0 0 395 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_password
//       Access: Published
//  Description: Returns the password that will be used to encrypt
//               subfiles subsequently added to the multifile.  See
//               set_encryption_password().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1106 0 0 4 1208 2794 0 0 1073 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_algorithm
//       Access: Public
//  Description: Specifies the encryption algorithm that should be
//               used for future calls to add_subfile().  The default
//               is whatever is specified by the encryption-algorithm
//               config variable.  The complete set of available
//               algorithms is defined by the current version of
//               OpenSSL.
//
//               If an invalid algorithm is specified, there is no
//               immediate error return code, but flush() will fail
//               and the file will be invalid.
//
//               It is possible to apply a different encryption
//               algorithm to different files, and unlike the
//               password, this does not interfere with mounting the
//               multifile via VFS.  Changing this value may cause an
//               implicit call to flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  20 encryption_algorithm 1 2790  
1107 0 0 6 1209 2790 0 0 331 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_algorithm
//       Access: Public
//  Description: Returns the encryption algorithm that was specified
//               by set_encryption_algorithm().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1108 0 0 4 1210 2794 0 0 998 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_key_length
//       Access: Public
//  Description: Specifies the length of the key, in bits, that should
//               be used to encrypt the stream in future calls to
//               add_subfile().  The default is whatever is specified
//               by the encryption-key-length config variable.  
//
//               If an invalid key_length for the chosen algorithm is
//               specified, there is no immediate error return code,
//               but flush() will fail and the file will be invalid.
//
//               It is possible to apply a different key length to
//               different files, and unlike the password, this does
//               not interfere with mounting the multifile via VFS.
//               Changing this value may cause an implicit call to
//               flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  21 encryption_key_length 1 2791  
1109 0 0 6 1211 2791 0 0 344 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_key_length
//       Access: Public
//  Description: Returns the encryption key length, in bits, that was
//               specified by set_encryption_key_length().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1110 0 0 4 1212 2794 0 0 1174 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_encryption_iteration_count
//       Access: Public
//  Description: Specifies the number of times to repeatedly hash the
//               key before writing it to the stream in future calls
//               to add_subfile().  Its purpose is to make it
//               computationally more expensive for an attacker to
//               search the key space exhaustively.  This should be a
//               multiple of 1,000 and should not exceed about 65
//               million; the value 0 indicates just one application
//               of the hashing algorithm.
//
//               The default is whatever is specified by the
//               multifile-encryption-iteration-count config variable.
//
//               It is possible to apply a different iteration count
//               to different files, and unlike the password, this
//               does not interfere with mounting the multifile via
//               VFS.  Changing this value causes an implicit call to
//               flush().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  26 encryption_iteration_count 1 2791  
1111 0 0 6 1213 2791 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_encryption_iteration_count
//       Access: Public
//  Description: Returns the value that was specified by
//               set_encryption_iteration_count().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1112 0 0 6 1214 2790 0 0 983 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Published
//  Description: Adds a file on disk as a subfile to the Multifile.
//               The file named by filename will be read and added to
//               the Multifile at the next call to flush().  If there
//               already exists a subfile with the indicated name, it
//               is replaced without examining its contents (but see
//               also update_subfile).
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3029  12 subfile_name 1 2790  8 filename 1 2858  17 compression_level 1 2791  
1113 0 0 6 1214 2790 0 0 1193 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_subfile
//       Access: Public
//  Description: Adds a file from a stream as a subfile to the Multifile.
//               The indicated istream will be read and its contents
//               added to the Multifile at the next call to flush().
//               The file will be added as a binary subfile.
//
//               Note that the istream must remain untouched and
//               unused by any other code until flush() is called.  At
//               that time, the Multifile will read the entire
//               contents of the istream from the current file
//               position to the end of the file.  Subsequently, the
//               Multifile will *not* close or delete the istream.  It
//               is the caller's responsibility to ensure that the
//               istream pointer does not destruct during the lifetime
//               of the Multifile.
//
//               Returns the subfile name on success (it might have
//               been modified slightly), or empty string on failure.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3029  12 subfile_name 1 2790  12 subfile_data 1 2838  17 compression_level 1 2791  
1114 0 0 6 1215 2790 0 0 775 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::update_subfile
//       Access: Published
//  Description: Adds a file on disk to the subfile.  If a subfile
//               already exists with the same name, its contents are
//               compared byte-for-byte to the disk file, and it is
//               replaced only if it is different; otherwise, the
//               multifile is left unchanged.
//
//               Filename::set_binary() or set_text() must have been
//               called previously to specify the nature of the source
//               file.  If set_text() was called, the text flag will
//               be set on the subfile.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3029  12 subfile_name 1 2790  8 filename 1 2858  17 compression_level 1 2791  
1115 0 0 6 1216 2801 0 0 1856 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               The chain filename may be empty if the certificate
//               does not require an authenticating certificate chain
//               (e.g. because it is self-signed).
//
//               The specified private key must match the certificate,
//               and the Multifile must be open in read-write mode.
//               The private key is only used for generating the
//               signature; it is not written to the Multifile and
//               cannot be retrieved from the Multifile later.
//               (However, the certificate *can* be retrieved from the
//               Multifile later, to identify the entity that created
//               the signature.)
//
//               This implicitly causes a repack() operation if one is
//               needed.  Returns true on success, false on failure.
//
//               This flavor of add_signature() reads the certificate
//               and private key from a PEM-formatted file, for
//               instance as generated by the openssl command.  If the
//               private key file is password-encrypted, the third
//               parameter will be used as the password to decrypt it.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3029  11 certificate 1 2858  5 chain 1 2858  4 pkey 1 2858  8 password 1 2790  
1116 0 0 6 1216 2801 0 0 1131 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::add_signature
//       Access: Published
//  Description: Adds a new signature to the Multifile.  This
//               signature associates the indicated certificate with
//               the current contents of the Multifile.  When the
//               Multifile is read later, the signature will still be
//               present only if the Multifile is unchanged; any
//               subsequent changes to the Multifile will
//               automatically invalidate and remove the signature.
//
//               This flavor of add_signature() reads the certificate,
//               private key, and certificate chain from the same
//               PEM-formatted file.  It takes the first private key
//               found as the intended key, and then uses the first
//               certificate found that matches that key as the
//               signing certificate.  Any other certificates in the
//               file are taken to be part of the chain.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3029  9 composite 1 2858  8 password 1 2790  
1117 0 0 6 1217 2791 0 0 921 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_signatures
//       Access: Published
//  Description: Returns the number of matching signatures found on
//               the Multifile.  These signatures may be iterated via
//               get_signature() and related methods.
//
//               A signature on this list is guaranteed to match the
//               Multifile contents, proving that the Multifile has
//               been unmodified since the signature was applied.
//               However, this does not guarantee that the certificate
//               itself is actually from who it says it is from; only
//               that it matches the Multifile contents.  See
//               validate_signature_certificate() to authenticate a
//               particular certificate.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1118 0 0 6 1218 2790 0 0 669 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_subject_name
//       Access: Published
//  Description: Returns the "subject name" for the nth signature found
//               on the Multifile.  This is a string formatted
//               according to RFC2253 that should more-or-less
//               identify a particular certificate; when paired with
//               the public key (see get_signature_public_key()), it
//               can uniquely identify a certificate.  See the
//               comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  1 n 1 2791  
1119 0 0 6 1219 2790 0 0 127 //               See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  1 n 1 2791  
1120 0 0 6 1220 2790 0 0 691 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_signature_public_key
//       Access: Published
//  Description: Returns the public key used for the nth signature
//               found on the Multifile.  This is encoded in DER form
//               and returned as a string of hex digits.
//
//               This can be used, in conjunction with the subject
//               name (see get_signature_subject_name()), to uniquely
//               identify a particular certificate and its subsequent
//               reissues.  See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  1 n 1 2791  
1121 0 0 4 1221 2794 0 0 415 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::print_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               user-readable verbose form, to the indicated stream.
//               See the comments in get_num_signatures().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3030  1 n 1 2791  3 out 1 2798  
1122 0 0 4 1222 2794 0 0 398 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::write_signature_certificate
//       Access: Published
//  Description: Writes the certificate for the nth signature, in
//               PEM form, to the indicated stream.  See the comments
//               in get_num_signatures().
//////////////////////////////////////////////////////////////////// 3 4 this 3 3030  1 n 1 2791  3 out 1 2798  
1123 0 0 6 1223 2791 0 0 595 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::validate_signature_certificate
//       Access: Published
//  Description: Checks that the certificate used for the nth
//               signature is a valid, authorized certificate with
//               some known certificate authority.  Returns 0 if it
//               is valid, -1 if there is some error, or the
//               corresponding OpenSSL error code if it is invalid,
//               out-of-date, or self-signed.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  1 n 1 2791  
1124 0 0 6 1224 2801 0 0 1090 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::flush
//       Access: Published
//  Description: Writes all contents of the Multifile to disk.  Until
//               flush() is called, add_subfile() and remove_subfile()
//               do not actually do anything to disk.  At this point,
//               all of the recently-added subfiles are read and their
//               contents are added to the end of the Multifile, and
//               the recently-removed subfiles are marked gone from
//               the Multifile.
//
//               This may result in a suboptimal index.  To guarantee
//               that the index is written at the beginning of the
//               file, call repack() instead of flush().
//
//               It is not necessary to call flush() explicitly unless
//               you are concerned about reading the recently-added
//               subfiles immediately.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3029  
1125 0 0 6 1225 2801 0 0 959 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::repack
//       Access: Published
//  Description: Forces a complete rewrite of the Multifile and all of
//               its contents, so that its index will appear at the
//               beginning of the file with all of the subfiles listed
//               in alphabetical order.  This is considered optimal
//               for reading, and is the standard configuration; but
//               it is not essential to do this.
//
//               It is only valid to call this if the Multifile was
//               opened using open_read_write() and an explicit
//               filename, rather than an iostream.  Also, we must
//               have write permission to the directory containing the
//               Multifile.
//
//               Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3029  
1126 0 0 6 1226 2791 0 0 412 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_num_subfiles
//       Access: Published
//  Description: Returns the number of subfiles within the Multifile.
//               The subfiles may be accessed in alphabetical order by
//               iterating through [0 .. get_num_subfiles()).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1127 0 0 6 1227 2791 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::find_subfile
//       Access: Published
//  Description: Returns the index of the subfile with the indicated
//               name, or -1 if the named subfile is not within the
//               Multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  12 subfile_name 1 2790  
1128 0 0 6 1228 2801 0 0 461 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::has_directory
//       Access: Published
//  Description: Returns true if the indicated subfile name is the
//               directory prefix to one or more files within the
//               Multifile.  That is, the Multifile contains at least
//               one file named "subfile_name/...".
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  12 subfile_name 1 2790  
1129 0 0 6 1229 2801 0 0 755 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::scan_directory
//       Access: Published
//  Description: Considers subfile_name to be the name of a
//               subdirectory within the Multifile, but not a file
//               itself; fills the given vector up with the sorted list
//               of subdirectories or files within the named
//               directory.
//
//               Note that directories do not exist explicitly within
//               a Multifile; this just checks for the existence of
//               files with the given initial prefix.
//
//               Returns true if successful, false otherwise.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3030  8 contents 1 2898  12 subfile_name 1 2790  
1130 0 0 4 1230 2794 0 0 770 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the nth subfile from the Multifile.  This
//               will cause all subsequent index numbers to decrease
//               by one.  The file will not actually be removed from
//               the disk until the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  5 index 1 2791  
1131 0 0 6 1230 2801 0 0 824 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::remove_subfile
//       Access: Published
//  Description: Removes the named subfile from the Multifile, if it
//               exists; returns true if successfully removed, or
//               false if it did not exist in the first place.  The
//               file will not actually be removed from the disk until
//               the next call to flush().
//
//               Note that this does not actually remove the data from
//               the indicated subfile; it simply removes it from the
//               index.  The Multifile will not be reduced in size
//               after this operation, until the next call to
//               repack().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  12 subfile_name 1 2790  
1132 0 0 6 1231 2790 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_name
//       Access: Published
//  Description: Returns the name of the nth subfile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1133 0 0 6 1232 2802 0 0 433 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_length
//       Access: Published
//  Description: Returns the uncompressed data length of the nth
//               subfile.  This might return 0 if the subfile has
//               recently been added and flush() has not yet been
//               called.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1134 0 0 6 1233 2901 0 0 567 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_timestamp
//       Access: Published
//  Description: Returns the modification time of the nth
//               subfile.  If this is called on an older .mf file,
//               which did not store individual timestamps in the file
//               (or if get_record_timestamp() is false), this will
//               return the modification time of the overall
//               multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1135 0 0 6 1234 2801 0 0 372 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_compressed
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               compressed when stored within the archive, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1136 0 0 6 1235 2801 0 0 370 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_encrypted
//       Access: Published
//  Description: Returns true if the indicated subfile has been
//               encrypted when stored within the archive, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1137 0 0 6 1236 2801 0 0 647 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::is_subfile_text
//       Access: Published
//  Description: Returns true if the indicated subfile represents text
//               data, or false if it represents binary data.  If the
//               file is text data, it may have been processed by
//               end-of-line conversion when it was added.  (But the
//               actual bits in the multifile will represent the
//               standard Unix end-of-line convention, e.g. \n instead
//               of \r\n.)
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1138 0 0 6 1237 3006 0 0 688 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_index_end
//       Access: Published
//  Description: Returns the first byte that is guaranteed to follow
//               any index byte already written to disk in the
//               Multifile.
//
//               This number is largely meaningless in many cases, but
//               if needs_repack() is false, and the file is flushed,
//               this will indicate the number of bytes in the header
//               + index.  Everything at this byte position and later
//               will be actual data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1139 0 0 6 1238 3006 0 0 653 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_start
//       Access: Published
//  Description: Returns the starting byte position within the
//               Multifile at which the indicated subfile begins.
//               This may be used, with get_subfile_internal_length(),
//               for low-level access to the subfile, but usually it
//               is better to use open_read_subfile() instead (which
//               automatically decrypts and/or uncompresses the
//               subfile data).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1140 0 0 6 1239 2802 0 0 639 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_subfile_internal_length
//       Access: Published
//  Description: Returns the number of bytes the indicated subfile
//               consumes within the archive.  For compressed
//               subfiles, this will generally be smaller than
//               get_subfile_length(); for encrypted (but
//               noncompressed) subfiles, it may be slightly
//               different, for noncompressed and nonencrypted
//               subfiles, it will be equal.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  5 index 1 2791  
1141 0 0 6 1240 2790 0 0 316 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::read_subfile
//       Access: Published
//  Description: Returns a string that contains the entire contents of
//               the indicated subfile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  5 index 1 2791  
1142 0 0 6 1241 2838 0 0 1184 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::open_read_subfile
//       Access: Published
//  Description: Returns an istream that may be used to read the
//               indicated subfile.  You may seek() within this
//               istream to your heart's content; even though it will
//               be a reference to the already-opened pfstream of the
//               Multifile itself, byte 0 appears to be the beginning
//               of the subfile and EOF appears to be the end of the
//               subfile.
//
//               The returned istream will have been allocated via
//               new; you should pass the pointer to
//               close_read_subfile() when you are finished with it to
//               delete it and release its resources.
//
//               Any future calls to repack() or close() (or the
//               Multifile destructor) will invalidate all currently
//               open subfile pointers.
//
//               The return value will be NULL if the stream cannot be
//               opened for some reason.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  5 index 1 2791  
1143 0 0 4 1242 2794 0 0 531 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::close_read_subfile
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_subfile().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2838  
1144 0 0 6 1243 2801 0 0 300 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile
//       Access: Published
//  Description: Extracts the nth subfile into a file with the given
//               name.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3029  5 index 1 2791  8 filename 1 2858  
1145 0 0 6 1244 2801 0 0 276 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::extract_subfile_to
//       Access: Public
//  Description: Extracts the nth subfile to the indicated ostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3029  5 index 1 2791  3 out 1 2798  
1146 0 0 6 1245 2801 0 0 858 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::compare_subfile
//       Access: Published
//  Description: Performs a byte-for-byte comparison of the indicated
//               file on disk with the nth subfile.  Returns true if
//               the files are equivalent, or false if they are
//               different (or the file is missing).
//
//               If Filename::set_binary() or set_text() has already
//               been called, it specifies the nature of the source
//               file.  If this is different from the text flag of the
//               subfile, the comparison will always return false.
//               If this has not been specified, it will be set from
//               the text flag of the subfile.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3029  5 index 1 2791  8 filename 1 2858  
1147 0 0 4 1246 2794 0 0 217 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  3 out 1 2798  
1148 0 0 4 1247 2794 0 0 263 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::ls
//       Access: Published
//  Description: Shows a list of all subfiles within the Multifile.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3030  3 out 1 2798  
1149 0 0 6 1248 2790 0 0 346 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_magic_number
//       Access: Published, Static
//  Description: Returns a string with the first n bytes written to a
//               Multifile, to identify it as a Multifile.
//////////////////////////////////////////////////////////////////// 0 
1150 0 0 4 1249 2794 0 0 1041 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::set_header_prefix
//       Access: Published
//  Description: Sets the string which is written to the Multifile
//               before the Multifile header.  This string must begin
//               with a hash mark and end with a newline character;
//               and if it includes embedded newline characters, each
//               one must be followed by a hash mark.  If these
//               conditions are not initially true, the string will be
//               modified as necessary to make it so.
//
//               This is primarily useful as a simple hack to allow
//               p3d applications to be run directly from the command
//               line on Unix-like systems.
//
//               The return value is true if successful, or false on
//               failure (for instance, because the header prefix
//               violates the above rules).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3029  13 header_prefix 1 2790  
1151 0 0 6 1250 2790 0 0 345 ////////////////////////////////////////////////////////////////////
//     Function: Multifile::get_header_prefix
//       Access: Published
//  Description: Returns the string that preceded the Multifile header
//               on the file, if any.  See set_header_prefix().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3030  
1152 0 0 7 1252 3034 2494 0 221 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3032  
1153 0 0 7 1252 3034 2494 0 216 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 12 initial_name 1 2790  
1154 0 0 6 1253 3034 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: Namable::Copy Assignment Operator
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3034  5 other 1 3032  
1155 0 0 4 1254 2794 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: Namable::set_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3034  4 name 1 2790  
1156 0 0 4 1255 2794 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: Namable::clear_name
//       Access: Public
//  Description: Resets the Namable's name to empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3034  
1157 0 0 6 1256 2801 0 0 311 ////////////////////////////////////////////////////////////////////
//     Function: Namable::has_name
//       Access: Public
//  Description: Returns true if the Namable has a nonempty name set,
//               false if the name is empty.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3032  
1158 0 0 6 1257 2790 0 0 213 ////////////////////////////////////////////////////////////////////
//     Function: Namable::get_name
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3032  
1159 0 0 4 1258 2794 0 0 380 ////////////////////////////////////////////////////////////////////
//     Function: Namable::output
//       Access: Public
//  Description: Outputs the Namable.  This function simply writes the
//               name to the output stream; most Namable derivatives
//               will probably redefine this.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3032  3 out 1 2798  
1160 0 0 7 1259 2912 2151 0 0 0 
1161 0 0 7 1262 3000 2503 0 232 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Default Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1162 0 0 7 1262 3000 2503 0 224 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 file 1 3004  5 start 1 3006  4 size 1 2902  
1163 0 0 7 1262 3000 2503 0 224 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 3 8 filename 1 2858  5 start 1 3006  4 size 1 2902  
1164 0 0 7 1262 3000 2503 0 229 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::Copy Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 copy 1 3011  
1165 0 0 6 1263 3000 0 0 0 2 4 this 3 3000  4 copy 1 3011  
1166 0 0 6 1264 2801 0 0 322 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::is_empty
//       Access: Published
//  Description: Returns true if this SubfileInfo doesn't define any
//               file, false if it has real data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3011  
1167 0 0 7 1265 3004 0 0 273 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_file
//       Access: Published
//  Description: Returns the FileReference that represents this file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3011  
1168 0 0 6 1266 2858 0 0 252 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_filename
//       Access: Published
//  Description: A shortcut to the filename.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3011  
1169 0 0 6 1267 3006 0 0 305 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_start
//       Access: Published
//  Description: Returns the offset within the file at which this file
//               data begins.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3011  
1170 0 0 6 1268 2902 0 0 339 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::get_size
//       Access: Published
//  Description: Returns the number of consecutive bytes, beginning at
//               get_start(), that correspond to this file data.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3011  
1171 0 0 4 1269 2794 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: SubfileInfo::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3011  3 out 1 2798  
1172 0 0 6 1272 3037 0 0 0 1 4 this 3 3035  
1173 0 0 7 1273 2863 1726 0 0 1 4 this 3 3035  
1174 0 0 6 1274 2858 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_original_filename
//       Access: Published
//  Description: Returns the original filename as it was used to
//               locate this VirtualFile.  This is usually, but not
//               always, the same string returned by get_filename().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1175 0 0 6 1275 2801 0 0 280 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::has_file
//       Access: Published, Virtual
//  Description: Returns true if this file exists, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1176 0 0 6 1276 2801 0 0 354 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_directory
//       Access: Published, Virtual
//  Description: Returns true if this file represents a directory (and
//               scan_directory() may be called), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1177 0 0 6 1277 2801 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_regular_file
//       Access: Published, Virtual
//  Description: Returns true if this file represents a regular file
//               (and read_file() may be called), false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1178 0 0 6 1278 2801 0 0 406 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::is_writable
//       Access: Published, Virtual
//  Description: Returns true if this file may be written to, which
//               implies write_file() may be called (unless it is a
//               directory instead of a regular file).
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1179 0 0 6 1279 2801 0 0 454 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::delete_file
//       Access: Public
//  Description: Attempts to delete this file or directory.  This can
//               remove a single file or an empty directory.  It will
//               not remove a nonempty directory.  Returns true on
//               success, false on failure.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3005  
1180 0 0 6 1280 2801 0 0 964 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::rename_file
//       Access: Public
//  Description: Attempts to move or rename this file or directory.
//               If the original file is an ordinary file, it will
//               quietly replace any already-existing file in the new
//               filename (but not a directory).  If the original file
//               is a directory, the new filename must not already
//               exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3005  8 new_file 1 3005  
1181 0 0 6 1281 2801 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of this file to the
//               indicated file.  Returns true on success, false on
//               failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3005  8 new_file 1 3005  
1182 0 0 7 1282 3038 2210 0 522 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1183 0 0 4 1283 2794 0 0 219 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::output
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  3 out 1 2798  
1184 0 0 4 1284 2794 0 0 287 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls
//       Access: Published
//  Description: If the file represents a directory, lists its
//               contents.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  3 out 1 2798  
1185 0 0 4 1285 2794 0 0 335 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::ls_all
//       Access: Published
//  Description: If the file represents a directory, recursively lists
//               its contents and those of all subdirectories.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  3 out 1 2798  
1186 0 0 6 1286 2790 0 0 271 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::read_file
//       Access: Public
//  Description: Returns the entire contents of the file as a string.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  11 auto_unwrap 1 2801  
1187 0 0 6 1287 2838 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_file
//       Access: Published, Virtual
//  Description: Opens the file for reading.  Returns a newly
//               allocated istream on success (which you should
//               eventually delete when you are done reading).
//               Returns NULL on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  11 auto_unwrap 1 2801  
1188 0 0 4 1288 2794 0 0 519 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  6 stream 1 2838  
1189 0 0 6 1289 2801 0 0 627 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::was_read_successful
//       Access: Published, Virtual
//  Description: Call this method after a reading the istream returned
//               by open_read_file() to completion.  If it returns
//               true, the file was read completely and without error;
//               if it returns false, there may have been some errors
//               or a truncated file read.  This is particularly
//               likely if the stream is a VirtualFileHTTP.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1190 0 0 6 1290 2801 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::write_file
//       Access: Public
//  Description: Writes the entire contents of the file as a string,
//               if it is writable.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3005  4 data 1 2790  9 auto_wrap 1 2801  
1191 0 0 6 1291 2798 0 0 450 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated ostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3005  9 auto_wrap 1 2801  8 truncate 1 2801  
1192 0 0 6 1292 2798 0 0 452 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_append_file
//       Access: Published, Virtual
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3005  
1193 0 0 4 1293 2794 0 0 521 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3005  6 stream 1 2798  
1194 0 0 6 1294 2888 0 0 456 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_write_file
//       Access: Published, Virtual
//  Description: Opens the file for writing.  Returns a newly
//               allocated iostream on success (which you should
//               eventually delete when you are done writing).
//               Returns NULL on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3005  8 truncate 1 2801  
1195 0 0 6 1295 2888 0 0 472 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::open_read_append_file
//       Access: Published, Virtual
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3005  
1196 0 0 4 1296 2794 0 0 532 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::close_read_write_file
//       Access: Published
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3005  6 stream 1 2888  
1197 0 0 6 1297 2902 0 0 343 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the file before it has been opened.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1198 0 0 6 1297 2902 0 0 508 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_file_size
//       Access: Published, Virtual
//  Description: Returns the current size on disk (or wherever it is)
//               of the already-open file.  Pass in the stream that
//               was returned by open_read_file(); some
//               implementations may require this stream to determine
//               the size.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3035  6 stream 1 2838  
1199 0 0 6 1298 2901 0 0 776 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_timestamp
//       Access: Published, Virtual
//  Description: Returns a time_t value that represents the time the
//               file was last modified, to within whatever precision
//               the operating system records this information (on a
//               Windows95 system, for instance, this may only be
//               accurate to within 2 seconds).
//
//               If the timestamp cannot be determined, either because
//               it is not supported by the operating system or
//               because there is some error (such as file not found),
//               returns 0.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3035  
1200 0 0 6 1299 2801 0 0 629 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFile::get_system_info
//       Access: Published, Virtual
//  Description: Populates the SubfileInfo structure with the data
//               representing where the file actually resides on disk,
//               if this is knowable.  Returns true if the file might
//               reside on disk, and the info is populated, or false
//               if it does not (or it is not known where the file
//               resides), in which case the info is meaningless.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3005  4 info 1 3000  
1201 0 0 7 1300 2912 2151 0 0 0 
1202 0 0 7 1303 2912 2151 0 0 0 
1203 0 0 6 1306 3037 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_file_system
//       Access: Public
//  Description: Returns the file system this mount object is attached
//               to.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3039  
1204 0 0 6 1307 2858 0 0 410 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_point
//       Access: Public
//  Description: Returns the name of the directory within the virtual
//               file system that this mount object is attached to.
//               This directory name will end with a slash.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3039  
1205 0 0 6 1308 2791 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::get_mount_flags
//       Access: Public
//  Description: Returns the set of flags passed by the user to the
//               VirtualFileSystem::mount() command.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3039  
1206 0 0 4 1309 2794 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::output
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3039  3 out 1 2798  
1207 0 0 4 1310 2794 0 0 229 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMount::write
//       Access: Public, Virtual
//  Description: 
//////////////////////////////////////////////////////////////////// 2 4 this 3 3039  3 out 1 2798  
1208 0 0 7 1311 2912 2151 0 0 0 
1209 0 0 7 1313 3041 2348 0 235 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 9 multifile 1 3029  
1210 0 0 7 1314 3029 2210 0 319 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountMultifile::get_multifile
//       Access: Public
//  Description: Returns the Multifile pointer that this mount object
//               is based on.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3042  
1211 0 0 7 1315 2912 2151 0 0 0 
1212 0 0 7 1317 3044 2547 0 233 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountRamdisk::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1213 0 0 7 1318 2912 2151 0 0 0 
1214 0 0 7 1321 3045 2551 0 232 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::Constructor
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 1 17 physical_filename 1 2858  
1215 0 0 6 1322 2858 0 0 357 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileMountSystem::get_physical_filename
//       Access: Public
//  Description: Returns the name of the source file on the OS
//               filesystem of the directory or file that is mounted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3046  
1216 0 0 7 1323 2912 2151 0 0 0 
1217 0 0 7 1326 3050 2348 0 312 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::get_mount
//       Access: Published, Virtual
//  Description: Returns the VirtualFileMount this file is associated
//               with.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3048  
1218 0 0 6 1327 2801 0 0 429 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSimple::is_implicit_pz_file
//       Access: Published
//  Description: Returns true if this file is a .pz file that should
//               be implicitly decompressed on load, or false if it is
//               not a .pz file or if it should not be decompressed.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3048  
1219 0 0 7 1328 2912 2151 0 0 0 
1220 0 0 7 1331 3051 2352 0 225 ////////////////////////////////////////////////////////////////////
//     Function: TemporaryFile::Constructor
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 8 filename 1 2858  
1221 0 0 7 1332 2912 2151 0 0 0 
1222 0 0 7 1334 3052 2561 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1223 0 0 7 1334 3052 2561 0 226 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 2 6 source 1 2838  11 owns_source 1 2801  
1224 0 0 6 1335 3052 0 0 220 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::open
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 3 4 this 3 3052  6 source 1 2838  11 owns_source 1 2801  
1225 0 0 6 1336 3052 0 0 342 ////////////////////////////////////////////////////////////////////
//     Function: IDecompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the source istream unless owns_source was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3052  
1226 0 0 7 1339 3053 2565 0 224 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1227 0 0 7 1339 3053 2565 0 224 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::Constructor
//       Access: Public
//  Description:
//////////////////////////////////////////////////////////////////// 3 4 dest 1 2798  9 owns_dest 1 2801  17 compression_level 1 2791  
1228 0 0 6 1340 3053 0 0 218 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::open
//       Access: Public
//  Description: 
//////////////////////////////////////////////////////////////////// 4 4 this 3 3053  4 dest 1 2798  9 owns_dest 1 2801  17 compression_level 1 2791  
1229 0 0 6 1341 3053 0 0 336 ////////////////////////////////////////////////////////////////////
//     Function: OCompressStream::close
//       Access: Public
//  Description: Resets the ZStream to empty, but does not actually
//               close the dest ostream unless owns_dest was true.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3053  
1230 0 0 6 1344 2791 0 0 270 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_num_files
//       Access: Published
//  Description: Returns the number of files in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3054  
1231 0 0 7 1345 3005 2533 0 258 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::get_file
//       Access: Published
//  Description: Returns the nth file in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3054  1 n 1 2791  
1232 0 0 7 1346 3005 2533 0 261 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::operator []
//       Access: Published
//  Description: Returns the nth file in the list.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3054  1 n 1 2791  
1233 0 0 6 1347 2791 0 0 261 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileList::size
//       Access: Published
//  Description: Returns the number of files in the list.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3054  
1234 0 0 7 1348 3038 2210 0 0 2 4 this 3 3038  5 other 1 3054  
1235 0 0 7 1349 3038 2210 0 0 2 4 this 3 3054  5 other 1 3054  
1236 0 0 7 1351 3037 2573 0 230 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::Constructor
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 0 
1237 0 0 6 1354 2801 0 0 1505 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated system file or directory at the
//               given mount point.  If the named file is a directory,
//               mounts the directory.  If the named file is a
//               Multifile, mounts it as a Multifile.  Returns true on
//               success, false on failure.
//
//               A given system directory may be mounted to multiple
//               different mount point, and the same mount point may
//               share multiple system directories.  In the case of
//               ambiguities (that is, two different files with
//               exactly the same full pathname), the most-recently
//               mounted system wins.
//
//               The filename specified as the first parameter must
//               refer to a real, physical filename on disk; it cannot
//               be a virtual file already appearing within the vfs
//               filespace.  However, it is possible to mount such a
//               file; see mount_loop() for this.
////
//               Note that a mounted VirtualFileSystem directory is
//               fully case-sensitive, unlike the native Windows file
//               system, so you must refer to files within the virtual
//               file system with exactly the right case.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3037  17 physical_filename 1 2858  11 mount_point 1 2858  5 flags 1 2791  8 password 1 2790  
1238 0 0 6 1354 2801 0 0 297 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Mounts the indicated Multifile at the given mount
//               point.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3037  9 multifile 1 3029  11 mount_point 1 2858  5 flags 1 2791  
1239 0 0 6 1354 2801 0 0 465 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount
//       Access: Published
//  Description: Adds the given VirtualFileMount object to the mount
//               list.  This is a lower-level function that the other
//               flavors of mount(); it requires you to create a
//               VirtualFileMount object specifically.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3037  5 mount 1 3050  11 mount_point 1 2858  5 flags 1 2791  
1240 0 0 6 1355 2801 0 0 971 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::mount_loop
//       Access: Published
//  Description: This is similar to mount(), but it receives the name
//               of a Multifile that already appears within the
//               virtual file system.  It can be used to mount a
//               Multifile that is itself hosted within a
//               virtually-mounted Multifile.
//
//               This interface can also be used to mount physical
//               files (that appear within the virtual filespace), but
//               it cannot be used to mount directories.  Use mount()
//               if you need to mount a directory.
//
//               Note that there is additional overhead, in the form
//               of additional buffer copies of the data, for
//               recursively mounting a multifile like this.
//////////////////////////////////////////////////////////////////// 5 4 this 3 3037  16 virtual_filename 1 2858  11 mount_point 1 2858  5 flags 1 2791  8 password 1 2790  
1241 0 0 6 1356 2791 0 0 402 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated directory
//               name or multifile name from the file system.  Returns
//               the number of appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  17 physical_filename 1 2858  
1242 0 0 6 1356 2791 0 0 379 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts all appearances of the indicated Multifile
//               from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  9 multifile 1 3029  
1243 0 0 6 1356 2791 0 0 374 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount
//       Access: Published
//  Description: Unmounts the indicated VirtualFileMount object
//               from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  5 mount 1 3050  
1244 0 0 6 1357 2791 0 0 388 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_point
//       Access: Published
//  Description: Unmounts all systems attached to the given mount
//               point from the file system.  Returns the number of
//               appearances unmounted.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  11 mount_point 1 2858  
1245 0 0 6 1358 2791 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::unmount_all
//       Access: Published
//  Description: Unmounts all files from the file system.  Returns the
//               number of systems unmounted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3037  
1246 0 0 6 1359 2791 0 0 304 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_num_mounts
//       Access: Published
//  Description: Returns the number of individual mounts in the
//               system.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3056  
1247 0 0 7 1360 3050 2348 0 264 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_mount
//       Access: Published
//  Description: Returns the nth mount in the system.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  1 n 1 2791  
1248 0 0 6 1361 2801 0 0 429 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::chdir
//       Access: Published
//  Description: Changes the current directory.  This is used to
//               resolve relative pathnames in get_file() and/or
//               find_file().  Returns true if successful, false
//               otherwise.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  13 new_directory 1 2858  
1249 0 0 7 1362 2863 1726 0 275 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_cwd
//       Access: Published
//  Description: Returns the current directory name.  See chdir().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3056  
1250 0 0 6 1363 2801 0 0 544 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Returns true on success, false on failure
//               (for instance, because the parent directory does not
//               exist, or is read-only).  If the directory already
//               existed prior to this call, returns true.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  8 filename 1 2858  
1251 0 0 6 1364 2801 0 0 424 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::make_directory_full
//       Access: Published
//  Description: Attempts to create a directory within the file
//               system.  Will also create any intervening directories
//               needed.  Returns true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  8 filename 1 2858  
1252 0 0 7 1365 3005 2533 0 902 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_file
//       Access: Published
//  Description: Looks up the file by the indicated name in the file
//               system.  Returns a VirtualFile pointer representing
//               the file if it is found, or NULL if it is not.
//
//               If status_only is true, the file will be checked for
//               existence and length and so on, but the returned
//               file's contents cannot be read.  This is an
//               optimization which is especially important for
//               certain mount types, for instance HTTP, for which
//               opening a file to determine its status is
//               substantially less expensive than opening it to read
//               its contents.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3056  8 filename 1 2858  11 status_only 1 2801  
1253 0 0 7 1366 3005 2533 0 592 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::create_file
//       Access: Published
//  Description: Attempts to create a file by the indicated name in
//               the filesystem, if possible, and returns it.  If a
//               file by this name already exists, returns the same
//               thing as get_file().  If the filename is located
//               within a read-only directory, or the directory
//               doesn't exist, returns NULL.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  8 filename 1 2858  
1254 0 0 7 1367 3005 2533 0 436 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_file
//       Access: Published
//  Description: Uses the indicated search path to find the file
//               within the file system.  Returns the first occurrence
//               of the file found, or NULL if the file cannot be
//               found.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3056  8 filename 1 2858  10 searchpath 1 2876  11 status_only 1 2801  
1255 0 0 6 1368 2801 0 0 467 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::delete_file
//       Access: Public
//  Description: Attempts to delete the indicated file or directory.
//               This can remove a single file or an empty directory.
//               It will not remove a nonempty directory.  Returns
//               true on success, false on failure.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  8 filename 1 2858  
1256 0 0 6 1369 2801 0 0 980 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::rename_file
//       Access: Public
//  Description: Attempts to move or rename the indicated file or
//               directory.  If the original file is an ordinary file,
//               it will quietly replace any already-existing file in
//               the new filename (but not a directory).  If the
//               original file is a directory, the new filename must
//               not already exist.
//
//               If the file is a directory, the new filename must be
//               within the same mount point.  If the file is an
//               ordinary file, the new filename may be anywhere; but
//               if it is not within the same mount point then the
//               rename operation is automatically performed as a
//               two-step copy-and-delete operation.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  13 orig_filename 1 2858  12 new_filename 1 2858  
1257 0 0 6 1370 2801 0 0 377 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::copy_file
//       Access: Public
//  Description: Attempts to copy the contents of the indicated file
//               to the indicated file.  Returns true on success,
//               false on failure.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  13 orig_filename 1 2858  12 new_filename 1 2858  
1258 0 0 6 1371 2801 0 0 440 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::resolve_filename
//       Access: Public
//  Description: Searches the given search path for the filename.  If
//               it is found, updates the filename to the full
//               pathname found and returns true; otherwise, returns
//               false.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3056  8 filename 1 2863  10 searchpath 1 2876  17 default_extension 1 2790  
1259 0 0 6 1372 2791 0 0 672 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::find_all_files
//       Access: Public
//  Description: Searches all the directories in the search list for
//               the indicated file, in order.  Fills up the results
//               list with *all* of the matching filenames found, if
//               any.  Returns the number of matches found.
//
//               It is the responsibility of the the caller to clear
//               the results list first; otherwise, the newly-found
//               files will be appended to the list.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3056  8 filename 1 2858  10 searchpath 1 2876  7 results 1 2881  
1260 0 0 6 1373 2801 0 0 302 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::exists
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  8 filename 1 2858  
1261 0 0 6 1374 2801 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_directory
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a directory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  8 filename 1 2858  
1262 0 0 6 1375 2801 0 0 333 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::is_regular_file
//       Access: Published
//  Description: Convenience function; returns true if the named file
//               exists and is a regular file.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  8 filename 1 2858  
1263 0 0 7 1376 3038 2210 0 528 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::scan_directory
//       Access: Published
//  Description: If the file represents a directory (that is,
//               is_directory() returns true), this returns the list
//               of files within the directory at the current time.
//               Returns NULL if the file is not a directory or if the
//               directory cannot be read.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  8 filename 1 2858  
1264 0 0 4 1377 2794 0 0 307 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  8 filename 1 2858  
1265 0 0 4 1378 2794 0 0 362 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::ls_all
//       Access: Published
//  Description: Convenience function; lists the files within the
//               indicated directory, and all files below,
//               recursively.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  8 filename 1 2858  
1266 0 0 4 1379 2794 0 0 303 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::write
//       Access: Published
//  Description: Print debugging information.
//               (e.g. from Python or gdb prompt).
//////////////////////////////////////////////////////////////////// 2 4 this 3 3056  3 out 1 2798  
1267 0 0 6 1380 3037 0 0 773 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::get_global_ptr
//       Access: Published, Static
//  Description: Returns the default global VirtualFileSystem.  You
//               may create your own personal VirtualFileSystem
//               objects and use them for whatever you like, but Panda
//               will attempt to load models and stuff from this
//               default object.
//
//               Initially, the global VirtualFileSystem is set up to
//               mount the OS filesystem to root; i.e. it is
//               equivalent to the OS filesystem.  This may be
//               subsequently adjusted by the user.
//////////////////////////////////////////////////////////////////// 0 
1268 0 0 6 1381 2896 0 0 665 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::read_file
//       Access: Published
//  Description: Convenience function; returns the entire contents of
//               the indicated file as a string.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3056  8 filename 1 2858  11 auto_unwrap 1 2801  
1269 0 0 6 1382 2838 0 0 750 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               istream if the file exists and can be read, or NULL
//               otherwise.  Does not return an invalid istream.
//
//               If auto_unwrap is true, an explicitly-named .pz file
//               is automatically decompressed and the decompressed
//               contents are returned.  This is different than
//               vfs-implicit-pz, which will automatically decompress
//               a file if the extension .pz is *not* given.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3056  8 filename 1 2858  11 auto_unwrap 1 2801  
1270 0 0 4 1383 2794 0 0 533 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_file().  This really just deletes the
//               istream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2838  
1271 0 0 6 1384 2896 0 0 0 4 4 this 3 3037  8 filename 1 2858  4 data 1 2896  9 auto_wrap 1 2801  
1272 0 0 6 1385 2798 0 0 658 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               ostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid ostream.
//
//               If auto_wrap is true, an explicitly-named .pz file is
//               automatically compressed while writing.  If truncate
//               is true, the file is truncated to zero length before
//               writing.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3037  8 filename 1 2858  9 auto_wrap 1 2801  8 truncate 1 2801  
1273 0 0 6 1386 2798 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_append_file
//       Access: Published
//  Description: Works like open_write_file(), but the file is opened
//               in append mode.  Like open_write_file, the returned
//               pointer should eventually be passed to
//               close_write_file().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  8 filename 1 2858  
1274 0 0 4 1387 2794 0 0 535 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_write_file().  This really just deletes the
//               ostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2798  
1275 0 0 6 1388 2888 0 0 425 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_write_file
//       Access: Published
//  Description: Convenience function; returns a newly allocated
//               iostream if the file exists and can be written, or
//               NULL otherwise.  Does not return an invalid iostream.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3037  8 filename 1 2858  8 truncate 1 2801  
1276 0 0 6 1389 2888 0 0 469 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::open_read_append_file
//       Access: Published
//  Description: Works like open_read_write_file(), but the file is opened
//               in append mode.  Like open_read_write_file, the returned
//               pointer should eventually be passed to
//               close_read_write_file().
//////////////////////////////////////////////////////////////////// 2 4 this 3 3037  8 filename 1 2858  
1277 0 0 4 1390 2794 0 0 546 ////////////////////////////////////////////////////////////////////
//     Function: VirtualFileSystem::close_read_write_file
//       Access: Published, Static
//  Description: Closes a file opened by a previous call to
//               open_read_write_file().  This really just deletes the
//               iostream pointer, but it is recommended to use this
//               interface instead of deleting it explicitly, to help
//               work around compiler issues.
//////////////////////////////////////////////////////////////////// 1 6 stream 1 2888  
1278 0 0 6 1392 2789 0 0 246 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_long_time, Win32 implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
1279 0 0 6 1393 2789 0 0 247 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_time, Win32 implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
1280 0 0 6 1394 2789 0 0 251 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_short_raw_time, Win32 implementation
//       Access: Published
//  Description: 
//////////////////////////////////////////////////////////////////// 1 4 this 3 3058  
1281 0 0 6 1395 2791 0 0 675 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_error_count
//       Access: Published
//  Description: Returns the number of clock errors that have
//               been detected.  Each time a clock error is detected,
//               in which the value returned by either of the above
//               methods is suspect, the value returned by this method
//               will be incremented.  Applications can monitor this
//               value and react, for instance, by resynchronizing
//               their clocks each time this value changes.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3059  
1282 0 0 6 1396 3058 0 0 309 ////////////////////////////////////////////////////////////////////
//     Function: TrueClock::get_global_ptr
//       Access: Published, Static
//  Description: Returns a pointer to the one TrueClock object in
//               the world.
//////////////////////////////////////////////////////////////////// 0 
1283 0 0 6 1397 2801 0 0 0 2 4 this 3 3059  4 mask 1 2955  
1284 0 0 7 1399 3061 2618 0 268 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create a patch file and initializes internal data
//////////////////////////////////////////////////////////////////// 0 
1285 0 0 7 1399 3061 2618 0 257 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::Constructor
//       Access: Public
//  Description: Create patch file with buffer to patch
//////////////////////////////////////////////////////////////////// 1 6 buffer 1 3062  
1286 0 0 6 1401 2801 0 0 680 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::build
//       Access: Public
//  Description:
//               This implementation uses the "greedy differencing
//               algorithm" described in the masters thesis
//               "Differential Compression: A Generalized Solution
//               for Binary Files" by Randal C. Burns (p.13).
//               For an original file of size M and a new file of
//               size N, this algorithm is O(M) in space and
//               O(M*N) (worst-case) in time.
//               return false on error
//////////////////////////////////////////////////////////////////// 4 4 this 3 3061  9 file_orig 1 2863  8 file_new 1 2863  10 patch_name 1 2863  
1287 0 0 6 1402 2791 0 0 449 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::read_header
//       Access: Published
//  Description: Opens the patch file for reading, and gets the header
//               information from the file but does not begin to do
//               any real work.  This can be used to query the data
//               stored in the patch.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3061  10 patch_file 1 2858  
1288 0 0 6 1403 2791 0 0 329 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file (original
//               file and patch are destroyed in the process).
//////////////////////////////////////////////////////////////////// 3 4 this 3 3061  10 patch_file 1 2858  4 file 1 2858  
1289 0 0 6 1403 2791 0 0 366 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::initiate
//       Access: Published
//  Description: Set up to apply the patch to the file.  In this form,
//               neither the original file nor the patch file are
//               destroyed.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3061  10 patch_file 1 2858  9 orig_file 1 2858  11 target_file 1 2858  
1290 0 0 6 1404 2791 0 0 660 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::run
//       Access: Published
//  Description: Perform one buffer's worth of patching
//               Returns EU_ok while patching
//               Returns EU_success when done
//               If error happens will return one of:
//               EU_error_abort : Patching has not been initiated
//               EU_error_file_invalid : file is corrupted
//               EU_error_invalid_checksum : incompatible patch file
//               EU_error_write_file_rename : could not rename file
//////////////////////////////////////////////////////////////////// 1 4 this 3 3061  
1291 0 0 6 1405 2801 0 0 418 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will delete the patch file and overwrite
//               the original file.
//////////////////////////////////////////////////////////////////// 3 4 this 3 3061  10 patch_file 1 2863  4 file 1 2863  
1292 0 0 6 1405 2801 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::apply
//       Access: Public
//  Description: Patches the entire file in one call
//               returns true on success and false on error
//
//               This version will not delete any files.
//////////////////////////////////////////////////////////////////// 4 4 this 3 3061  10 patch_file 1 2863  9 orig_file 1 2863  11 target_file 1 2858  
1293 0 0 6 1406 2996 0 0 368 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_progress
//       Access: Published
//  Description: Returns a value in the range 0..1, representing the
//               amount of progress through the patchfile, during a
//               session.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3063  
1294 0 0 4 1407 2794 0 0 685 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_allow_multifile
//       Access: Published
//  Description: If this flag is set true, the Patchfile will make a
//               special case for patching Panda Multifiles, if
//               detected, and attempt to patch them on a
//               subfile-by-subfile basis.  If this flag is false, the
//               Patchfile will always patch the file on a full-file
//               basis.
//
//               This has effect only when building patches; it is not
//               used for applying patches.
//////////////////////////////////////////////////////////////////// 2 4 this 3 3061  15 allow_multifile 1 2801  
1295 0 0 6 1408 2801 0 0 256 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_allow_multifile
//       Access: Published
//  Description: See set_allow_multifile().
//////////////////////////////////////////////////////////////////// 1 4 this 3 3061  
1296 0 0 4 1409 2794 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::set_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 2 4 this 3 3061  6 length 1 2791  
1297 0 0 6 1410 2791 0 0 230 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3061  
1298 0 0 4 1411 2794 0 0 232 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::reset_footprint_length
//       Access: Published
//  Description:
//////////////////////////////////////////////////////////////////// 1 4 this 3 3061  
1299 0 0 6 1412 2801 0 0 391 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::has_source_hash
//       Access: Published
//  Description: Returns true if the MD5 hash for the source file is
//               known.  (Some early versions of the patch file did
//               not store this information.)
//////////////////////////////////////////////////////////////////// 1 4 this 3 3063  
1300 0 0 6 1413 3019 0 0 267 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_source_hash
//       Access: Published
//  Description: Returns the MD5 hash for the source file.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3063  
1301 0 0 6 1414 3019 0 0 310 ////////////////////////////////////////////////////////////////////
//     Function: Patchfile::get_result_hash
//       Access: Published
//  Description: Returns the MD5 hash for the file after the patch has
//               been applied.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3063  
1302 0 0 7 1417 3067 2635 0 0 1 5 other 1 3065  
1303 0 0 7 1417 3067 2635 0 0 2 4 name 1 2790  10 maxEntries 1 2791  
1304 0 0 4 1419 2794 0 0 0 3 4 this 3 3067  4 name 1 2790  10 maxEntries 1 2791  
1305 0 0 4 1420 2794 0 0 0 1 4 this 3 3067  
1306 0 0 4 1421 2794 0 0 0 2 4 this 3 3067  3 tag 1 2790  
1307 0 0 4 1422 2794 0 0 0 1 4 this 3 3067  
1308 0 0 4 1422 2794 0 0 0 2 4 this 3 3067  3 tag 1 2790  
1309 0 0 6 1423 2789 0 0 110 // Don't call any of the following during timing:
// (Because they are slow, not because anything will break). 1 4 this 3 3065  
1310 0 0 4 1424 2794 0 0 0 1 3 out 1 2798  
1311 0 0 4 1425 2794 0 0 0 2 4 this 3 3065  3 out 1 2798  
1312 0 0 4 1426 2794 0 0 0 1 3 out 1 2798  
1313 0 0 4 1427 2794 0 0 0 2 4 this 3 3065  3 out 1 2798  
1314 0 0 6 1429 2801 0 0 327 ////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::was_deleted
//       Access: Published
//  Description: Returns true if the object we are pointing to has
//               been deleted, false otherwise.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3068  
1315 0 0 6 1430 2801 0 0 328 ////////////////////////////////////////////////////////////////////
//     Function: WeakPointerToVoid::is_valid_pointer
//       Access: Published
//  Description: Returns true if the pointer is not null and the
//               object has not been deleted.
//////////////////////////////////////////////////////////////////// 1 4 this 3 3068  
1316 0 0 6 1433 2801 0 0 608 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_string_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as a
//               string.  The supplied string value is automatically
//               converted from whatever encoding is set by
//               TextEncoder::set_default_encoding() and written as a
//               Unicode string.  The registry key must already exist
//               prior to calling this function.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2790  4 name 1 2790  5 value 1 2790  2 rl 1 2777  
1317 0 0 6 1434 2801 0 0 400 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::set_int_value
//       Access: Published, Static
//  Description: Sets the registry key to the indicated value as an
//               integer.  The registry key must already exist prior
//               to calling this function.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2790  4 name 1 2790  5 value 1 2791  2 rl 1 2777  
1318 0 0 6 1436 2778 0 0 355 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_key_type
//       Access: Published, Static
//  Description: Returns the type of the indicated key, or T_none if
//               the key is not known or is some unsupported type.
//////////////////////////////////////////////////////////////////// 3 3 key 1 2790  4 name 1 2790  2 rl 1 2777  
1319 0 0 6 1437 2790 0 0 597 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_string_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is a string value.  The
//               string value is automatically encoded using
//               TextEncoder::get_default_encoding().  If the key is
//               not defined or is not a string type value,
//               default_value is returned instead.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2790  4 name 1 2790  13 default_value 1 2790  2 rl 1 2777  
1320 0 0 6 1438 2791 0 0 478 ////////////////////////////////////////////////////////////////////
//     Function: WindowsRegistry::get_int_value
//       Access: Published, Static
//  Description: Returns the value associated with the indicated
//               registry key, assuming it is an integer value.  If
//               the key is not defined or is not an integer type
//               value, default_value is returned instead.
//////////////////////////////////////////////////////////////////// 4 3 key 1 2790  4 name 1 2790  13 default_value 1 2791  2 rl 1 2777  
1321 0 0 6 953 3070 0 0 92 // Returns the configure object for accessing config variables from a
// scripting language. 0 
1322 0 0 6 966 2790 0 0 0 2 6 source 1 2790  17 compression_level 1 2791  
1323 0 0 6 967 2790 0 0 0 1 6 source 1 2790  
1324 0 0 6 968 2801 0 0 0 3 6 source 1 2858  4 dest 1 2858  17 compression_level 1 2791  
1325 0 0 6 969 2801 0 0 0 2 6 source 1 2858  4 dest 1 2858  
1326 0 0 6 970 2801 0 0 0 3 6 source 1 2838  4 dest 1 2798  17 compression_level 1 2791  
1327 0 0 6 971 2801 0 0 0 2 6 source 1 2838  4 dest 1 2798  
1328 0 0 6 972 2801 0 0 0 2 6 source 1 2838  4 dest 1 2798  
1329 0 0 6 1087 2790 0 0 0 5 6 source 1 2790  8 password 1 2790  9 algorithm 1 2790  10 key_length 1 2791  15 iteration_count 1 2791  
1330 0 0 6 1088 2790 0 0 0 2 6 source 1 2790  8 password 1 2790  
1331 0 0 6 1089 2801 0 0 0 6 6 source 1 2858  4 dest 1 2858  8 password 1 2790  9 algorithm 1 2790  10 key_length 1 2791  15 iteration_count 1 2791  
1332 0 0 6 1090 2801 0 0 0 3 6 source 1 2858  4 dest 1 2858  8 password 1 2790  
1333 0 0 6 1091 2801 0 0 0 6 6 source 1 2838  4 dest 1 2798  8 password 1 2790  9 algorithm 1 2790  10 key_length 1 2791  15 iteration_count 1 2791  
1334 0 0 6 1092 2801 0 0 0 3 6 source 1 2838  4 dest 1 2798  8 password 1 2790  
1335 0 0 6 1094 2790 0 0 185 ////////////////////////////////////////////////////////////////////
//     Function: error_to_text
//  Description:
//////////////////////////////////////////////////////////////////// 1 3 err 1 2746  
1336 0 0 6 1095 2791 0 0 0 0 
1337 0 0 6 1096 2790 0 0 191 ////////////////////////////////////////////////////////////////////
//     Function: handle_socket_error
//  Description:
//////////////////////////////////////////////////////////////////// 0 
1338 0 0 6 1097 2791 0 0 0 0 
1339 0 0 6 1415 2790 0 0 0 4 8 password 1 2790  4 salt 1 2790  5 iters 1 2791  6 keylen 1 2791  
418
2653 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 2654 0 0 0 0 0 0 0 0 0 0

2654 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 1345 1355 0 9 1346 1347 1348 1349 1350 1351 1352 1353 1354 0 0 1 0 2655 0 0 0 0 0

2655 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 1344 0 0 0 0 1 0 2656 0 0 0 0 0

2656 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 1342 1343 0 0 1 0 2657 0 0 0 0 0

2657 13 PointerToVoid 0 43009 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 2 1340 1341 0 0 1 0 2658 0 0 0 0 635
////////////////////////////////////////////////////////////////////
//       Class : PointerToVoid
// Description : This is the non-template part of the base class for
//               PointerTo and ConstPointerTo.  It is necessary so we
//               can keep a pointer to a non-template class within the
//               ReferenceCount object, to implement weak reference
//               pointers--we need to have something to clean up when
//               the ReferenceCount object destructs.
//
//               This is the base class for PointerToBase<T>.
////////////////////////////////////////////////////////////////////

2658 10 MemoryBase 0 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 704
////////////////////////////////////////////////////////////////////
//       Class : MemoryBase
// Description : This class is intended to be the base class of all
//               objects in Panda that might be allocated and deleted
//               via the new and delete operators.  It redefines these
//               operators to provide some memory tracking support.
//
//               We used to try to override the global operator new
//               and delete methods, but that seems to cause problems
//               when including header files for C++-based system
//               libraries (such as are found on OSX).
////////////////////////////////////////////////////////////////////

2659 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 2660 0 0 0 0 0 0 0 0 0 0

2660 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 1359 1369 0 9 1360 1361 1362 1363 1364 1365 1366 1367 1368 0 0 1 0 2661 0 0 0 0 0

2661 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 1358 0 0 0 0 1 0 2662 0 0 0 0 0

2662 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 1356 1357 0 0 1 0 2657 0 0 0 0 0

2663 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 2664 0 0 0 0 0 0 0 0 0 0

2664 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 1373 1383 0 9 1374 1375 1376 1377 1378 1379 1380 1381 1382 0 0 1 0 2665 0 0 0 0 0

2665 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 1372 0 0 0 0 1 0 2666 0 0 0 0 0

2666 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 1370 1371 0 0 1 0 2657 0 0 0 0 0

2667 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 2668 0 0 0 0 0 0 0 0 0 0

2668 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 1387 1397 0 9 1388 1389 1390 1391 1392 1393 1394 1395 1396 0 0 1 0 2669 0 0 0 0 0

2669 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 1386 0 0 0 0 1 0 2670 0 0 0 0 0

2670 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 1384 1385 0 0 1 0 2657 0 0 0 0 0

2671 17 ConfigDeclaration 0 43009 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 0 23 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 0 0 1 0 2672 0 0 0 0 486
////////////////////////////////////////////////////////////////////
//       Class : ConfigDeclaration
// Description : A single declaration of a config variable, typically
//               defined as one line in a .prc file,
//               e.g. "show-frame-rate-meter 1".  This is really just
//               a pairing of a string name (actually, a
//               ConfigVariableCore pointer) to a string value.
////////////////////////////////////////////////////////////////////

2672 11 ConfigFlags 0 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 0 1398 0 0 0 0 0 0 2 2673 2674 414
////////////////////////////////////////////////////////////////////
//       Class : ConfigFlags
// Description : This class is the base class of both ConfigVariable
//               and ConfigVariableCore.  It exists only to provide a
//               convenient name scoping for some enumerated values
//               common to both classes.
////////////////////////////////////////////////////////////////////

2673 9 ValueType 0 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 2672 0 0 0 0 0 0 0 0 0 11 12 VT_undefined 25 ConfigFlags::VT_undefined 0
0 7 VT_list 20 ConfigFlags::VT_list 0
1 9 VT_string 22 ConfigFlags::VT_string 0
2 11 VT_filename 24 ConfigFlags::VT_filename 0
3 7 VT_bool 20 ConfigFlags::VT_bool 0
4 6 VT_int 19 ConfigFlags::VT_int 0
5 9 VT_double 22 ConfigFlags::VT_double 0
6 7 VT_enum 20 ConfigFlags::VT_enum 0
7 14 VT_search_path 27 ConfigFlags::VT_search_path 0
8 8 VT_int64 21 ConfigFlags::VT_int64 0
9 8 VT_color 21 ConfigFlags::VT_color 0
10 0 0

2674 13 VariableFlags 0 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 2672 0 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 141
// Trust level.  We have the bottom twelve bits reserved for a
// trust level indicator; then the open and closed bits are a
// special case.
4095 6 F_open 19 ConfigFlags::F_open 0
4096 8 F_closed 21 ConfigFlags::F_closed 0
8192 9 F_dynamic 22 ConfigFlags::F_dynamic 171
// F_dynamic means that the variable name is generated dynamically
// (possibly from a very large pool) and should not be included in
// the normal list of variable names.
16384 9 F_dconfig 22 ConfigFlags::F_dconfig 162
// F_dconfig means that the variable was constructed from the
// legacy DConfig system, rather than directly by the user.  You
// shouldn't pass this in directly.
32768 0 0

2675 10 ConfigPage 0 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 25 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 0 0 0 0 0 493
////////////////////////////////////////////////////////////////////
//       Class : ConfigPage
// Description : A page of ConfigDeclarations that may be loaded or
//               unloaded.  Typically this represents a single .prc
//               file that is read from disk at runtime, but it may
//               also represent a list of declarations built up
//               by application code and explicitly loaded.
////////////////////////////////////////////////////////////////////

2676 17 ConfigPageManager 0 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 0 19 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 0 0 1 0 2672 0 0 0 0 334
////////////////////////////////////////////////////////////////////
//       Class : ConfigPageManager
// Description : A global object that maintains the set of ConfigPages
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

2677 14 ConfigVariable 0 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 1478 1479 0 20 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 0 0 1 0 2678 0 0 0 0 709
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariable
// Description : This is a generic, untyped ConfigVariable.  It is
//               also the base class for the typed ConfigVariables,
//               and contains all of the code common to
//               ConfigVariables of all types (except
//               ConfigVariableList, which is a bit of a special
//               case).
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

2678 18 ConfigVariableBase 0 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 0 12 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 0 0 1 0 2672 0 0 0 0 698
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBase
// Description : This class is the base class for both
//               ConfigVariableList and ConfigVariable (and hence for
//               all of the ConfigVariableBool, ConfigVaribleString,
//               etc. classes).  It collects together the common
//               interface for all generic ConfigVariables.
//
//               Mostly, this class serves as a thin wrapper around
//               ConfigVariableCore and/or ConfigDeclaration, more or
//               less duplicating the interface presented there.
////////////////////////////////////////////////////////////////////

2679 18 ConfigVariableBool 0 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 1500 1510 0 8 1501 1503 1504 1505 1506 1507 1508 1509 0 1 1502 1 0 2677 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableBool
// Description : This is a convenience class to specialize
//               ConfigVariable as a boolean type.
////////////////////////////////////////////////////////////////////

2680 18 ConfigVariableCore 0 43009 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 0 28 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 4 3071 3072 3073 3074 0 1 0 2672 0 0 0 0 615
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableCore
// Description : The internal definition of a ConfigVariable.  This
//               object is shared between all instances of a
//               ConfigVariable that use the same variable name.
//
//               You cannot create a ConfigVariableCore instance
//               directly; instead, use the make() method, which may
//               return a shared instance.  Once created, these
//               objects are never destructed.
////////////////////////////////////////////////////////////////////

2681 20 ConfigVariableDouble 0 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 1539 1549 0 8 1540 1542 1543 1544 1545 1546 1547 1548 0 1 1541 1 0 2677 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableDouble
// Description : This is a convenience class to specialize
//               ConfigVariable as a floating-point type.
////////////////////////////////////////////////////////////////////

2682 22 ConfigVariableFilename 0 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 1550 1571 0 19 1551 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 0 1 1552 1 0 2677 0 0 0 0 584
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableFilename
// Description : This is a convenience class to specialize
//               ConfigVariable as a Filename type.  It is almost the
//               same thing as ConfigVariableString, except it handles
//               an implicit Filename::expand_from() operation so that
//               the user may put OS-specific filenames, or filenames
//               based on environment variables, in the prc file.
////////////////////////////////////////////////////////////////////

2683 17 ConfigVariableInt 0 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 1572 1582 0 8 1573 1575 1576 1577 1578 1579 1580 1581 0 1 1574 1 0 2677 0 0 0 0 283
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableInt
// Description : This is a convenience class to specialize
//               ConfigVariable as an integer type.
////////////////////////////////////////////////////////////////////

2684 19 ConfigVariableInt64 0 141313 19 ConfigVariableInt64 19 ConfigVariableInt64 0 0 0 1 1583 1593 0 8 1584 1586 1587 1588 1589 1590 1591 1592 0 1 1585 1 0 2677 0 0 0 0 291
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableInt64
// Description : This is a convenience class to specialize
//               ConfigVariable as a 64-bit integer type.
////////////////////////////////////////////////////////////////////

2685 18 ConfigVariableList 0 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 1594 1595 0 8 1596 1597 1598 1599 1600 1601 1602 1603 0 0 1 0 2678 0 0 0 0 779
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableList
// Description : This class is similar to ConfigVariable, but it
//               reports its value as a list of strings.  In this
//               special case, all of the declarations of the variable
//               are returned as the elements of this list, in order.
//
//               Note that this is different from a normal
//               ConfigVariableString, which just returns its topmost
//               value, which can optionally be treated as a number of
//               discrete words by dividing it at the spaces.
//
//               A ConfigVariableList cannot be modified locally.
////////////////////////////////////////////////////////////////////

2686 21 ConfigVariableManager 0 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 0 13 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1 3075 0 0 0 0 391
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableManager
// Description : A global object that maintains the set of
//               ConfigVariables (actually, ConfigVariableCores)
//               everywhere in the world, and keeps them in sorted
//               order.
////////////////////////////////////////////////////////////////////

2687 24 ConfigVariableSearchPath 0 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 1617 1618 0 15 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1 3076 1 1619 1 0 2678 0 0 0 0 1125
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableSearchPath
// Description : This is similar to a ConfigVariableList, but it
//               returns its list as a DSearchPath, as a list of
//               directories.
//
//               You may locally append directories to the end of the
//               search path with the methods here, or prepend them to
//               the beginning.  Use these methods to make adjustments
//               to the path; do not attempt to directly modify the
//               const DSearchPath object returned by get_value().
//
//               Unlike other ConfigVariable types, local changes
//               (made by calling append_directory() and
//               prepend_directory()) are specific to this particular
//               instance of the ConfigVariableSearchPath.  A separate
//               instance of the same variable, created by using the
//               same name to the constructor, will not reflect the
//               local changes.
////////////////////////////////////////////////////////////////////

2688 20 ConfigVariableString 0 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 1635 1650 0 13 1636 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 0 1 1637 1 0 2677 0 0 0 0 284
////////////////////////////////////////////////////////////////////
//       Class : ConfigVariableString
// Description : This is a convenience class to specialize
//               ConfigVariable as a string type.
////////////////////////////////////////////////////////////////////

2689 7 DConfig 0 141313 7 DConfig 7 DConfig 0 0 0 0 1656 0 5 1651 1652 1653 1654 1655 0 0 0 0 0 535
////////////////////////////////////////////////////////////////////
//       Class : DConfig
// Description : This class emulates the old dconfig-style interface
//               to our Panda config system.  It exists only to
//               provide backward-compatible support, and it is used
//               primarily by Python code.  For modern code, use the
//               new ConfigVariable* interface instead of this
//               deprecated interface.
////////////////////////////////////////////////////////////////////

2690 11 DSearchPath 0 26625 11 DSearchPath 11 DSearchPath 0 0 0 1 1667 1669 0 14 1668 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1 3077 0 0 0 1 2691 551
///////////////////////////////////////////////////////////////////
//       Class : DSearchPath
// Description : This class stores a list of directories that can be
//               searched, in order, to locate a particular file.  It
//               is normally constructed by passing it a traditional
//               searchpath-style string, e.g. a list of directory
//               names delimited by spaces or colons, but it can also
//               be built up explicitly.
////////////////////////////////////////////////////////////////////

2691 7 Results 0 288769 20 DSearchPath::Results 20 DSearchPath::Results 2690 0 0 1 1657 1659 0 8 1658 1660 1661 1662 1663 1664 1665 1666 0 0 0 0 0 0

2692 20 ExecutionEnvironment 0 141313 20 ExecutionEnvironment 20 ExecutionEnvironment 0 0 0 0 1696 0 13 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 0 0 0 0 0 475
////////////////////////////////////////////////////////////////////
//       Class : ExecutionEnvironment
// Description : Encapsulates access to the environment variables and
//               command-line arguments at the time of execution.
//               This is encapsulated to support accessing these
//               things during static init time, which seems to be
//               risky at best.
////////////////////////////////////////////////////////////////////

2693 10 FileStream 0 26625 10 FileStream 10 FileStream 0 0 0 1 1721 1722 0 2 1723 1724 0 0 1 0 2694 0 0 0 0 569
////////////////////////////////////////////////////////////////////
//       Class : FileStream
// Description : Implements a C++ stream object suitable for reading
//               from and/or writing to files on disk.  This is
//               similar to fstream, but it provides low-level support
//               for Panda's simple-threading implementation (using
//               this interface will block only the current thread,
//               rather than the entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2694 8 iostream 0 141313 8 iostream 8 iostream 0 0 0 0 1720 0 1 1719 0 0 2 3 2695 1709 1710 3 2700 1717 1718 0 0 0

2695 7 istream 0 141313 7 istream 7 istream 0 0 0 0 1708 0 3 1705 1706 1707 0 0 1 5 2696 1704 0 0 0 0

2696 3 ios 0 141313 3 ios 3 ios 0 0 0 0 1703 0 5 1698 1699 1700 1701 1702 0 0 1 0 2697 0 0 0 0 0

2697 8 ios_base 0 141313 8 ios_base 8 ios_base 0 0 0 0 1697 0 0 0 0 0 0 2 2698 2699 144
// We need to expose one method in each class to force it to publish.
// But we'd like to expose some of these methods anyway, so no
// problem.

2698 7 seekdir 0 794624 17 ios_base::seekdir 17 ios_base::seekdir 2697 0 0 0 0 0 0 0 0 0 3 3 beg 13 ios_base::beg 0
0 3 cur 13 ios_base::cur 0
1 3 end 13 ios_base::end 0
2 0 0

2699 8 openmode 0 794624 18 ios_base::openmode 18 ios_base::openmode 2697 0 0 0 0 0 0 0 0 0 0 0 0

2700 7 ostream 0 141313 7 ostream 7 ostream 0 0 0 0 1716 0 4 1712 1713 1714 1715 0 0 1 5 2696 1711 0 0 0 0

2701 8 Filename 0 26625 8 Filename 8 Filename 0 0 0 1 1725 1726 0 98 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 0 1 1742 0 0 1 2702 869
////////////////////////////////////////////////////////////////////
//       Class : Filename
// Description : The name of a file, such as a texture file or an Egg
//               file.  Stores the full pathname, and includes
//               functions for extracting out the directory prefix
//               part and the file extension and stuff.
//
//               A Filename is also aware of the mapping between the
//               Unix-like filename convention we use internally, and
//               the local OS's specific filename convention, and it
//               knows how to perform basic OS-specific I/O, like
//               testing for file existence and searching a
//               searchpath, as well as the best way to open an
//               fstream for reading or writing.
////////////////////////////////////////////////////////////////////

2702 4 Type 0 794624 14 Filename::Type 14 Filename::Type 2701 0 0 0 0 0 0 0 0 0 3 9 T_general 19 Filename::T_general 77
// These type values must fit within the bits allocated for
// F_type, below.
0 5 T_dso 15 Filename::T_dso 0
1 12 T_executable 22 Filename::T_executable 0
2 0 0

2703 11 GlobPattern 0 141313 11 GlobPattern 11 GlobPattern 0 0 0 1 1826 1842 0 15 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 0 0 0 0 0 859
////////////////////////////////////////////////////////////////////
//       Class : GlobPattern
// Description : This class can be used to test for string matches
//               against standard Unix-shell filename globbing
//               conventions.  It serves as a portable standin for the
//               Posix fnmatch() call.
//
//               A GlobPattern is given a pattern string, which can
//               contain operators like *, ?, and [].  Then it can be
//               tested against any number of candidate strings; for
//               each candidate, it will indicate whether the string
//               matches the pattern or not.  It can be used, for
//               example, to scan a directory for all files matching a
//               particular pattern.
////////////////////////////////////////////////////////////////////

2704 14 IDecryptStream 0 141313 14 IDecryptStream 14 IDecryptStream 0 0 0 1 1843 1849 0 5 1844 1845 1846 1847 1848 0 0 1 0 2695 0 0 0 0 603
////////////////////////////////////////////////////////////////////
//       Class : IDecryptStream
// Description : An input stream object that uses OpenSSL to decrypt
//               the input from another source stream on-the-fly.
//
//               Attach an IDecryptStream to an existing istream that
//               provides encrypted data, as generated by an
//               OEncryptStream, and read the corresponding
//               unencrypted data from the IDecryptStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2705 11 IFileStream 0 26625 11 IFileStream 11 IFileStream 0 0 0 1 1850 1851 0 2 1852 1853 0 0 1 0 2695 0 0 0 0 553
////////////////////////////////////////////////////////////////////
//       Class : IFileStream
// Description : Implements a C++ stream object suitable for reading
//               from files on disk.  This is similar to ifstream, but
//               it provides low-level support for Panda's
//               simple-threading implementation (using this interface
//               will block only the current thread, rather than the
//               entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2706 14 IStreamWrapper 0 26625 14 IStreamWrapper 14 IStreamWrapper 0 0 0 1 1858 1859 0 1 1860 0 0 1 5 2707 1857 0 0 0 390
////////////////////////////////////////////////////////////////////
//       Class : IStreamWrapper
// Description : This class provides a locking wrapper around an
//               arbitrary istream pointer.  A thread may use this
//               class to perform an atomic seek/read/gcount
//               operation.
////////////////////////////////////////////////////////////////////

2707 17 StreamWrapperBase 0 141313 17 StreamWrapperBase 17 StreamWrapperBase 0 0 0 0 1856 0 2 1854 1855 0 0 0 0 0 326
////////////////////////////////////////////////////////////////////
//       Class : StreamWrapperBase
// Description : The base class for both IStreamWrapper and
//               OStreamWrapper, this provides the common locking
//               interface.
////////////////////////////////////////////////////////////////////

2708 15 NeverFreeMemory 0 141313 15 NeverFreeMemory 15 NeverFreeMemory 0 0 0 0 1864 0 3 1861 1862 1863 0 0 0 0 0 818
////////////////////////////////////////////////////////////////////
//       Class : NeverFreeMemory
// Description : This class is used to allocate bytes of memory from a
//               pool that is never intended to be freed.  It is
//               particularly useful to support DeletedChain, which
//               allocates memory in just such a fashion.
//
//               When it is known that memory will not be freed, it is
//               preferable to use this instead of the standard
//               malloc() (or global_operator_new()) call, since this
//               will help reduce fragmentation problems in the
//               dynamic heap.  Also, memory allocated from here will
//               exhibit less wasted space.
////////////////////////////////////////////////////////////////////

2709 6 Notify 0 26625 6 Notify 6 Notify 0 0 0 1 1865 1866 0 15 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 0 0 0 0 0 833
////////////////////////////////////////////////////////////////////
//       Class : Notify
// Description : An object that handles general error reporting to the
//               user.  It contains a pointer to an ostream, initially
//               cerr, which can be reset at will to point to
//               different output devices, according to the needs of
//               the application.  All output generated within Panda
//               should vector through the Notify ostream.
//
//               This also includes a collection of Categories and
//               Severities, which may be independently enabled or
//               disabled, so that error messages may be squelched or
//               respected according to the wishes of the user.
////////////////////////////////////////////////////////////////////

2710 14 NotifyCategory 0 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 0 1907 0 21 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 0 0 2 3 2658 1882 1883 3 2672 1884 1885 0 0 536
////////////////////////////////////////////////////////////////////
//       Class : NotifyCategory
// Description : A particular category of error messages.  Typically
//               there will be one of these per package, so that we
//               can turn on or off error messages at least at a
//               package level; further nested categories can be
//               created within a package if a finer grain of control
//               is required.
////////////////////////////////////////////////////////////////////

2711 14 NotifySeverity 0 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 41
// Never used, a special case internally.
0 7 NS_spam 7 NS_spam 0
1 8 NS_debug 8 NS_debug 0
2 7 NS_info 7 NS_info 0
3 10 NS_warning 10 NS_warning 0
4 8 NS_error 8 NS_error 37
// Specifically, a recoverable error.
5 8 NS_fatal 8 NS_fatal 55
// A nonrecoverable error--expect abort() or core dump.
6 0 0

2712 14 OEncryptStream 0 141313 14 OEncryptStream 14 OEncryptStream 0 0 0 1 1908 1914 0 5 1909 1910 1911 1912 1913 0 0 1 0 2700 0 0 0 0 545
////////////////////////////////////////////////////////////////////
//       Class : OEncryptStream
// Description : An input stream object that uses OpenSSL to encrypt
//               data to another destination stream on-the-fly.
//
//               Attach an OEncryptStream to an existing ostream that
//               will accept encrypted data, and write your
//               unencrypted source data to the OEncryptStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2713 11 OFileStream 0 26625 11 OFileStream 11 OFileStream 0 0 0 1 1915 1916 0 2 1917 1918 0 0 1 0 2700 0 0 0 0 551
////////////////////////////////////////////////////////////////////
//       Class : OFileStream
// Description : Implements a C++ stream object suitable for writing
//               to files on disk.  This is similar to ofstream, but
//               it provides low-level support for Panda's
//               simple-threading implementation (using this interface
//               will block only the current thread, rather than the
//               entire process, on I/O waits).
////////////////////////////////////////////////////////////////////

2714 14 OStreamWrapper 0 26625 14 OStreamWrapper 14 OStreamWrapper 0 0 0 1 1920 1921 0 1 1922 0 0 1 5 2707 1919 0 0 0 367
////////////////////////////////////////////////////////////////////
//       Class : OStreamWrapper
// Description : This class provides a locking wrapper around an
//               arbitrary ostream pointer.  A thread may use this
//               class to perform an atomic seek/write operation.
////////////////////////////////////////////////////////////////////

2715 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 2716 0 0 0 0 0 0 0 0 0 0

2716 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 1923 1940 0 16 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 0 0 1 0 2655 0 0 0 0 0

2717 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 2718 0 0 0 0 0 0 0 0 0 0

2718 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 1941 1958 0 16 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 0 0 1 0 2661 0 0 0 0 0

2719 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 2720 0 0 0 0 0 0 0 0 0 0

2720 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 1959 1976 0 16 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 0 0 1 0 2665 0 0 0 0 0

2721 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 2722 0 0 0 0 0 0 0 0 0 0

2722 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 1977 1994 0 16 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 0 0 1 0 2669 0 0 0 0 0

2723 11 PandaSystem 0 43009 11 PandaSystem 11 PandaSystem 0 0 0 0 0 0 24 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 1 3078 0 0 0 0 435
////////////////////////////////////////////////////////////////////
//       Class : PandaSystem
// Description : This class is used as a namespace to group several
//               global properties of Panda.  Application developers
//               can use this class to query the runtime version or
//               capabilities of the current Panda environment.
////////////////////////////////////////////////////////////////////

2724 12 StreamReader 0 26625 12 StreamReader 12 StreamReader 0 0 0 1 2019 2021 0 29 2020 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 0 0 0 0 0 363
////////////////////////////////////////////////////////////////////
//       Class : StreamReader
// Description : A class to read sequential binary data directly from
//               an istream.  Its interface is similar to
//               DatagramIterator by design; see also StreamWriter.
////////////////////////////////////////////////////////////////////

2725 13 StreamWrapper 0 26625 13 StreamWrapper 13 StreamWrapper 0 0 0 1 2054 2055 0 1 2056 0 0 2 3 2706 2050 2051 3 2714 2052 2053 0 0 286
////////////////////////////////////////////////////////////////////
//       Class : StreamWrapper
// Description : This class provides a locking wrapper around a
//               combination ostream/istream pointer.
////////////////////////////////////////////////////////////////////

2726 12 StreamWriter 0 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 2057 2059 0 29 2058 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 0 0 0 0 0 550
////////////////////////////////////////////////////////////////////
//       Class : StreamWriter
// Description : A StreamWriter object is used to write sequential
//               binary data directly to an ostream.  Its interface is
//               very similar to Datagram by design; it's primarily
//               intended as a convenience to eliminate the overhead
//               of writing bytes to a Datagram and then writing the
//               Datagram to a stream.
////////////////////////////////////////////////////////////////////

2727 11 TextEncoder 0 141313 11 TextEncoder 11 TextEncoder 0 0 0 1 2088 2125 0 36 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 0 0 0 0 1 2728 676
////////////////////////////////////////////////////////////////////
//       Class : TextEncoder
// Description : This class can be used to convert text between
//               multiple representations, e.g. utf-8 to Unicode.  You
//               may use it as a static class object, passing the
//               encoding each time, or you may create an instance and
//               use that object, which will record the current
//               encoding and retain the current string.
//
//               This class is also a base class of TextNode, which
//               inherits this functionality.
////////////////////////////////////////////////////////////////////

2728 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 2727 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_unicode 22 TextEncoder::E_unicode 0
2 0 0

2729 10 TypeHandle 0 141313 10 TypeHandle 10 TypeHandle 0 0 0 1 2126 2151 0 23 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 0 1 2150 0 0 1 2730 1098
////////////////////////////////////////////////////////////////////
//       Class : TypeHandle
// Description : TypeHandle is the identifier used to differentiate
//               C++ class types.  Any C++ classes that inherit from
//               some base class, and must be differentiated at run
//               time, should store a static TypeHandle object that
//               can be queried through a static member function
//               named get_class_type().  Most of the time, it is also
//               desirable to inherit from TypedObject, which provides
//               some virtual functions to return the TypeHandle for a
//               particular instance.
//
//               At its essence, a TypeHandle is simply a unique
//               identifier that is assigned by the TypeRegistry.  The
//               TypeRegistry stores a tree of TypeHandles, so that
//               ancestry of a particular type may be queried, and the
//               type name may be retrieved for run-time display.
////////////////////////////////////////////////////////////////////

2730 11 MemoryClass 0 794624 23 TypeHandle::MemoryClass 23 TypeHandle::MemoryClass 2729 0 0 0 0 0 0 0 0 0 5 12 MC_singleton 24 TypeHandle::MC_singleton 0
0 8 MC_array 20 TypeHandle::MC_array 0
1 23 MC_deleted_chain_active 35 TypeHandle::MC_deleted_chain_active 0
2 25 MC_deleted_chain_inactive 37 TypeHandle::MC_deleted_chain_inactive 0
3 8 MC_limit 20 TypeHandle::MC_limit 70
// Not a real value, just a placeholder for the maximum
// enum value.
4 0 0

2731 12 TypeRegistry 0 141313 12 TypeRegistry 12 TypeRegistry 0 0 0 0 2168 0 16 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2 3079 3080 0 1 0 2658 0 0 0 0 571
////////////////////////////////////////////////////////////////////
//       Class : TypeRegistry
// Description : The TypeRegistry class maintains all the assigned
//               TypeHandles in a given system.  There should be only
//               one TypeRegistry class during the lifetime of the
//               application.  It will be created on the local heap
//               initially, and it should be migrated to shared memory
//               as soon as shared memory becomes available.
////////////////////////////////////////////////////////////////////

2732 11 TypedObject 0 26625 11 TypedObject 11 TypedObject 0 0 0 0 2171 0 5 2172 2173 2174 2175 2176 0 0 1 3 2658 2169 2170 0 0 3561
////////////////////////////////////////////////////////////////////
//       Class : TypedObject
// Description : This is an abstract class that all classes which
//               use TypeHandle, and also provide virtual functions to
//               support polymorphism, should inherit from.  Each
//               derived class should define get_type(), which should
//               return the specific type of the derived class.
//               Inheriting from this automatically provides support
//               for is_of_type() and is_exact_type().
//
//               All classes that inherit directly or indirectly from
//               TypedObject should redefine get_type() and
//               force_init_type(), as shown below.  Some classes that
//               do not inherit from TypedObject may still declare
//               TypeHandles for themselves by defining methods called
//               get_class_type() and init_type().  Classes such as
//               these may serve as base classes, but the dynamic type
//               identification system will be limited.  Classes that
//               do not inherit from TypedObject need not define the
//               virtual functions get_type() and force_init_type()
//               (or any other virtual functions).
//
//               There is a specific layout for defining the
//               overrides from this class.  Keeping the definitions
//               formatted just like these examples will allow
//               someone in the future to use a sed (or similar)
//               script to make global changes, if necessary.  Avoid
//               rearranging the braces or the order of the functions
//               unless you're ready to change them in every file all
//               at once.
//
//               What follows are some examples that can be used in
//               new classes that you create.
//
//               @par In the class definition (.h file):
//               @code
//               public:
//                 static TypeHandle get_class_type() {
//                   return _type_handle;
//                 }
//                 static void init_type() {
//                   <<<BaseClassOne>>>::init_type();
//                   <<<BaseClassTwo>>>::init_type();
//                   <<<BaseClassN>>>::init_type();
//                   register_type(_type_handle, "<<<ThisClassStringName>>>",
//                                 <<<BaseClassOne>>>::get_class_type(),
//                                 <<<BaseClassTwo>>>::get_class_type(),
//                                 <<<BaseClassN>>>::get_class_type());
//                 }
//                 virtual TypeHandle get_type() const {
//                   return get_class_type();
//                 }
//                 virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
//
//               private:
//                 static TypeHandle _type_handle;
//               @endcode
//
//               @par In the class .cxx file:
//               @code
//               TypeHandle <<<ThisClassStringName>>>::_type_handle;
//               @endcode
//
//               @par In the class config_<<<PackageName>>>.cxx file:
//               @code
//               ConfigureFn(config_<<<PackageName>>>) {
//                 <<<ClassOne>>>::init_type();
//                 <<<ClassTwo>>>::init_type();
//                 <<<ClassN>>>::init_type();
//               }
//               @endcode
////////////////////////////////////////////////////////////////////

2733 7 fstream 0 141313 7 fstream 7 fstream 0 0 0 1 2177 2179 0 1 2178 0 0 1 0 2694 0 0 0 0 0

2734 8 ifstream 0 141313 8 ifstream 8 ifstream 0 0 0 1 2180 2182 0 1 2181 0 0 1 0 2695 0 0 0 0 0

2735 8 ofstream 0 141313 8 ofstream 8 ofstream 0 0 0 1 2183 2185 0 1 2184 0 0 1 0 2700 0 0 0 0 0

2736 11 MemoryUsage 0 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 0 2206 0 20 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 0 0 1 0 2737 0 0 0 0 539
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsage
// Description : This class is used strictly for debugging purposes,
//               specifically for tracking memory leaks of
//               reference-counted objects: it keeps a record of every
//               such object currently allocated.
//
//               When compiled with NDEBUG set, this entire class does
//               nothing and compiles to nothing.
////////////////////////////////////////////////////////////////////

2737 10 MemoryHook 0 2049 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 993
////////////////////////////////////////////////////////////////////
//       Class : MemoryHook
// Description : This class provides a wrapper around the various
//               possible malloc schemes Panda might employ.  It also
//               exists to allow the MemoryUsage class in Panda to
//               insert callback hooks to track the size of allocated
//               pointers.
//
//               The PANDA_MALLOC_* and PANDA_FREE_* macros are
//               defined to vector through through this class (except
//               in production builds) to facilitate that.  Every
//               memory allocation call in Panda should therefore use
//               these macros instead of direct calls to malloc or
//               free.  (C++ new and delete operators may be employed
//               for classes which inherit from MemoryBase; otherwise,
//               use the PANDA_MALLOC macros.)
////////////////////////////////////////////////////////////////////

2738 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 2210 0 6 2211 2212 2213 2214 2215 2216 0 0 1 3 2658 2208 2209 0 0 425
////////////////////////////////////////////////////////////////////
//       Class : ReferenceCount
// Description : A base class for all things that want to be
//               reference-counted.  ReferenceCount works in
//               conjunction with PointerTo to automatically delete
//               objects when the last pointer to them goes away.
////////////////////////////////////////////////////////////////////

2739 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 0 2210 0 1 2217 0 0 1 0 2738 0 0 0 0 178
////////////////////////////////////////////////////////////////////
//       Class : Buffer
// Description :
////////////////////////////////////////////////////////////////////

2740 25 PStatCollectorForwardBase 0 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 2210 0 1 2225 0 0 1 0 2738 0 0 0 0 542
////////////////////////////////////////////////////////////////////
//       Class : PStatCollectorForwardBase
// Description : This class serves as a cheap forward reference to a
//               PStatCollector, which is defined in the pstatclient
//               module (and is not directly accessible here in the
//               express module).
//
//               This is subclassed as PStatCollectorForward, which
//               defines the actual functionality.
////////////////////////////////////////////////////////////////////

2741 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 5 2226 2227 2228 2229 2230 0 0 1 0 2738 0 0 0 0 983
////////////////////////////////////////////////////////////////////
//       Class : NodeReferenceCount
// Description : This class specializes ReferenceCount to add an
//               additional counter, called node_ref_count, for the
//               purposes of counting the number of times the object
//               is referenced by a "node", whatever that may mean in
//               context.
//
//               The new methods node_ref() and node_unref()
//               automatically increment and decrement the primary
//               reference count as well.  There also exists a
//               NodePointerTo<> class to maintain the node_ref
//               counters automatically.
//
//               See also CachedTypedWritableReferenceCount, which is
//               similar in principle, as well as
//               NodeCachedReferenceCount, which combines both of
//               these.
////////////////////////////////////////////////////////////////////

2742 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 2231 2171 0 46 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 0 0 1 0 2732 0 0 0 0 900
////////////////////////////////////////////////////////////////////
//       Class : Datagram
// Description : An ordered list of data elements, formatted in memory
//               for transmission over a socket or writing to a data
//               file.
//
//               Data elements should be added one at a time, in
//               order, to the Datagram.  The nature and contents of
//               the data elements are totally up to the user.  When a
//               Datagram has been transmitted and received, its data
//               elements may be extracted using a DatagramIterator;
//               it is up to the caller to know the correct type of
//               each data element in order.
//
//               A Datagram is itself headerless; it is simply a
//               collection of data elements.
////////////////////////////////////////////////////////////////////

2743 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 2278 0 9 2279 2280 2281 2282 2283 2284 2285 2286 2287 0 0 0 0 0 335
////////////////////////////////////////////////////////////////////
//       Class : DatagramGenerator
// Description : This class defines the abstract interace to any
//               source of datagrams, whether it be from a file or
//               from the net.
////////////////////////////////////////////////////////////////////

2744 16 DatagramIterator 0 26625 16 DatagramIterator 16 DatagramIterator 0 0 0 1 2288 2290 0 35 2289 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 0 0 0 0 0 438
////////////////////////////////////////////////////////////////////
//       Class : DatagramIterator
// Description : A class to retrieve the individual data elements
//               previously stored in a Datagram.  Elements may be
//               retrieved one at a time; it is up to the caller to
//               know the correct type and order of each element.
////////////////////////////////////////////////////////////////////

2745 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 2325 0 7 2326 2327 2328 2329 2330 2331 2332 0 0 0 0 0 340
////////////////////////////////////////////////////////////////////
//       Class : DatagramSink
// Description : This class defines the abstract interface to sending
//               datagrams to any target, whether it be into a file
//               or across the net
////////////////////////////////////////////////////////////////////

2746 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

2747 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 2348 0 1 2347 0 0 2 3 2732 2343 2344 3 2738 2345 2346 0 0 710
////////////////////////////////////////////////////////////////////
//       Class : TypedReferenceCount
// Description : A base class for things which need to inherit from
//               both TypedObject and from ReferenceCount.  It's
//               convenient to define this intermediate base class
//               instead of multiply inheriting from the two classes
//               each time they are needed, so that we can sensibly
//               pass around pointers to things which are both
//               TypedObjects and ReferenceCounters.
//               
//               See also TypedObject for detailed instructions.
////////////////////////////////////////////////////////////////////

2748 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 2349 2352 0 2 2350 2351 0 0 1 0 2747 0 0 0 0 354
////////////////////////////////////////////////////////////////////
//       Class : FileReference
// Description : Keeps a reference-counted pointer to a file on disk.
//               As long as the FileReference is held, someone
//               presumably has a use for this file.
////////////////////////////////////////////////////////////////////

2749 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 2353 2362 0 8 2354 2355 2356 2357 2358 2359 2360 2361 0 0 0 0 0 271
////////////////////////////////////////////////////////////////////
//       Class : Ramfile
// Description : An in-memory buffer specifically designed for
//               downloading files to memory.
////////////////////////////////////////////////////////////////////

2750 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 2363 2392 0 28 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 0 0 0 0 0 292
////////////////////////////////////////////////////////////////////
//       Class : HashVal
// Description : Stores a 128-bit value that represents the hashed
//               contents (typically MD5) of a file or buffer.
////////////////////////////////////////////////////////////////////

2751 19 MemoryUsagePointers 0 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 2393 2394 0 9 2395 2396 2397 2398 2399 2400 2401 2402 2403 2 3081 3082 0 0 0 0 1190
////////////////////////////////////////////////////////////////////
//       Class : MemoryUsagePointers
// Description : This is a list of pointers returned by a MemoryUsage
//               object in response to some query.
//
//               Warning: once pointers are stored in a
//               MemoryUsagePointers object, they are
//               reference-counted, and will not be freed until the
//               MemoryUsagePointers object is freed (or clear() is
//               called on the object).  However, they may not even be
//               freed then; pointers may leak once they have been
//               added to this structure.  This is because we don't
//               store enough information in this structure to
//               correctly free the pointers that have been added.
//               Since this is intended primarily as a debugging tool,
//               this is not a major issue.
//
//               This class is just a user interface to talk about
//               pointers stored in a MemoryUsage object.  It doesn't
//               even exist when compiled with NDEBUG.
////////////////////////////////////////////////////////////////////

2752 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 2404 2407 0 2 2405 2406 0 0 1 0 2695 0 0 0 0 668
////////////////////////////////////////////////////////////////////
//       Class : ISubStream
// Description : An istream object that presents a subwindow into
//               another istream.  The first character read from this
//               stream will be the "start" character from the source
//               istream; just before the file pointer reaches the
//               "end" character, eof is returned.
//
//               The source stream must be one that we can randomly
//               seek within.  The resulting ISubStream will also
//               support arbitrary seeks.
////////////////////////////////////////////////////////////////////

2753 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 2408 2411 0 2 2409 2410 0 0 1 0 2700 0 0 0 0 667
////////////////////////////////////////////////////////////////////
//       Class : OSubStream
// Description : An ostream object that presents a subwindow into
//               another ostream.  The first character written to this
//               stream will be the "start" character in the dest
//               istream; no characters may be written to character
//               "end" or later (unless end is zero).
//
//               The dest stream must be one that we can randomly
//               seek within.  The resulting OSubStream will also
//               support arbitrary seeks.
////////////////////////////////////////////////////////////////////

2754 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 2412 2415 0 2 2413 2414 0 0 1 0 2694 0 0 0 0 256
////////////////////////////////////////////////////////////////////
//       Class : SubStream
// Description : Combined ISubStream and OSubStream for bidirectional
//               I/O.
////////////////////////////////////////////////////////////////////

2755 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 2416 2417 2418 2419 2420 2421 2422 2423 0 0 0 0 0 426
////////////////////////////////////////////////////////////////////
//       Class : OpenSSLWrapper
// Description : Provides an interface wrapper around the OpenSSL
//               library, to ensure that the library is properly
//               initialized in the application, and to provide some
//               hooks into global OpenSSL context data.
////////////////////////////////////////////////////////////////////

2756 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 2424 2210 0 61 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 1 3083 0 1 0 2738 0 0 0 0 218
////////////////////////////////////////////////////////////////////
//       Class : Multifile
// Description : A file that contains a set of files.
////////////////////////////////////////////////////////////////////

2757 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 2486 2494 0 7 2487 2488 2489 2490 2491 2492 2493 0 0 1 0 2658 0 0 0 0 324
////////////////////////////////////////////////////////////////////
//       Class : Namable
// Description : A base class for all things which can have a name.
//               The name is either empty or nonempty, but it is never
//               NULL.
////////////////////////////////////////////////////////////////////

2758 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 2495 2503 0 7 2496 2497 2498 2499 2500 2501 2502 0 0 0 0 0 418
////////////////////////////////////////////////////////////////////
//       Class : SubfileInfo
// Description : This class records a particular byte sub-range within
//               an existing file on disk.  Generally, the filename is
//               understood as a physical file on disk, and not to be
//               looked up via the vfs.
////////////////////////////////////////////////////////////////////

2759 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 2533 0 29 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 0 0 1 0 2747 0 0 0 0 278
////////////////////////////////////////////////////////////////////
//       Class : VirtualFile
// Description : The abstract base class for a file or directory
//               within the VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2760 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 2535 0 1 2534 0 0 1 0 2759 0 0 0 0 450
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileComposite
// Description : A composite directory within the VirtualFileSystem:
//               this maps to more than one directory on different
//               mount points.  The resulting directory appears to be
//               the union of all the individual simple directories.
////////////////////////////////////////////////////////////////////

2761 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 2348 0 6 2536 2537 2538 2539 2540 2541 0 0 1 0 2747 0 0 0 0 365
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMount
// Description : The abstract base class for a mount definition used
//               within a VirtualFileSystem.  Normally users don't
//               need to monkey with this class directly.
////////////////////////////////////////////////////////////////////

2762 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 2542 2348 0 2 2543 2544 0 0 1 0 2761 0 0 0 0 270
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountMultifile
// Description : Maps a Multifile's contents into the
//               VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2763 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 2545 2547 0 1 2546 0 0 1 0 2761 0 0 0 0 659
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountRamdisk
// Description : Simulates an actual directory on disk with in-memory
//               storage.  This is useful mainly for performing high
//               level functions that expect disk I/O without actually
//               writing files to disk.  Naturally, there are
//               significant limits to the size of the files that may
//               be written with this system; and "files" written here
//               are not automatically persistent between sessions.
////////////////////////////////////////////////////////////////////

2764 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 2548 2551 0 2 2549 2550 0 0 1 0 2761 0 0 0 0 267
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileMountSystem
// Description : Maps an actual OS directory into the
//               VirtualFileSystem.
////////////////////////////////////////////////////////////////////

2765 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 2555 0 3 2552 2553 2554 0 0 1 0 2759 0 0 0 0 407
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSimple
// Description : A simple file or directory within the
//               VirtualFileSystem: this maps to exactly one file on
//               one mount point.  Most directories, and all regular
//               files, are of this kind.
////////////////////////////////////////////////////////////////////

2766 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 2556 2352 0 1 2557 0 0 1 0 2748 0 0 0 0 426
////////////////////////////////////////////////////////////////////
//       Class : TemporaryFile
// Description : This is a special kind of FileReference class that
//               automatically deletes the file in question when it is
//               deleted.  It is not responsible for creating,
//               opening, or closing the file, however.
////////////////////////////////////////////////////////////////////

2767 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 2558 2561 0 2 2559 2560 0 0 1 0 2695 0 0 0 0 589
////////////////////////////////////////////////////////////////////
//       Class : IDecompressStream
// Description : An input stream object that uses zlib to decompress
//               (inflate) the input from another source stream
//               on-the-fly.
//
//               Attach an IDecompressStream to an existing istream that
//               provides compressed data, and read the corresponding
//               uncompressed data from the IDecompressStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2768 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 2562 2565 0 2 2563 2564 0 0 1 0 2700 0 0 0 0 575
////////////////////////////////////////////////////////////////////
//       Class : OCompressStream
// Description : An input stream object that uses zlib to compress
//               (deflate) data to another destination stream
//               on-the-fly.
//
//               Attach an OCompressStream to an existing ostream that will
//               accept compressed data, and write your uncompressed
//               source data to the OCompressStream.
//
//               Seeking is not supported.
////////////////////////////////////////////////////////////////////

2769 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 0 2210 0 6 2566 2567 2568 2569 2570 2571 1 3084 0 1 0 2738 0 0 0 0 275
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileList
// Description : A list of VirtualFiles, as returned by 
//               VirtualFile::scan_directory().
////////////////////////////////////////////////////////////////////

2770 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 2572 2573 0 37 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 1 3085 0 0 0 1 2771 621
////////////////////////////////////////////////////////////////////
//       Class : VirtualFileSystem
// Description : A hierarchy of directories and files that appears to
//               be one continuous file system, even though the files
//               may originate from several different sources that may
//               not be related to the actual OS's file system.
//
//               For instance, a VirtualFileSystem can transparently
//               mount one or more Multifiles as their own
//               subdirectory hierarchies.
////////////////////////////////////////////////////////////////////

2771 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 2770 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

2772 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 0 6 2611 2612 2613 2614 2615 2616 0 0 0 0 0 773
////////////////////////////////////////////////////////////////////
//       Class : TrueClock
// Description : An interface to whatever real-time clock we might
//               have available in the current environment.  There is
//               only one TrueClock in existence, and it constructs
//               itself.
//
//               The TrueClock returns elapsed real time in seconds
//               since some undefined epoch.  Since it is not defined
//               at what time precisely the clock indicates zero, this
//               value can only be meaningfully used to measure
//               elapsed time, by sampling it at two different times
//               and subtracting.
////////////////////////////////////////////////////////////////////

2773 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 2617 2618 0 14 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 0 0 0 0 0 181
////////////////////////////////////////////////////////////////////
//       Class : Patchfile
// Description :
////////////////////////////////////////////////////////////////////

2774 12 ProfileTimer 0 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 2634 2635 0 9 2636 2637 2638 2639 2640 2641 2642 2643 2644 0 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

2775 17 WeakPointerToVoid 0 43009 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 0 0 2 2645 2646 0 0 1 0 2657 0 0 0 0 362
////////////////////////////////////////////////////////////////////
//       Class : WeakPointerToVoid
// Description : This is the specialization of PointerToVoid for weak
//               pointers.  It needs an additional flag to indicate
//               that the pointer has been deleted.
////////////////////////////////////////////////////////////////////

2776 15 WindowsRegistry 0 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 0 2652 0 5 2647 2648 2649 2650 2651 0 0 0 0 2 2777 2778 484
////////////////////////////////////////////////////////////////////
//       Class : WindowsRegistry
// Description : This class provides a hook to Python to read and
//               write strings and integers to the windows registry.
//               It automatically converts strings from utf-8 encoding
//               and stores them in Unicode (and conversely reconverts
//               them on retrieval).
////////////////////////////////////////////////////////////////////

2777 8 RegLevel 0 794624 25 WindowsRegistry::RegLevel 25 WindowsRegistry::RegLevel 2776 0 0 0 0 0 0 0 0 0 2 10 rl_machine 27 WindowsRegistry::rl_machine 0
0 7 rl_user 24 WindowsRegistry::rl_user 0
1 0 0

2778 4 Type 0 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 2776 0 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0
0 5 T_int 22 WindowsRegistry::T_int 0
1 8 T_string 25 WindowsRegistry::T_string 0
2 0 0

2779 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 2717 0 0 0 0 0 0 0 0 0 0

2780 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 2659 0 0 0 0 0 0 0 0 0 0

2781 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 2782 0 0 0 0 0 0 0 0 0 0

2782 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 2654 0 0 0 0 0 0 0 0 0 0

2783 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 2654 0 0 0 0 0 0 0 0 0 0

2784 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 2785 0 0 0 0 0 0 0 0 0 0

2785 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 2716 0 0 0 0 0 0 0 0 0 0

2786 9 _object * 0 8576 9 _object * 9 _object * 0 0 2787 0 0 0 0 0 0 0 0 0 0

2787 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

2788 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2789 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2790 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2791 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2792 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 2793 0 0 0 0 0 0 0 0 0 0

2793 9 Py_buffer 0 1024 9 Py_buffer 9 Py_buffer 0 0 0 0 0 0 0 0 0 0 0 0 0

2794 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2795 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 2656 0 0 0 0 0 0 0 0 0 0

2796 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 2797 0 0 0 0 0 0 0 0 0 0

2797 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 2656 0 0 0 0 0 0 0 0 0 0

2798 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2700 0 0 0 0 0 0 0 0 0 0

2799 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 2800 0 0 0 0 0 0 0 0 0 0

2800 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 2657 0 0 0 0 0 0 0 0 0 0

2801 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2802 6 size_t 0 2105344 6 size_t 6 size_t 0 0 2788 0 0 0 0 0 0 0 0 0 0

2803 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 2804 0 0 0 0 0 0 0 0 0 0

2804 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 2660 0 0 0 0 0 0 0 0 0 0

2805 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 2660 0 0 0 0 0 0 0 0 0 0

2806 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 2807 0 0 0 0 0 0 0 0 0 0

2807 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 2718 0 0 0 0 0 0 0 0 0 0

2808 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2809 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 2662 0 0 0 0 0 0 0 0 0 0

2810 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 2811 0 0 0 0 0 0 0 0 0 0

2811 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 2662 0 0 0 0 0 0 0 0 0 0

2812 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 2813 0 0 0 0 0 0 0 0 0 0

2813 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 2664 0 0 0 0 0 0 0 0 0 0

2814 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 2664 0 0 0 0 0 0 0 0 0 0

2815 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 2816 0 0 0 0 0 0 0 0 0 0

2816 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 2720 0 0 0 0 0 0 0 0 0 0

2817 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 2666 0 0 0 0 0 0 0 0 0 0

2818 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 2819 0 0 0 0 0 0 0 0 0 0

2819 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 2666 0 0 0 0 0 0 0 0 0 0

2820 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 2821 0 0 0 0 0 0 0 0 0 0

2821 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 2668 0 0 0 0 0 0 0 0 0 0

2822 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 2668 0 0 0 0 0 0 0 0 0 0

2823 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 2824 0 0 0 0 0 0 0 0 0 0

2824 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 2722 0 0 0 0 0 0 0 0 0 0

2825 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

2826 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 2670 0 0 0 0 0 0 0 0 0 0

2827 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 2828 0 0 0 0 0 0 0 0 0 0

2828 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 2670 0 0 0 0 0 0 0 0 0 0

2829 25 ConfigDeclaration const * 0 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 2830 0 0 0 0 0 0 0 0 0 0

2830 23 ConfigDeclaration const 0 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 2671 0 0 0 0 0 0 0 0 0 0

2831 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2675 0 0 0 0 0 0 0 0 0 0

2832 20 ConfigVariableCore * 0 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 2680 0 0 0 0 0 0 0 0 0 0

2833 19 ConfigDeclaration * 0 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 2671 0 0 0 0 0 0 0 0 0 0

2834 8 PN_int64 0 2105344 8 PN_int64 8 PN_int64 0 0 2835 0 0 0 0 0 0 0 0 0 0

2835 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2836 18 ConfigPage const * 0 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 2837 0 0 0 0 0 0 0 0 0 0

2837 16 ConfigPage const 0 8832 16 ConfigPage const 16 ConfigPage const 0 0 2675 0 0 0 0 0 0 0 0 0 0

2838 9 istream * 0 8576 9 istream * 9 istream * 0 0 2695 0 0 0 0 0 0 0 0 0 0

2839 25 ConfigPageManager const * 0 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 2840 0 0 0 0 0 0 0 0 0 0

2840 23 ConfigPageManager const 0 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 2676 0 0 0 0 0 0 0 0 0 0

2841 19 ConfigPageManager * 0 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 2676 0 0 0 0 0 0 0 0 0 0

2842 13 DSearchPath * 0 8576 13 DSearchPath * 13 DSearchPath * 0 0 2690 0 0 0 0 0 0 0 0 0 0

2843 16 ConfigVariable * 0 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 2677 0 0 0 0 0 0 0 0 0 0

2844 22 ConfigVariable const * 0 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 2845 0 0 0 0 0 0 0 0 0 0

2845 20 ConfigVariable const 0 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 2677 0 0 0 0 0 0 0 0 0 0

2846 26 ConfigVariableBase const * 0 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 2847 0 0 0 0 0 0 0 0 0 0

2847 24 ConfigVariableBase const 0 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 2678 0 0 0 0 0 0 0 0 0 0

2848 20 ConfigVariableBase * 0 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 2678 0 0 0 0 0 0 0 0 0 0

2849 20 ConfigVariableBool * 0 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 2679 0 0 0 0 0 0 0 0 0 0

2850 26 ConfigVariableBool const * 0 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 2851 0 0 0 0 0 0 0 0 0 0

2851 24 ConfigVariableBool const 0 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 2679 0 0 0 0 0 0 0 0 0 0

2852 26 ConfigVariableCore const * 0 8576 26 ConfigVariableCore const * 26 ConfigVariableCore const * 0 0 2853 0 0 0 0 0 0 0 0 0 0

2853 24 ConfigVariableCore const 0 8832 24 ConfigVariableCore const 24 ConfigVariableCore const 0 0 2680 0 0 0 0 0 0 0 0 0 0

2854 22 ConfigVariableDouble * 0 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 2681 0 0 0 0 0 0 0 0 0 0

2855 28 ConfigVariableDouble const * 0 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 2856 0 0 0 0 0 0 0 0 0 0

2856 26 ConfigVariableDouble const 0 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 2681 0 0 0 0 0 0 0 0 0 0

2857 24 ConfigVariableFilename * 0 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 2682 0 0 0 0 0 0 0 0 0 0

2858 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 2859 0 0 0 0 0 0 0 0 0 0

2859 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 2701 0 0 0 0 0 0 0 0 0 0

2860 30 ConfigVariableFilename const * 0 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 2861 0 0 0 0 0 0 0 0 0 0

2861 28 ConfigVariableFilename const 0 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 2682 0 0 0 0 0 0 0 0 0 0

2862 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

2863 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 2701 0 0 0 0 0 0 0 0 0 0

2864 19 ConfigVariableInt * 0 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 2683 0 0 0 0 0 0 0 0 0 0

2865 25 ConfigVariableInt const * 0 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 2866 0 0 0 0 0 0 0 0 0 0

2866 23 ConfigVariableInt const 0 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 2683 0 0 0 0 0 0 0 0 0 0

2867 21 ConfigVariableInt64 * 0 8576 21 ConfigVariableInt64 * 21 ConfigVariableInt64 * 0 0 2684 0 0 0 0 0 0 0 0 0 0

2868 27 ConfigVariableInt64 const * 0 8576 27 ConfigVariableInt64 const * 27 ConfigVariableInt64 const * 0 0 2869 0 0 0 0 0 0 0 0 0 0

2869 25 ConfigVariableInt64 const 0 8832 25 ConfigVariableInt64 const 25 ConfigVariableInt64 const 0 0 2684 0 0 0 0 0 0 0 0 0 0

2870 20 ConfigVariableList * 0 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 2685 0 0 0 0 0 0 0 0 0 0

2871 26 ConfigVariableList const * 0 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 2872 0 0 0 0 0 0 0 0 0 0

2872 24 ConfigVariableList const 0 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 2685 0 0 0 0 0 0 0 0 0 0

2873 23 ConfigVariableManager * 0 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 2686 0 0 0 0 0 0 0 0 0 0

2874 29 ConfigVariableManager const * 0 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 2875 0 0 0 0 0 0 0 0 0 0

2875 27 ConfigVariableManager const 0 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 2686 0 0 0 0 0 0 0 0 0 0

2876 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2877 0 0 0 0 0 0 0 0 0 0

2877 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 2690 0 0 0 0 0 0 0 0 0 0

2878 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2687 0 0 0 0 0 0 0 0 0 0

2879 32 ConfigVariableSearchPath const * 0 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 2880 0 0 0 0 0 0 0 0 0 0

2880 30 ConfigVariableSearchPath const 0 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 2687 0 0 0 0 0 0 0 0 0 0

2881 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 2691 0 0 0 0 0 0 0 0 0 0

2882 22 ConfigVariableString * 0 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 2688 0 0 0 0 0 0 0 0 0 0

2883 28 ConfigVariableString const * 0 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 2884 0 0 0 0 0 0 0 0 0 0

2884 26 ConfigVariableString const 0 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 2688 0 0 0 0 0 0 0 0 0 0

2885 15 Results const * 0 8576 28 DSearchPath::Results const * 28 DSearchPath::Results const * 0 0 2886 0 0 0 0 0 0 0 0 0 0

2886 13 Results const 0 8832 26 DSearchPath::Results const 26 DSearchPath::Results const 0 0 2691 0 0 0 0 0 0 0 0 0 0

2887 12 FileStream * 0 8576 12 FileStream * 12 FileStream * 0 0 2693 0 0 0 0 0 0 0 0 0 0

2888 10 iostream * 0 8576 10 iostream * 10 iostream * 0 0 2694 0 0 0 0 0 0 0 0 0 0

2889 9 streampos 0 2367488 14 ios::streampos 14 ios::streampos 2696 0 2890 0 0 0 0 0 0 0 0 0 0

2890 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2891 9 streamoff 0 2367488 14 ios::streamoff 14 ios::streamoff 2696 0 2892 0 0 0 0 0 0 0 0 0 0

2892 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2893 5 ios * 0 8576 5 ios * 5 ios * 0 0 2696 0 0 0 0 0 0 0 0 0 0

2894 11 ios const * 0 8576 11 ios const * 11 ios const * 0 0 2895 0 0 0 0 0 0 0 0 0 0

2895 9 ios const 0 8832 9 ios const 9 ios const 0 0 2696 0 0 0 0 0 0 0 0 0 0

2896 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2897 0 0 0 0 0 0 0 0 0 0

2897 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 2787 0 0 0 0 0 0 0 0 0 0

2898 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 2899 0 0 0 0 0 0 0 0 0 0

2899 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 2900 0 0 0 0 0 0 0 0 0 0

2900 16 vector< string > 0 2048 16 vector< string > 16 vector< string > 0 0 0 0 0 0 0 0 0 0 0 0 0

2901 6 time_t 0 2105344 6 time_t 6 time_t 0 0 2788 0 0 0 0 0 0 0 0 0 0

2902 10 streamsize 0 2105344 10 streamsize 10 streamsize 0 0 2791 0 0 0 0 0 0 0 0 0 0

2903 10 ifstream * 0 8576 10 ifstream * 10 ifstream * 0 0 2734 0 0 0 0 0 0 0 0 0 0

2904 11 pifstream * 0 8576 11 pifstream * 11 pifstream * 0 0 2905 0 0 0 0 0 0 0 0 0 0

2905 9 pifstream 0 2105344 9 pifstream 9 pifstream 0 0 2705 0 0 0 0 0 0 0 0 0 0

2906 10 ofstream * 0 8576 10 ofstream * 10 ofstream * 0 0 2735 0 0 0 0 0 0 0 0 0 0

2907 11 pofstream * 0 8576 11 pofstream * 11 pofstream * 0 0 2908 0 0 0 0 0 0 0 0 0 0

2908 9 pofstream 0 2105344 9 pofstream 9 pofstream 0 0 2713 0 0 0 0 0 0 0 0 0 0

2909 9 fstream * 0 8576 9 fstream * 9 fstream * 0 0 2733 0 0 0 0 0 0 0 0 0 0

2910 10 pfstream * 0 8576 10 pfstream * 10 pfstream * 0 0 2911 0 0 0 0 0 0 0 0 0 0

2911 8 pfstream 0 2105344 8 pfstream 8 pfstream 0 0 2693 0 0 0 0 0 0 0 0 0 0

2912 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2729 0 0 0 0 0 0 0 0 0 0

2913 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2914 0 0 0 0 0 0 0 0 0 0

2914 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 2703 0 0 0 0 0 0 0 0 0 0

2915 13 GlobPattern * 0 8576 13 GlobPattern * 13 GlobPattern * 0 0 2703 0 0 0 0 0 0 0 0 0 0

2916 16 IDecryptStream * 0 8576 16 IDecryptStream * 16 IDecryptStream * 0 0 2704 0 0 0 0 0 0 0 0 0 0

2917 22 IDecryptStream const * 0 8576 22 IDecryptStream const * 22 IDecryptStream const * 0 0 2918 0 0 0 0 0 0 0 0 0 0

2918 20 IDecryptStream const 0 8832 20 IDecryptStream const 20 IDecryptStream const 0 0 2704 0 0 0 0 0 0 0 0 0 0

2919 13 IFileStream * 0 8576 13 IFileStream * 13 IFileStream * 0 0 2705 0 0 0 0 0 0 0 0 0 0

2920 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 2706 0 0 0 0 0 0 0 0 0 0

2921 22 IStreamWrapper const * 0 8576 22 IStreamWrapper const * 22 IStreamWrapper const * 0 0 2922 0 0 0 0 0 0 0 0 0 0

2922 20 IStreamWrapper const 0 8832 20 IStreamWrapper const 20 IStreamWrapper const 0 0 2706 0 0 0 0 0 0 0 0 0 0

2923 19 StreamWrapperBase * 0 8576 19 StreamWrapperBase * 19 StreamWrapperBase * 0 0 2707 0 0 0 0 0 0 0 0 0 0

2924 8 Notify * 0 8576 8 Notify * 8 Notify * 0 0 2709 0 0 0 0 0 0 0 0 0 0

2925 14 Notify const * 0 8576 14 Notify const * 14 Notify const * 0 0 2926 0 0 0 0 0 0 0 0 0 0

2926 12 Notify const 0 8832 12 Notify const 12 Notify const 0 0 2709 0 0 0 0 0 0 0 0 0 0

2927 16 NotifyCategory * 0 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 2710 0 0 0 0 0 0 0 0 0 0

2928 22 NotifyCategory const * 0 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 2929 0 0 0 0 0 0 0 0 0 0

2929 20 NotifyCategory const 0 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 2710 0 0 0 0 0 0 0 0 0 0

2930 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 2658 0 0 0 0 0 0 0 0 0 0

2931 13 ConfigFlags * 0 8576 13 ConfigFlags * 13 ConfigFlags * 0 0 2672 0 0 0 0 0 0 0 0 0 0

2932 16 OEncryptStream * 0 8576 16 OEncryptStream * 16 OEncryptStream * 0 0 2712 0 0 0 0 0 0 0 0 0 0

2933 13 OFileStream * 0 8576 13 OFileStream * 13 OFileStream * 0 0 2713 0 0 0 0 0 0 0 0 0 0

2934 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 2714 0 0 0 0 0 0 0 0 0 0

2935 22 OStreamWrapper const * 0 8576 22 OStreamWrapper const * 22 OStreamWrapper const * 0 0 2936 0 0 0 0 0 0 0 0 0 0

2936 20 OStreamWrapper const 0 8832 20 OStreamWrapper const 20 OStreamWrapper const 0 0 2714 0 0 0 0 0 0 0 0 0 0

2937 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 2716 0 0 0 0 0 0 0 0 0 0

2938 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 2718 0 0 0 0 0 0 0 0 0 0

2939 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 2720 0 0 0 0 0 0 0 0 0 0

2940 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 2722 0 0 0 0 0 0 0 0 0 0

2941 19 PandaSystem const * 0 8576 19 PandaSystem const * 19 PandaSystem const * 0 0 2942 0 0 0 0 0 0 0 0 0 0

2942 17 PandaSystem const 0 8832 17 PandaSystem const 17 PandaSystem const 0 0 2723 0 0 0 0 0 0 0 0 0 0

2943 13 PandaSystem * 0 8576 13 PandaSystem * 13 PandaSystem * 0 0 2723 0 0 0 0 0 0 0 0 0 0

2944 20 StreamReader const * 0 8576 20 StreamReader const * 20 StreamReader const * 0 0 2945 0 0 0 0 0 0 0 0 0 0

2945 18 StreamReader const 0 8832 18 StreamReader const 18 StreamReader const 0 0 2724 0 0 0 0 0 0 0 0 0 0

2946 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 2724 0 0 0 0 0 0 0 0 0 0

2947 7 PN_int8 0 2105344 7 PN_int8 7 PN_int8 0 0 2948 0 0 0 0 0 0 0 0 0 0

2948 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

2949 8 PN_uint8 0 2105344 8 PN_uint8 8 PN_uint8 0 0 2825 0 0 0 0 0 0 0 0 0 0

2950 8 PN_int16 0 2105344 8 PN_int16 8 PN_int16 0 0 2951 0 0 0 0 0 0 0 0 0 0

2951 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2952 8 PN_int32 0 2105344 8 PN_int32 8 PN_int32 0 0 2791 0 0 0 0 0 0 0 0 0 0

2953 9 PN_uint16 0 2105344 9 PN_uint16 9 PN_uint16 0 0 2954 0 0 0 0 0 0 0 0 0 0

2954 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

2955 9 PN_uint32 0 2105344 9 PN_uint32 9 PN_uint32 0 0 2788 0 0 0 0 0 0 0 0 0 0

2956 9 PN_uint64 0 2105344 9 PN_uint64 9 PN_uint64 0 0 2957 0 0 0 0 0 0 0 0 0 0

2957 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2958 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 2789 0 0 0 0 0 0 0 0 0 0

2959 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 2725 0 0 0 0 0 0 0 0 0 0

2960 21 StreamWrapper const * 0 8576 21 StreamWrapper const * 21 StreamWrapper const * 0 0 2961 0 0 0 0 0 0 0 0 0 0

2961 19 StreamWrapper const 0 8832 19 StreamWrapper const 19 StreamWrapper const 0 0 2725 0 0 0 0 0 0 0 0 0 0

2962 20 StreamWriter const * 0 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 2963 0 0 0 0 0 0 0 0 0 0

2963 18 StreamWriter const 0 8832 18 StreamWriter const 18 StreamWriter const 0 0 2726 0 0 0 0 0 0 0 0 0 0

2964 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 2726 0 0 0 0 0 0 0 0 0 0

2965 13 TextEncoder * 0 8576 13 TextEncoder * 13 TextEncoder * 0 0 2727 0 0 0 0 0 0 0 0 0 0

2966 19 TextEncoder const * 0 8576 19 TextEncoder const * 19 TextEncoder const * 0 0 2967 0 0 0 0 0 0 0 0 0 0

2967 17 TextEncoder const 0 8832 17 TextEncoder const 17 TextEncoder const 0 0 2727 0 0 0 0 0 0 0 0 0 0

2968 7 wchar_t 0 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0 0

2969 18 TypeHandle const * 0 8576 18 TypeHandle const * 18 TypeHandle const * 0 0 2970 0 0 0 0 0 0 0 0 0 0

2970 16 TypeHandle const 0 8832 16 TypeHandle const 16 TypeHandle const 0 0 2729 0 0 0 0 0 0 0 0 0 0

2971 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 2972 0 0 0 0 0 0 0 0 0 0

2972 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 2973 0 0 0 0 0 0 0 0 0 0

2973 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

2974 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 2732 0 0 0 0 0 0 0 0 0 0

2975 18 set< int > const * 0 8576 18 set< int > const * 18 set< int > const * 0 0 2976 0 0 0 0 0 0 0 0 0 0

2976 16 set< int > const 0 8832 16 set< int > const 16 set< int > const 0 0 2977 0 0 0 0 0 0 0 0 0 0

2977 10 set< int > 0 2048 10 set< int > 10 set< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

2978 20 TypeRegistry const * 0 8576 20 TypeRegistry const * 20 TypeRegistry const * 0 0 2979 0 0 0 0 0 0 0 0 0 0

2979 18 TypeRegistry const 0 8832 18 TypeRegistry const 18 TypeRegistry const 0 0 2731 0 0 0 0 0 0 0 0 0 0

2980 14 TypeRegistry * 0 8576 14 TypeRegistry * 14 TypeRegistry * 0 0 2731 0 0 0 0 0 0 0 0 0 0

2981 19 TypedObject const * 0 8576 19 TypedObject const * 19 TypedObject const * 0 0 2982 0 0 0 0 0 0 0 0 0 0

2982 17 TypedObject const 0 8832 17 TypedObject const 17 TypedObject const 0 0 2732 0 0 0 0 0 0 0 0 0 0

2983 21 MemoryUsagePointers * 0 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 2751 0 0 0 0 0 0 0 0 0 0

2984 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 2985 0 0 0 0 0 0 0 0 0 0

2985 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 2738 0 0 0 0 0 0 0 0 0 0

2986 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 2738 0 0 0 0 0 0 0 0 0 0

2987 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 2988 0 0 0 0 0 0 0 0 0 0

2988 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 2739 0 0 0 0 0 0 0 0 0 0

2989 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 2740 0 0 0 0 0 0 0 0 0 0

2990 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 2991 0 0 0 0 0 0 0 0 0 0

2991 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 2741 0 0 0 0 0 0 0 0 0 0

2992 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 2742 0 0 0 0 0 0 0 0 0 0

2993 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 2994 0 0 0 0 0 0 0 0 0 0

2994 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 2742 0 0 0 0 0 0 0 0 0 0

2995 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 2808 0 0 0 0 0 0 0 0 0 0

2996 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2808 0 0 0 0 0 0 0 0 0 0

2997 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 2721 0 0 0 0 0 0 0 0 0 0

2998 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 2667 0 0 0 0 0 0 0 0 0 0

2999 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 2743 0 0 0 0 0 0 0 0 0 0

3000 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 2758 0 0 0 0 0 0 0 0 0 0

3001 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 3002 0 0 0 0 0 0 0 0 0 0

3002 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 2743 0 0 0 0 0 0 0 0 0 0

3003 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2748 0 0 0 0 0 0 0 0 0 0

3004 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 3003 0 0 0 0 0 0 0 0 0 0

3005 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 2759 0 0 0 0 0 0 0 0 0 0

3006 9 streampos 0 2105344 9 streampos 9 streampos 0 0 2791 0 0 0 0 0 0 0 0 0 0

3007 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2744 0 0 0 0 0 0 0 0 0 0

3008 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 3009 0 0 0 0 0 0 0 0 0 0

3009 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 2744 0 0 0 0 0 0 0 0 0 0

3010 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 2745 0 0 0 0 0 0 0 0 0 0

3011 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 3012 0 0 0 0 0 0 0 0 0 0

3012 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 2758 0 0 0 0 0 0 0 0 0 0

3013 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 2747 0 0 0 0 0 0 0 0 0 0

3014 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 2748 0 0 0 0 0 0 0 0 0 0

3015 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 2749 0 0 0 0 0 0 0 0 0 0

3016 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 3017 0 0 0 0 0 0 0 0 0 0

3017 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 2749 0 0 0 0 0 0 0 0 0 0

3018 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2750 0 0 0 0 0 0 0 0 0 0

3019 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 3020 0 0 0 0 0 0 0 0 0 0

3020 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 2750 0 0 0 0 0 0 0 0 0 0

3021 27 MemoryUsagePointers const * 0 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 3022 0 0 0 0 0 0 0 0 0 0

3022 25 MemoryUsagePointers const 0 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 2751 0 0 0 0 0 0 0 0 0 0

3023 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 2752 0 0 0 0 0 0 0 0 0 0

3024 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 2753 0 0 0 0 0 0 0 0 0 0

3025 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 2754 0 0 0 0 0 0 0 0 0 0

3026 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 2755 0 0 0 0 0 0 0 0 0 0

3027 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 3028 0 0 0 0 0 0 0 0 0 0

3028 10 X509_STORE 0 1024 10 X509_STORE 10 X509_STORE 0 0 0 0 0 0 0 0 0 0 0 0 0

3029 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 2756 0 0 0 0 0 0 0 0 0 0

3030 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 3031 0 0 0 0 0 0 0 0 0 0

3031 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 2756 0 0 0 0 0 0 0 0 0 0

3032 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 3033 0 0 0 0 0 0 0 0 0 0

3033 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 2757 0 0 0 0 0 0 0 0 0 0

3034 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 2757 0 0 0 0 0 0 0 0 0 0

3035 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 3036 0 0 0 0 0 0 0 0 0 0

3036 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 2759 0 0 0 0 0 0 0 0 0 0

3037 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 2770 0 0 0 0 0 0 0 0 0 0

3038 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 2769 0 0 0 0 0 0 0 0 0 0

3039 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 3040 0 0 0 0 0 0 0 0 0 0

3040 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 2761 0 0 0 0 0 0 0 0 0 0

3041 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 2762 0 0 0 0 0 0 0 0 0 0

3042 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 3043 0 0 0 0 0 0 0 0 0 0

3043 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 2762 0 0 0 0 0 0 0 0 0 0

3044 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 2763 0 0 0 0 0 0 0 0 0 0

3045 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 2764 0 0 0 0 0 0 0 0 0 0

3046 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 3047 0 0 0 0 0 0 0 0 0 0

3047 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 2764 0 0 0 0 0 0 0 0 0 0

3048 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 3049 0 0 0 0 0 0 0 0 0 0

3049 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 2765 0 0 0 0 0 0 0 0 0 0

3050 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 2761 0 0 0 0 0 0 0 0 0 0

3051 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 2766 0 0 0 0 0 0 0 0 0 0

3052 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 2767 0 0 0 0 0 0 0 0 0 0

3053 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 2768 0 0 0 0 0 0 0 0 0 0

3054 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 3055 0 0 0 0 0 0 0 0 0 0

3055 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 2769 0 0 0 0 0 0 0 0 0 0

3056 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 3057 0 0 0 0 0 0 0 0 0 0

3057 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 2770 0 0 0 0 0 0 0 0 0 0

3058 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 2772 0 0 0 0 0 0 0 0 0 0

3059 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 3060 0 0 0 0 0 0 0 0 0 0

3060 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 2772 0 0 0 0 0 0 0 0 0 0

3061 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 2773 0 0 0 0 0 0 0 0 0 0

3062 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 2739 0 0 0 0 0 0 0 0 0 0

3063 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 3064 0 0 0 0 0 0 0 0 0 0

3064 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 2773 0 0 0 0 0 0 0 0 0 0

3065 20 ProfileTimer const * 0 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 3066 0 0 0 0 0 0 0 0 0 0

3066 18 ProfileTimer const 0 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 2774 0 0 0 0 0 0 0 0 0 0

3067 14 ProfileTimer * 0 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 2774 0 0 0 0 0 0 0 0 0 0

3068 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 3069 0 0 0 0 0 0 0 0 0 0

3069 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 2775 0 0 0 0 0 0 0 0 0 0

3070 9 DConfig * 0 8576 9 DConfig * 9 DConfig * 0 0 2689 0 0 0 0 0 0 0 0 0 0

0
0
15
3071 0 0 199 16 get_declarations 20 get_num_declarations 15 get_declaration 
3072 0 0 199 14 get_references 18 get_num_references 13 get_reference 
3073 0 0 199 22 get_trusted_references 26 get_num_trusted_references 21 get_trusted_reference 
3074 0 0 199 21 get_unique_references 25 get_num_unique_references 20 get_unique_reference 
3075 0 0 298 13 get_variables 17 get_num_variables 12 get_variable 
3076 0 0 312 15 get_directories 19 get_num_directories 13 get_directory 
3077 0 0 355 15 get_directories 19 get_num_directories 13 get_directory 
3078 0 0 726 11 get_systems 15 get_num_systems 10 get_system 
3079 0 0 891 15 get_typehandles 19 get_num_typehandles 14 get_typehandle 
3080 0 0 891 16 get_root_classes 20 get_num_root_classes 14 get_root_class 
3081 0 0 1152 12 get_pointers 16 get_num_pointers 11 get_pointer 
3082 0 0 1152 18 get_typed_pointers 16 get_num_pointers 17 get_typed_pointer 
3083 0 0 1188 17 get_subfile_names 16 get_num_subfiles 16 get_subfile_name 
3084 0 0 1343 9 get_files 13 get_num_files 8 get_file 
3085 0 0 1350 10 get_mounts 14 get_num_mounts 9 get_mount 
