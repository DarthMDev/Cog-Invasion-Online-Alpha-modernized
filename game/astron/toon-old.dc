//
// Filename: toon.dc
// Created by: DuckyDuck1553 (17June14)
//

from lib.toontown.avatar import DistributedAvatar/AI
from lib.toontown.toon import DistributedToon/AI/UD
from lib.toontown.npc import DistributedChar
from lib.toontown.hood import DistributedGagShop/AI
from lib.toontown.distributed import DistributedTrolley
from lib.toontown.distributed import DistributedRoot/AI
from lib.toontown.distributed import Account/AI/UD
from lib.toontown.distributed import DistributedDistrict/AI/UD
from lib.toontown.minigame import DistributedMinigameStation/AI
from lib.toontown.minigame import DistributedMinigame/AI
from lib.toontown.minigame import DistributedRaceGame/AI
from lib.toontown.minigame import DistributedUnoGame/AI
from lib.toontown.minigame import DistributedGunGame/AI
from lib.toontown.minigame import DistributedToonFPSGame/AI
from lib.toontown.minigame import DistributedFactorySneakGame/AI
from lib.toontown.uber import ClientServicesManager/UD
from lib.toontown.uber import LauncherLoginManager/UD
from lib.toontown.suit import DistributedSuit/AI
from lib.toontown.suit import DistributedSuitManager/AI
from lib.toontown.suit import DistributedDroppableCollectableObject/AI
from lib.toontown.suit import DistributedDroppableCollectableJellybeans/AI
from lib.toontown.suit import DistributedDroppableCollectableJellybeanJar/AI
from lib.toontown.suit import DistributedDroppableCollectableJellybean/AI
from lib.toontown.suit import DistributedDroppableCollectableHealth/AI
from lib.toontown.suit import DistributedDroppableCollectableIceCream/AI

struct AvChoice {
  uint32 avId;
  string dnaStrand;
  string name;
  int8 slot;
};

dclass Account {
  uint32 AVATAR_IDS[] required db;
  string ACCOUNT_ID required db;
};

dclass DistributedRoot : DistributedObject {
  setParentingRules(string, string) broadcast ram;
};

dclass DistributedDistrict : DistributedObject {
  setParentingRules(string, string) broadcast ram;
  setAvailable(int8 available) broadcast ram required;
};

dclass LauncherLoginManager : DistributedObject {
  requestLogin(string username, string password) clsend;
  loginAccepted(string token);
  loginRejected();
};

dclass ClientServicesManager : DistributedObject {
  requestLogin(string token, string username) clsend;
  loginAccepted();
  requestAvatars() clsend;
  setAvatars(AvChoice[]);
  requestNewAvatar(string dnaStrand, int8 slot, string name) clsend;
  toonCreated(int32 avId);
  toonDeleted();
  requestDeleteAvatar(uint32 avId) clsend;
  requestSetAvatar(uint32 avId) clsend;
  setAvatarResponse();
};

dclass DistributedAvatar : DistributedSmoothNode {
  setName(string) required broadcast ownrecv db;
  setMaxHealth(int16 = 15) required broadcast ownrecv db;
  setHealth(int16 = 15) required broadcast ownrecv db;
  setChat(string) broadcast ownsend airecv;
  announceHealth(int8, int16) broadcast;
  setPlace(uint32) required broadcast ram;
};

dclass DistributedToon : DistributedAvatar {
  setDNAStrand(string) required broadcast ownrecv db;
  setAnimState(string, int16) broadcast ram ownsend airecv;
  setMoney(int32 = 0) required broadcast ownrecv db;
  setGagAmmo(int8 [] = [3, 7, 15, 0]) required broadcast ownrecv db;
  lookAtObject(float64, float64, float64, int8 = 1) broadcast ownsend;
  pieStart() broadcast ownsend;
  pieThrow() broadcast ownsend;
  pieRelease() broadcast ownsend airecv;
  pieSplat() broadcast ownsend;
  setPieType(int8 = 1) required broadcast ram ownsend airecv;
  suitHitByPie(uint32, int8 weapon_id) ownsend airecv;
  toonHitByPie(uint32, int8 weapon_id) ownsend airecv;
  suitKilled(uint32) ownsend airecv;
  died() ownsend airecv;
  tntStart() ownsend broadcast;
  tntRelease() ownsend broadcast airecv;
  tntHitGround() ownsend broadcast;
  tntExplode() ownsend broadcast;
  setTntPos(float64, float64, float64) ownsend broadcast;
  setAdminToken(int8) required broadcast db ownrecv; // Is this me?
  announceHealthAndPlaySound(int8, int16);
};

dclass DistributedChar : DistributedSmoothNode {
  setChar(string charType, int8 clerk=0) required broadcast ram;
  setName(string name) required broadcast ram;
  setChat(string chat) broadcast;
  setAnimState(string anim) broadcast ram;
};

dclass DistributedSuit : DistributedAvatar {
  setSuit(string type, string head, string team, int8 skeleton) required broadcast ram;
  setName(string name) required broadcast ram;
  setAnimState(string anim, int16) broadcast ram;
  handleWeaponTouch() clsend broadcast;
  interruptAttack() broadcast;
  toonHitByWeapon(string, uint32) clsend airecv;
  doAttack(string attackName, int16) broadcast;
};

dclass DistributedTrolley : DistributedNode {
  setDestination(string destination) required broadcast ram;
};

dclass DistributedMinigameStation : DistributedObject {
  setStation(string game) required broadcast ram;
  setLocationPoint(int8 location_point) required broadcast ram;
  setTimerTime(int8 time) broadcast;
  requestAbort(int8 slot) clsend airecv;
  abort();
  headOff(int32 zone, int8 laffMeter);
  slotOpen(int8 slot);
  requestEnter() clsend airecv;
  fullStation();
  leaving() clsend airecv;
};

dclass DistributedMinigame : DistributedObject {
  ready() clsend airecv;
  allPlayersReady() broadcast;
  gameOver(int8 winner=0, int32[] = []) broadcast;
  setTimerTime(uint16 time) broadcast;
  leaving() clsend airecv;
  abort() broadcast;
};

dclass DistributedRaceGame : DistributedMinigame {
  setToonLane(int8 lane);
  requestToonLane() clsend airecv;
};

dclass DistributedUnoGame : DistributedMinigame {
  requestNewCard() clsend airecv;
  takeNewCard(string cardId);
  setPlayByPlay(string pbp) broadcast;
  wasDealed() clsend airecv;
  setPlayerTurn(uint32 doId) broadcast;
  placeCard(uint32 doId, string cardId) broadcast;
  requestPlaceCard(string cardId) clsend airecv;
  requestNewCardColor();
  takeNewCardColor(string origId, string cardId) clsend airecv;
  setNewCardColor(string cardId) broadcast;
  callUno() clsend airecv;
  noCards() clsend airecv;
  generateHeadPanel(string gender, string head, string headtype, 
       float64 [], uint32 doId, string name) broadcast;
  updateCardCount(uint32 doId, int8 direction) broadcast;
};

dclass DistributedToonFPSGame : DistributedMinigame {
  attachGunToAvatar(uint32) broadcast;
  gunShot(uint32, int16) broadcast clsend;
  standingAvatar(uint32) broadcast clsend;
  runningAvatar(uint32) broadcast clsend;
  jumpingAvatar(uint32) broadcast clsend;
  avatarHitByBullet(uint32, int8) clsend airecv;
  damage(int8, uint32);
  deadAvatar(uint32, int16) broadcast clsend;
  respawnAvatar(uint32) broadcast clsend;
};

dclass DistributedGunGame : DistributedToonFPSGame {
  dead(uint32) clsend airecv;
  incrementKills();
  finalScores(uint32[], int8[]) broadcast;
  timeUp() broadcast;
  myFinalScore(int8) clsend airecv;
};

dclass DistributedFactorySneakGame : DistributedToonFPSGame {

};

dclass DistributedGagShop : DistributedNode {
  requestEnter() clsend airecv;
  enterAccepted();
  requestExit() clsend airecv;
  exitAccepted();
  confirmPurchase(int8 [], int16) clsend airecv;
  avatarExited() broadcast;
};

dclass DistributedSuitManager : DistributedObject {
  requestSuitInfo() clsend airecv;
  newSuit() broadcast;
  noSuits() broadcast;
  systemMessage(string) broadcast;
  bossSpawned() broadcast;
  invasionInProgress() broadcast;
  tournamentInProgress() broadcast;
};

dclass DistributedDroppableCollectableObject : DistributedNode {
  collectedObject() clsend airecv;
};

dclass DistributedDroppableCollectableJellybeans : DistributedDroppableCollectableObject {

};

dclass DistributedDroppableCollectableJellybean : DistributedDroppableCollectableJellybeans {

};

dclass DistributedDroppableCollectableJellybeanJar : DistributedDroppableCollectableJellybeans {

};

dclass DistributedDroppableCollectableHealth : DistributedDroppableCollectableObject {
  setDisabled(int8) required broadcast ram;
};

dclass DistributedDroppableCollectableIceCream : DistributedDroppableCollectableHealth {

};
