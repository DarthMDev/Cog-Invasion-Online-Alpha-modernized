// Filename: toon.dc
// Created by: DuckyDuck1553 (17June14)

from lib.coginvasion.avatar import DistributedAvatar/AI
from lib.coginvasion.toon import DistributedToon/AI/UD
from lib.coginvasion.toon import DistributedNPCToon/AI
from lib.coginvasion.toon import DistributedHQNPCToon/AI
from lib.coginvasion.toon import DistributedTailorNPCToon/AI
from lib.coginvasion.npc import DistributedChar
from lib.coginvasion.shop import DistributedBattleShop/AI
from lib.coginvasion.shop import DistributedGagShop/AI
from lib.coginvasion.shop.DistributedShop/AI import DistributedShop/AI
from lib.coginvasion.distributed import DistributedTrolley
from lib.coginvasion.distributed import DistributedRoot/AI
from lib.coginvasion.distributed import Account/AI/UD
from lib.coginvasion.distributed import DistributedDistrict/AI/UD
from lib.coginvasion.minigame import DistributedMinigameStation/AI
from lib.coginvasion.minigame import DistributedGroupStation/AI
from lib.coginvasion.minigame import DistributedMinigame/AI
from lib.coginvasion.minigame import DistributedRaceGame/AI
from lib.coginvasion.minigame import DistributedUnoGame/AI
from lib.coginvasion.minigame import DistributedGunGame/AI
from lib.coginvasion.minigame import DistributedToonFPSGame/AI
from lib.coginvasion.minigame import DistributedFactorySneakGame/AI
from lib.coginvasion.minigame import DistributedCameraShyGame/AI
from lib.coginvasion.minigame import DistributedEagleGame/AI
from lib.coginvasion.minigame import DistributedToonCannon/AI
from lib.coginvasion.minigame import DistributedEagleSuit/AI
from lib.coginvasion.minigame import DistributedDeliveryGame/AI
from lib.coginvasion.minigame import DistributedDeliveryTruck/AI
from lib.coginvasion.minigame import DistributedDeliveryGameSuit/AI
from lib.coginvasion.uber import ClientServicesManager/UD
from lib.coginvasion.uber import LauncherLoginManager/UD
from lib.coginvasion.uber import DistrictNameManager/AI/UD
from lib.coginvasion.cog import DistributedSuit/AI
from lib.coginvasion.suit import DistributedSuitManager/AI
from lib.coginvasion.suit import DistributedDroppableCollectableObject/AI
from lib.coginvasion.suit import DistributedDroppableCollectableJellybeans/AI
from lib.coginvasion.suit import DistributedDroppableCollectableJellybeanJar/AI
from lib.coginvasion.suit import DistributedDroppableCollectableJellybean/AI
from lib.coginvasion.suit import DistributedDroppableCollectableHealth/AI
from lib.coginvasion.suit import DistributedDroppableCollectableIceCream/AI
from lib.coginvasion.suit import DistributedDroppableCollectableBackpack/AI
from lib.coginvasion.suit import DistributedCogBattle/AI
from lib.coginvasion.hood import DistributedTreasure/AI
from lib.coginvasion.hood import DistributedTTCTreasure/AI
from lib.coginvasion.hood import DistributedTBTreasure/AI
from lib.coginvasion.hood import DistributedDDTreasure/AI
from lib.coginvasion.hood import DistributedMLTreasure/AI
from lib.coginvasion.hood import DistributedDLTreasure/AI
from lib.coginvasion.hood import DistributedDGTreasure/AI
from lib.coginvasion.hood import DistributedToonInterior/AI
from lib.coginvasion.hood import DistributedCinemaInterior/AI
from lib.coginvasion.hood import DistributedToonHQInterior/AI
from lib.coginvasion.hood import DistributedTailorInterior/AI
from lib.coginvasion.hood import DistributedBoat/AI
from lib.coginvasion.hood import DistributedDoor/AI
from lib.coginvasion.battle import DistributedPieTurretManager/AI
from lib.coginvasion.battle import DistributedPieTurret/AI
from lib.coginvasion.battle import DistributedBattleTrolley/AI
from lib.coginvasion.friends import FriendsManager/UD
from lib.coginvasion.cogtropolis import DistributedCityCart/AI
from lib.coginvasion.tutorial import DistributedTutorial/AI
from lib.coginvasion.tutorial import DistributedTutorialSuit/AI

struct AvChoice {
  uint32 avId;
  string dnaStrand;
  string name;
  int8 slot;
};

struct Point3 {
  float64 x;
  float64 y;
  float64 z;
};

dclass Account {
  uint32 AVATAR_IDS[] required db;
  string ACCOUNT_ID required db;
  int8 BANNED required db;
};

dclass DistributedRoot : DistributedObject {
  setParentingRules(string, string) broadcast ram;
};

dclass DistributedDistrict : DistributedObject {
  setParentingRules(string, string) broadcast ram;
  setDistrictName(string) required broadcast ram;
  setAvailable(int8 available) broadcast ram required;
  systemMessage(string) broadcast;
  systemMessageCommand(int8, string) clsend airecv;
  setPopulation(uint16) required broadcast ram;
  joining() clsend airecv;
  setPopRecord(uint16) required broadcast ram;
};

dclass DistrictNameManager : DistributedObject {
  requestDistrictName() clsend;
  claimDistrictName(string);
  noAvailableNames();
  toonJoined(uint32) clsend;
  toonLeft(uint32) clsend;
};

dclass LauncherLoginManager : DistributedObject {
  requestLogin(string username, string password) clsend;
  loginAccepted(string token);
  loginRejected();
};

dclass ClientServicesManager : DistributedObject {
  requestLogin(string token, string username) clsend;
  loginAccepted();
  requestAvatars() clsend;
  setAvatars(AvChoice[]);
  requestNewAvatar(string dnaStrand, int8 slot, string name, int8 skipTutorial) clsend;
  toonCreated(int32 avId);
  toonDeleted();
  requestDeleteAvatar(uint32 avId) clsend;
  requestSetAvatar(uint32 avId) clsend;
  setAvatarResponse();
};

dclass DistributedAvatar : DistributedSmoothNode {
  setName(string) required broadcast ownrecv db;
  setMaxHealth(int16 = 15) required broadcast ownrecv db;
  setHealth(int16 = 15) required broadcast ownrecv db;
  setChat(string) broadcast ownsend airecv;
  announceHealth(int8, int16) broadcast;
  setPlace(uint32) required broadcast ram;
  setHood(string) required broadcast ram;
};

dclass DistributedToon : DistributedAvatar {
  // The account id this toon is associated with.
  uint32 ACCOUNT required db;

  setDNAStrand(string) required broadcast ownrecv db;
  setAnimState(uint8, int16) broadcast ram ownsend airecv;
  setMoney(int32 = 0) required broadcast ownrecv db;

  // We'll do an array of zoneIds for now.
  setHoodsDiscovered(uint32[]) required ownsend ownrecv db;
  setTeleportAccess(uint32[]) required ownrecv db;

  setLastHood(uint32) required ownsend ownrecv db;
  setBackpack(int8 backpack = 0) required broadcast ownrecv db;
  setBackpackAmmo(uint8 gagIds [] = [2, 0, 1, 3], uint8 [] = [3, 7, 15, 0]) required broadcast airecv ownrecv db;
  setGagAmmo(uint8 gagId, uint8 ammo) broadcast airecv ownrecv;
  setLoadout(uint8 gagIds [] = [2, 0, 1, 3]) required broadcast airecv ownrecv db;
  requestSetLoadout(uint8[]) ownsend airecv;
  setQuests(uint8[], uint8[], uint8[]) required broadcast ownrecv db;
  setQuestHistory(uint8[]) required broadcast ownrecv db;
  setTier(int8) required broadcast ownrecv db;
  setFriendsList(uint32[] = []) required ownrecv db airecv;
  updateBackpackAmmo() ownrecv;
  lookAtObject(float64, float64, float64, int8 = 1) broadcast ownsend;
  gagStart(uint8 gagId) broadcast ownsend;
  gagThrow(uint8 gagId) broadcast ownsend;
  gagBuild(uint8 gagId) broadcast ownsend;
  gagRelease(uint8 gag_id) broadcast ownsend airecv;
  trapActivate(uint8 gagId, uint32 avId, uint8 entityId, uint32 suitId) broadcast ownsend;
  setDropLoc(uint8 gagId, int16/10, int16/10, int16/10) clsend broadcast;
  setSplatPos(uint8 gagId, int16/10, int16/10, int16/10) ownsend broadcast;
  gagCollision(uint8 gagId) broadcast;
  unEquip() broadcast ram ownsend airecv;
  equip(uint8 gag_id) broadcast ram ownsend airecv;
  handleSuitAttack(uint8 attack_id, uint32 suit_id) broadcast ownsend;
  suitHitByPie(uint32, uint8 gag_id) ownsend airecv;
  toonHitByPie(uint32, uint8 gag_id) ownsend airecv;
  toonUp(uint8 hp, uint8 announce, uint8 sound) clsend airecv;
  gagActivate(uint8 gagId) ownsend broadcast;
  setTarget(uint8 gagId, uint32 target) clsend broadcast;
  setGagPos(uint8 gagId, float64, float64, float64) ownsend broadcast;
  setAdminToken(int8) required broadcast db ownrecv; // Is this me?
  announceHealthAndPlaySound(int8, int16) broadcast;
  requestEject(uint32, int8 = 0) ownsend airecv;
  setGhost(int8) required broadcast ram ownsend airecv;
  setPUInventory(int8[] = [0, 0]) required broadcast ownrecv db;
  setEquippedPU(int8) required broadcast ownrecv db;
  requestEquipPU(int8) ownsend airecv;
  usedPU(int8) ownsend airecv;
  requestAddFriend(uint32) ownsend airecv;
  setTutorialCompleted(int8) required broadcast ownrecv db;
  createTutorial() ownsend airecv;
  tutorialCreated(uint32) ownrecv;
};

dclass DistributedTreasure : DistributedObject {
  setPosition(int16/10, int16/10, int16/10) required broadcast ram;
  requestGrab() airecv clsend;
  setGrab(uint32) broadcast ram;
  setReject() broadcast;
};

dclass DistributedTTCTreasure : DistributedTreasure {};

dclass DistributedTBTreasure : DistributedTreasure {};

dclass DistributedMLTreasure : DistributedTreasure {};

dclass DistributedDGTreasure : DistributedTreasure {};

dclass DistributedDLTreasure : DistributedTreasure {};

dclass DistributedDDTreasure : DistributedTreasure {};

dclass DistributedBoat : DistributedObject {
  setState(string, int16) required broadcast ram;
  requestCurrentStateAndTimestamp() clsend airecv;
  currentStateAndTimestamp(string, int16);
};

dclass DistributedDoor : DistributedObject {
  setDoorIndex(int8) required broadcast ram;
  setBlock(uint8) required broadcast ram;
  setToZone(uint32) required broadcast ram;
  setDoorType(int8) required broadcast ram;
  setLeftDoorState(string, int16) broadcast ram;
  setRightDoorState(string, int16) broadcast ram;
  requestEnter() clsend airecv;
  requestExit() clsend airecv;
  enterDoor(uint32, int16) broadcast;
  exitDoor(uint32, int16) broadcast;
};

dclass DistributedToonInterior : DistributedObject {
  setBlock(uint8) required broadcast ram;
};

dclass DistributedCinemaInterior : DistributedToonInterior {
  setCinemaIndex(int8) required broadcast ram;
  setState(string, int16) broadcast ram;
  requestStateAndTimestamp() clsend airecv;
};

dclass DistributedToonHQInterior : DistributedToonInterior {

};

dclass DistributedTailorInterior : DistributedToonInterior {};

dclass DistributedNPCToon : DistributedToon {
  setNpcId(uint16) required broadcast ram;
  setOriginIndex(int8) required broadcast ram;
  requestEnter() clsend airecv;
  enterAccepted();
  rejectEnter();
  requestExit() clsend airecv;
  exitAccepted();
  lookAtAvatar(uint32) broadcast;
  setChat(string) broadcast clsend;
  oneChatThenExit();
};

dclass DistributedTailorNPCToon : DistributedNPCToon {};

dclass DistributedHQNPCToon : DistributedNPCToon {
  makePickableQuests(uint8[]);
  pickedQuest(uint8) clsend airecv;
};

dclass DistributedChar : DistributedSmoothNode {
  setChar(string charType, int8 clerk=0) required broadcast ram;
  setName(string name) required broadcast ram;
  setChat(string chat) broadcast;
  setAnimState(string anim) broadcast ram;
};

dclass DistributedSuit : DistributedAvatar {
  setLevel(uint8 level) required broadcast ram;
  setSuit(uint8 planId, uint8 variantId) required broadcast ram;
  setName(string name) required broadcast ram;
  setAnimState(uint8 anim, int16 timestamp) broadcast ram;
  doAttack(int8 attackName, uint32, int16) broadcast;
  toonHitByWeapon(int8, uint32) clsend airecv;
  turretHitByWeapon(int8, uint32) clsend airecv;
  handleWeaponTouch() clsend broadcast;
  interruptAttack() broadcast;
  disableMovement() clsend broadcast;
  enableMovement() clsend broadcast;
  startMoveInterval(int16 / 10, int16 / 10, int16 / 10, int16 / 10, int16 / 10, int16 / 10, uint8 duration) broadcast ram;
  startProjInterval(int16 / 10, int16 / 10, int16 / 10, int16 / 10, int16 / 10, int16 / 10, uint8 / 10, uint8 / 10, int16 timestamp) broadcast ram;
  startPosInterval(int16 / 10, int16 / 10, int16 / 10, int16 / 10, int16 / 10, int16 / 10, uint8 / 10, string blendType, int16 timestamp) broadcast ram;
  stopMoveInterval() broadcast ram;

  // This field is for setting the position of a Cog for a toon that
  // comes in while the Cog is standing still.
  setLatePos(int16 / 10, int16 / 10) required ram;

  setSuitState(int8, int8, int8, int16) broadcast ram;
};

dclass DistributedTutorial : DistributedObject {
  makeSuit(int8) clsend airecv;
  suitNoHealth(int8);
  suitExploded(int8);
  pickedUpJellybean();
  finishedTutorial() clsend airecv;
};

dclass DistributedTutorialSuit : DistributedSuit {

};

dclass DistributedTrolley : DistributedNode {
  setDestination(string destination) required broadcast ram;
};

dclass DistributedGroupStation : DistributedObject {
  setLocationPoint(int8 location_point) required broadcast ram;
  setTimerTime(int8 time) broadcast;
  requestAbort(int8 slot) clsend airecv;
  abort();
  slotOpen(int8 slot);
  requestEnter() clsend airecv;
  fullStation();
  leaving() clsend airecv;
};

dclass DistributedMinigameStation : DistributedGroupStation {
  setStation(string game) required broadcast ram;
  headOff(uint32 zone, int8 laffMeter);
};

dclass DistributedCogStation : DistributedGroupStation {
  headOff(uint32, int8);
};

dclass DistributedCogBattle : DistributedObject {
  setHoodIndex(int8) required broadcast ram;
  setTotalCogs(uint8) required broadcast ram;
  setCogsRemaining(uint8) required broadcast ram;
  arrived() clsend airecv;
  victory() broadcast;
};

dclass DistributedBattleTrolley : DistributedObject {
  requestBoard() clsend airecv;
  requestHopOff() clsend airecv;
  fillSlot(int8, uint32) broadcast;
  emptySlot(int8, uint32) broadcast;
  setState(string, int16) required broadcast ram;
  setHoodIndex(int8) required broadcast ram;
  headOff(uint32);
};

dclass DistributedMinigame : DistributedObject {
  ready() clsend airecv;
  allPlayersReady() broadcast;
  gameOver(int8 winner=0, uint32[] = [], uint8 = 0) broadcast;
  setTimerTime(uint16 time) broadcast;
  leaving() clsend airecv;
  abort() broadcast;
  generateHeadPanel(string gender, string head, string headtype,
       float64 [], uint32 doId, string name) broadcast;
  updateHeadPanelValue(uint32 doId, int8 direction) broadcast;
  finalScores(uint32[], int8[]) broadcast;
  myFinalScore(int8) clsend airecv;
};

dclass DistributedRaceGame : DistributedMinigame {
  setToonLane(int8 lane);
  requestToonLane() clsend airecv;
};

dclass DistributedUnoGame : DistributedMinigame {
  requestNewCard() clsend airecv;
  takeNewCard(string cardId);
  setPlayByPlay(string pbp) broadcast;
  wasDealed() clsend airecv;
  setPlayerTurn(uint32 doId) broadcast;
  placeCard(uint32 doId, string cardId) broadcast;
  requestPlaceCard(string cardId) clsend airecv;
  requestNewCardColor();
  takeNewCardColor(string origId, string cardId) clsend airecv;
  setNewCardColor(string cardId) broadcast;
  callUno() clsend airecv;
  noCards() clsend airecv;
};

dclass DistributedToonFPSGame : DistributedMinigame {
  attachGunToAvatar(uint32) broadcast;
  gunShot(uint32, int16) broadcast clsend;
  standingAvatar(uint32) broadcast clsend;
  runningAvatar(uint32) broadcast clsend;
  jumpingAvatar(uint32) broadcast clsend;
  avatarHitByBullet(uint32, int8) broadcast clsend airecv;
  damage(int8, uint32);
  deadAvatar(uint32, int16) broadcast clsend;
  respawnAvatar(uint32) broadcast clsend;
};

dclass DistributedGunGame : DistributedToonFPSGame {
  setGameMode(int8) required broadcast ram;
  startGameModeVote() broadcast;
  myGameModeVote(int8) clsend;
  dead(uint32) clsend airecv;
  incrementKills();
  timeUp() broadcast;
  gunChoice(string, uint32) clsend broadcast;
  setLevelName(string) required broadcast ram;
};

dclass DistributedFactorySneakGame : DistributedToonFPSGame {

};

dclass DistributedCameraShyGame : DistributedMinigame {
  setSpawnPoint(int8);
  createRemoteAvatar(uint32) broadcast;
  runningAvatar(uint32) broadcast clsend;
  standingAvatar(uint32) broadcast clsend;
  jumpingAvatar(uint32) broadcast clsend;
  remoteAvatarTakePicture(uint32) broadcast clsend;
  tookPictureOfToon(uint32) clsend airecv;
  announceGameOver() broadcast;
  showWinner(uint32) broadcast;
  tookPictureOfMe(uint32);
  generateOtherPlayerGui() broadcast;
  updateOtherPlayerHead(uint32, uint32, int8) broadcast;
  setLevel(string) broadcast ram;
};

dclass DistributedEagleGame : DistributedMinigame {
  startRound(int8) broadcast;
  hitEagle(uint32) clsend airecv;
  enterCannon(uint32);
  missedEagle() clsend airecv;
  roundOver() broadcast;
  allRoundsEnded() broadcast;
};

dclass DistributedEagleSuit : DistributedSuit {
  setFlySpeed(int8 / 10) required broadcast ram;
  setSuitState(int8, int8, int8, int16) required broadcast ram;
  fallAndExplode() broadcast;
};

dclass DistributedToonCannon : DistributedNode {
  setBarrelOrientation(float64, float64) clsend broadcast;
  shoot() clsend broadcast;
};

dclass DistributedDeliveryGame : DistributedMinigame {
  giveBarrelToPlayer(uint32, uint32) broadcast;
  giveBarrelToSuit(uint32) broadcast;
  dropOffBarrel(uint32) broadcast;
  setBarrelsDelivered(uint8) required ram broadcast;
  setBarrelsStolen(uint8) required ram broadcast;
  setBarrelsRemaining(uint8) required ram broadcast;
  requestDropOffBarrel(uint32) clsend airecv;
  allBarrelsGone() broadcast;
};

dclass DistributedDeliveryTruck : DistributedNode {
  setNumBarrels(int8) required broadcast ram;
  requestBarrel() clsend airecv;
};

dclass DistributedDeliveryGameSuit : DistributedSuit {

};

dclass DistributedShop : DistributedNode {
  requestEnter() clsend airecv;
  enterAccepted();
  requestExit() clsend airecv;
  exitAccepted();
  setClerkChat(int8) broadcast;
  confirmPurchase(uint32, int32) clsend airecv;
  requestHealth(uint8 health) clsend airecv;
};

dclass DistributedGagShop : DistributedShop {
  confirmPurchase(uint8 gagIds [], uint8 [], int32) clsend airecv;
};

dclass DistributedBattleShop : DistributedShop {
  confirmPurchase(int8[], int32) clsend airecv;
};

dclass DistributedSuitManager : DistributedObject {
  requestSuitInfo() clsend airecv;
  newSuit() broadcast;
  noSuits() broadcast;
  systemMessage(string) broadcast;
  bossSpawned() broadcast;
  invasionSpawned() broadcast;
  invasionInProgress() broadcast;
  tournamentInProgress() broadcast;
  tournamentSpawned() broadcast;
  suitAdminCommand(int8, string) clsend airecv;
  spawner(int8) required ram broadcast;
};

dclass DistributedDroppableCollectableObject : DistributedNode {
  collectedObject() clsend airecv;
};

dclass DistributedDroppableCollectableJellybeans : DistributedDroppableCollectableObject {

};

dclass DistributedDroppableCollectableJellybean : DistributedDroppableCollectableJellybeans {

};

dclass DistributedDroppableCollectableJellybeanJar : DistributedDroppableCollectableJellybeans {

};

dclass DistributedDroppableCollectableHealth : DistributedDroppableCollectableObject {
  setDisabled(int8) required broadcast ram;
};

dclass DistributedDroppableCollectableIceCream : DistributedDroppableCollectableHealth {

};

dclass DistributedDroppableCollectableBackpack : DistributedDroppableCollectableObject {
  setBP(int8[]) required broadcast ram;
};

dclass DistributedPieTurretManager : DistributedObject {
  requestPlace(float64[]) clsend airecv;
  turretPlaced(uint32);
  yourTurretIsDead();
};

dclass DistributedPieTurret : DistributedAvatar {
  setOwner(uint32) required broadcast ram;
  scan(int16, int8) broadcast ram;
  setGag(uint8 upgradeId) broadcast ram clsend;
  shoot(uint32) broadcast;
  makeSplat(uint8 entId, float64[]) broadcast clsend;
  die() broadcast;
};

dclass FriendsManager : DistributedObject {
  requestAvatarInfo(uint32) clsend;
  askAvatarToBeFriends(uint32) clsend;
  iAcceptedFriendRequest(uint32) clsend;
  acceptedFriendRequest();
  rejectedFriendRequest();
  avatarInfo(string, string, uint8, uint8);
  friendRequest(uint32, string, string);
  cancelFriendRequest(uint32) clsend;
  requestAvatarStatus(uint32) clsend;
  someoneWantsYourStatus(uint32);
  myAvatarStatus(uint32, int8) clsend;
  avatarStatus(uint32, int8);
  iCancelledFriendRequest(uint32) clsend;
  iRejectedFriendRequest(uint32) clsend;
  toonOnline(uint32, string);
  toonOffline(uint32, string);
  iRemovedFriend(uint32) clsend;
  friendLeftYourList(uint32);
  iWantToTeleportToAvatar(uint32) clsend;
  avatarWantsYourLocation(uint32);
  myAvatarLocation(uint32, uint32, uint32) clsend;
  avatarLocation(uint32, uint32, uint32);
  teleportNotify(string);
  requestFriendsList() clsend;
  friendsList(uint32[], string[], int8[]);
};

dclass DistributedCityCart : DistributedNode {
  setPathIndex(int8) required broadcast ram;
  setIvalTDisplace(uint8) required broadcast ram;
  setState(string, int16) required broadcast ram;
  hitByCar() clsend airecv;
};