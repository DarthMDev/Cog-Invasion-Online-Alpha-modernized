"""

  Filename: LocalToon.py
  Created by: blach (30Nov14)

"""

from panda3d.core import CollisionTraverser, Point3
from lib.coginvasion.globals import CIGlobals
from direct.controls import ControlManager
from direct.controls.GravityWalker import GravityWalker
from DistributedToon import DistributedToon
from SmartCamera import SmartCamera
from lib.coginvasion.gui.ChatInput import ChatInput
from lib.coginvasion.gui.LaffOMeter import LaffOMeter
from lib.coginvasion.gui.MoneyGui import MoneyGui
from lib.coginvasion.gui.InventoryGui import InventoryGui
from lib.coginvasion.gags import GagGlobals
from direct.interval.IntervalGlobal import Sequence, Wait, Func
from direct.gui.DirectButton import DirectButton
from direct.showbase.InputStateGlobal import inputState
from direct.gui.DirectGui import DGG
from lib.coginvasion.hood import ZoneUtil
from lib.coginvasion.gags.GagType import GagType

class LocalToon(DistributedToon):
    neverDisable = 1

    def __init__(self, cr):
        try:
            self.LocalToon_initialized
            return
        except:
            self.LocalToon_initialized = 1
        DistributedToon.__init__(self, cr)
        self.avatarChoice = cr.localAvChoice
        self.smartCamera = SmartCamera()
        self.chatInput = ChatInput()
        self.moneyGui = MoneyGui()
        self.laffMeter = LaffOMeter()
        self.runSfx = base.loadSfx("phase_3.5/audio/sfx/AV_footstep_runloop.wav")
        self.runSfx.setLoop(True)
        self.walkSfx = base.loadSfx("phase_3.5/audio/sfx/AV_footstep_walkloop.wav")
        self.walkSfx.setLoop(True)
        self.controlManager = ControlManager.ControlManager(True, False)
        self.offset = 3.2375
        self.movementKeymap = {
            "forward": 0, "backward": 0,
            "left": 0, "right": 0, "jump": 0
        }
        self.avatarMovementEnabled = False
        self.isMoving_forward = False
        self.isMoving_side = False
        self.isMoving_back = False
        self.isMoving_jump = False
        self.pieThrowBtn = None
        base.cTrav = CollisionTraverser()
        self.myBattle = None
        self.invGui = None
        #base.cTrav.showCollisions(render)

    def prepareToSwitchControlType(self):
        # Hack fix for getting stuck moving in one direction without pressing the movement keys.
        inputs = [
            "run",
            "forward",
            "reverse",
            "turnLeft",
            "turnRight",
            "slideLeft",
            "slideRight",
            "jump"
        ]
        for inputName in inputs:
            try:
                inputState.releaseInputs(inputName)
            except:
                pass

    def getBackpack(self):
        return DistributedToon.getBackpack(self)

    def setMyBattle(self, battle):
        self.myBattle = battle

    def getMyBattle(self):
        return self.myBattle

    def ghostOn(self):
        self.getGeomNode().setTransparency(1)
        self.getGeomNode().setColorScale(1, 1, 1, 0.25)

    def ghostOff(self):
        self.getGeomNode().setColorScale(1, 1, 1, 1)
        self.getGeomNode().setTransparency(0)

    def enterReadBook(self, ts = 0, callback = None, extraArgs = []):
        self.stopLookAround()
        self.b_lookAtObject(0, -45, 0)
        DistributedToon.enterReadBook(self, ts, callback, extraArgs)

    def exitReadBook(self):
        DistributedToon.exitReadBook(self)
        self.startLookAround()

    def getAirborneHeight(self):
        return self.offset + 0.025000000000000001

    def setupControls(self):
        self.walkControls = GravityWalker(legacyLifter=False)
        self.walkControls.setWallBitMask(CIGlobals.WallBitmask)
        self.walkControls.setFloorBitMask(CIGlobals.FloorBitmask)
        self.walkControls.setWalkSpeed(
            CIGlobals.ToonForwardSpeed, CIGlobals.ToonJumpForce,
            CIGlobals.ToonReverseSpeed, CIGlobals.ToonRotateSpeed
        )
        self.walkControls.initializeCollisions(base.cTrav, self, floorOffset=0.025, reach=4.0)
        self.walkControls.setAirborneHeightFunc(self.getAirborneHeight)

    def setWalkSpeedNormal(self):
        self.walkControls.setWalkSpeed(
            CIGlobals.ToonForwardSpeed, CIGlobals.ToonJumpForce,
            CIGlobals.ToonReverseSpeed, CIGlobals.ToonRotateSpeed
        )

    def setWalkSpeedSlow(self):
        self.walkControls.setWalkSpeed(
            CIGlobals.ToonForwardSlowSpeed, CIGlobals.ToonJumpSlowForce,
            CIGlobals.ToonReverseSlowSpeed, CIGlobals.ToonRotateSlowSpeed
        )

    def setupCamera(self):
        base.camLens.setMinFov(CIGlobals.DefaultCameraFov / (4./3.))
        base.camLens.setNearFar(CIGlobals.DefaultCameraNear, CIGlobals.DefaultCameraFar)
        camHeight = max(self.getHeight(), 3.0)
        heightScaleFactor = camHeight * 0.3333333333
        defLookAt = Point3(0.0, 1.5, camHeight)
        camPos = (Point3(0.0, -9.0 * heightScaleFactor, camHeight),
            defLookAt,
            Point3(0.0, camHeight, camHeight * 4.0),
            Point3(0.0, camHeight, camHeight * -1.0),
            0)
        self.smartCamera.set_default_pos(camPos)
        self.smartCamera.set_parent(self)

    def setDNAStrand(self, dnaStrand):
        DistributedToon.setDNAStrand(self, dnaStrand)
        self.initCollisions()
        self.setupCamera()

    def setMoney(self, money):
        DistributedToon.setMoney(self, money)
        self.moneyGui.update()

    def setupNameTag(self, tempName = None):
        DistributedToon.setupNameTag(self, tempName)
        if self.tag:
            self.tag['text_fg'] = CIGlobals.LocalNameTagColor

    def d_broadcastPositionNow(self):
        self.d_clearSmoothing()
        self.d_broadcastPosHpr()

    def b_setAnimState(self, anim, callback = None, extraArgs = []):
        if self.anim != anim:
            self.d_setAnimState(anim)
            DistributedToon.setAnimState(self, anim, callback = callback, extraArgs = extraArgs)

    def attachCamera(self):
        #self.notify.info("Attaching camera...")
        self.smartCamera.initialize_smartcamera()

    def startSmartCamera(self):
        #self.notify.info("Starting camera...")
        self.smartCamera.initialize_smartcamera_collisions()
        self.smartCamera.start_smartcamera()

    def resetSmartCamera(self):
        #self.notify.info("Resetting camera...")
        self.stopSmartCamera()
        self.startSmartCamera()

    def stopSmartCamera(self):
        #self.notify.info("Stopping camera...")
        self.smartCamera.stop_smartcamera()

    def detachCamera(self):
        #self.notify.info("Detaching camera...")
        camera.reparentTo(render)
        camera.setPos(0, 0, 0)
        camera.setHpr(0, 0, 0)

    def enableAvatarControls(self):
        self.walkControls.enableAvatarControls()
        self.accept("arrow_up", self.updateMovementKeymap, ["forward", 1])
        self.accept("arrow_up-up", self.updateMovementKeymap, ["forward", 0])
        self.accept("arrow_down", self.updateMovementKeymap, ["backward", 1])
        self.accept("arrow_down-up", self.updateMovementKeymap, ["backward", 0])
        self.accept("arrow_left", self.updateMovementKeymap, ["left", 1])
        self.accept("arrow_left-up", self.updateMovementKeymap, ["left", 0])
        self.accept("arrow_right", self.updateMovementKeymap, ["right", 1])
        self.accept("arrow_right-up", self.updateMovementKeymap, ["right", 0])
        self.accept("control", self.updateMovementKeymap, ["jump", 1])
        self.accept("control-up", self.updateMovementKeymap, ["jump", 0])
        taskMgr.add(self.movementTask, "avatarMovementTask")
        self.avatarMovementEnabled = True
        self.playMovementSfx(None)

    def disableAvatarControls(self):
        self.walkControls.disableAvatarControls()
        self.ignore("arrow_up")
        self.ignore("arrow_up-up")
        self.ignore("arrow_down")
        self.ignore("arrow_down-up")
        self.ignore("arrow_left")
        self.ignore("arrow_left-up")
        self.ignore("arrow_right")
        self.ignore("arrow_right-up")
        self.ignore("control")
        self.ignore("control-up")
        taskMgr.remove("avatarMovementTask")
        self.isMoving_forward = False
        self.isMoving_side = False
        self.isMoving_back = False
        self.isMoving_jump = False
        self.avatarMovementEnabled = False
        self.playMovementSfx(None)
        for k, _ in self.movementKeymap.items():
            self.updateMovementKeymap(k, 0)

    def updateMovementKeymap(self, key, value):
        self.movementKeymap[key] = value

    def getMovementKeyValue(self, key):
        return self.movementKeymap[key]

    def playMovementSfx(self, movement):
        if movement == "run":
            self.walkSfx.stop()
            self.runSfx.play()
        elif movement == "walk":
            self.runSfx.stop()
            self.walkSfx.play()
        else:
            self.runSfx.stop()
            self.walkSfx.stop()

    def __forward(self):
        self.resetHeadHpr()
        self.stopLookAround()
        self.playMovementSfx("run")
        self.b_setAnimState("run")
        self.isMoving_side = False
        self.isMoving_back = False
        self.isMoving_forward = True
        self.isMoving_jump = False

    def __turn(self):
        self.resetHeadHpr()
        self.stopLookAround()
        self.playMovementSfx("walk")
        self.setPlayRate(1.0, "walk")
        self.b_setAnimState("walk")
        self.isMoving_forward = False
        self.isMoving_back = False
        self.isMoving_side = True
        self.isMoving_jump = False

    def __reverse(self):
        self.resetHeadHpr()
        self.stopLookAround()
        self.playMovementSfx("walk")
        self.setPlayRate(-1.0, "walk")
        self.b_setAnimState("walk")
        self.isMoving_side = False
        self.isMoving_forward = False
        self.isMoving_back = True
        self.isMoving_jump = False

    def __jump(self):
        self.playMovementSfx(None)
        if self.isMoving_forward or self.isMoving_side or self.isMoving_back:
            self.b_setAnimState("leap")
        else:
            self.b_setAnimState("jump")
        self.isMoving_side = False
        self.isMoving_forward = False
        self.isMoving_back = False
        self.isMoving_jump = True

    def __neutral(self):
        self.resetHeadHpr()
        self.startLookAround()
        self.playMovementSfx(None)
        self.b_setAnimState("neutral")
        self.isMoving_side = False
        self.isMoving_forward = False
        self.isMoving_back = False
        self.isMoving_jump = False

    def movementTask(self, task):
        if self.getMovementKeyValue("jump") == 1:
            if not self.isMoving_jump:
                if not self.walkControls.isAirborne:
                    if self.walkControls.mayJump:
                        self.__jump()
                    else:
                        if self.getMovementKeyValue("forward") == 1:
                            if not self.isMoving_forward:
                                self.__forward()
                        elif self.getMovementKeyValue("backward") == 1:
                            if not self.isMoving_back:
                                self.__reverse()
                        elif self.getMovementKeyValue("left") == 1 or self.getMovementKeyValue("right") == 1:
                            if not self.isMoving_side:
                                self.__turn()
                        else:
                            if self.isMoving_side or self.isMoving_forward or self.isMoving_back:
                                self.__neutral()
        elif self.getMovementKeyValue("forward") == 1:
            if not self.isMoving_forward:
                if not self.walkControls.isAirborne:
                    self.__forward()
        elif self.getMovementKeyValue("backward") == 1:
            if not self.isMoving_back:
                if not self.walkControls.isAirborne:
                    self.__reverse()
        elif self.getMovementKeyValue("left") == 1 or self.getMovementKeyValue("right") == 1:
            if not self.isMoving_side:
                if not self.walkControls.isAirborne:
                    self.__turn()
        else:
            if self.isMoving_side or self.isMoving_forward or self.isMoving_back or self.isMoving_jump:
                if not self.walkControls.isAirborne:
                    self.__neutral()
        return task.cont

    def createLaffMeter(self):
        r, g, b, _ = self.getHeadColor()
        animal = self.getAnimal()
        maxHp = self.getMaxHealth()
        hp = self.getHealth()
        self.laffMeter.generate(r, g, b, animal, maxHP = maxHp, initialHP = hp)
        self.laffMeter.start()

    def disableLaffMeter(self):
        self.laffMeter.stop()
        self.laffMeter.disable()

    def deleteLaffMeter(self):
        self.laffMeter.delete()

    def enablePies(self, andKeys = 0):
        if self.avatarMovementEnabled and andKeys:
            self.enablePieKeys()
        self.backpack = DistributedToon.getBackpack(self)
        self.invGui = InventoryGui()
        self.invGui.createGui()
        self.invGui.setBackpack(self.backpack)
        for gag in self.backpack.getGags():
            gag.setAvatar(self)
        self.backpack.setGagGUI(self.invGui)
        if self.backpack.getCurrentGag():
            self.invGui.setWeapon(self.backpack.getCurrentGag().getName(), playSound = False)

    def enablePieKeys(self):
        if self.pieThrowBtn:
            if not self.backpack:
                self.backpack = DistributedToon.getBackpack(self)
            self.pieThrowBtn.bind(DGG.B1PRESS, self.startGag)
            self.pieThrowBtn.bind(DGG.B1RELEASE, self.throwGag)
        self.accept("delete", self.startGag)
        self.accept("delete-up", self.throwGag)

    def disablePieKeys(self):
        if self.pieThrowBtn:
            self.pieThrowBtn.unbind(DGG.B1PRESS)
            self.pieThrowBtn.unbind(DGG.B1RELEASE)
        self.ignore("delete")
        self.ignore("delete-up")

    def disablePies(self):
        self.disablePieKeys()
        self.invGui.deleteGui()

    def setWeaponType(self, weaponType):
        enableKeysAgain = 0
        if weaponType != self.weaponType:
            enableKeysAgain = 1
        self.weaponType = weaponType
        if enableKeysAgain:
            self.disablePieKeys()
            self.enablePieKeys()

    def createMoney(self):
        self.moneyGui.createGui()
        # Automatically update incase we missed the db field.
        self.moneyGui.update()

    def handleMoneyChanged(self):
        self.moneyGui.update()

    def disableMoney(self):
        self.moneyGui.deleteGui()

    def resetHeadHpr(self):
        self.b_lookAtObject(0, 0, 0, blink = 0)

    def startGag(self, start = True):
        if not self.backpack or not self.backpack.getCurrentGag():
            return
        if self.backpack.getSupply() > 0:
            if self.pieThrowBtn:
                self.pieThrowBtn.unbind(DGG.B1PRESS)
            self.ignore("delete")
            self.backpack.getCurrentGag().setAvatar(self)
            self.resetHeadHpr()
            self.b_gagStart()

    def throwGag(self, start = True):
        if not self.backpack or not self.backpack.getCurrentGag() or not self.backpack.getActiveGag():
            return
        if self.backpack.getSupply() > 0:
            if self.pieThrowBtn:
                self.pieThrowBtn.unbind(DGG.B1RELEASE)
            self.ignore("delete-up")
            if self.backpack.getActiveGag().getType() == GagType.SQUIRT:
                self.b_gagRelease(self.backpack.getActiveGag().getID())
            else:
                self.b_gagThrow()
            if not self.backpack.getActiveGag().doesAutoRelease():
                Sequence(Wait(0.75), Func(self.releaseGag), Wait(0.3), Func(self.enablePieKeys)).start()

    def releaseGag(self):
        if not self.backpack or not self.backpack.getCurrentGag():
            return
        if self.backpack.getSupply() > 0:
            gag = self.backpack.getActiveGag()
            if not gag:
                return
            gagName = gag.getName()
            self.b_gagRelease(GagGlobals.getIDByName(gagName))

    def checkSuitHealth(self, suit):
        if suit.getHealth() <= 0:
            self.sendUpdate('suitKilled', [suit.doId])

    def handleLookSpot(self, hpr):
        h, p, r = hpr
        self.d_lookAtObject(h, p, r, blink = 1)

    def showPieButton(self):
        geom = CIGlobals.getDefaultBtnGeom()
        self.pieThrowBtn = DirectButton(
            geom = geom,
            geom_scale = (0.75, 1, 1),
            text = "Throw Gag",
            text_scale = 0.05,
            text_pos = (0, -0.01),
            relief = None,
            parent = base.a2dTopCenter,
            pos = (0, 0, -0.1)
        )
        self.pieThrowBtn.setBin('gui-popup', 60)

    def hidePieButton(self):
        self.pieThrowBtn.removeNode()
        self.pieThrowBtn = None

    def showBookButton(self, inBook = 0):
        self.book_gui = loader.loadModel("phase_3.5/models/gui/sticker_open_close_gui.bam")
        self.book_btn = DirectButton(
            geom=(
                self.book_gui.find('**/BookIcon_CLSD'),
                self.book_gui.find('**/BookIcon_OPEN'),
                self.book_gui.find('**/BookIcon_RLVR')
            ),
            relief=None,
            pos=(-0.175, 0, 0.163),
            command=self.bookButtonClicked,
            scale=(0.7, 0.8, 0.8),
            parent=base.a2dBottomRight
        )
        self.book_btn.setBin('gui-popup', 60)
        if inBook:
            self.book_btn["geom"] = (
                self.book_gui.find('**/BookIcon_OPEN'),
                self.book_gui.find('**/BookIcon_CLSD'),
                self.book_gui.find('**/BookIcon_RLVR2')
            )
            self.book_btn["command"] = self.bookButtonClicked
            self.book_btn["extraArgs"] = [0]

    def hideBookButton(self):
        if hasattr(self, 'book_gui'):
            self.book_gui.removeNode()
            del self.book_gui
        if hasattr(self, 'book_btn'):
            self.book_btn.destroy()
            del self.book_btn

    def bookButtonClicked(self, openIt = 1):
        if openIt:
            base.cr.playGame.getPlace().fsm.request('shtickerBook')
        else:
            base.cr.playGame.getPlace().shtickerBookStateData.finished("resume")

    def startMonitoringHP(self):
        taskMgr.add(self.monitorHealth, "localToon-monitorHealth")

    def monitorHealth(self, task):
        if self.isDead():
            taskMgr.remove("fallDone")
            if base.localAvatar.zoneId != CIGlobals.ToontownCentralId:
                self.cr.playGame.getPlace().fsm.request('died', [{}, self.diedStateDone])
            return task.done
        return task.cont

    def stopMonitoringHP(self):
        taskMgr.remove("localToon-monitorHealth")

    def diedStateDone(self, requestStatus):
        zone = CIGlobals.ToontownCentralId
        if base.localAvatar.zoneId != zone:
            requestStatus = {'zoneId': zone,
                        'hoodId': ZoneUtil.getHoodId(zone),
                        'where': ZoneUtil.getWhereName(zone),
                        'avId': base.localAvatar.doId,
                        'loader': ZoneUtil.getLoaderName(zone),
                        'shardId': None,
                        'wantLaffMeter': 1,
                        'how': 'teleportIn'}
            self.cr.playGame.getPlace().doneStatus = requestStatus
            messenger.send(base.cr.playGame.getPlace().doneEvent)

        else: return

        ## Tell the ai we're dead so they can refill our hp.
        #self.sendUpdate("died", [])
        ## Then, log out and notify the client that they're dead.
        # self.cr.gameFSM.request("closeShard", ['died'])

    def createChatInput(self):
        self.chatInput.load()
        self.chatInput.enter()

    def disableChatInput(self):
        self.chatInput.exit()
        self.chatInput.unload()

    def collisionsOn(self):
        self.controlManager.collisionsOn()

    def collisionsOff(self):
        self.controlManager.collisionsOff()

    def generate(self):
        DistributedToon.generate(self)

    def delete(self):
        DistributedToon.delete(self)
        self.deleteLaffMeter()
        return

    def disable(self):
        base.camLens.setMinFov(CIGlobals.OriginalCameraFov / (4./3.))
        self.stopMonitoringHP()
        taskMgr.remove("resetHeadColorAfterFountainPen")
        taskMgr.remove("fallDone")
        DistributedToon.disable(self)
        self.disableAvatarControls()
        self.disableLaffMeter()
        self.disablePies()
        self.disableChatInput()
        self.stopLookAround()
        self.weaponType = None
        self.pieType = None
        self.myBattle = None
        self.ignore("gotLookSpot")
        return

    def announceGenerate(self):
        DistributedToon.announceGenerate(self)
        self.setupControls()
        self.createChatInput()
        self.startLookAround()
        #posBtn = DirectButton(text = "Get Pos", scale = 0.08, pos = (0.3, 0, 0), parent = base.a2dLeftCenter, command = self.printAvPos)
        self.accept("gotLookSpot", self.handleLookSpot)

    def printAvPos(self):
        print self.getPos(render)
